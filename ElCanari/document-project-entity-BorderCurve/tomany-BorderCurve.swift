//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BorderCurve : ReadOnlyAbstractArrayProperty <BorderCurve> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BorderCurve>,                            
                                 addedSet inAddedSet : EBReferenceSet <BorderCurve>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCPX1 { // Stored property
        managedObject.mCPX1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCPY1 { // Stored property
        managedObject.mCPY1_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCPX2 { // Stored property
        managedObject.mCPX2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCPY2 { // Stored property
        managedObject.mCPY2_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mShape { // Stored property
        managedObject.mShape_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_p2Xvalue { // Transient property
        managedObject.p2Xvalue_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_p2Yvalue { // Transient property
        managedObject.p2Yvalue_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_descriptor { // Transient property
        managedObject.descriptor_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_isLine { // Transient property
        managedObject.isLine_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCPX1 { // Stored property
        managedObject.mCPX1_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCPY1 { // Stored property
        managedObject.mCPY1_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCPX2 { // Stored property
        managedObject.mCPX2_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCPY2 { // Stored property
        managedObject.mCPY2_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mShape { // Stored property
        managedObject.mShape_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_p2Xvalue { // Transient property
        managedObject.p2Xvalue_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_p2Yvalue { // Transient property
        managedObject.p2Yvalue_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_descriptor { // Transient property
        managedObject.descriptor_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_isLine { // Transient property
        managedObject.isLine_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX : EBObservedObject? = nil

  //····················································································································

  final func toMany_mX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mX {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mX = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY : EBObservedObject? = nil

  //····················································································································

  final func toMany_mY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mY {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mY = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mCPX1' stored property
  //····················································································································

  private final var mObserversOf_mCPX1 : EBObservedObject? = nil

  //····················································································································

  final func toMany_mCPX1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mCPX1 {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCPX1_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mCPX1 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mCPX1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCPX1?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mCPY1' stored property
  //····················································································································

  private final var mObserversOf_mCPY1 : EBObservedObject? = nil

  //····················································································································

  final func toMany_mCPY1_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mCPY1 {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCPY1_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mCPY1 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mCPY1_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCPY1?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mCPX2' stored property
  //····················································································································

  private final var mObserversOf_mCPX2 : EBObservedObject? = nil

  //····················································································································

  final func toMany_mCPX2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mCPX2 {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCPX2_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mCPX2 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mCPX2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCPX2?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mCPY2' stored property
  //····················································································································

  private final var mObserversOf_mCPY2 : EBObservedObject? = nil

  //····················································································································

  final func toMany_mCPY2_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mCPY2 {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCPY2_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mCPY2 = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mCPY2_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mCPY2?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  private final var mObserversOf_mShape : EBObservedObject? = nil

  //····················································································································

  final func toMany_mShape_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mShape {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mShape_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mShape = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mShape_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mShape?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNextX' proxy property
  //····················································································································

  private final var mObserversOf_mNextX : EBObservedObject? = nil

  //····················································································································

  final func toMany_mNextX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mNextX {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNextX_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mNextX = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNextX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNextX?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNextY' proxy property
  //····················································································································

  private final var mObserversOf_mNextY : EBObservedObject? = nil

  //····················································································································

  final func toMany_mNextY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mNextY {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNextY_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mNextY = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNextY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNextY?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'p2Xvalue' transient property
  //····················································································································

  private final var mObserversOf_p2Xvalue : EBObservedObject? = nil

  //····················································································································

  final func toMany_p2Xvalue_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_p2Xvalue {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.p2Xvalue_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_p2Xvalue = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_p2Xvalue_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_p2Xvalue?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'p2Yvalue' transient property
  //····················································································································

  private final var mObserversOf_p2Yvalue : EBObservedObject? = nil

  //····················································································································

  final func toMany_p2Yvalue_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_p2Yvalue {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.p2Yvalue_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_p2Yvalue = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_p2Yvalue_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_p2Yvalue?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private final var mObserversOf_descriptor : EBObservedObject? = nil

  //····················································································································

  final func toMany_descriptor_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_descriptor {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.descriptor_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_descriptor = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_descriptor_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_descriptor?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'isLine' transient property
  //····················································································································

  private final var mObserversOf_isLine : EBObservedObject? = nil

  //····················································································································

  final func toMany_isLine_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_isLine {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.isLine_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_isLine = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_isLine_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_isLine?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_BorderCurve is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_BorderCurve is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BorderCurve : ReadOnlyArrayOf_BorderCurve {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <BorderCurve>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_BorderCurve is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BorderCurve : ReadWriteArrayOf_BorderCurve, EBSignatureObserverProtocol, DocumentStorablePropertyAndRelationshipProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <BorderCurve> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! BorderCurve)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <BorderCurve> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! BorderCurve)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BorderCurve) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : BorderCurve) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <BorderCurve>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <BorderCurve>,
                                 addedSet inAddedSet : EBReferenceSet <BorderCurve>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [BorderCurve] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <BorderCurve>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <BorderCurve> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : BorderCurve) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : BorderCurve) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_BorderCurve is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

