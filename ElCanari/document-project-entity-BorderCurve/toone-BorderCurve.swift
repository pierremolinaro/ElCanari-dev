//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_BorderCurve : ReadOnlyAbstractObjectProperty <BorderCurve> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BorderCurve?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mX_property.removeEBObserver (self.mX_property) // Stored property
      oldValue.mY_property.removeEBObserver (self.mY_property) // Stored property
      oldValue.mCPX1_property.removeEBObserver (self.mCPX1_property) // Stored property
      oldValue.mCPY1_property.removeEBObserver (self.mCPY1_property) // Stored property
      oldValue.mCPX2_property.removeEBObserver (self.mCPX2_property) // Stored property
      oldValue.mCPY2_property.removeEBObserver (self.mCPY2_property) // Stored property
      oldValue.mShape_property.removeEBObserver (self.mShape_property) // Stored property
      oldValue.p2Xstring_property.removeEBObserver (self.p2Xstring_property) // Transient property
      oldValue.p2Ystring_property.removeEBObserver (self.p2Ystring_property) // Transient property
      oldValue.descriptor_property.removeEBObserver (self.descriptor_property) // Transient property
      oldValue.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
      oldValue.isLine_property.removeEBObserver (self.isLine_property) // Transient property
      oldValue.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.mX_property.addEBObserver (self.mX_property) // Stored property
      newValue.mY_property.addEBObserver (self.mY_property) // Stored property
      newValue.mCPX1_property.addEBObserver (self.mCPX1_property) // Stored property
      newValue.mCPY1_property.addEBObserver (self.mCPY1_property) // Stored property
      newValue.mCPX2_property.addEBObserver (self.mCPX2_property) // Stored property
      newValue.mCPY2_property.addEBObserver (self.mCPY2_property) // Stored property
      newValue.mShape_property.addEBObserver (self.mShape_property) // Stored property
      newValue.p2Xstring_property.addEBObserver (self.p2Xstring_property) // Transient property
      newValue.p2Ystring_property.addEBObserver (self.p2Ystring_property) // Transient property
      newValue.descriptor_property.addEBObserver (self.descriptor_property) // Transient property
      newValue.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
      newValue.isLine_property.addEBObserver (self.isLine_property) // Transient property
      newValue.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  final let mX_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  final let mY_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCPX1' stored property
  //····················································································································

  final let mCPX1_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCPY1' stored property
  //····················································································································

  final let mCPY1_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCPX2' stored property
  //····················································································································

  final let mCPX2_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCPY2' stored property
  //····················································································································

  final let mCPY2_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  final let mShape_property = EBGenericTransientProperty <BorderCurveShape?> ()

  //····················································································································
  //   Observers of 'p2Xstring' transient property
  //····················································································································

  final let p2Xstring_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'p2Ystring' transient property
  //····················································································································

  final let p2Ystring_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  final let descriptor_property = EBGenericTransientProperty <BorderCurveDescriptor?> ()

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  final let objectDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'isLine' transient property
  //····················································································································

  final let isLine_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  final let selectionDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mX simple stored property
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mY simple stored property
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCPX1 simple stored property
    self.mCPX1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCPX1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCPY1 simple stored property
    self.mCPY1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCPY1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCPX2 simple stored property
    self.mCPX2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCPX2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCPY2 simple stored property
    self.mCPY2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCPY2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShape simple stored property
    self.mShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mShape_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p2Xstring transient property
    self.p2Xstring_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p2Xstring_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p2Ystring transient property
    self.p2Ystring_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p2Ystring_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure descriptor transient property
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.descriptor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.objectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure isLine transient property
    self.isLine_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.isLine_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectionDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TransientObject BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientObject_BorderCurve : ReadOnlyObject_BorderCurve {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BorderCurve? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BorderCurve?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BorderCurve?
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BorderCurve? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BorderCurve? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_BorderCurve : ReadOnlyObject_BorderCurve {

  //····················································································································

  func setProp (_ inValue : BorderCurve?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_BorderCurve : ReadWriteObject_BorderCurve {

  //····················································································································

  private var mModel : ReadWriteObject_BorderCurve? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BorderCurve?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BorderCurve?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BorderCurve?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < BorderCurve? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BorderCurve? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_BorderCurve : ReadWriteObject_BorderCurve, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BorderCurve) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BorderCurve) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
          }
        }
      }
    }
  #endif
  
  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BorderCurve?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BorderCurve? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BorderCurve?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BorderCurve? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

