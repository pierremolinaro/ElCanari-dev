//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_BorderCurve : ReadOnlyAbstractObjectProperty <BorderCurve> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BorderCurve?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mX_property.stopsBeingObserved (by: self.mX_property) // Stored property
      oldValue.mY_property.stopsBeingObserved (by: self.mY_property) // Stored property
      oldValue.mCPX1_property.stopsBeingObserved (by: self.mCPX1_property) // Stored property
      oldValue.mCPY1_property.stopsBeingObserved (by: self.mCPY1_property) // Stored property
      oldValue.mCPX2_property.stopsBeingObserved (by: self.mCPX2_property) // Stored property
      oldValue.mCPY2_property.stopsBeingObserved (by: self.mCPY2_property) // Stored property
      oldValue.mShape_property.stopsBeingObserved (by: self.mShape_property) // Stored property
      oldValue.p2Xvalue_property.stopsBeingObserved (by: self.p2Xvalue_property) // Transient property
      oldValue.p2Yvalue_property.stopsBeingObserved (by: self.p2Yvalue_property) // Transient property
      oldValue.descriptor_property.stopsBeingObserved (by: self.descriptor_property) // Transient property
      oldValue.objectDisplay_property.stopsBeingObserved (by: self.objectDisplay_property) // Transient property
      oldValue.isLine_property.stopsBeingObserved (by: self.isLine_property) // Transient property
      oldValue.selectionDisplay_property.stopsBeingObserved (by: self.selectionDisplay_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mX_property.startsToBeObserved (by: self.mX_property) // Stored property
      newValue.mY_property.startsToBeObserved (by: self.mY_property) // Stored property
      newValue.mCPX1_property.startsToBeObserved (by: self.mCPX1_property) // Stored property
      newValue.mCPY1_property.startsToBeObserved (by: self.mCPY1_property) // Stored property
      newValue.mCPX2_property.startsToBeObserved (by: self.mCPX2_property) // Stored property
      newValue.mCPY2_property.startsToBeObserved (by: self.mCPY2_property) // Stored property
      newValue.mShape_property.startsToBeObserved (by: self.mShape_property) // Stored property
      newValue.p2Xvalue_property.startsToBeObserved (by: self.p2Xvalue_property) // Transient property
      newValue.p2Yvalue_property.startsToBeObserved (by: self.p2Yvalue_property) // Transient property
      newValue.descriptor_property.startsToBeObserved (by: self.descriptor_property) // Transient property
      newValue.objectDisplay_property.startsToBeObserved (by: self.objectDisplay_property) // Transient property
      newValue.isLine_property.startsToBeObserved (by: self.isLine_property) // Transient property
      newValue.selectionDisplay_property.startsToBeObserved (by: self.selectionDisplay_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  final let mX_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  final let mY_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCPX1' stored property
  //····················································································································

  final let mCPX1_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCPY1' stored property
  //····················································································································

  final let mCPY1_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCPX2' stored property
  //····················································································································

  final let mCPX2_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCPY2' stored property
  //····················································································································

  final let mCPY2_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  final let mShape_property = EBGenericTransientProperty <BorderCurveShape?> ()

  //····················································································································
  //   Observers of 'p2Xvalue' transient property
  //····················································································································

  final let p2Xvalue_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'p2Yvalue' transient property
  //····················································································································

  final let p2Yvalue_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  final let descriptor_property = EBGenericTransientProperty <BorderCurveDescriptor?> ()

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  final let objectDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'isLine' transient property
  //····················································································································

  final let isLine_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  final let selectionDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mX simple stored property
    self.mX_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mX_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mY simple stored property
    self.mY_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mY_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mCPX1 simple stored property
    self.mCPX1_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mCPX1_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mCPX1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mCPY1 simple stored property
    self.mCPY1_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mCPY1_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mCPY1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mCPX2 simple stored property
    self.mCPX2_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mCPX2_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mCPX2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mCPY2 simple stored property
    self.mCPY2_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mCPY2_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mCPY2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mShape simple stored property
    self.mShape_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mShape_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mShape_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure p2Xvalue transient property
    self.p2Xvalue_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.p2Xvalue_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.p2Xvalue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure p2Yvalue transient property
    self.p2Yvalue_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.p2Yvalue_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.p2Yvalue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure descriptor transient property
    self.descriptor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.descriptor_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.descriptor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.objectDisplay_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.objectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure isLine transient property
    self.isLine_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.isLine_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.isLine_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectionDisplay_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.selectionDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_BorderCurve : ReadOnlyObject_BorderCurve, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorablePropertyProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! BorderCurve
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! BorderCurve
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BorderCurve) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BorderCurve) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BorderCurve?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BorderCurve? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BorderCurve? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : BorderCurve?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

