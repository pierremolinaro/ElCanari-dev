//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol CommentInSchematic_mColor : AnyObject {
  var mColor : NSColor { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol CommentInSchematic_mSize : AnyObject {
  var mSize : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol CommentInSchematic_mHorizontalAlignment : AnyObject {
  var mHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol CommentInSchematic_mVerticalAlignment : AnyObject {
  var mVerticalAlignment : VerticalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol CommentInSchematic_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol CommentInSchematic_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol CommentInSchematic_mComment : AnyObject {
  var mComment : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol CommentInSchematic_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol CommentInSchematic_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: CommentInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class CommentInSchematic : SchematicObject,
         CommentInSchematic_mColor,
         CommentInSchematic_mSize,
         CommentInSchematic_mHorizontalAlignment,
         CommentInSchematic_mVerticalAlignment,
         CommentInSchematic_mX,
         CommentInSchematic_mY,
         CommentInSchematic_mComment,
         CommentInSchematic_objectDisplay,
         CommentInSchematic_selectionDisplay {

  //····················································································································
  //   Atomic property: mColor
  //····················································································································

  final let mColor_property : EBStoredProperty_NSColor

  //····················································································································

  final func reset_mColor_toDefaultValue () {
    self.mColor = NSColor.black
  }

  //····················································································································

  final var mColor : NSColor {
    get { return self.mColor_property.propval }
    set { self.mColor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSize
  //····················································································································

  final let mSize_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mSize_toDefaultValue () {
    self.mSize = 11
  }

  //····················································································································

  final var mSize : Double {
    get { return self.mSize_property.propval }
    set { self.mSize_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHorizontalAlignment
  //····················································································································

  final let mHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_mHorizontalAlignment_toDefaultValue () {
    self.mHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var mHorizontalAlignment : HorizontalAlignment {
    get { return self.mHorizontalAlignment_property.propval }
    set { self.mHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mVerticalAlignment
  //····················································································································

  final let mVerticalAlignment_property : EBStoredProperty_VerticalAlignment

  //····················································································································

  final func reset_mVerticalAlignment_toDefaultValue () {
    self.mVerticalAlignment = VerticalAlignment.center
  }

  //····················································································································

  final var mVerticalAlignment : VerticalAlignment {
    get { return self.mVerticalAlignment_property.propval }
    set { self.mVerticalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mComment
  //····················································································································

  final let mComment_property : EBStoredProperty_String

  //····················································································································

  final func reset_mComment_toDefaultValue () {
    self.mComment = ""
  }

  //····················································································································

  final var mComment : String {
    get { return self.mComment_property.propval }
    set { self.mComment_property.setProp (newValue) }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.black, undoManager: inUndoManager)
    self.mSize_property = EBStoredProperty_Double (defaultValue: 11, undoManager: inUndoManager)
    self.mHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: inUndoManager)
    self.mVerticalAlignment_property = EBStoredProperty_VerticalAlignment (defaultValue: VerticalAlignment.center, undoManager: inUndoManager)
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mComment_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComment_property.selection
        let s1 = unwSelf.mColor_property.selection
        let s2 = unwSelf.mSize_property.selection
        let s3 = unwSelf.mHorizontalAlignment_property.selection
        let s4 = unwSelf.mVerticalAlignment_property.selection
        let s5 = unwSelf.mX_property.selection
        let s6 = unwSelf.mY_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6)) :
          return .single (transient_CommentInSchematic_objectDisplay (v0, v1, v2, v3, v4, v5, v6))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComment_property.addEBObserver (self.objectDisplay_property)
    self.mColor_property.addEBObserver (self.objectDisplay_property)
    self.mSize_property.addEBObserver (self.objectDisplay_property)
    self.mHorizontalAlignment_property.addEBObserver (self.objectDisplay_property)
    self.mVerticalAlignment_property.addEBObserver (self.objectDisplay_property)
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComment_property.selection
        let s1 = unwSelf.mColor_property.selection
        let s2 = unwSelf.mSize_property.selection
        let s3 = unwSelf.mHorizontalAlignment_property.selection
        let s4 = unwSelf.mVerticalAlignment_property.selection
        let s5 = preferences_schematicBackColor_property.selection
        let s6 = unwSelf.mX_property.selection
        let s7 = unwSelf.mY_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_CommentInSchematic_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComment_property.addEBObserver (self.selectionDisplay_property)
    self.mColor_property.addEBObserver (self.selectionDisplay_property)
    self.mSize_property.addEBObserver (self.selectionDisplay_property)
    self.mHorizontalAlignment_property.addEBObserver (self.selectionDisplay_property)
    self.mVerticalAlignment_property.addEBObserver (self.selectionDisplay_property)
    preferences_schematicBackColor_property.addEBObserver (self.selectionDisplay_property)
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mColor
      self.mColor_property.storeIn (dictionary: ioDictionary, forKey: "mColor")
    //--- Atomic property: mSize
      self.mSize_property.storeIn (dictionary: ioDictionary, forKey: "mSize")
    //--- Atomic property: mHorizontalAlignment
      self.mHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "mHorizontalAlignment")
    //--- Atomic property: mVerticalAlignment
      self.mVerticalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "mVerticalAlignment")
    //--- Atomic property: mX
      self.mX_property.storeIn (dictionary: ioDictionary, forKey: "mX")
    //--- Atomic property: mY
      self.mY_property.storeIn (dictionary: ioDictionary, forKey: "mY")
    //--- Atomic property: mComment
      self.mComment_property.storeIn (dictionary: ioDictionary, forKey: "mComment")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mColor
    self.mColor_property.readFrom (dictionary: inDictionary, forKey: "mColor")
  //--- Atomic property: mSize
    self.mSize_property.readFrom (dictionary: inDictionary, forKey: "mSize")
  //--- Atomic property: mHorizontalAlignment
    self.mHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey: "mHorizontalAlignment")
  //--- Atomic property: mVerticalAlignment
    self.mVerticalAlignment_property.readFrom (dictionary: inDictionary, forKey: "mVerticalAlignment")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  //--- Atomic property: mComment
    self.mComment_property.readFrom (dictionary: inDictionary, forKey: "mComment")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mColor\n"
    ioString += "mSize\n"
    ioString += "mHorizontalAlignment\n"
    ioString += "mVerticalAlignment\n"
    ioString += "mX\n"
    ioString += "mY\n"
    ioString += "mComment\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mColor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSize.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHorizontalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mVerticalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mComment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mColor"], let value = NSColor.unarchiveFromDataRange (inData, range) {
      self.mColor = value
    }
    if let range = inDictionary ["mSize"], let value = Double.unarchiveFromDataRange (inData, range) {
      self.mSize = value
    }
    if let range = inDictionary ["mHorizontalAlignment"], let value = HorizontalAlignment.unarchiveFromDataRange (inData, range) {
      self.mHorizontalAlignment = value
    }
    if let range = inDictionary ["mVerticalAlignment"], let value = VerticalAlignment.unarchiveFromDataRange (inData, range) {
      self.mVerticalAlignment = value
    }
    if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mX = value
    }
    if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mY = value
    }
    if let range = inDictionary ["mComment"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mComment = value
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_CommentInSchematic (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_CommentInSchematic (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_CommentInSchematic (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_CommentInSchematic (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_CommentInSchematic (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_CommentInSchematic (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_CommentInSchematic (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_CommentInSchematic (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_CommentInSchematic ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_CommentInSchematic ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_CommentInSchematic ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_CommentInSchematic ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_CommentInSchematic (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_CommentInSchematic (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_CommentInSchematic (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    self.saveIntoAdditionalDictionary_CommentInSchematic (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_CommentInSchematic (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_CommentInSchematic ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_CommentInSchematic ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

