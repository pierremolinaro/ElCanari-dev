//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_mColor : AnyObject {
  var mColor : NSColor { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_mSize : AnyObject {
  var mSize : Double { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_mHorizontalAlignment : AnyObject {
  var mHorizontalAlignment : HorizontalAlignment { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_mVerticalAlignment : AnyObject {
  var mVerticalAlignment : VerticalAlignment { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_mRotation : AnyObject {
  var mRotation : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_mBold : AnyObject {
  var mBold : Bool { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_mX : AnyObject {
  var mX : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_mY : AnyObject {
  var mY : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_mComment : AnyObject {
  var mComment : String { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol CommentInSchematic_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: CommentInSchematic
//--------------------------------------------------------------------------------------------------

final class CommentInSchematic : SchematicObject,
         CommentInSchematic_mColor,
         CommentInSchematic_mSize,
         CommentInSchematic_mHorizontalAlignment,
         CommentInSchematic_mVerticalAlignment,
         CommentInSchematic_mRotation,
         CommentInSchematic_mBold,
         CommentInSchematic_mX,
         CommentInSchematic_mY,
         CommentInSchematic_mComment,
         CommentInSchematic_objectDisplay,
         CommentInSchematic_selectionDisplay {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mColor
  //------------------------------------------------------------------------------------------------

  final let mColor_property : EBStoredProperty_NSColor

  //------------------------------------------------------------------------------------------------

  final var mColor : NSColor {
    get { return self.mColor_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSize
  //------------------------------------------------------------------------------------------------

  final let mSize_property : EBStoredProperty_Double

  //------------------------------------------------------------------------------------------------

  final var mSize : Double {
    get { return self.mSize_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mHorizontalAlignment
  //------------------------------------------------------------------------------------------------

  final let mHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //------------------------------------------------------------------------------------------------

  final var mHorizontalAlignment : HorizontalAlignment {
    get { return self.mHorizontalAlignment_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mVerticalAlignment
  //------------------------------------------------------------------------------------------------

  final let mVerticalAlignment_property : EBStoredProperty_VerticalAlignment

  //------------------------------------------------------------------------------------------------

  final var mVerticalAlignment : VerticalAlignment {
    get { return self.mVerticalAlignment_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRotation
  //------------------------------------------------------------------------------------------------

  final let mRotation_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mRotation : Int {
    get { return self.mRotation_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBold
  //------------------------------------------------------------------------------------------------

  final let mBold_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var mBold : Bool {
    get { return self.mBold_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mX
  //------------------------------------------------------------------------------------------------

  final let mX_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mY
  //------------------------------------------------------------------------------------------------

  final let mY_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mComment
  //------------------------------------------------------------------------------------------------

  final let mComment_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------

  final var mComment : String {
    get { return self.mComment_property.propval }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.black, undoManager: inUndoManager, key: "mColor")
    self.mSize_property = EBStoredProperty_Double (defaultValue: 11, undoManager: inUndoManager, key: "mSize")
    self.mHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: inUndoManager, key: "mHorizontalAlignment")
    self.mVerticalAlignment_property = EBStoredProperty_VerticalAlignment (defaultValue: VerticalAlignment.center, undoManager: inUndoManager, key: "mVerticalAlignment")
    self.mRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mRotation")
    self.mBold_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mBold")
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mX")
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mY")
    self.mComment_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mComment")
    super.init (inUndoManager)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComment_property.selection
        let s1 = unwSelf.mColor_property.selection
        let s2 = unwSelf.mSize_property.selection
        let s3 = unwSelf.mHorizontalAlignment_property.selection
        let s4 = unwSelf.mVerticalAlignment_property.selection
        let s5 = unwSelf.mRotation_property.selection
        let s6 = unwSelf.mBold_property.selection
        let s7 = unwSelf.mX_property.selection
        let s8 = unwSelf.mY_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_CommentInSchematic_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComment_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mColor_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mSize_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mHorizontalAlignment_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mVerticalAlignment_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mRotation_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mBold_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mX_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mY_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_selectionHiliteColor_property.selection
        let s1 = unwSelf.mComment_property.selection
        let s2 = unwSelf.mColor_property.selection
        let s3 = unwSelf.mSize_property.selection
        let s4 = unwSelf.mHorizontalAlignment_property.selection
        let s5 = unwSelf.mVerticalAlignment_property.selection
        let s6 = preferences_schematicBackColor_property.selection
        let s7 = unwSelf.mRotation_property.selection
        let s8 = unwSelf.mBold_property.selection
        let s9 = unwSelf.mX_property.selection
        let s10 = unwSelf.mY_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10)) :
          return .single (transient_CommentInSchematic_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mComment_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mSize_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mHorizontalAlignment_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mVerticalAlignment_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_schematicBackColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mRotation_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mBold_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mX_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mY_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   accumulateProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func accumulateProperties (into ioArray : inout [AnyObject]) {
    super.accumulateProperties (into: &ioArray)
    ioArray.append (self.mColor_property)
    ioArray.append (self.mSize_property)
    ioArray.append (self.mHorizontalAlignment_property)
    ioArray.append (self.mVerticalAlignment_property)
    ioArray.append (self.mRotation_property)
    ioArray.append (self.mBold_property)
    ioArray.append (self.mX_property)
    ioArray.append (self.mY_property)
    ioArray.append (self.mComment_property)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_CommentInSchematic (knob: inKnobIndex)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Translate
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_CommentInSchematic (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_CommentInSchematic (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_CommentInSchematic (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Move
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_CommentInSchematic (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_CommentInSchematic (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Snap to grid
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_CommentInSchematic (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_CommentInSchematic (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  HORIZONTAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipHorizontally () {
    self.flipHorizontally_CommentInSchematic ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_CommentInSchematic ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  VERTICAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipVertically () {
    self.flipVertically_CommentInSchematic ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_CommentInSchematic ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  ROTATE 90
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_CommentInSchematic (accumulatedPoints: &accumulatedPoints)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_CommentInSchematic (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_CommentInSchematic (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save into additional dictionary
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_CommentInSchematic (&ioDictionary)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationAfterPasting
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_CommentInSchematic (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Alignment Points
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_CommentInSchematic ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationBeforeRemoving
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_CommentInSchematic ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  COPY AND PASTE
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canCopyAndPaste () -> Bool {
    return true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

