//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mSlavePadsShouldBeRouted : AnyObject {
  var mSlavePadsShouldBeRouted : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mRotation : AnyObject {
  var mRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mSide : AnyObject {
  var mSide : ComponentSide { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mDisplayLegend : AnyObject {
  var mDisplayLegend : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mNameIsVisibleInBoard : AnyObject {
  var mNameIsVisibleInBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mXName : AnyObject {
  var mXName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mYName : AnyObject {
  var mYName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mNameFontSize : AnyObject {
  var mNameFontSize : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mNameRotation : AnyObject {
  var mNameRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mValueIsVisibleInBoard : AnyObject {
  var mValueIsVisibleInBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mXValue : AnyObject {
  var mXValue : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mYValue : AnyObject {
  var mYValue : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mValueFontSize : AnyObject {
  var mValueFontSize : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mValueRotation : AnyObject {
  var mValueRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mComponentValue : AnyObject {
  var mComponentValue : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mNamePrefix : AnyObject {
  var mNamePrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mNameIndex : AnyObject {
  var mNameIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mXUnit : AnyObject {
  var mXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_mYUnit : AnyObject {
  var mYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_deviceName : AnyObject {
  var deviceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_packagePadDictionary : AnyObject {
  var packagePadDictionary : PackageMasterPadDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_selectedPackageName : AnyObject {
  var selectedPackageName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_availablePackages : AnyObject {
  var availablePackages : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_componentIsPlacedInBoard : AnyObject {
  var componentIsPlacedInBoard : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_componentIsPlacedInBoardString : AnyObject {
  var componentIsPlacedInBoardString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_strokeBezierPath : AnyObject {
  var strokeBezierPath : EBBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_pinPadAssignments : AnyObject {
  var pinPadAssignments : ThreeStringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_hasSlavePads : AnyObject {
  var hasSlavePads : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_placementInSchematic : AnyObject {
  var placementInSchematic : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_deviceSymbolDictionary : AnyObject {
  var deviceSymbolDictionary : DeviceSymbolDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_componentNameFontName : AnyObject {
  var componentNameFontName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_componentValueFontName : AnyObject {
  var componentValueFontName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_componentPadDictionary : AnyObject {
  var componentPadDictionary : ComponentPadDescriptorDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_padNetDictionary : AnyObject {
  var padNetDictionary : PadNetDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_componentName : AnyObject {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_unplacedSymbols : AnyObject {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentInProject_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ComponentInProject : BoardObject,
         ComponentInProject_mSlavePadsShouldBeRouted,
         ComponentInProject_mX,
         ComponentInProject_mY,
         ComponentInProject_mRotation,
         ComponentInProject_mSide,
         ComponentInProject_mDisplayLegend,
         ComponentInProject_mNameIsVisibleInBoard,
         ComponentInProject_mXName,
         ComponentInProject_mYName,
         ComponentInProject_mNameFontSize,
         ComponentInProject_mNameRotation,
         ComponentInProject_mValueIsVisibleInBoard,
         ComponentInProject_mXValue,
         ComponentInProject_mYValue,
         ComponentInProject_mValueFontSize,
         ComponentInProject_mValueRotation,
         ComponentInProject_mComponentValue,
         ComponentInProject_mNamePrefix,
         ComponentInProject_mNameIndex,
         ComponentInProject_mXUnit,
         ComponentInProject_mYUnit,
         ComponentInProject_deviceName,
         ComponentInProject_signatureForERCChecking,
         ComponentInProject_packagePadDictionary,
         ComponentInProject_selectedPackageName,
         ComponentInProject_availablePackages,
         ComponentInProject_issues,
         ComponentInProject_componentIsPlacedInBoard,
         ComponentInProject_componentIsPlacedInBoardString,
         ComponentInProject_strokeBezierPath,
         ComponentInProject_pinPadAssignments,
         ComponentInProject_hasSlavePads,
         ComponentInProject_placementInSchematic,
         ComponentInProject_deviceSymbolDictionary,
         ComponentInProject_componentNameFontName,
         ComponentInProject_componentValueFontName,
         ComponentInProject_componentPadDictionary,
         ComponentInProject_padNetDictionary,
         ComponentInProject_componentName,
         ComponentInProject_selectionDisplay,
         ComponentInProject_unplacedSymbols,
         ComponentInProject_objectDisplay {

  //····················································································································
  //   Atomic property: mSlavePadsShouldBeRouted
  //····················································································································

  final let mSlavePadsShouldBeRouted_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mSlavePadsShouldBeRouted_toDefaultValue () {
    self.mSlavePadsShouldBeRouted = true
  }

  //····················································································································

  final var mSlavePadsShouldBeRouted : Bool {
    get { return self.mSlavePadsShouldBeRouted_property.propval }
    set { self.mSlavePadsShouldBeRouted_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  final let mRotation_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mRotation_toDefaultValue () {
    self.mRotation = 0
  }

  //····················································································································

  final var mRotation : Int {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSide
  //····················································································································

  final let mSide_property : EBStoredProperty_ComponentSide

  //····················································································································

  final func reset_mSide_toDefaultValue () {
    self.mSide = ComponentSide.front
  }

  //····················································································································

  final var mSide : ComponentSide {
    get { return self.mSide_property.propval }
    set { self.mSide_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayLegend
  //····················································································································

  final let mDisplayLegend_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mDisplayLegend_toDefaultValue () {
    self.mDisplayLegend = true
  }

  //····················································································································

  final var mDisplayLegend : Bool {
    get { return self.mDisplayLegend_property.propval }
    set { self.mDisplayLegend_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mConnectors
  //····················································································································

  final let mConnectors_property = StoredArrayOf_BoardConnector (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mConnectors : EBReferenceArray <BoardConnector> {
    get { return self.mConnectors_property.propval }
    set { self.mConnectors_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbols
  //····················································································································

  final let mSymbols_property = StoredArrayOf_ComponentSymbolInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mSymbols : EBReferenceArray <ComponentSymbolInProject> {
    get { return self.mSymbols_property.propval }
    set { self.mSymbols_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNameIsVisibleInBoard
  //····················································································································

  final let mNameIsVisibleInBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mNameIsVisibleInBoard_toDefaultValue () {
    self.mNameIsVisibleInBoard = true
  }

  //····················································································································

  final var mNameIsVisibleInBoard : Bool {
    get { return self.mNameIsVisibleInBoard_property.propval }
    set { self.mNameIsVisibleInBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mXName
  //····················································································································

  final let mXName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXName_toDefaultValue () {
    self.mXName = 0
  }

  //····················································································································

  final var mXName : Int {
    get { return self.mXName_property.propval }
    set { self.mXName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYName
  //····················································································································

  final let mYName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYName_toDefaultValue () {
    self.mYName = 685800
  }

  //····················································································································

  final var mYName : Int {
    get { return self.mYName_property.propval }
    set { self.mYName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNameFontSize
  //····················································································································

  final let mNameFontSize_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mNameFontSize_toDefaultValue () {
    self.mNameFontSize = 4
  }

  //····················································································································

  final var mNameFontSize : Double {
    get { return self.mNameFontSize_property.propval }
    set { self.mNameFontSize_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNameRotation
  //····················································································································

  final let mNameRotation_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mNameRotation_toDefaultValue () {
    self.mNameRotation = 0
  }

  //····················································································································

  final var mNameRotation : Int {
    get { return self.mNameRotation_property.propval }
    set { self.mNameRotation_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mValueIsVisibleInBoard
  //····················································································································

  final let mValueIsVisibleInBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mValueIsVisibleInBoard_toDefaultValue () {
    self.mValueIsVisibleInBoard = true
  }

  //····················································································································

  final var mValueIsVisibleInBoard : Bool {
    get { return self.mValueIsVisibleInBoard_property.propval }
    set { self.mValueIsVisibleInBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mXValue
  //····················································································································

  final let mXValue_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXValue_toDefaultValue () {
    self.mXValue = 0
  }

  //····················································································································

  final var mXValue : Int {
    get { return self.mXValue_property.propval }
    set { self.mXValue_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYValue
  //····················································································································

  final let mYValue_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYValue_toDefaultValue () {
    self.mYValue = -685800
  }

  //····················································································································

  final var mYValue : Int {
    get { return self.mYValue_property.propval }
    set { self.mYValue_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mValueFontSize
  //····················································································································

  final let mValueFontSize_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mValueFontSize_toDefaultValue () {
    self.mValueFontSize = 4
  }

  //····················································································································

  final var mValueFontSize : Double {
    get { return self.mValueFontSize_property.propval }
    set { self.mValueFontSize_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mValueRotation
  //····················································································································

  final let mValueRotation_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mValueRotation_toDefaultValue () {
    self.mValueRotation = 0
  }

  //····················································································································

  final var mValueRotation : Int {
    get { return self.mValueRotation_property.propval }
    set { self.mValueRotation_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mComponentValue
  //····················································································································

  final let mComponentValue_property : EBStoredProperty_String

  //····················································································································

  final func reset_mComponentValue_toDefaultValue () {
    self.mComponentValue = ""
  }

  //····················································································································

  final var mComponentValue : String {
    get { return self.mComponentValue_property.propval }
    set { self.mComponentValue_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNamePrefix
  //····················································································································

  final let mNamePrefix_property : EBStoredProperty_String

  //····················································································································

  final func reset_mNamePrefix_toDefaultValue () {
    self.mNamePrefix = ""
  }

  //····················································································································

  final var mNamePrefix : String {
    get { return self.mNamePrefix_property.propval }
    set { self.mNamePrefix_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNameIndex
  //····················································································································

  final let mNameIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mNameIndex_toDefaultValue () {
    self.mNameIndex = 0
  }

  //····················································································································

  final var mNameIndex : Int {
    get { return self.mNameIndex_property.propval }
    set { self.mNameIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mXUnit
  //····················································································································

  final let mXUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXUnit_toDefaultValue () {
    self.mXUnit = 2286
  }

  //····················································································································

  final var mXUnit : Int {
    get { return self.mXUnit_property.propval }
    set { self.mXUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYUnit
  //····················································································································

  final let mYUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYUnit_toDefaultValue () {
    self.mYUnit = 2286
  }

  //····················································································································

  final var mYUnit : Int {
    get { return self.mYUnit_property.propval }
    set { self.mYUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Array controller: componentAvailablePackagesController
  //····················································································································

  final var componentAvailablePackagesController = Controller_ComponentInProject_componentAvailablePackagesController ()

  //····················································································································
  //   ToMany proxy: mPackages
  //····················································································································

  var mPackages_modelDidChangeController : EBObservablePropertyController? = nil
  // var mPackages_boundObjectDidChangeController : EBObservablePropertyController? = nil
  let mPackages_property = ProxyArrayOf_DevicePackageInProject ()

  //····················································································································

  var mPackages : EBReferenceArray <DevicePackageInProject> {
    get {
      switch self.mPackages_property.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }
    set {
      self.mPackages_property.setProp (newValue)
    }
  }

  //····················································································································
  //   To one property: mDevice
  //····················································································································

  final let mDevice_property = StoredObject_DeviceInProject (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mDevice : DeviceInProject? {
    get {
      return self.mDevice_property.propval
    }
    set {
      if self.mDevice_property.propval !== newValue {
        if self.mDevice_property.propval != nil {
          self.mDevice_property.setProp (nil)
        }
        if newValue != nil {
          self.mDevice_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mDevice_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  final let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  final var deviceName : String? {
    switch self.deviceName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mSelectedPackage
  //····················································································································

  final let mSelectedPackage_property = StoredObject_DevicePackageInProject (usedForSignature: false, strongRef: true)

  //····················································································································

  final var mSelectedPackage : DevicePackageInProject? {
    get {
      return self.mSelectedPackage_property.propval
    }
    set {
      if self.mSelectedPackage_property.propval !== newValue {
        if self.mSelectedPackage_property.propval != nil {
          self.mSelectedPackage_property.setProp (nil)
        }
        if newValue != nil {
          self.mSelectedPackage_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mSelectedPackage_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: packagePadDictionary
  //····················································································································

  final let packagePadDictionary_property = EBTransientProperty_PackageMasterPadDictionary ()

  //····················································································································

  final var packagePadDictionary : PackageMasterPadDictionary? {
    switch self.packagePadDictionary_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedPackageName
  //····················································································································

  final let selectedPackageName_property = EBTransientProperty_String ()

  //····················································································································

  final var selectedPackageName : String? {
    switch self.selectedPackageName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: availablePackages
  //····················································································································

  final let availablePackages_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var availablePackages : StringArray? {
    switch self.availablePackages_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentIsPlacedInBoard
  //····················································································································

  final let componentIsPlacedInBoard_property = EBTransientProperty_Bool ()

  //····················································································································

  final var componentIsPlacedInBoard : Bool? {
    switch self.componentIsPlacedInBoard_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentIsPlacedInBoardString
  //····················································································································

  final let componentIsPlacedInBoardString_property = EBTransientProperty_String ()

  //····················································································································

  final var componentIsPlacedInBoardString : String? {
    switch self.componentIsPlacedInBoardString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  final let strokeBezierPath_property = EBTransientProperty_EBBezierPath ()

  //····················································································································

  final var strokeBezierPath : EBBezierPath? {
    switch self.strokeBezierPath_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mNameFont
  //····················································································································

  final let mNameFont_property = StoredObject_FontInProject (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mNameFont : FontInProject? {
    get {
      return self.mNameFont_property.propval
    }
    set {
      if self.mNameFont_property.propval !== newValue {
        if self.mNameFont_property.propval != nil {
          self.mNameFont_property.setProp (nil)
        }
        if newValue != nil {
          self.mNameFont_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mNameFont_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mValueFont
  //····················································································································

  final let mValueFont_property = StoredObject_FontInProject (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mValueFont : FontInProject? {
    get {
      return self.mValueFont_property.propval
    }
    set {
      if self.mValueFont_property.propval !== newValue {
        if self.mValueFont_property.propval != nil {
          self.mValueFont_property.setProp (nil)
        }
        if newValue != nil {
          self.mValueFont_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mValueFont_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasSlavePads
  //····················································································································

  final let hasSlavePads_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasSlavePads : Bool? {
    switch self.hasSlavePads_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: placementInSchematic
  //····················································································································

  final let placementInSchematic_property = EBTransientProperty_String ()

  //····················································································································

  final var placementInSchematic : String? {
    switch self.placementInSchematic_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceSymbolDictionary
  //····················································································································

  final let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································

  final var deviceSymbolDictionary : DeviceSymbolDictionary? {
    switch self.deviceSymbolDictionary_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentNameFontName
  //····················································································································

  final let componentNameFontName_property = EBTransientProperty_String ()

  //····················································································································

  final var componentNameFontName : String? {
    switch self.componentNameFontName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentValueFontName
  //····················································································································

  final let componentValueFontName_property = EBTransientProperty_String ()

  //····················································································································

  final var componentValueFontName : String? {
    switch self.componentValueFontName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentPadDictionary
  //····················································································································

  final let componentPadDictionary_property = EBTransientProperty_ComponentPadDescriptorDictionary ()

  //····················································································································

  final var componentPadDictionary : ComponentPadDescriptorDictionary? {
    switch self.componentPadDictionary_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNetDictionary
  //····················································································································

  final let padNetDictionary_property = EBTransientProperty_PadNetDictionary ()

  //····················································································································

  final var padNetDictionary : PadNetDictionary? {
    switch self.padNetDictionary_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  final let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  final var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mSlavePadsShouldBeRouted_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager)
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mSide_property = EBStoredProperty_ComponentSide (defaultValue: ComponentSide.front, undoManager: inUndoManager)
    self.mDisplayLegend_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager)
    self.mNameIsVisibleInBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager)
    self.mXName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mYName_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: inUndoManager)
    self.mNameFontSize_property = EBStoredProperty_Double (defaultValue: 4, undoManager: inUndoManager)
    self.mNameRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mValueIsVisibleInBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager)
    self.mXValue_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mYValue_property = EBStoredProperty_Int (defaultValue: -685800, undoManager: inUndoManager)
    self.mValueFontSize_property = EBStoredProperty_Double (defaultValue: 4, undoManager: inUndoManager)
    self.mValueRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mComponentValue_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mNamePrefix_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mNameIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mXUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.mYUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    super.init (inUndoManager)
    self.mDevice_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mDevice_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserver (self.mDevice_none)
    self.mSelectedPackage_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mSelectedPackage_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserver (self.mSelectedPackage_none)
    self.mNameFont_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mNameFont_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mNameFont_property.addEBObserver (self.mNameFont_none)
    self.mValueFont_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mValueFont_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mValueFont_property.addEBObserver (self.mValueFont_none)
//    gInitSemaphore.wait ()
  //--- To many property: mConnectors (has opposite relationship)
    self.mConnectors_property.undoManager = inUndoManager
    self.mConnectors_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- To many property: mSymbols (has opposite relationship)
    self.mSymbols_property.undoManager = inUndoManager
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- Array controller property: componentAvailablePackagesController
    self.componentAvailablePackagesController.bind_model (self.mPackages_property, self.undoManager)
  //--- ToMany proxy: mPackages
    do{
      let controller = EBObservablePropertyController (
        observedObjects: [self.mDevice_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mDevice {
            me.mPackages_property.setModel (model.mPackages_property)
          }
        }
      )
      self.mDevice_property.addEBObserverOf_mPackages (controller)
      self.mPackages_modelDidChangeController = controller
    }
  //--- To one property: mDevice (has opposite to many relationship: mComponents)
    self.mDevice_property.undoManager = inUndoManager
    self.mDevice_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponents_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponents_property.remove (me) } }
    )
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDevice_property.mDeviceName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_deviceName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.mDeviceName_property.addEBObserver (self.deviceName_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSlavePadsShouldBeRouted_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_signatureForERCChecking (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSlavePadsShouldBeRouted_property.addEBObserver (self.signatureForERCChecking_property)
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.undoManager = inUndoManager
  //--- Atomic property: packagePadDictionary
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSelectedPackage_property.packagePadDictionary_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_packagePadDictionary (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.packagePadDictionary_property.addEBObserver (self.packagePadDictionary_property)
  //--- Atomic property: selectedPackageName
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSelectedPackage_property.mPackageName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_selectedPackageName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.mPackageName_property.addEBObserver (self.selectedPackageName_property)
  //--- Atomic property: availablePackages
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDevice_property.packageNames_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_availablePackages (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.packageNames_property.addEBObserver (self.availablePackages_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mConnectors_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_issues (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mConnectors_property.addEBObserverOf_issues (self.issues_property)
  //--- Atomic property: componentIsPlacedInBoard
    self.componentIsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.isPlacedInBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_componentIsPlacedInBoard (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.isPlacedInBoard_property.addEBObserver (self.componentIsPlacedInBoard_property)
  //--- Atomic property: componentIsPlacedInBoardString
    self.componentIsPlacedInBoardString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.componentIsPlacedInBoard_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_componentIsPlacedInBoardString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.componentIsPlacedInBoard_property.addEBObserver (self.componentIsPlacedInBoardString_property)
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSelectedPackage_property.mStrokeBezierPath_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_strokeBezierPath (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.mStrokeBezierPath_property.addEBObserver (self.strokeBezierPath_property)
  //--- To one property: mNameFont (has opposite to many relationship: mComponentNames)
    self.mNameFont_property.undoManager = inUndoManager
    self.mNameFont_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponentNames_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponentNames_property.remove (me) } }
    )
  //--- To one property: mValueFont (has opposite to many relationship: mComponentValues)
    self.mValueFont_property.undoManager = inUndoManager
    self.mValueFont_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponentValues_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponentValues_property.remove (me) } }
    )
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDevice_property.pinPadAssignments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_pinPadAssignments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.pinPadAssignments_property.addEBObserver (self.pinPadAssignments_property)
  //--- Atomic property: hasSlavePads
    self.hasSlavePads_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.packagePadDictionary_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_hasSlavePads (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.packagePadDictionary_property.addEBObserver (self.hasSlavePads_property)
  //--- Atomic property: placementInSchematic
    self.placementInSchematic_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbols_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_placementInSchematic (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolInSchematic (self.placementInSchematic_property)
  //--- Atomic property: deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDevice_property.deviceSymbolDictionary_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_deviceSymbolDictionary (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.deviceSymbolDictionary_property.addEBObserver (self.deviceSymbolDictionary_property)
  //--- Atomic property: componentNameFontName
    self.componentNameFontName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNameFont_property.mFontName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_componentNameFontName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNameFont_property.mFontName_property.addEBObserver (self.componentNameFontName_property)
  //--- Atomic property: componentValueFontName
    self.componentValueFontName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mValueFont_property.mFontName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_componentValueFontName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mValueFont_property.mFontName_property.addEBObserver (self.componentValueFontName_property)
  //--- Atomic property: componentPadDictionary
    self.componentPadDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mRotation_property.selection
        let s3 = unwSelf.mSide_property.selection
        let s4 = unwSelf.packagePadDictionary_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_ComponentInProject_componentPadDictionary (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.componentPadDictionary_property)
    self.mY_property.addEBObserver (self.componentPadDictionary_property)
    self.mRotation_property.addEBObserver (self.componentPadDictionary_property)
    self.mSide_property.addEBObserver (self.componentPadDictionary_property)
    self.packagePadDictionary_property.addEBObserver (self.componentPadDictionary_property)
  //--- Atomic property: padNetDictionary
    self.padNetDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbols_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentInProject_padNetDictionary (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolInfo (self.padNetDictionary_property)
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNamePrefix_property.selection
        let s1 = unwSelf.mNameIndex_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ComponentInProject_componentName (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNamePrefix_property.addEBObserver (self.componentName_property)
    self.mNameIndex_property.addEBObserver (self.componentName_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_frontSideLegendColorForBoard_property.selection
        let s1 = preferences_backSideLegendColorForBoard_property.selection
        let s2 = unwSelf.mX_property.selection
        let s3 = unwSelf.mY_property.selection
        let s4 = unwSelf.mRotation_property.selection
        let s5 = unwSelf.mSide_property.selection
        let s6 = unwSelf.strokeBezierPath_property.selection
        let s7 = unwSelf.mDisplayLegend_property.selection
        let s8 = unwSelf.mNameIsVisibleInBoard_property.selection
        let s9 = unwSelf.mXName_property.selection
        let s10 = unwSelf.mYName_property.selection
        let s11 = unwSelf.mNameFont_property.descriptor_property.selection
        let s12 = unwSelf.mNameFontSize_property.selection
        let s13 = unwSelf.mNameRotation_property.selection
        let s14 = unwSelf.componentName_property.selection
        let s15 = unwSelf.packagePadDictionary_property.selection
        let s16 = unwSelf.padNetDictionary_property.selection
        let s17 = unwSelf.mValueIsVisibleInBoard_property.selection
        let s18 = unwSelf.mXValue_property.selection
        let s19 = unwSelf.mYValue_property.selection
        let s20 = unwSelf.mValueFont_property.descriptor_property.selection
        let s21 = unwSelf.mValueFontSize_property.selection
        let s22 = unwSelf.mValueRotation_property.selection
        let s23 = unwSelf.mComponentValue_property.selection
        let s24 = preferences_hiliteWidthMultipliedByTen_property.selection
        let s25 = preferences_mShowComponentRotationKnobInBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13),
              .single (let v14),
              .single (let v15),
              .single (let v16),
              .single (let v17),
              .single (let v18),
              .single (let v19),
              .single (let v20),
              .single (let v21),
              .single (let v22),
              .single (let v23),
              .single (let v24),
              .single (let v25)) :
          return .single (transient_ComponentInProject_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_frontSideLegendColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    preferences_backSideLegendColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mRotation_property.addEBObserver (self.selectionDisplay_property)
    self.mSide_property.addEBObserver (self.selectionDisplay_property)
    self.strokeBezierPath_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayLegend_property.addEBObserver (self.selectionDisplay_property)
    self.mNameIsVisibleInBoard_property.addEBObserver (self.selectionDisplay_property)
    self.mXName_property.addEBObserver (self.selectionDisplay_property)
    self.mYName_property.addEBObserver (self.selectionDisplay_property)
    self.mNameFont_property.descriptor_property.addEBObserver (self.selectionDisplay_property)
    self.mNameFontSize_property.addEBObserver (self.selectionDisplay_property)
    self.mNameRotation_property.addEBObserver (self.selectionDisplay_property)
    self.componentName_property.addEBObserver (self.selectionDisplay_property)
    self.packagePadDictionary_property.addEBObserver (self.selectionDisplay_property)
    self.padNetDictionary_property.addEBObserver (self.selectionDisplay_property)
    self.mValueIsVisibleInBoard_property.addEBObserver (self.selectionDisplay_property)
    self.mXValue_property.addEBObserver (self.selectionDisplay_property)
    self.mYValue_property.addEBObserver (self.selectionDisplay_property)
    self.mValueFont_property.descriptor_property.addEBObserver (self.selectionDisplay_property)
    self.mValueFontSize_property.addEBObserver (self.selectionDisplay_property)
    self.mValueRotation_property.addEBObserver (self.selectionDisplay_property)
    self.mComponentValue_property.addEBObserver (self.selectionDisplay_property)
    preferences_hiliteWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    preferences_mShowComponentRotationKnobInBoard_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.componentName_property.selection
        let s1 = unwSelf.mSymbols_property.selection
        let s2 = unwSelf.mSymbols_property.selection
        let s3 = unwSelf.mSymbols_property.selection
        let s4 = unwSelf.mSymbols_property.selection
        let s5 = unwSelf.mComponentValue_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_ComponentInProject_unplacedSymbols (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.componentName_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_symbolInSchematic (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
    self.mComponentValue_property.addEBObserver (self.unplacedSymbols_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mRotation_property.selection
        let s3 = unwSelf.mSide_property.selection
        let s4 = unwSelf.packagePadDictionary_property.selection
        let s5 = unwSelf.padNetDictionary_property.selection
        let s6 = unwSelf.strokeBezierPath_property.selection
        let s7 = unwSelf.mDisplayLegend_property.selection
        let s8 = preferences_frontSideLegendColorForBoard_property.selection
        let s9 = preferences_backSideLegendColorForBoard_property.selection
        var s10 = unwSelf.packageDrawingWidthMultpliedByTenForBoard_property.selection
        switch s10 {
        case .single :
          ()
        case .empty, .multiple :
          s10 = .single (10)
        }
        let s11 = preferences_frontSidePadColorForBoard_property.selection
        var s12 = unwSelf.displayFrontPadsForBoard_property.selection
        switch s12 {
        case .single :
          ()
        case .empty, .multiple :
          s12 = .single (true)
        }
        let s13 = preferences_backSidePadColorForBoard_property.selection
        var s14 = unwSelf.displayBackPadsForBoard_property.selection
        switch s14 {
        case .single :
          ()
        case .empty, .multiple :
          s14 = .single (true)
        }
        var s15 = unwSelf.displayFrontLegendForBoard_property.selection
        switch s15 {
        case .single :
          ()
        case .empty, .multiple :
          s15 = .single (true)
        }
        var s16 = unwSelf.displayBackLegendForBoard_property.selection
        switch s16 {
        case .single :
          ()
        case .empty, .multiple :
          s16 = .single (true)
        }
        let s17 = preferences_padNumberFontForBoard_property.selection
        let s18 = preferences_padNumberColorForBoard_property.selection
        var s19 = unwSelf.displayPadNumbersForBoard_property.selection
        switch s19 {
        case .single :
          ()
        case .empty, .multiple :
          s19 = .single (true)
        }
        let s20 = unwSelf.mNameIsVisibleInBoard_property.selection
        let s21 = unwSelf.mXName_property.selection
        let s22 = unwSelf.mYName_property.selection
        let s23 = unwSelf.mNameFont_property.descriptor_property.selection
        let s24 = unwSelf.mNameFontSize_property.selection
        let s25 = unwSelf.mNameRotation_property.selection
        let s26 = unwSelf.componentName_property.selection
        let s27 = unwSelf.mValueIsVisibleInBoard_property.selection
        let s28 = unwSelf.mXValue_property.selection
        let s29 = unwSelf.mYValue_property.selection
        let s30 = unwSelf.mValueFont_property.descriptor_property.selection
        let s31 = unwSelf.mValueFontSize_property.selection
        let s32 = unwSelf.mValueRotation_property.selection
        let s33 = unwSelf.mComponentValue_property.selection
        let s34 = unwSelf.mDevice_property.pinPadAssignments_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13),
              .single (let v14),
              .single (let v15),
              .single (let v16),
              .single (let v17),
              .single (let v18),
              .single (let v19),
              .single (let v20),
              .single (let v21),
              .single (let v22),
              .single (let v23),
              .single (let v24),
              .single (let v25),
              .single (let v26),
              .single (let v27),
              .single (let v28),
              .single (let v29),
              .single (let v30),
              .single (let v31),
              .single (let v32),
              .single (let v33),
              .single (let v34)) :
          return .single (transient_ComponentInProject_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    self.mRotation_property.addEBObserver (self.objectDisplay_property)
    self.mSide_property.addEBObserver (self.objectDisplay_property)
    self.packagePadDictionary_property.addEBObserver (self.objectDisplay_property)
    self.padNetDictionary_property.addEBObserver (self.objectDisplay_property)
    self.strokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayLegend_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_backSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
    self.packageDrawingWidthMultpliedByTenForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSidePadColorForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayFrontPadsForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_backSidePadColorForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayBackPadsForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayFrontLegendForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayBackLegendForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_padNumberFontForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_padNumberColorForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayPadNumbersForBoard_property.addEBObserver (self.objectDisplay_property)
    self.mNameIsVisibleInBoard_property.addEBObserver (self.objectDisplay_property)
    self.mXName_property.addEBObserver (self.objectDisplay_property)
    self.mYName_property.addEBObserver (self.objectDisplay_property)
    self.mNameFont_property.descriptor_property.addEBObserver (self.objectDisplay_property)
    self.mNameFontSize_property.addEBObserver (self.objectDisplay_property)
    self.mNameRotation_property.addEBObserver (self.objectDisplay_property)
    self.componentName_property.addEBObserver (self.objectDisplay_property)
    self.mValueIsVisibleInBoard_property.addEBObserver (self.objectDisplay_property)
    self.mXValue_property.addEBObserver (self.objectDisplay_property)
    self.mYValue_property.addEBObserver (self.objectDisplay_property)
    self.mValueFont_property.descriptor_property.addEBObserver (self.objectDisplay_property)
    self.mValueFontSize_property.addEBObserver (self.objectDisplay_property)
    self.mValueRotation_property.addEBObserver (self.objectDisplay_property)
    self.mComponentValue_property.addEBObserver (self.objectDisplay_property)
    self.mDevice_property.pinPadAssignments_property.addEBObserver (self.objectDisplay_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mConnectors_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mSlavePadsShouldBeRouted
      self.mSlavePadsShouldBeRouted_property.storeIn (dictionary: ioDictionary, forKey: "mSlavePadsShouldBeRouted")
    //--- Atomic property: mX
      self.mX_property.storeIn (dictionary: ioDictionary, forKey: "mX")
    //--- Atomic property: mY
      self.mY_property.storeIn (dictionary: ioDictionary, forKey: "mY")
    //--- Atomic property: mRotation
      self.mRotation_property.storeIn (dictionary: ioDictionary, forKey: "mRotation")
    //--- Atomic property: mSide
      self.mSide_property.storeIn (dictionary: ioDictionary, forKey: "mSide")
    //--- Atomic property: mDisplayLegend
      self.mDisplayLegend_property.storeIn (dictionary: ioDictionary, forKey: "mDisplayLegend")
  //--- To many property: mConnectors
    self.store (
      managedObjectArray: self.mConnectors_property.propval.values,
      relationshipName: "mConnectors",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbols
    self.store (
      managedObjectArray: self.mSymbols_property.propval.values,
      relationshipName: "mSymbols",
      intoDictionary: ioDictionary
    )
    //--- Atomic property: mNameIsVisibleInBoard
      self.mNameIsVisibleInBoard_property.storeIn (dictionary: ioDictionary, forKey: "mNameIsVisibleInBoard")
    //--- Atomic property: mXName
      self.mXName_property.storeIn (dictionary: ioDictionary, forKey: "mXName")
    //--- Atomic property: mYName
      self.mYName_property.storeIn (dictionary: ioDictionary, forKey: "mYName")
    //--- Atomic property: mNameFontSize
      self.mNameFontSize_property.storeIn (dictionary: ioDictionary, forKey: "mNameFontSize")
    //--- Atomic property: mNameRotation
      self.mNameRotation_property.storeIn (dictionary: ioDictionary, forKey: "mNameRotation")
    //--- Atomic property: mValueIsVisibleInBoard
      self.mValueIsVisibleInBoard_property.storeIn (dictionary: ioDictionary, forKey: "mValueIsVisibleInBoard")
    //--- Atomic property: mXValue
      self.mXValue_property.storeIn (dictionary: ioDictionary, forKey: "mXValue")
    //--- Atomic property: mYValue
      self.mYValue_property.storeIn (dictionary: ioDictionary, forKey: "mYValue")
    //--- Atomic property: mValueFontSize
      self.mValueFontSize_property.storeIn (dictionary: ioDictionary, forKey: "mValueFontSize")
    //--- Atomic property: mValueRotation
      self.mValueRotation_property.storeIn (dictionary: ioDictionary, forKey: "mValueRotation")
    //--- Atomic property: mComponentValue
      self.mComponentValue_property.storeIn (dictionary: ioDictionary, forKey: "mComponentValue")
    //--- Atomic property: mNamePrefix
      self.mNamePrefix_property.storeIn (dictionary: ioDictionary, forKey: "mNamePrefix")
    //--- Atomic property: mNameIndex
      self.mNameIndex_property.storeIn (dictionary: ioDictionary, forKey: "mNameIndex")
    //--- Atomic property: mXUnit
      self.mXUnit_property.storeIn (dictionary: ioDictionary, forKey: "mXUnit")
    //--- Atomic property: mYUnit
      self.mYUnit_property.storeIn (dictionary: ioDictionary, forKey: "mYUnit")
  //--- To one property: mSelectedPackage
    self.store (managedObject:self.mSelectedPackage_property.propval,
      relationshipName: "mSelectedPackage",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: mConnectors
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mConnectors",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [BoardConnector]
      self.mConnectors_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mSymbols
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mSymbols",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [ComponentSymbolInProject]
      self.mSymbols_property.setProp (EBReferenceArray (array))
    }
  //--- To one property: mDevice
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mDevice",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? DeviceInProject {
        self.mDevice_property.setProp (entity)
      }
    }
  //--- To one property: mSelectedPackage
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedPackage",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? DevicePackageInProject {
        self.mSelectedPackage_property.setProp (entity)
      }
    }
  //--- To one property: mNameFont
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNameFont",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? FontInProject {
        self.mNameFont_property.setProp (entity)
      }
    }
  //--- To one property: mValueFont
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mValueFont",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? FontInProject {
        self.mValueFont_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSlavePadsShouldBeRouted
    self.mSlavePadsShouldBeRouted_property.readFrom (dictionary: inDictionary, forKey: "mSlavePadsShouldBeRouted")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  //--- Atomic property: mRotation
    self.mRotation_property.readFrom (dictionary: inDictionary, forKey: "mRotation")
  //--- Atomic property: mSide
    self.mSide_property.readFrom (dictionary: inDictionary, forKey: "mSide")
  //--- Atomic property: mDisplayLegend
    self.mDisplayLegend_property.readFrom (dictionary: inDictionary, forKey: "mDisplayLegend")
  //--- Atomic property: mNameIsVisibleInBoard
    self.mNameIsVisibleInBoard_property.readFrom (dictionary: inDictionary, forKey: "mNameIsVisibleInBoard")
  //--- Atomic property: mXName
    self.mXName_property.readFrom (dictionary: inDictionary, forKey: "mXName")
  //--- Atomic property: mYName
    self.mYName_property.readFrom (dictionary: inDictionary, forKey: "mYName")
  //--- Atomic property: mNameFontSize
    self.mNameFontSize_property.readFrom (dictionary: inDictionary, forKey: "mNameFontSize")
  //--- Atomic property: mNameRotation
    self.mNameRotation_property.readFrom (dictionary: inDictionary, forKey: "mNameRotation")
  //--- Atomic property: mValueIsVisibleInBoard
    self.mValueIsVisibleInBoard_property.readFrom (dictionary: inDictionary, forKey: "mValueIsVisibleInBoard")
  //--- Atomic property: mXValue
    self.mXValue_property.readFrom (dictionary: inDictionary, forKey: "mXValue")
  //--- Atomic property: mYValue
    self.mYValue_property.readFrom (dictionary: inDictionary, forKey: "mYValue")
  //--- Atomic property: mValueFontSize
    self.mValueFontSize_property.readFrom (dictionary: inDictionary, forKey: "mValueFontSize")
  //--- Atomic property: mValueRotation
    self.mValueRotation_property.readFrom (dictionary: inDictionary, forKey: "mValueRotation")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.readFrom (dictionary: inDictionary, forKey: "mComponentValue")
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.readFrom (dictionary: inDictionary, forKey: "mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.readFrom (dictionary: inDictionary, forKey: "mNameIndex")
  //--- Atomic property: mXUnit
    self.mXUnit_property.readFrom (dictionary: inDictionary, forKey: "mXUnit")
  //--- Atomic property: mYUnit
    self.mYUnit_property.readFrom (dictionary: inDictionary, forKey: "mYUnit")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mSlavePadsShouldBeRouted\n"
    ioString += "mX\n"
    ioString += "mY\n"
    ioString += "mRotation\n"
    ioString += "mSide\n"
    ioString += "mDisplayLegend\n"
    ioString += "mNameIsVisibleInBoard\n"
    ioString += "mXName\n"
    ioString += "mYName\n"
    ioString += "mNameFontSize\n"
    ioString += "mNameRotation\n"
    ioString += "mValueIsVisibleInBoard\n"
    ioString += "mXValue\n"
    ioString += "mYValue\n"
    ioString += "mValueFontSize\n"
    ioString += "mValueRotation\n"
    ioString += "mComponentValue\n"
    ioString += "mNamePrefix\n"
    ioString += "mNameIndex\n"
    ioString += "mXUnit\n"
    ioString += "mYUnit\n"
  //--- To one relationships
    ioString += "mDevice\n"
    ioString += "mSelectedPackage\n"
    ioString += "mNameFont\n"
    ioString += "mValueFont\n"
  //--- To many relationships
    ioString += "mConnectors\n"
    ioString += "mSymbols\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mSlavePadsShouldBeRouted.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayLegend.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameIsVisibleInBoard.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameFontSize.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mValueIsVisibleInBoard.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXValue.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYValue.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mValueFontSize.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mValueRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mComponentValue.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNamePrefix.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mDevice {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mSelectedPackage {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mNameFont {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mValueFont {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.mConnectors.values, into: &ioData)
    enterToManyRelationshipObjectIndexes (from: self.mSymbols.values, into: &ioData)
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mSlavePadsShouldBeRouted"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mSlavePadsShouldBeRouted = value
    }
    if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mX = value
    }
    if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mY = value
    }
    if let range = inDictionary ["mRotation"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mRotation = value
    }
    if let range = inDictionary ["mSide"], let value = ComponentSide.unarchiveFromDataRange (inData, range) {
      self.mSide = value
    }
    if let range = inDictionary ["mDisplayLegend"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mDisplayLegend = value
    }
    if let range = inDictionary ["mNameIsVisibleInBoard"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mNameIsVisibleInBoard = value
    }
    if let range = inDictionary ["mXName"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mXName = value
    }
    if let range = inDictionary ["mYName"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mYName = value
    }
    if let range = inDictionary ["mNameFontSize"], let value = Double.unarchiveFromDataRange (inData, range) {
      self.mNameFontSize = value
    }
    if let range = inDictionary ["mNameRotation"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mNameRotation = value
    }
    if let range = inDictionary ["mValueIsVisibleInBoard"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mValueIsVisibleInBoard = value
    }
    if let range = inDictionary ["mXValue"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mXValue = value
    }
    if let range = inDictionary ["mYValue"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mYValue = value
    }
    if let range = inDictionary ["mValueFontSize"], let value = Double.unarchiveFromDataRange (inData, range) {
      self.mValueFontSize = value
    }
    if let range = inDictionary ["mValueRotation"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mValueRotation = value
    }
    if let range = inDictionary ["mComponentValue"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mComponentValue = value
    }
    if let range = inDictionary ["mNamePrefix"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mNamePrefix = value
    }
    if let range = inDictionary ["mNameIndex"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mNameIndex = value
    }
    if let range = inDictionary ["mXUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mXUnit = value
    }
    if let range = inDictionary ["mYUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mYUnit = value
    }
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mDevice"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! DeviceInProject
      self.mDevice = object
    }
    if let range = inDictionary ["mSelectedPackage"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! DevicePackageInProject
      self.mSelectedPackage = object
    }
    if let range = inDictionary ["mNameFont"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! FontInProject
      self.mNameFont = object
    }
    if let range = inDictionary ["mValueFont"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! FontInProject
      self.mValueFont = object
    }
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
      if let range = inDictionary ["mConnectors"], range.length > 0 {
        var relationshipArray = EBReferenceArray <BoardConnector> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inRawObjectArray [idx].object as! BoardConnector)
        }
        self.mConnectors = relationshipArray
      }
      if let range = inDictionary ["mSymbols"], range.length > 0 {
        var relationshipArray = EBReferenceArray <ComponentSymbolInProject> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inRawObjectArray [idx].object as! ComponentSymbolInProject)
        }
        self.mSymbols = relationshipArray
      }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: mConnectors
    for managedObject in self.mConnectors.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mSymbols
    for managedObject in self.mSymbols.values {
      ioObjectArray.append (managedObject)
    }
  //--- To one property: mDevice
    if let object = self.mDevice {
      ioObjectArray.append (object)
    }
  //--- To one property: mSelectedPackage
    if let object = self.mSelectedPackage {
      ioObjectArray.append (object)
    }
  //--- To one property: mNameFont
    if let object = self.mNameFont {
      ioObjectArray.append (object)
    }
  //--- To one property: mValueFont
    if let object = self.mValueFont {
      ioObjectArray.append (object)
    }
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_ComponentInProject (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_ComponentInProject (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_ComponentInProject (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_ComponentInProject (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_ComponentInProject (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_ComponentInProject (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_ComponentInProject (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_ComponentInProject (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_ComponentInProject ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_ComponentInProject ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_ComponentInProject ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_ComponentInProject ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_ComponentInProject (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_ComponentInProject (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_ComponentInProject (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    self.saveIntoAdditionalDictionary_ComponentInProject (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_ComponentInProject (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_ComponentInProject ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_ComponentInProject ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

