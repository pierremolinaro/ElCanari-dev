//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_CommentInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_CommentInSchematic : ReadOnlyAbstractArrayProperty <CommentInSchematic> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <CommentInSchematic>,                            
                                 addedSet inAddedSet : EBReferenceSet <CommentInSchematic>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mColor { // Stored property
        managedObject.mColor_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSize { // Stored property
        managedObject.mSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mHorizontalAlignment { // Stored property
        managedObject.mHorizontalAlignment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mVerticalAlignment { // Stored property
        managedObject.mVerticalAlignment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComment { // Stored property
        managedObject.mComment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mColor { // Stored property
        managedObject.mColor_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSize { // Stored property
        managedObject.mSize_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mHorizontalAlignment { // Stored property
        managedObject.mHorizontalAlignment_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mVerticalAlignment { // Stored property
        managedObject.mVerticalAlignment_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComment { // Stored property
        managedObject.mComment_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mColor' stored property
  //····················································································································

  private final var mObserversOf_mColor : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mColor_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mColor {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mColor_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mColor = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mColor_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mColor?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mSize' stored property
  //····················································································································

  private final var mObserversOf_mSize : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mSize_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mSize {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mSize_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mSize = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mSize?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mHorizontalAlignment : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mHorizontalAlignment_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mHorizontalAlignment {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mHorizontalAlignment_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mHorizontalAlignment = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mHorizontalAlignment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mHorizontalAlignment?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mVerticalAlignment' stored property
  //····················································································································

  private final var mObserversOf_mVerticalAlignment : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mVerticalAlignment_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mVerticalAlignment {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mVerticalAlignment_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mVerticalAlignment = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mVerticalAlignment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mVerticalAlignment?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mX {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mX = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mY {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mY = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'mComment' stored property
  //····················································································································

  private final var mObserversOf_mComment : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_mComment_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_mComment {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mComment_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mComment = relay
    }
    relay.insert (observer: inObserver)
  }

  //····················································································································

  final func toMany_mComment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mComment?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.remove (observer: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBWeakObserverSetRelay? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBWeakObserverSetRelay
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBWeakObserverSetRelay ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.insert (observer:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.remove (observer: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf CommentInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_CommentInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf CommentInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_CommentInSchematic <SUPER : EBManagedObject> : ReadOnlyArrayOf_CommentInSchematic {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <CommentInSchematic> ()
      for superObject in newModelArray.values {
        if let object = superObject as? CommentInSchematic {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [CommentInSchematic] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <CommentInSchematic> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: CommentInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_CommentInSchematic : ReadOnlyArrayOf_CommentInSchematic {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <CommentInSchematic>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_CommentInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_CommentInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: CommentInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_CommentInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: CommentInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_CommentInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

