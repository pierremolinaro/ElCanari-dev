//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Array controller ComponentInProject componentAvailablePackagesController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_ComponentInProject_componentAvailablePackagesController : ReadOnlyAbstractGenericRelationshipProperty, HiddenEBProtocol {

  //····················································································································
  //    Undo manager
  //····················································································································

  private weak var mUndoManager : UndoManager? = nil // SHOULD BE WEAK
  var undoManager : UndoManager? { return self.mUndoManager }

  //····················································································································
  // Model
  //····················································································································

  private weak var mModel : ReadWriteArrayOf_DevicePackageInProject? = nil // SHOULD BE WEAK

  //····················································································································

  var objects : EBReferenceArray <DevicePackageInProject> {
    if let objects = self.mModel?.propval {
      return objects
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

  var selectedSet : EBReferenceSet <DevicePackageInProject> {
    set {
      self.mPrivateSelectedSet = newValue
    }
    get {
      return self.selectedArray_property.propset
    }
  }

  //····················································································································

  private var mPrivateSelectedSet = EBReferenceSet <DevicePackageInProject> () {
    didSet {
      self.selectedArray_property.observedObjectDidChange ()
      self.mInternalSelectedArrayProperty.setProp (EBReferenceArray (Array (self.mPrivateSelectedSet.values)))
    }
  }

  //····················································································································
  // Selected Array
  //····················································································································

  private let mInternalSelectedArrayProperty = StoredArrayOf_DevicePackageInProject (usedForSignature: false, key: nil)

  //····················································································································

  var selectedArrayDidChange_property : EBObservedObject { return self.mInternalSelectedArrayProperty } // EBGraphicViewControllerProtocol
  var selectedArray_property : ReadOnlyArrayOf_DevicePackageInProject { return self.mInternalSelectedArrayProperty }

  //····················································································································

  var selectedArray : EBReferenceArray <DevicePackageInProject> { return self.selectedArray_property.propval }


  //····················································································································

  var objectCount : Int {
    if let n = self.mModel?.propval.count {
      return n
    }else{
      return 0
    }
  }

  //····················································································································

  final func bind_model (_ inModel : ReadWriteArrayOf_DevicePackageInProject, _ inUndoManager : UndoManager?) {
    self.mModel = inModel
    self.mUndoManager = inUndoManager
    inModel.attachClient (self)
  }

  //····················································································································

  final func unbind_model () {
    self.mModel?.detachClient (self)
    self.selectedSet = EBReferenceSet ()
    self.mModel = nil
    self.mUndoManager = nil
  }

  //····················································································································

  override func notifyModelDidChange () {
    super.notifyModelDidChange ()
    let currentSelectedSet = self.selectedSet
    let objectArray = self.objectArray
    let newSelectedSet = currentSelectedSet.intersection (objectArray.values)
    self.mInternalSelectedArrayProperty.setProp (EBReferenceArray (Array (newSelectedSet.values)))
  }

   //····················································································································

   var objectArray : EBReferenceArray <DevicePackageInProject> {
     if let values = self.mModel?.propval {
       return values
     }else{
       return EBReferenceArray ()
     }
   }

  //····················································································································
  //   SELECTION
  // MARK: -
  //····················································································································

  var selectedIndexesSet : Set <Int> {
    var result = Set <Int> ()
    var idx = 0
    for object in self.objectArray.values {
      if self.selectedArray_property.propset.contains (object) {
        result.insert (idx)
      }
      idx += 1
    }
    return result
  }

  //····················································································································

  func setSelection (_ inObjects : [DevicePackageInProject]) {
    self.selectedSet = EBReferenceSet (inObjects)
  }

  //····················································································································

  func selectedObjectIndexSet () -> NSIndexSet {
    let modelObjects = self.objectArray
    let selectedObjects = self.selectedArray_property.propset
    let indexSet = NSMutableIndexSet ()
    for object in selectedObjects.values {
      if let index = modelObjects.firstIndex (of: object) {
        indexSet.add (index)
      }
    }
    return indexSet
  }

  //····················································································································
  //    select
  //····················································································································

  func select (object inObject : DevicePackageInProject) {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        break
      case .single (let objectArray) :
       let array = EBReferenceArray (objectArray)
       if array.contains (inObject) {
           self.selectedSet = EBReferenceSet (inObject)
        }
      }
    }
  }

  //····················································································································
  //    add
  //····················································································································

   @objc func add (_ sender : Any) {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        break
      case .single (let v) :
        let newObject = DevicePackageInProject (self.undoManager)
        var array = EBReferenceArray (v)
        array.append (newObject)
      //--- New object is the selection
        self.selectedSet = EBReferenceSet ([newObject])
        model.setProp (array)
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  @objc func remove (_ sender : Any) {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        break
      case .single (let model_prop) :
      //------------- Find the object to be selected after selected object removing
      //--- Dictionary of object sorted indexes
        var sortedObjectDictionary = EBReferenceDictionary <DevicePackageInProject, Int> ()
        for (index, object) in model_prop.enumerated () {
          sortedObjectDictionary [object] = index
        }
        var indexArrayOfSelectedObjects = [Int] ()
        for object in self.selectedArray_property.propset.values {
          let index = sortedObjectDictionary [object]
          if let idx = index {
            indexArrayOfSelectedObjects.append (idx)
          }
        }
      //--- Sort
        indexArrayOfSelectedObjects.sort { $0 < $1 }
      //--- Find the first index of a non selected object
        var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
        for index in indexArrayOfSelectedObjects {
          if newSelectionIndex < index {
            break
          }else{
            newSelectionIndex = index + 1
          }
        }
        var newSelectedObject : DevicePackageInProject? = nil
        if (newSelectionIndex >= 0) && (newSelectionIndex < model_prop.count) {
          newSelectedObject = model_prop [newSelectionIndex]
        }
      //----------------------------------------- Remove selected object
      //--- Dictionary of object absolute indexes
        var objectDictionary = EBReferenceDictionary <DevicePackageInProject, Int> ()
        for (index, object) in model_prop.enumerated () {
          objectDictionary [object] = index
        }
      //--- Build selected objects index array
        var selectedObjectIndexArray = [Int] ()
        for object in self.selectedArray_property.propset.values {
          let index = objectDictionary [object]
          if let idx = index {
            selectedObjectIndexArray.append (idx)
          }
        }
      //--- Sort in reverse order
        selectedObjectIndexArray.sort { $1 < $0 }
      //--- Remove objects, in reverse of order of their index
        var newObjectArray = EBReferenceArray (model_prop)
        for index in selectedObjectIndexArray {
          newObjectArray.remove (at: index)
        }
      //----------------------------------------- Set new selection
        var newSelectionSet = EBReferenceSet <DevicePackageInProject> ()
        if let object = newSelectedObject {
          newSelectionSet.insert (object)
        }
        self.selectedSet = newSelectionSet
      //----------------------------------------- Set new object array
        model.setProp (newObjectArray)
      }
    }
  }

  //····················································································································
  // MARK: -
  //  INSPECTOR
  //····················································································································

  private var mInspectorReceivingView : NSView? = nil
  private var mCurrentAttachedView : NSView? = nil
  private var mInspectorDictionary = [ObjectIdentifier : NSView] ()
  private var mInspectorObserver = EBOutletEvent ()

  //····················································································································

  func register (inspectorReceivingView : NSView?) {
    self.mInspectorReceivingView = inspectorReceivingView
    self.updateInspectorViews ()
  }

  //····················································································································

  func register (inspectorView : NSView?, for inEntity : EBGraphicManagedObject.Type) {
    self.mInspectorDictionary [ObjectIdentifier (inEntity)] = inspectorView
    self.updateInspectorViews ()
  }

  //····················································································································

  private func inspectorViewManagerStartsObservingSelection () {
    self.selectedArray_property.addEBObserver (self.mInspectorObserver)
    self.mInspectorObserver.mEventCallBack = { [weak self] in self?.updateInspectorViews () }
  }

  //····················································································································

  private func inspectorViewManagerStopsObservingSelection () {
    self.mInspectorObserver.mEventCallBack = nil
    self.selectedArray_property.removeEBObserver (self.mInspectorObserver)
  }

  //····················································································································

  private func updateInspectorViews () {
    if let inspectorView = self.mInspectorReceivingView {
    //--- Remove current attached view
      self.mCurrentAttachedView?.removeFromSuperview ()
    //--- Add the new attached view
      if self.mViewIsHidden {
        self.mCurrentAttachedView = nil
      }else if self.selectedArray.count == 0 {
        let tf = self.textField ("Empty Selection", inspectorView.frame)
        inspectorView.addSubview (tf)
        self.mCurrentAttachedView = tf
      }else{
        var selectionTypes = Set <ObjectIdentifier> ()
        for object in self.selectedArray.values {
          let T = ObjectIdentifier (type (of: object))
          selectionTypes.insert (T)
        }
        if selectionTypes.count > 1 {
          let tf = self.textField ("Multiple Selection", inspectorView.frame)
          inspectorView.addSubview (tf)
          self.mCurrentAttachedView = tf
        }else if let selectionInspectorView = self.mInspectorDictionary [selectionTypes.first!] {
          selectionInspectorView.autoresizingMask = [.width, .minYMargin]
          selectionInspectorView.frame = inspectorView.frame
          inspectorView.addSubview (selectionInspectorView)
          self.mCurrentAttachedView = selectionInspectorView
        }else{
          let tf = self.textField ("No Inspector for this Selection", inspectorView.frame)
          inspectorView.addSubview (tf)
          self.mCurrentAttachedView = tf
        }
      }
    }
  }

  //····················································································································

  private func textField (_ inString : String, _ inspectorFrame : NSRect) -> NSTextField {
    let textHeight : CGFloat = 30.0
    let r = NSRect (
      x: 0.0,
      y: inspectorFrame.origin.y + (inspectorFrame.size.height - textHeight) / 2.0,
      width: inspectorFrame.size.width,
      height: textHeight
    )
    let tf = NSTextField (frame: r)
    tf.alignment = .center
    tf.isBezeled = false
    tf.isBordered = false
    tf.drawsBackground = false
    tf.isEnabled = true
    tf.isEditable = false
    tf.autoresizingMask = [.width, .minYMargin, .maxYMargin]
    tf.stringValue = inString
    tf.font = NSFont.boldSystemFont (ofSize: NSFont.systemFontSize * 1.25)
    tf.textColor = NSColor.lightGray
    return tf
  }

  //····················································································································

  private var mViewIsHidden = false {
    didSet { self.updateInspectorViews () }
  }

  //····················································································································

  var isHidden : Bool {
    get { return self.mViewIsHidden }
    set { self.mViewIsHidden = newValue }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

