//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mRotation : AnyObject {
  var mRotation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mMirror : AnyObject {
  var mMirror : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mSymbolInstanceName : AnyObject {
  var mSymbolInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mSymbolTypeName : AnyObject {
  var mSymbolTypeName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mDisplayComponentNameOffsetX : AnyObject {
  var mDisplayComponentNameOffsetX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mDisplayComponentNameOffsetY : AnyObject {
  var mDisplayComponentNameOffsetY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mDisplayComponentValue : AnyObject {
  var mDisplayComponentValue : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mDisplayComponentValueOffsetX : AnyObject {
  var mDisplayComponentValueOffsetX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_mDisplayComponentValueOffsetY : AnyObject {
  var mDisplayComponentValueOffsetY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_componentValueProxy : AnyObject {
  var componentValueProxy : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_componentName : AnyObject {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_deviceName : AnyObject {
  var deviceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_symbolInfo : AnyObject {
  var symbolInfo : ComponentSymbolInfo? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_pinPadAssignments : AnyObject {
  var pinPadAssignments : ThreeStringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ComponentSymbolInProject_symbolInSchematic : AnyObject {
  var symbolInSchematic : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ComponentSymbolInProject : SchematicObject,
         ComponentSymbolInProject_mCenterX,
         ComponentSymbolInProject_mCenterY,
         ComponentSymbolInProject_mRotation,
         ComponentSymbolInProject_mMirror,
         ComponentSymbolInProject_mSymbolInstanceName,
         ComponentSymbolInProject_mSymbolTypeName,
         ComponentSymbolInProject_mDisplayComponentNameOffsetX,
         ComponentSymbolInProject_mDisplayComponentNameOffsetY,
         ComponentSymbolInProject_mDisplayComponentValue,
         ComponentSymbolInProject_mDisplayComponentValueOffsetX,
         ComponentSymbolInProject_mDisplayComponentValueOffsetY,
         ComponentSymbolInProject_componentValueProxy,
         ComponentSymbolInProject_componentName,
         ComponentSymbolInProject_deviceName,
         ComponentSymbolInProject_symbolInfo,
         ComponentSymbolInProject_pinPadAssignments,
         ComponentSymbolInProject_objectDisplay,
         ComponentSymbolInProject_selectionDisplay,
         ComponentSymbolInProject_symbolInSchematic {

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  final let mCenterX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterX_toDefaultValue () {
    self.mCenterX = 0
  }

  //····················································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  final let mCenterY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterY_toDefaultValue () {
    self.mCenterY = 0
  }

  //····················································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  final let mRotation_property : EBStoredProperty_QuadrantRotation

  //····················································································································

  final func reset_mRotation_toDefaultValue () {
    self.mRotation = QuadrantRotation.rotation0
  }

  //····················································································································

  final var mRotation : QuadrantRotation {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mMirror
  //····················································································································

  final let mMirror_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mMirror_toDefaultValue () {
    self.mMirror = false
  }

  //····················································································································

  final var mMirror : Bool {
    get { return self.mMirror_property.propval }
    set { self.mMirror_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolInstanceName
  //····················································································································

  final let mSymbolInstanceName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSymbolInstanceName_toDefaultValue () {
    self.mSymbolInstanceName = ""
  }

  //····················································································································

  final var mSymbolInstanceName : String {
    get { return self.mSymbolInstanceName_property.propval }
    set { self.mSymbolInstanceName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolTypeName
  //····················································································································

  final let mSymbolTypeName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSymbolTypeName_toDefaultValue () {
    self.mSymbolTypeName = ""
  }

  //····················································································································

  final var mSymbolTypeName : String {
    get { return self.mSymbolTypeName_property.propval }
    set { self.mSymbolTypeName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentNameOffsetX
  //····················································································································

  final let mDisplayComponentNameOffsetX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDisplayComponentNameOffsetX_toDefaultValue () {
    self.mDisplayComponentNameOffsetX = 0
  }

  //····················································································································

  final var mDisplayComponentNameOffsetX : Int {
    get { return self.mDisplayComponentNameOffsetX_property.propval }
    set { self.mDisplayComponentNameOffsetX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentNameOffsetY
  //····················································································································

  final let mDisplayComponentNameOffsetY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDisplayComponentNameOffsetY_toDefaultValue () {
    self.mDisplayComponentNameOffsetY = 457200
  }

  //····················································································································

  final var mDisplayComponentNameOffsetY : Int {
    get { return self.mDisplayComponentNameOffsetY_property.propval }
    set { self.mDisplayComponentNameOffsetY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentValue
  //····················································································································

  final let mDisplayComponentValue_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mDisplayComponentValue_toDefaultValue () {
    self.mDisplayComponentValue = true
  }

  //····················································································································

  final var mDisplayComponentValue : Bool {
    get { return self.mDisplayComponentValue_property.propval }
    set { self.mDisplayComponentValue_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentValueOffsetX
  //····················································································································

  final let mDisplayComponentValueOffsetX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDisplayComponentValueOffsetX_toDefaultValue () {
    self.mDisplayComponentValueOffsetX = 0
  }

  //····················································································································

  final var mDisplayComponentValueOffsetX : Int {
    get { return self.mDisplayComponentValueOffsetX_property.propval }
    set { self.mDisplayComponentValueOffsetX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDisplayComponentValueOffsetY
  //····················································································································

  final let mDisplayComponentValueOffsetY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDisplayComponentValueOffsetY_toDefaultValue () {
    self.mDisplayComponentValueOffsetY = -457200
  }

  //····················································································································

  final var mDisplayComponentValueOffsetY : Int {
    get { return self.mDisplayComponentValueOffsetY_property.propval }
    set { self.mDisplayComponentValueOffsetY_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPoints
  //····················································································································

  final let mPoints_property = StoredArrayOf_PointInSchematic (usedForSignature: false, key: "mPoints")

  //····················································································································

  //····················································································································

  final var mPoints : EBReferenceArray <PointInSchematic> {
    get { return self.mPoints_property.propval }
    set { self.mPoints_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic proxy property: componentValueProxy
  //····················································································································

  final let componentValueProxy_property = EBComputedProperty_String ()

  //····················································································································

  var componentValueProxy : String? {
    get {
      switch self.componentValueProxy_property.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.componentValueProxy_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   To one property: mComponent
  //····················································································································

  final let mComponent_property = StoredObject_ComponentInProject (usedForSignature: false, strongRef: false, key: "mComponent")

  //····················································································································

  final var mComponent : ComponentInProject? {
    get {
      return self.mComponent_property.propval
    }
    set {
      if self.mComponent_property.propval !== newValue {
        if self.mComponent_property.propval != nil {
          self.mComponent_property.setProp (nil)
        }
        if newValue != nil {
          self.mComponent_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mComponent_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: componentName
  //····················································································································

  final let componentName_property = EBTransientProperty_String ()

  //····················································································································

  final var componentName : String? {
    switch self.componentName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  final let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  final var deviceName : String? {
    switch self.deviceName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolInfo
  //····················································································································

  final let symbolInfo_property = EBTransientProperty_ComponentSymbolInfo ()

  //····················································································································

  final var symbolInfo : ComponentSymbolInfo? {
    switch self.symbolInfo_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolInSchematic
  //····················································································································

  final let symbolInSchematic_property = EBTransientProperty_Bool ()

  //····················································································································

  final var symbolInSchematic : Bool? {
    switch self.symbolInSchematic_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterX")
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterY")
    self.mRotation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0, undoManager: inUndoManager, key: "mRotation")
    self.mMirror_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mMirror")
    self.mSymbolInstanceName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSymbolInstanceName")
    self.mSymbolTypeName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSymbolTypeName")
    self.mDisplayComponentNameOffsetX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mDisplayComponentNameOffsetX")
    self.mDisplayComponentNameOffsetY_property = EBStoredProperty_Int (defaultValue: 457200, undoManager: inUndoManager, key: "mDisplayComponentNameOffsetY")
    self.mDisplayComponentValue_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mDisplayComponentValue")
    self.mDisplayComponentValueOffsetX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mDisplayComponentValueOffsetX")
    self.mDisplayComponentValueOffsetY_property = EBStoredProperty_Int (defaultValue: -457200, undoManager: inUndoManager, key: "mDisplayComponentValueOffsetY")
    super.init (inUndoManager)
    self.mComponent_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mComponent_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserver (self.mComponent_none)
//    gInitSemaphore.wait ()
  //--- To many property: mPoints (has opposite relationship)
    self.mPoints_property.undoManager = inUndoManager
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbol_property.setProp (me) } },
      resetter: { inObject in inObject.mSymbol_property.setProp (nil) }
    )
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mReadModelFunction = { [weak self] in
      if let object = self?.mComponent_property {
        switch object.mComponentValue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentValueProxy_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mComponent?.mComponentValue = inValue
    }
    self.mComponent_property.mComponentValue_property.addEBObserver (self.componentValueProxy_property)
  //--- To one property: mComponent (has opposite to many relationship: mSymbols)
    self.mComponent_property.undoManager = inUndoManager
    self.mComponent_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbols_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mSymbols_property.remove (me) } }
    )
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponent_property.componentName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentSymbolInProject_componentName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.componentName_property.addEBObserver (self.componentName_property)
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponent_property.deviceName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentSymbolInProject_deviceName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.deviceName_property.addEBObserver (self.deviceName_property)
  //--- Atomic property: symbolInfo
    self.symbolInfo_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_pinNameColorForSchematic_property.selection
        let s1 = preferences_pinNameFontForSchematic_property.selection
        let s2 = preferences_pinNumberColorForSchematic_property.selection
        let s3 = preferences_pinNumberFontForSchematic_property.selection
        let s4 = unwSelf.mRotation_property.selection
        let s5 = unwSelf.mMirror_property.selection
        let s6 = unwSelf.componentName_property.selection
        let s7 = unwSelf.mComponent_property.mComponentValue_property.selection
        let s8 = unwSelf.mComponent_property.deviceSymbolDictionary_property.selection
        let s9 = unwSelf.mSymbolInstanceName_property.selection
        let s10 = unwSelf.mSymbolTypeName_property.selection
        let s11 = unwSelf.mCenterX_property.selection
        let s12 = unwSelf.mCenterY_property.selection
        let s13 = unwSelf.mPoints_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13)) :
          return .single (transient_ComponentSymbolInProject_symbolInfo (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_pinNameColorForSchematic_property.addEBObserver (self.symbolInfo_property)
    preferences_pinNameFontForSchematic_property.addEBObserver (self.symbolInfo_property)
    preferences_pinNumberColorForSchematic_property.addEBObserver (self.symbolInfo_property)
    preferences_pinNumberFontForSchematic_property.addEBObserver (self.symbolInfo_property)
    self.mRotation_property.addEBObserver (self.symbolInfo_property)
    self.mMirror_property.addEBObserver (self.symbolInfo_property)
    self.componentName_property.addEBObserver (self.symbolInfo_property)
    self.mComponent_property.mComponentValue_property.addEBObserver (self.symbolInfo_property)
    self.mComponent_property.deviceSymbolDictionary_property.addEBObserver (self.symbolInfo_property)
    self.mSymbolInstanceName_property.addEBObserver (self.symbolInfo_property)
    self.mSymbolTypeName_property.addEBObserver (self.symbolInfo_property)
    self.mCenterX_property.addEBObserver (self.symbolInfo_property)
    self.mCenterY_property.addEBObserver (self.symbolInfo_property)
    self.mPoints_property.addEBObserverOf_symbolNameNetName (self.symbolInfo_property)
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponent_property.pinPadAssignments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentSymbolInProject_pinPadAssignments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.pinPadAssignments_property.addEBObserver (self.pinPadAssignments_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_pinNameFont_property.selection
        let s1 = preferences_componentNameColorForSchematic_property.selection
        let s2 = preferences_componentNameFontForSchematic_property.selection
        let s3 = preferences_componentValueColorForSchematic_property.selection
        let s4 = preferences_componentValueFontForSchematic_property.selection
        let s5 = preferences_symbolColorForSchematic_property.selection
        let s6 = unwSelf.mDisplayComponentNameOffsetX_property.selection
        let s7 = unwSelf.mDisplayComponentNameOffsetY_property.selection
        let s8 = unwSelf.mDisplayComponentValue_property.selection
        let s9 = unwSelf.mDisplayComponentValueOffsetX_property.selection
        let s10 = unwSelf.mDisplayComponentValueOffsetY_property.selection
        let s11 = unwSelf.symbolInfo_property.selection
        let s12 = unwSelf.mSymbolInstanceName_property.selection
        let s13 = unwSelf.mSymbolTypeName_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11),
              .single (let v12),
              .single (let v13)) :
          return .single (transient_ComponentSymbolInProject_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_pinNameFont_property.addEBObserver (self.objectDisplay_property)
    preferences_componentNameColorForSchematic_property.addEBObserver (self.objectDisplay_property)
    preferences_componentNameFontForSchematic_property.addEBObserver (self.objectDisplay_property)
    preferences_componentValueColorForSchematic_property.addEBObserver (self.objectDisplay_property)
    preferences_componentValueFontForSchematic_property.addEBObserver (self.objectDisplay_property)
    preferences_symbolColorForSchematic_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetX_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetY_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValue_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetX_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetY_property.addEBObserver (self.objectDisplay_property)
    self.symbolInfo_property.addEBObserver (self.objectDisplay_property)
    self.mSymbolInstanceName_property.addEBObserver (self.objectDisplay_property)
    self.mSymbolTypeName_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_pinNameFont_property.selection
        let s1 = preferences_schematicBackColor_property.selection
        let s2 = unwSelf.mDisplayComponentNameOffsetX_property.selection
        let s3 = unwSelf.mDisplayComponentNameOffsetY_property.selection
        let s4 = unwSelf.mDisplayComponentValue_property.selection
        let s5 = unwSelf.mDisplayComponentValueOffsetX_property.selection
        let s6 = unwSelf.mDisplayComponentValueOffsetY_property.selection
        let s7 = unwSelf.symbolInfo_property.selection
        let s8 = unwSelf.mRotation_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_ComponentSymbolInProject_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_pinNameFont_property.addEBObserver (self.selectionDisplay_property)
    preferences_schematicBackColor_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetX_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetY_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValue_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetX_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetY_property.addEBObserver (self.selectionDisplay_property)
    self.symbolInfo_property.addEBObserver (self.selectionDisplay_property)
    self.mRotation_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: symbolInSchematic
    self.symbolInSchematic_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.isPlacedInSchematic_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ComponentSymbolInProject_symbolInSchematic (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.isPlacedInSchematic_property.addEBObserver (self.symbolInSchematic_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbol_property.setProp (me) } },
      resetter: { inObject in inObject.mSymbol_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

/*  override func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    super.saveIntoDictionary (&ioDictionary)
    //--- Atomic property: mCenterX
      self.mCenterX_property.storeIn (dictionary: &ioDictionary, forKey: "mCenterX")
    //--- Atomic property: mCenterY
      self.mCenterY_property.storeIn (dictionary: &ioDictionary, forKey: "mCenterY")
    //--- Atomic property: mRotation
      self.mRotation_property.storeIn (dictionary: &ioDictionary, forKey: "mRotation")
    //--- Atomic property: mMirror
      self.mMirror_property.storeIn (dictionary: &ioDictionary, forKey: "mMirror")
    //--- Atomic property: mSymbolInstanceName
      self.mSymbolInstanceName_property.storeIn (dictionary: &ioDictionary, forKey: "mSymbolInstanceName")
    //--- Atomic property: mSymbolTypeName
      self.mSymbolTypeName_property.storeIn (dictionary: &ioDictionary, forKey: "mSymbolTypeName")
    //--- Atomic property: mDisplayComponentNameOffsetX
      self.mDisplayComponentNameOffsetX_property.storeIn (dictionary: &ioDictionary, forKey: "mDisplayComponentNameOffsetX")
    //--- Atomic property: mDisplayComponentNameOffsetY
      self.mDisplayComponentNameOffsetY_property.storeIn (dictionary: &ioDictionary, forKey: "mDisplayComponentNameOffsetY")
    //--- Atomic property: mDisplayComponentValue
      self.mDisplayComponentValue_property.storeIn (dictionary: &ioDictionary, forKey: "mDisplayComponentValue")
    //--- Atomic property: mDisplayComponentValueOffsetX
      self.mDisplayComponentValueOffsetX_property.storeIn (dictionary: &ioDictionary, forKey: "mDisplayComponentValueOffsetX")
    //--- Atomic property: mDisplayComponentValueOffsetY
      self.mDisplayComponentValueOffsetY_property.storeIn (dictionary: &ioDictionary, forKey: "mDisplayComponentValueOffsetY")
  //--- To many property: mPoints
    self.store (
      managedObjectArray: self.mPoints_property.propval.values,
      relationshipName: "mPoints",
      intoDictionary: &ioDictionary
    )
  } */

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

/*  override func setUpWithDictionary (_ inDictionary : [String : Any],
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: mPoints
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPoints",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [PointInSchematic]
      self.mPoints_property.setProp (EBReferenceArray (array))
    }
  //--- To one property: mComponent
    do{
      let possibleEntity = readEntityFromDictionary (
        relationshipName: "mComponent",
        dictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? ComponentInProject {
        self.mComponent_property.setProp (entity)
      }
    }
  } */

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

/*  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : [String : Any]) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.readFrom (dictionary: inDictionary, forKey: "mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.readFrom (dictionary: inDictionary, forKey: "mCenterY")
  //--- Atomic property: mRotation
    self.mRotation_property.readFrom (dictionary: inDictionary, forKey: "mRotation")
  //--- Atomic property: mMirror
    self.mMirror_property.readFrom (dictionary: inDictionary, forKey: "mMirror")
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.readFrom (dictionary: inDictionary, forKey: "mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.readFrom (dictionary: inDictionary, forKey: "mSymbolTypeName")
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentNameOffsetX")
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentNameOffsetY")
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentValue")
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentValueOffsetX")
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.readFrom (dictionary: inDictionary, forKey: "mDisplayComponentValueOffsetY")
  } */

  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

/*  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mCenterX\n"
    ioString += "mCenterY\n"
    ioString += "mRotation\n"
    ioString += "mMirror\n"
    ioString += "mSymbolInstanceName\n"
    ioString += "mSymbolTypeName\n"
    ioString += "mDisplayComponentNameOffsetX\n"
    ioString += "mDisplayComponentNameOffsetY\n"
    ioString += "mDisplayComponentValue\n"
    ioString += "mDisplayComponentValueOffsetX\n"
    ioString += "mDisplayComponentValueOffsetY\n"
  //--- To one relationships
    ioString += "mComponent\n"
  //--- To many relationships
    ioString += "mPoints\n"
  } */

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

/*  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mCenterX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCenterY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mMirror.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolInstanceName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolTypeName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentNameOffsetX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentNameOffsetY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentValue.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentValueOffsetX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayComponentValueOffsetY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mComponent {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.mPoints.values, into: &ioData)
  } */

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

/*  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mCenterX"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mCenterX = value
    }
    if let range = inDictionary ["mCenterY"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mCenterY = value
    }
    if let range = inDictionary ["mRotation"], let value = QuadrantRotation.unarchiveFromDataRange (inData, range) {
      self.mRotation = value
    }
    if let range = inDictionary ["mMirror"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mMirror = value
    }
    if let range = inDictionary ["mSymbolInstanceName"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mSymbolInstanceName = value
    }
    if let range = inDictionary ["mSymbolTypeName"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mSymbolTypeName = value
    }
    if let range = inDictionary ["mDisplayComponentNameOffsetX"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mDisplayComponentNameOffsetX = value
    }
    if let range = inDictionary ["mDisplayComponentNameOffsetY"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mDisplayComponentNameOffsetY = value
    }
    if let range = inDictionary ["mDisplayComponentValue"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mDisplayComponentValue = value
    }
    if let range = inDictionary ["mDisplayComponentValueOffsetX"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mDisplayComponentValueOffsetX = value
    }
    if let range = inDictionary ["mDisplayComponentValueOffsetY"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mDisplayComponentValueOffsetY = value
    }
  } */

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

/*  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mComponent"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! ComponentInProject
      self.mComponent = object
    }
  } */

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

/*  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
  //--- To many mPoints
    if let range = inDictionary ["mPoints"], range.length > 0 {
      var relationshipArray = EBReferenceArray <PointInSchematic> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! PointInSchematic)
      }
      self.mPoints = relationshipArray
    }
  } */

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

/*  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: mPoints
    for managedObject in self.mPoints.values {
      ioObjectArray.append (managedObject)
    }
  //--- To one property: mComponent
    if let object = self.mComponent {
      ioObjectArray.append (object)
    }
  } */

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_ComponentSymbolInProject (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_ComponentSymbolInProject (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_ComponentSymbolInProject (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_ComponentSymbolInProject (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_ComponentSymbolInProject (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_ComponentSymbolInProject (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_ComponentSymbolInProject (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_ComponentSymbolInProject (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_ComponentSymbolInProject ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_ComponentSymbolInProject ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_ComponentSymbolInProject ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_ComponentSymbolInProject ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_ComponentSymbolInProject (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_ComponentSymbolInProject (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_ComponentSymbolInProject (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_ComponentSymbolInProject (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_ComponentSymbolInProject (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_ComponentSymbolInProject ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_ComponentSymbolInProject ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

