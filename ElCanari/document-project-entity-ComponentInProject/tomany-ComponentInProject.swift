//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ComponentInProject : ReadOnlyAbstractArrayProperty <ComponentInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ComponentInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <ComponentInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mSlavePadsShouldBeRouted_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRotation_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSide_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDisplayLegend_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mNameIsVisibleInBoard_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mXName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mYName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mNameFontSize_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mNameRotation_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mValueIsVisibleInBoard_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mXValue_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mYValue_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mValueFontSize_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mValueRotation_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mComponentValue_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mNamePrefix_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mNameIndex_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mXUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mYUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_deviceName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_packagePadDictionary_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectedPackageName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_availablePackages_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentIsPlacedInBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentIsPlacedInBoardString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_strokeBezierPath_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_pinPadAssignments_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_hasSlavePads_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_placementInSchematic_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentNameFontName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentValueFontName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentPadDictionary_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_padNetDictionary_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_mPackages_fromElementsOfSet (inAddedSet) // ToMany proxy
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mSlavePadsShouldBeRouted_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRotation_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSide_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDisplayLegend_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mNameIsVisibleInBoard_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mXName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mYName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mNameFontSize_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mNameRotation_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mValueIsVisibleInBoard_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mXValue_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mYValue_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mValueFontSize_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mValueRotation_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mComponentValue_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mNamePrefix_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mNameIndex_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mXUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mYUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_deviceName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_signatureForERCChecking_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_packagePadDictionary_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectedPackageName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_availablePackages_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentIsPlacedInBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentIsPlacedInBoardString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_strokeBezierPath_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_pinPadAssignments_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_hasSlavePads_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_placementInSchematic_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentNameFontName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentValueFontName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentPadDictionary_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_padNetDictionary_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_unplacedSymbols_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_mPackages_toElementsOfSet (inAddedSet) // ToMany proxy
   }
  }

  //····················································································································
  //   Observers of 'mSlavePadsShouldBeRouted' stored property
  //····················································································································

  private final var mObserversOf_mSlavePadsShouldBeRouted = EBWeakEventSet ()

  //····················································································································

  final func toMany_mSlavePadsShouldBeRouted_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mSlavePadsShouldBeRouted.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSlavePadsShouldBeRouted_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mSlavePadsShouldBeRouted_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mSlavePadsShouldBeRouted.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSlavePadsShouldBeRouted_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSlavePadsShouldBeRouted_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mSlavePadsShouldBeRouted.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mSlavePadsShouldBeRouted.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mSlavePadsShouldBeRouted_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mSlavePadsShouldBeRouted.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSlavePadsShouldBeRouted_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mSlavePadsShouldBeRouted.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mSlavePadsShouldBeRouted_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mSlavePadsShouldBeRouted.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func toMany_mX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mX.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mX_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mX.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mX.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mX.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func toMany_mY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mY.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mY_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mY.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mY.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mY.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private final var mObserversOf_mRotation = EBWeakEventSet ()

  //····················································································································

  final func toMany_mRotation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRotation_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mRotation.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mRotation.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mRotation_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mRotation.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRotation_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mRotation.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mRotation_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mRotation.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mSide' stored property
  //····················································································································

  private final var mObserversOf_mSide = EBWeakEventSet ()

  //····················································································································

  final func toMany_mSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSide_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSide_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSide_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mSide.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mSide.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mSide_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mSide.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSide_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mSide.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mSide_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mSide.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayLegend' stored property
  //····················································································································

  private final var mObserversOf_mDisplayLegend = EBWeakEventSet ()

  //····················································································································

  final func toMany_mDisplayLegend_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDisplayLegend.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayLegend_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mDisplayLegend_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDisplayLegend.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayLegend_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayLegend_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mDisplayLegend.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mDisplayLegend.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mDisplayLegend_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDisplayLegend.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayLegend_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mDisplayLegend.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDisplayLegend_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDisplayLegend.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameIsVisibleInBoard' stored property
  //····················································································································

  private final var mObserversOf_mNameIsVisibleInBoard = EBWeakEventSet ()

  //····················································································································

  final func toMany_mNameIsVisibleInBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mNameIsVisibleInBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIsVisibleInBoard_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mNameIsVisibleInBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mNameIsVisibleInBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIsVisibleInBoard_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameIsVisibleInBoard_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mNameIsVisibleInBoard.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mNameIsVisibleInBoard.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mNameIsVisibleInBoard_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mNameIsVisibleInBoard.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameIsVisibleInBoard_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mNameIsVisibleInBoard.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNameIsVisibleInBoard_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mNameIsVisibleInBoard.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private final var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  final func toMany_mXName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mXName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mXName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mXName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mXName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mXName.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mXName_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mXName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mXName.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mXName_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mXName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private final var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  final func toMany_mYName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mYName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mYName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mYName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mYName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mYName.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mYName_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mYName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mYName.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mYName_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mYName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameFontSize' stored property
  //····················································································································

  private final var mObserversOf_mNameFontSize = EBWeakEventSet ()

  //····················································································································

  final func toMany_mNameFontSize_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mNameFontSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameFontSize_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mNameFontSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mNameFontSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameFontSize_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameFontSize_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mNameFontSize.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mNameFontSize.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mNameFontSize_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mNameFontSize.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameFontSize_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mNameFontSize.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNameFontSize_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mNameFontSize.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameRotation' stored property
  //····················································································································

  private final var mObserversOf_mNameRotation = EBWeakEventSet ()

  //····················································································································

  final func toMany_mNameRotation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mNameRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameRotation_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mNameRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mNameRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameRotation_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameRotation_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mNameRotation.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mNameRotation.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mNameRotation_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mNameRotation.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameRotation_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mNameRotation.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNameRotation_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mNameRotation.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mValueIsVisibleInBoard' stored property
  //····················································································································

  private final var mObserversOf_mValueIsVisibleInBoard = EBWeakEventSet ()

  //····················································································································

  final func toMany_mValueIsVisibleInBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mValueIsVisibleInBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueIsVisibleInBoard_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mValueIsVisibleInBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mValueIsVisibleInBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueIsVisibleInBoard_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mValueIsVisibleInBoard_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mValueIsVisibleInBoard.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mValueIsVisibleInBoard.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mValueIsVisibleInBoard_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mValueIsVisibleInBoard.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mValueIsVisibleInBoard_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mValueIsVisibleInBoard.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mValueIsVisibleInBoard_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mValueIsVisibleInBoard.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mXValue' stored property
  //····················································································································

  private final var mObserversOf_mXValue = EBWeakEventSet ()

  //····················································································································

  final func toMany_mXValue_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mXValue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXValue_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mXValue_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mXValue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXValue_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXValue_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mXValue.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mXValue.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mXValue_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mXValue.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXValue_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mXValue.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mXValue_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mXValue.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mYValue' stored property
  //····················································································································

  private final var mObserversOf_mYValue = EBWeakEventSet ()

  //····················································································································

  final func toMany_mYValue_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mYValue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYValue_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mYValue_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mYValue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYValue_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYValue_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mYValue.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mYValue.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mYValue_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mYValue.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYValue_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mYValue.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mYValue_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mYValue.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mValueFontSize' stored property
  //····················································································································

  private final var mObserversOf_mValueFontSize = EBWeakEventSet ()

  //····················································································································

  final func toMany_mValueFontSize_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mValueFontSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueFontSize_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mValueFontSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mValueFontSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueFontSize_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mValueFontSize_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mValueFontSize.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mValueFontSize.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mValueFontSize_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mValueFontSize.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mValueFontSize_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mValueFontSize.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mValueFontSize_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mValueFontSize.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mValueRotation' stored property
  //····················································································································

  private final var mObserversOf_mValueRotation = EBWeakEventSet ()

  //····················································································································

  final func toMany_mValueRotation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mValueRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueRotation_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mValueRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mValueRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueRotation_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mValueRotation_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mValueRotation.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mValueRotation.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mValueRotation_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mValueRotation.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mValueRotation_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mValueRotation.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mValueRotation_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mValueRotation.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mComponentValue' stored property
  //····················································································································

  private final var mObserversOf_mComponentValue = EBWeakEventSet ()

  //····················································································································

  final func toMany_mComponentValue_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mComponentValue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentValue_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mComponentValue_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mComponentValue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentValue_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mComponentValue_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mComponentValue.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mComponentValue.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mComponentValue_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mComponentValue.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComponentValue_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mComponentValue.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mComponentValue_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mComponentValue.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mNamePrefix' stored property
  //····················································································································

  private final var mObserversOf_mNamePrefix = EBWeakEventSet ()

  //····················································································································

  final func toMany_mNamePrefix_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mNamePrefix.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNamePrefix_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mNamePrefix_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mNamePrefix.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNamePrefix_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNamePrefix_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mNamePrefix.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mNamePrefix.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mNamePrefix_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mNamePrefix.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNamePrefix_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mNamePrefix.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNamePrefix_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mNamePrefix.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameIndex' stored property
  //····················································································································

  private final var mObserversOf_mNameIndex = EBWeakEventSet ()

  //····················································································································

  final func toMany_mNameIndex_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mNameIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIndex_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mNameIndex_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mNameIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIndex_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameIndex_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mNameIndex.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mNameIndex.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mNameIndex_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mNameIndex.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameIndex_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mNameIndex.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNameIndex_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mNameIndex.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mXUnit' stored property
  //····················································································································

  private final var mObserversOf_mXUnit = EBWeakEventSet ()

  //····················································································································

  final func toMany_mXUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mXUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXUnit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mXUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mXUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXUnit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXUnit_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mXUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mXUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mXUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mXUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mXUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mXUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mXUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mYUnit' stored property
  //····················································································································

  private final var mObserversOf_mYUnit = EBWeakEventSet ()

  //····················································································································

  final func toMany_mYUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mYUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYUnit_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mYUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mYUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYUnit_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYUnit_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    if !self.mObserversOf_mYUnit.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mYUnit.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mYUnit_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mYUnit.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mYUnit.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mYUnit_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mYUnit.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackages' toMany proxy
  //····················································································································

  private final var mObserversOf_mPackages = EBWeakEventSet ()

  //····················································································································

  final func toMany_mPackages_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mPackages.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackages_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_mPackages_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mPackages.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackages_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackages_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_mPackages.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.mPackages_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_mPackages.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackages_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for (_, entry) in self.mObserversOf_mPackages.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mPackages_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mPackages.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private final var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  final func toMany_deviceName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_deviceName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_deviceName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_deviceName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_deviceName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.deviceName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_deviceName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_deviceName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.deviceName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_deviceName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final func toMany_signatureForERCChecking_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_signatureForERCChecking_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_signatureForERCChecking.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.signatureForERCChecking_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_signatureForERCChecking.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.signatureForERCChecking_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_signatureForERCChecking.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'packagePadDictionary' transient property
  //····················································································································

  private final var mObserversOf_packagePadDictionary = EBWeakEventSet ()

  //····················································································································

  final func toMany_packagePadDictionary_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_packagePadDictionary.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadDictionary_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_packagePadDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_packagePadDictionary.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadDictionary_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_packagePadDictionary_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_packagePadDictionary.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.packagePadDictionary_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_packagePadDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_packagePadDictionary_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_packagePadDictionary.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.packagePadDictionary_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_packagePadDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedPackageName' transient property
  //····················································································································

  private final var mObserversOf_selectedPackageName = EBWeakEventSet ()

  //····················································································································

  final func toMany_selectedPackageName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_selectedPackageName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPackageName_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_selectedPackageName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_selectedPackageName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPackageName_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPackageName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectedPackageName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectedPackageName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_selectedPackageName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPackageName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectedPackageName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectedPackageName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_selectedPackageName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'availablePackages' transient property
  //····················································································································

  private final var mObserversOf_availablePackages = EBWeakEventSet ()

  //····················································································································

  final func toMany_availablePackages_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_availablePackages.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.availablePackages_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_availablePackages_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_availablePackages.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.availablePackages_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_availablePackages_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_availablePackages.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.availablePackages_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_availablePackages.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_availablePackages_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_availablePackages.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.availablePackages_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_availablePackages.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'componentIsPlacedInBoard' transient property
  //····················································································································

  private final var mObserversOf_componentIsPlacedInBoard = EBWeakEventSet ()

  //····················································································································

  final func toMany_componentIsPlacedInBoard_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_componentIsPlacedInBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentIsPlacedInBoard_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_componentIsPlacedInBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_componentIsPlacedInBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentIsPlacedInBoard_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentIsPlacedInBoard_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentIsPlacedInBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentIsPlacedInBoard_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_componentIsPlacedInBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentIsPlacedInBoard_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentIsPlacedInBoard.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentIsPlacedInBoard_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_componentIsPlacedInBoard.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'componentIsPlacedInBoardString' transient property
  //····················································································································

  private final var mObserversOf_componentIsPlacedInBoardString = EBWeakEventSet ()

  //····················································································································

  final func toMany_componentIsPlacedInBoardString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_componentIsPlacedInBoardString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentIsPlacedInBoardString_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_componentIsPlacedInBoardString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_componentIsPlacedInBoardString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentIsPlacedInBoardString_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentIsPlacedInBoardString_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentIsPlacedInBoardString.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentIsPlacedInBoardString_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_componentIsPlacedInBoardString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentIsPlacedInBoardString_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentIsPlacedInBoardString.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentIsPlacedInBoardString_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_componentIsPlacedInBoardString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func toMany_strokeBezierPath_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_strokeBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_strokeBezierPath_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_strokeBezierPath.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.strokeBezierPath_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_strokeBezierPath.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_strokeBezierPath_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_strokeBezierPath.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.strokeBezierPath_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_strokeBezierPath.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  private final var mObserversOf_pinPadAssignments = EBWeakEventSet ()

  //····················································································································

  final func toMany_pinPadAssignments_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_pinPadAssignments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_pinPadAssignments_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_pinPadAssignments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinPadAssignments_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_pinPadAssignments.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.pinPadAssignments_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_pinPadAssignments.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinPadAssignments_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_pinPadAssignments.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.pinPadAssignments_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_pinPadAssignments.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'hasSlavePads' transient property
  //····················································································································

  private final var mObserversOf_hasSlavePads = EBWeakEventSet ()

  //····················································································································

  final func toMany_hasSlavePads_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_hasSlavePads.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasSlavePads_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_hasSlavePads_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_hasSlavePads.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasSlavePads_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_hasSlavePads_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_hasSlavePads.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.hasSlavePads_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_hasSlavePads.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasSlavePads_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_hasSlavePads.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.hasSlavePads_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_hasSlavePads.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'placementInSchematic' transient property
  //····················································································································

  private final var mObserversOf_placementInSchematic = EBWeakEventSet ()

  //····················································································································

  final func toMany_placementInSchematic_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_placementInSchematic.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placementInSchematic_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_placementInSchematic_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_placementInSchematic.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placementInSchematic_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_placementInSchematic_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_placementInSchematic.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.placementInSchematic_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_placementInSchematic.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_placementInSchematic_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_placementInSchematic.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.placementInSchematic_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_placementInSchematic.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private final var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  final func toMany_deviceSymbolDictionary_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_deviceSymbolDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_deviceSymbolDictionary.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.deviceSymbolDictionary_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_deviceSymbolDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_deviceSymbolDictionary.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.deviceSymbolDictionary_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_deviceSymbolDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'componentNameFontName' transient property
  //····················································································································

  private final var mObserversOf_componentNameFontName = EBWeakEventSet ()

  //····················································································································

  final func toMany_componentNameFontName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_componentNameFontName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentNameFontName_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_componentNameFontName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_componentNameFontName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentNameFontName_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentNameFontName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentNameFontName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentNameFontName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_componentNameFontName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentNameFontName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentNameFontName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentNameFontName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_componentNameFontName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'componentValueFontName' transient property
  //····················································································································

  private final var mObserversOf_componentValueFontName = EBWeakEventSet ()

  //····················································································································

  final func toMany_componentValueFontName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_componentValueFontName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValueFontName_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_componentValueFontName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_componentValueFontName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValueFontName_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentValueFontName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentValueFontName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentValueFontName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_componentValueFontName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentValueFontName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentValueFontName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentValueFontName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_componentValueFontName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'componentPadDictionary' transient property
  //····················································································································

  private final var mObserversOf_componentPadDictionary = EBWeakEventSet ()

  //····················································································································

  final func toMany_componentPadDictionary_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_componentPadDictionary.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentPadDictionary_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_componentPadDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_componentPadDictionary.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentPadDictionary_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentPadDictionary_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentPadDictionary.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentPadDictionary_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_componentPadDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentPadDictionary_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentPadDictionary.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentPadDictionary_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_componentPadDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'padNetDictionary' transient property
  //····················································································································

  private final var mObserversOf_padNetDictionary = EBWeakEventSet ()

  //····················································································································

  final func toMany_padNetDictionary_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_padNetDictionary.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNetDictionary_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_padNetDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_padNetDictionary.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNetDictionary_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNetDictionary_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_padNetDictionary.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.padNetDictionary_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_padNetDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNetDictionary_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_padNetDictionary.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.padNetDictionary_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_padNetDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private final var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  final func toMany_componentName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_componentName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_componentName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_componentName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_componentName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_componentName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private final var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final func toMany_unplacedSymbols_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_unplacedSymbols_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_unplacedSymbols.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.unplacedSymbols_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_unplacedSymbols.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_unplacedSymbols.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.unplacedSymbols_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_unplacedSymbols.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.startsToBeObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.stopsBeingObserved (by: inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ComponentInProject, _ right : ComponentInProject) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_ComponentInProject? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ComponentInProject,
                        sortCallback inSortCallBack : Optional < (_ left : ComponentInProject, _ right : ComponentInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <ComponentInProject>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ComponentInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ComponentInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_ComponentInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <ComponentInProject> ()
      for superObject in newModelArray.values {
        if let object = superObject as? ComponentInProject {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ComponentInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ComponentInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <ComponentInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_ComponentInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ComponentInProject : ReadWriteArrayOf_ComponentInProject, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <ComponentInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! ComponentInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <ComponentInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! ComponentInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : ComponentInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <ComponentInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ComponentInProject>,
                                 addedSet inAddedSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [ComponentInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ComponentInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <ComponentInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : ComponentInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : ComponentInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_ComponentInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

