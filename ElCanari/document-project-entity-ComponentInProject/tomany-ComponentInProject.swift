//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ComponentInProject : EBReadOnlyAbstractArrayProperty <ComponentInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ComponentInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <ComponentInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mSlavePadsShouldBeRouted { // Stored property
        managedObject.mSlavePadsShouldBeRouted_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSide { // Stored property
        managedObject.mSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayLegend { // Stored property
        managedObject.mDisplayLegend_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameIsVisibleInBoard { // Stored property
        managedObject.mNameIsVisibleInBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXName { // Stored property
        managedObject.mXName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYName { // Stored property
        managedObject.mYName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameFontSize { // Stored property
        managedObject.mNameFontSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameRotation { // Stored property
        managedObject.mNameRotation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mValueIsVisibleInBoard { // Stored property
        managedObject.mValueIsVisibleInBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXValue { // Stored property
        managedObject.mXValue_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYValue { // Stored property
        managedObject.mYValue_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mValueFontSize { // Stored property
        managedObject.mValueFontSize_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mValueRotation { // Stored property
        managedObject.mValueRotation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponentValue { // Stored property
        managedObject.mComponentValue_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNamePrefix { // Stored property
        managedObject.mNamePrefix_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameIndex { // Stored property
        managedObject.mNameIndex_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXUnit { // Stored property
        managedObject.mXUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYUnit { // Stored property
        managedObject.mYUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXNameUnit { // Stored property
        managedObject.mXNameUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYNameUnit { // Stored property
        managedObject.mYNameUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXValueUnit { // Stored property
        managedObject.mXValueUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYValueUnit { // Stored property
        managedObject.mYValueUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_deviceName { // Transient property
        managedObject.deviceName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_packagePadDictionary { // Transient property
        managedObject.packagePadDictionary_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectedPackageName { // Transient property
        managedObject.selectedPackageName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_availablePackages { // Transient property
        managedObject.availablePackages_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentIsPlacedInBoard { // Transient property
        managedObject.componentIsPlacedInBoard_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentIsPlacedInBoardString { // Transient property
        managedObject.componentIsPlacedInBoardString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_strokeBezierPath { // Transient property
        managedObject.strokeBezierPath_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_pinPadAssignments { // Transient property
        managedObject.pinPadAssignments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_hasSlavePads { // Transient property
        managedObject.hasSlavePads_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_placementInSchematic { // Transient property
        managedObject.placementInSchematic_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_deviceSymbolDictionary { // Transient property
        managedObject.deviceSymbolDictionary_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentNameFontName { // Transient property
        managedObject.componentNameFontName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentValueFontName { // Transient property
        managedObject.componentValueFontName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentPadDictionary { // Transient property
        managedObject.componentPadDictionary_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNetDictionary { // Transient property
        managedObject.padNetDictionary_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentName { // Transient property
        managedObject.componentName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_unplacedSymbols { // Transient property
        managedObject.unplacedSymbols_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPackages { // Tomany proxy
        managedObject.mPackages_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mSlavePadsShouldBeRouted { // Stored property
        managedObject.mSlavePadsShouldBeRouted_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSide { // Stored property
        managedObject.mSide_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayLegend { // Stored property
        managedObject.mDisplayLegend_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameIsVisibleInBoard { // Stored property
        managedObject.mNameIsVisibleInBoard_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXName { // Stored property
        managedObject.mXName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYName { // Stored property
        managedObject.mYName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameFontSize { // Stored property
        managedObject.mNameFontSize_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameRotation { // Stored property
        managedObject.mNameRotation_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mValueIsVisibleInBoard { // Stored property
        managedObject.mValueIsVisibleInBoard_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXValue { // Stored property
        managedObject.mXValue_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYValue { // Stored property
        managedObject.mYValue_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mValueFontSize { // Stored property
        managedObject.mValueFontSize_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mValueRotation { // Stored property
        managedObject.mValueRotation_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponentValue { // Stored property
        managedObject.mComponentValue_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNamePrefix { // Stored property
        managedObject.mNamePrefix_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNameIndex { // Stored property
        managedObject.mNameIndex_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXUnit { // Stored property
        managedObject.mXUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYUnit { // Stored property
        managedObject.mYUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXNameUnit { // Stored property
        managedObject.mXNameUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYNameUnit { // Stored property
        managedObject.mYNameUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mXValueUnit { // Stored property
        managedObject.mXValueUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mYValueUnit { // Stored property
        managedObject.mYValueUnit_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_deviceName { // Transient property
        managedObject.deviceName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_signatureForERCChecking { // Transient property
        managedObject.signatureForERCChecking_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_packagePadDictionary { // Transient property
        managedObject.packagePadDictionary_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectedPackageName { // Transient property
        managedObject.selectedPackageName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_availablePackages { // Transient property
        managedObject.availablePackages_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentIsPlacedInBoard { // Transient property
        managedObject.componentIsPlacedInBoard_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentIsPlacedInBoardString { // Transient property
        managedObject.componentIsPlacedInBoardString_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_strokeBezierPath { // Transient property
        managedObject.strokeBezierPath_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_pinPadAssignments { // Transient property
        managedObject.pinPadAssignments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_hasSlavePads { // Transient property
        managedObject.hasSlavePads_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_placementInSchematic { // Transient property
        managedObject.placementInSchematic_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_deviceSymbolDictionary { // Transient property
        managedObject.deviceSymbolDictionary_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentNameFontName { // Transient property
        managedObject.componentNameFontName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentValueFontName { // Transient property
        managedObject.componentValueFontName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentPadDictionary { // Transient property
        managedObject.componentPadDictionary_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_padNetDictionary { // Transient property
        managedObject.padNetDictionary_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentName { // Transient property
        managedObject.componentName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_unplacedSymbols { // Transient property
        managedObject.unplacedSymbols_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPackages { // Tomany proxy
        managedObject.mPackages_property.startsBeingObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSlavePadsShouldBeRouted' stored property
  //····················································································································

  private final var mObserversOf_mSlavePadsShouldBeRouted : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mSlavePadsShouldBeRouted_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSlavePadsShouldBeRouted {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mSlavePadsShouldBeRouted_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mSlavePadsShouldBeRouted = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mSlavePadsShouldBeRouted_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mSlavePadsShouldBeRouted?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mX_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mX {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mX = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mY_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mY {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mY = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private final var mObserversOf_mRotation : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mRotation_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mRotation {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mRotation_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mRotation = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mRotation?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mSide' stored property
  //····················································································································

  private final var mObserversOf_mSide : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mSide_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSide {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mSide_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mSide = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mDisplayLegend' stored property
  //····················································································································

  private final var mObserversOf_mDisplayLegend : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mDisplayLegend_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mDisplayLegend {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mDisplayLegend_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mDisplayLegend = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mDisplayLegend_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mDisplayLegend?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNameIsVisibleInBoard' stored property
  //····················································································································

  private final var mObserversOf_mNameIsVisibleInBoard : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mNameIsVisibleInBoard_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mNameIsVisibleInBoard {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNameIsVisibleInBoard_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mNameIsVisibleInBoard = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNameIsVisibleInBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNameIsVisibleInBoard?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private final var mObserversOf_mXName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mXName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mXName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mXName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mXName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mXName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mXName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private final var mObserversOf_mYName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mYName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mYName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mYName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mYName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mYName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mYName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNameFontSize' stored property
  //····················································································································

  private final var mObserversOf_mNameFontSize : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mNameFontSize_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mNameFontSize {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNameFontSize_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mNameFontSize = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNameFontSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNameFontSize?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNameRotation' stored property
  //····················································································································

  private final var mObserversOf_mNameRotation : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mNameRotation_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mNameRotation {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNameRotation_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mNameRotation = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNameRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNameRotation?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mValueIsVisibleInBoard' stored property
  //····················································································································

  private final var mObserversOf_mValueIsVisibleInBoard : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mValueIsVisibleInBoard_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mValueIsVisibleInBoard {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mValueIsVisibleInBoard_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mValueIsVisibleInBoard = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mValueIsVisibleInBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mValueIsVisibleInBoard?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mXValue' stored property
  //····················································································································

  private final var mObserversOf_mXValue : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mXValue_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mXValue {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mXValue_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mXValue = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mXValue_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mXValue?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mYValue' stored property
  //····················································································································

  private final var mObserversOf_mYValue : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mYValue_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mYValue {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mYValue_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mYValue = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mYValue_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mYValue?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mValueFontSize' stored property
  //····················································································································

  private final var mObserversOf_mValueFontSize : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mValueFontSize_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mValueFontSize {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mValueFontSize_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mValueFontSize = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mValueFontSize_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mValueFontSize?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mValueRotation' stored property
  //····················································································································

  private final var mObserversOf_mValueRotation : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mValueRotation_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mValueRotation {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mValueRotation_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mValueRotation = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mValueRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mValueRotation?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mComponentValue' stored property
  //····················································································································

  private final var mObserversOf_mComponentValue : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mComponentValue_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mComponentValue {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mComponentValue_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mComponentValue = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mComponentValue_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mComponentValue?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNamePrefix' stored property
  //····················································································································

  private final var mObserversOf_mNamePrefix : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mNamePrefix_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mNamePrefix {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNamePrefix_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mNamePrefix = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNamePrefix_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNamePrefix?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNameIndex' stored property
  //····················································································································

  private final var mObserversOf_mNameIndex : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mNameIndex_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mNameIndex {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNameIndex_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mNameIndex = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNameIndex_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNameIndex?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mXUnit' stored property
  //····················································································································

  private final var mObserversOf_mXUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mXUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mXUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mXUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mXUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mXUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mXUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mYUnit' stored property
  //····················································································································

  private final var mObserversOf_mYUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mYUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mYUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mYUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mYUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mYUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mYUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mXNameUnit' stored property
  //····················································································································

  private final var mObserversOf_mXNameUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mXNameUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mXNameUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mXNameUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mXNameUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mXNameUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mXNameUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mYNameUnit' stored property
  //····················································································································

  private final var mObserversOf_mYNameUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mYNameUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mYNameUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mYNameUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mYNameUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mYNameUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mYNameUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mXValueUnit' stored property
  //····················································································································

  private final var mObserversOf_mXValueUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mXValueUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mXValueUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mXValueUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mXValueUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mXValueUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mXValueUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mYValueUnit' stored property
  //····················································································································

  private final var mObserversOf_mYValueUnit : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mYValueUnit_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mYValueUnit {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mYValueUnit_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mYValueUnit = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mYValueUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mYValueUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mPackages' toMany proxy
  //····················································································································

  private final var mObserversOf_mPackages : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mPackages_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPackages {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mPackages_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mPackages = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPackages_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPackages?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private final var mObserversOf_deviceName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_deviceName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_deviceName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.deviceName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_deviceName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_deviceName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_deviceName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking : EBObservedObserver? = nil

  //····················································································································

  final func toMany_signatureForERCChecking_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_signatureForERCChecking {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.signatureForERCChecking_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_signatureForERCChecking = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_signatureForERCChecking_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_signatureForERCChecking?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'packagePadDictionary' transient property
  //····················································································································

  private final var mObserversOf_packagePadDictionary : EBObservedObserver? = nil

  //····················································································································

  final func toMany_packagePadDictionary_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_packagePadDictionary {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.packagePadDictionary_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_packagePadDictionary = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_packagePadDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_packagePadDictionary?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectedPackageName' transient property
  //····················································································································

  private final var mObserversOf_selectedPackageName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_selectedPackageName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_selectedPackageName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectedPackageName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_selectedPackageName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectedPackageName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectedPackageName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'availablePackages' transient property
  //····················································································································

  private final var mObserversOf_availablePackages : EBObservedObserver? = nil

  //····················································································································

  final func toMany_availablePackages_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_availablePackages {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.availablePackages_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_availablePackages = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_availablePackages_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_availablePackages?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues : EBObservedObserver? = nil

  //····················································································································

  final func toMany_issues_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'componentIsPlacedInBoard' transient property
  //····················································································································

  private final var mObserversOf_componentIsPlacedInBoard : EBObservedObserver? = nil

  //····················································································································

  final func toMany_componentIsPlacedInBoard_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_componentIsPlacedInBoard {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.componentIsPlacedInBoard_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_componentIsPlacedInBoard = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_componentIsPlacedInBoard_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_componentIsPlacedInBoard?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'componentIsPlacedInBoardString' transient property
  //····················································································································

  private final var mObserversOf_componentIsPlacedInBoardString : EBObservedObserver? = nil

  //····················································································································

  final func toMany_componentIsPlacedInBoardString_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_componentIsPlacedInBoardString {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.componentIsPlacedInBoardString_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_componentIsPlacedInBoardString = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_componentIsPlacedInBoardString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_componentIsPlacedInBoardString?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var mObserversOf_strokeBezierPath : EBObservedObserver? = nil

  //····················································································································

  final func toMany_strokeBezierPath_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_strokeBezierPath {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.strokeBezierPath_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_strokeBezierPath = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_strokeBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_strokeBezierPath?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  private final var mObserversOf_pinPadAssignments : EBObservedObserver? = nil

  //····················································································································

  final func toMany_pinPadAssignments_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_pinPadAssignments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.pinPadAssignments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_pinPadAssignments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_pinPadAssignments_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_pinPadAssignments?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'hasSlavePads' transient property
  //····················································································································

  private final var mObserversOf_hasSlavePads : EBObservedObserver? = nil

  //····················································································································

  final func toMany_hasSlavePads_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_hasSlavePads {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.hasSlavePads_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_hasSlavePads = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_hasSlavePads_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_hasSlavePads?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'placementInSchematic' transient property
  //····················································································································

  private final var mObserversOf_placementInSchematic : EBObservedObserver? = nil

  //····················································································································

  final func toMany_placementInSchematic_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_placementInSchematic {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.placementInSchematic_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_placementInSchematic = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_placementInSchematic_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_placementInSchematic?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private final var mObserversOf_deviceSymbolDictionary : EBObservedObserver? = nil

  //····················································································································

  final func toMany_deviceSymbolDictionary_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_deviceSymbolDictionary {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.deviceSymbolDictionary_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_deviceSymbolDictionary = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_deviceSymbolDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_deviceSymbolDictionary?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'componentNameFontName' transient property
  //····················································································································

  private final var mObserversOf_componentNameFontName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_componentNameFontName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_componentNameFontName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.componentNameFontName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_componentNameFontName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_componentNameFontName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_componentNameFontName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'componentValueFontName' transient property
  //····················································································································

  private final var mObserversOf_componentValueFontName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_componentValueFontName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_componentValueFontName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.componentValueFontName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_componentValueFontName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_componentValueFontName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_componentValueFontName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'componentPadDictionary' transient property
  //····················································································································

  private final var mObserversOf_componentPadDictionary : EBObservedObserver? = nil

  //····················································································································

  final func toMany_componentPadDictionary_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_componentPadDictionary {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.componentPadDictionary_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_componentPadDictionary = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_componentPadDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_componentPadDictionary?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'padNetDictionary' transient property
  //····················································································································

  private final var mObserversOf_padNetDictionary : EBObservedObserver? = nil

  //····················································································································

  final func toMany_padNetDictionary_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_padNetDictionary {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.padNetDictionary_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_padNetDictionary = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_padNetDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_padNetDictionary?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private final var mObserversOf_componentName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_componentName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_componentName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.componentName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_componentName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_componentName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_componentName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private final var mObserversOf_unplacedSymbols : EBObservedObserver? = nil

  //····················································································································

  final func toMany_unplacedSymbols_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_unplacedSymbols {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.unplacedSymbols_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_unplacedSymbols = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_unplacedSymbols_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_unplacedSymbols?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ComponentInProject, _ right : ComponentInProject) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
//  private let mModelEvent = EBModelEvent ()

  //····················································································································

/*  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  } */

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_ComponentInProject? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ComponentInProject,
                        sortCallback inSortCallBack : Optional < (_ left : ComponentInProject, _ right : ComponentInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

/*  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  } */

  //····················································································································

  override func notifyModelDidChange () {
    if !self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = true
      DispatchQueue.main.async {
        self.computeModelArray ()
      }
    }
//    self.mModelArrayShouldBeComputed = true
//    self.mModelEvent.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <ComponentInProject>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ComponentInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.propval.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ComponentInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_ComponentInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : EBReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
//  private let mModelEvent = EBModelEvent ()

  //····················································································································

/*  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  } */

  //····················································································································

  func setDataProvider (_ inProvider : EBReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    if !self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = true
      DispatchQueue.main.async {
        self.computeModelArray ()
      }
    }
//    self.mModelArrayShouldBeComputed = true
//    self.mModelEvent.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <ComponentInProject> ()
      for superObject in newModelArray.values {
        if let object = superObject as? ComponentInProject {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ComponentInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ComponentInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <ComponentInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_ComponentInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ComponentInProject : ReadWriteArrayOf_ComponentInProject, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <ComponentInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! ComponentInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <ComponentInProject> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! ComponentInProject)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : ComponentInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <ComponentInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ComponentInProject>,
                                 addedSet inAddedSet : EBReferenceSet <ComponentInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [ComponentInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ComponentInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <ComponentInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : ComponentInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : ComponentInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_ComponentInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————

