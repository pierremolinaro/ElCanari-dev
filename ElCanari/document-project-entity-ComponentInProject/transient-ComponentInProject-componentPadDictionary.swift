//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func transient_ComponentInProject_componentPadDictionary (
       _ self_mX : Int,                                              
       _ self_mY : Int,                                              
       _ self_mRotation : Int,                                       
       _ self_mSide : ComponentSide,                                 
       _ self_packagePadDictionary : PackageMasterPadDictionary
) -> ComponentPadDescriptorDictionary {
//--- START OF USER ZONE 2
        var af = AffineTransform ()
        af.translate (x: canariUnitToCocoa (self_mX), y: canariUnitToCocoa (self_mY))
        af.rotate (byDegrees: CGFloat (self_mRotation) / 1000.0)
        if self_mSide == .back {
          af.scale (x: -1.0, y: 1.0)
        }
        let center = self_packagePadDictionary.padsRect.center.cocoaPoint
        af.translate (x: -center.x, y: -center.y)
        var result = ComponentPadDescriptorDictionary ()
        for (padName, descriptor) in self_packagePadDictionary {
          let padSide : ConnectorSide
          switch descriptor.style {
          case .traversing :
            padSide = .traversing
          case .surface :
            switch self_mSide {
            case .back :
              padSide = .back
            case .front :
              padSide = .front
            }
          }
          let p = PadLocationAndSide (
            location: af.transform (descriptor.center.cocoaPoint),
            side: padSide
          )
          var pads = [p]
          for slavePad in descriptor.slavePads {
            let padSide : ConnectorSide
            switch slavePad.style {
            case .traversing :
              padSide = .traversing
            case .oppositeSide :
              switch self_mSide {
              case .back :
                padSide = .front
              case .front :
                padSide = .back
              }
            case .componentSide :
              switch self_mSide {
              case .back :
                padSide = .back
              case .front :
                padSide = .front
              }
            }
            let p = PadLocationAndSide (
              location: af.transform (slavePad.center.cocoaPoint),
              side: padSide
            )
            pads.append (p)
          }
          let d = ComponentPadDescriptor (padName: padName, pads: pads)
          result [padName] = d
        }
        return result
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————
