//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    ReadOnlyArrayOf_ComponentSymbolInProject
//--------------------------------------------------------------------------------------------------

class ReadOnlyArrayOf_ComponentSymbolInProject : EBReadOnlyAbstractArrayProperty <ComponentSymbolInProject> {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ComponentSymbolInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <ComponentSymbolInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mCenterX { // Stored property
        managedObject.mCenterX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterY { // Stored property
        managedObject.mCenterY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mMirror { // Stored property
        managedObject.mMirror_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbolInstanceName { // Stored property
        managedObject.mSymbolInstanceName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbolTypeName { // Stored property
        managedObject.mSymbolTypeName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentNameOffsetX { // Stored property
        managedObject.mDisplayComponentNameOffsetX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentNameOffsetY { // Stored property
        managedObject.mDisplayComponentNameOffsetY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentValue { // Stored property
        managedObject.mDisplayComponentValue_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentValueOffsetX { // Stored property
        managedObject.mDisplayComponentValueOffsetX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentValueOffsetY { // Stored property
        managedObject.mDisplayComponentValueOffsetY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentName { // Transient property
        managedObject.componentName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_deviceName { // Transient property
        managedObject.deviceName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolInfo { // Transient property
        managedObject.symbolInfo_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_pinPadAssignments { // Transient property
        managedObject.pinPadAssignments_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolInSchematic { // Transient property
        managedObject.symbolInSchematic_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mCenterX { // Stored property
        managedObject.mCenterX_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mCenterY { // Stored property
        managedObject.mCenterY_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mRotation { // Stored property
        managedObject.mRotation_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mMirror { // Stored property
        managedObject.mMirror_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbolInstanceName { // Stored property
        managedObject.mSymbolInstanceName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbolTypeName { // Stored property
        managedObject.mSymbolTypeName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentNameOffsetX { // Stored property
        managedObject.mDisplayComponentNameOffsetX_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentNameOffsetY { // Stored property
        managedObject.mDisplayComponentNameOffsetY_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentValue { // Stored property
        managedObject.mDisplayComponentValue_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentValueOffsetX { // Stored property
        managedObject.mDisplayComponentValueOffsetX_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDisplayComponentValueOffsetY { // Stored property
        managedObject.mDisplayComponentValueOffsetY_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_componentName { // Transient property
        managedObject.componentName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_deviceName { // Transient property
        managedObject.deviceName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolInfo { // Transient property
        managedObject.symbolInfo_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_pinPadAssignments { // Transient property
        managedObject.pinPadAssignments_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolInSchematic { // Transient property
        managedObject.symbolInSchematic_property.startsBeingObserved (by: relay)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mCenterX' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mCenterX : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mCenterX_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mCenterX {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCenterX_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mCenterX = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mCenterX_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mCenterX?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mCenterY' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mCenterY : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mCenterY_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mCenterY {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mCenterY_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mCenterY = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mCenterY_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mCenterY?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mRotation' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mRotation : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mRotation_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mRotation {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mRotation_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mRotation = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mRotation_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mRotation?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mMirror' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mMirror : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mMirror_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mMirror {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mMirror_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mMirror = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mMirror_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mMirror?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mSymbolInstanceName' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mSymbolInstanceName : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbolInstanceName_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSymbolInstanceName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mSymbolInstanceName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mSymbolInstanceName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbolInstanceName_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mSymbolInstanceName?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mSymbolTypeName' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mSymbolTypeName : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbolTypeName_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSymbolTypeName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mSymbolTypeName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mSymbolTypeName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbolTypeName_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mSymbolTypeName?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDisplayComponentNameOffsetX' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mDisplayComponentNameOffsetX : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentNameOffsetX_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mDisplayComponentNameOffsetX {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mDisplayComponentNameOffsetX_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mDisplayComponentNameOffsetX = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentNameOffsetX_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mDisplayComponentNameOffsetX?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDisplayComponentNameOffsetY' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mDisplayComponentNameOffsetY : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentNameOffsetY_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mDisplayComponentNameOffsetY {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mDisplayComponentNameOffsetY_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mDisplayComponentNameOffsetY = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentNameOffsetY_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mDisplayComponentNameOffsetY?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDisplayComponentValue' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mDisplayComponentValue : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentValue_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mDisplayComponentValue {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mDisplayComponentValue_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mDisplayComponentValue = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentValue_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mDisplayComponentValue?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDisplayComponentValueOffsetX' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mDisplayComponentValueOffsetX : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentValueOffsetX_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mDisplayComponentValueOffsetX {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mDisplayComponentValueOffsetX_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mDisplayComponentValueOffsetX = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentValueOffsetX_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mDisplayComponentValueOffsetX?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDisplayComponentValueOffsetY' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mDisplayComponentValueOffsetY : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentValueOffsetY_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mDisplayComponentValueOffsetY {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mDisplayComponentValueOffsetY_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mDisplayComponentValueOffsetY = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mDisplayComponentValueOffsetY_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mDisplayComponentValueOffsetY?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentValueProxy' proxy property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_componentValueProxy : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_componentValueProxy_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_componentValueProxy {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.componentValueProxy_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_componentValueProxy = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_componentValueProxy_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_componentValueProxy?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentName' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_componentName : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_componentName_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_componentName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.componentName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_componentName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_componentName_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_componentName?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'deviceName' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_deviceName : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_deviceName_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_deviceName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.deviceName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_deviceName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_deviceName_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_deviceName?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'symbolInfo' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_symbolInfo : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_symbolInfo_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_symbolInfo {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.symbolInfo_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_symbolInfo = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_symbolInfo_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_symbolInfo?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'pinPadAssignments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_pinPadAssignments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_pinPadAssignments_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_pinPadAssignments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.pinPadAssignments_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_pinPadAssignments = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_pinPadAssignments_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_pinPadAssignments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'objectDisplay' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_objectDisplay : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_objectDisplay_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'selectionDisplay' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_selectionDisplay : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_selectionDisplay_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'symbolInSchematic' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_symbolInSchematic : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_symbolInSchematic_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_symbolInSchematic {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.symbolInSchematic_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_symbolInSchematic = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_symbolInSchematic_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_symbolInSchematic?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    TransientArrayOf ComponentSymbolInProject
//--------------------------------------------------------------------------------------------------

// TransientArrayOf_ComponentSymbolInProject is useless.

//--------------------------------------------------------------------------------------------------
//    TransientArrayOfSuperOf ComponentSymbolInProject
//--------------------------------------------------------------------------------------------------

final class TransientArrayOfSuperOf_ComponentSymbolInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_ComponentSymbolInProject {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Data provider
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mDataProvider : EBReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
//  private let mModelEvent = EBModelEvent ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/*  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  } */

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setDataProvider (_ inProvider : EBReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
    if !self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = true
      DispatchQueue.main.async {
        self.computeModelArray ()
      }
    }
//    self.mModelArrayShouldBeComputed = true
//    self.mModelEvent.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <ComponentSymbolInProject> ()
      for superObject in newModelArray.values {
        if let object = superObject as? ComponentSymbolInProject {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var selection : EBSelection < [ComponentSymbolInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var propval : EBReferenceArray <ComponentSymbolInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    To many relationship read write: ComponentSymbolInProject
//--------------------------------------------------------------------------------------------------

class ReadWriteArrayOf_ComponentSymbolInProject : ReadOnlyArrayOf_ComponentSymbolInProject {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setProp (_ value :  EBReferenceArray <ComponentSymbolInProject>) { } // Abstract method

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    Proxy: ProxyArrayOf_ComponentSymbolInProject
//--------------------------------------------------------------------------------------------------

// ProxyArrayOf_ComponentSymbolInProject is useless.

//--------------------------------------------------------------------------------------------------
//    Stored Array: ComponentSymbolInProject
//--------------------------------------------------------------------------------------------------

class StoredArrayOf_ComponentSymbolInProject : ReadWriteArrayOf_ComponentSymbolInProject, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol, Sendable {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <ComponentSymbolInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! ComponentSymbolInProject)
      }
      self.setProp (objectArray)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <ComponentSymbolInProject> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! ComponentSymbolInProject)
    }
    self.setProp (objectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Signature ?
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private let mUsedForSignature : Bool

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Undo manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Opposite relationship management
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentSymbolInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : ComponentSymbolInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model will change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <ComponentSymbolInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { (inSelfObject) in
      // DispatchQueue.main.async {
        inSelfObject.mInternalArrayValue = inOldValue
      // }
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model did change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Update observers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ComponentSymbolInProject>,
                                 addedSet inAddedSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final var selection : EBSelection < [ComponentSymbolInProject] > {
    return .single (self.mInternalArrayValue.values)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func setProp (_ inValue : EBReferenceArray <ComponentSymbolInProject>) {
    self.mInternalArrayValue = inValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final override var propval : EBReferenceArray <ComponentSymbolInProject> {
    return self.mInternalArrayValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func remove (_ inObject : ComponentSymbolInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: inObject) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func add (_ inObject : ComponentSymbolInProject) {
    if !self.internalSetValue.contains (inObject) {
      self.mInternalArrayValue.append (inObject)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak final var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mSignatureCache : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    Preferences array: ComponentSymbolInProject
//--------------------------------------------------------------------------------------------------

// PreferencesArrayOf_ComponentSymbolInProject is useless.

//--------------------------------------------------------------------------------------------------

