//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ComponentSymbolInProject : ReadOnlyAbstractArrayProperty <ComponentSymbolInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ComponentSymbolInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <ComponentSymbolInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      managedObject.mCenterX_property.stopsBeingObserved (by: self.mObserversOf_mCenterX) // Stored property
      managedObject.mCenterY_property.stopsBeingObserved (by: self.mObserversOf_mCenterY) // Stored property
      managedObject.mRotation_property.stopsBeingObserved (by: self.mObserversOf_mRotation) // Stored property
      managedObject.mMirror_property.stopsBeingObserved (by: self.mObserversOf_mMirror) // Stored property
      managedObject.mSymbolInstanceName_property.stopsBeingObserved (by: self.mObserversOf_mSymbolInstanceName) // Stored property
      managedObject.mSymbolTypeName_property.stopsBeingObserved (by: self.mObserversOf_mSymbolTypeName) // Stored property
      managedObject.mDisplayComponentNameOffsetX_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentNameOffsetX) // Stored property
      managedObject.mDisplayComponentNameOffsetY_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentNameOffsetY) // Stored property
      managedObject.mDisplayComponentValue_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentValue) // Stored property
      managedObject.mDisplayComponentValueOffsetX_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentValueOffsetX) // Stored property
      managedObject.mDisplayComponentValueOffsetY_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentValueOffsetY) // Stored property
      managedObject.componentName_property.stopsBeingObserved (by: self.mObserversOf_componentName) // Transient property
      managedObject.deviceName_property.stopsBeingObserved (by: self.mObserversOf_deviceName) // Transient property
      managedObject.symbolInfo_property.stopsBeingObserved (by: self.mObserversOf_symbolInfo) // Transient property
      managedObject.pinPadAssignments_property.stopsBeingObserved (by: self.mObserversOf_pinPadAssignments) // Transient property
      managedObject.objectDisplay_property.stopsBeingObserved (by: self.mObserversOf_objectDisplay) // Transient property
      managedObject.selectionDisplay_property.stopsBeingObserved (by: self.mObserversOf_selectionDisplay) // Transient property
      managedObject.symbolInSchematic_property.stopsBeingObserved (by: self.mObserversOf_symbolInSchematic) // Transient property
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      managedObject.mCenterX_property.startsToBeObserved (by: self.mObserversOf_mCenterX) // Stored property
      managedObject.mCenterY_property.startsToBeObserved (by: self.mObserversOf_mCenterY) // Stored property
      managedObject.mRotation_property.startsToBeObserved (by: self.mObserversOf_mRotation) // Stored property
      managedObject.mMirror_property.startsToBeObserved (by: self.mObserversOf_mMirror) // Stored property
      managedObject.mSymbolInstanceName_property.startsToBeObserved (by: self.mObserversOf_mSymbolInstanceName) // Stored property
      managedObject.mSymbolTypeName_property.startsToBeObserved (by: self.mObserversOf_mSymbolTypeName) // Stored property
      managedObject.mDisplayComponentNameOffsetX_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentNameOffsetX) // Stored property
      managedObject.mDisplayComponentNameOffsetY_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentNameOffsetY) // Stored property
      managedObject.mDisplayComponentValue_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentValue) // Stored property
      managedObject.mDisplayComponentValueOffsetX_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentValueOffsetX) // Stored property
      managedObject.mDisplayComponentValueOffsetY_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentValueOffsetY) // Stored property
      managedObject.componentName_property.startsToBeObserved (by: self.mObserversOf_componentName) // Transient property
      managedObject.deviceName_property.startsToBeObserved (by: self.mObserversOf_deviceName) // Transient property
      managedObject.symbolInfo_property.startsToBeObserved (by: self.mObserversOf_symbolInfo) // Transient property
      managedObject.pinPadAssignments_property.startsToBeObserved (by: self.mObserversOf_pinPadAssignments) // Transient property
      managedObject.objectDisplay_property.startsToBeObserved (by: self.mObserversOf_objectDisplay) // Transient property
      managedObject.selectionDisplay_property.startsToBeObserved (by: self.mObserversOf_selectionDisplay) // Transient property
      managedObject.symbolInSchematic_property.startsToBeObserved (by: self.mObserversOf_symbolInSchematic) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mCenterX' stored property
  //····················································································································

  private final var mObserversOf_mCenterX = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mCenterX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mCenterX.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterX_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mCenterX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mCenterX.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterX_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mCenterX_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mCenterX_property.startsToBeObserved (by: self.mObserversOf_mCenterX)
    }*/
    /* if !self.mObserversOf_mCenterX.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mCenterX.values () {
          if let observer = entry.possibleObserver {
            managedObject.mCenterX_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mCenterX.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mCenterX_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mCenterX_property.stopsBeingObserved (by: self.mObserversOf_mCenterX)
    }
    for entry in self.mObserversOf_mCenterX.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCenterX_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mCenterX.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mCenterY' stored property
  //····················································································································

  private final var mObserversOf_mCenterY = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mCenterY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mCenterY.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterY_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mCenterY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mCenterY.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterY_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mCenterY_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mCenterY_property.startsToBeObserved (by: self.mObserversOf_mCenterY)
    }*/
    /* if !self.mObserversOf_mCenterY.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mCenterY.values () {
          if let observer = entry.possibleObserver {
            managedObject.mCenterY_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mCenterY.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mCenterY_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mCenterY_property.stopsBeingObserved (by: self.mObserversOf_mCenterY)
    }
    for entry in self.mObserversOf_mCenterY.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mCenterY_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mCenterY.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private final var mObserversOf_mRotation = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mRotation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mRotation.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mRotation.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mRotation_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mRotation_property.startsToBeObserved (by: self.mObserversOf_mRotation)
    }*/
    /* if !self.mObserversOf_mRotation.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mRotation.values () {
          if let observer = entry.possibleObserver {
            managedObject.mRotation_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mRotation.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mRotation_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mRotation_property.stopsBeingObserved (by: self.mObserversOf_mRotation)
    }
    for entry in self.mObserversOf_mRotation.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mRotation_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mRotation.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mMirror' stored property
  //····················································································································

  private final var mObserversOf_mMirror = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mMirror_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mMirror.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mMirror_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mMirror_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mMirror.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mMirror_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mMirror_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mMirror_property.startsToBeObserved (by: self.mObserversOf_mMirror)
    }*/
    /* if !self.mObserversOf_mMirror.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mMirror.values () {
          if let observer = entry.possibleObserver {
            managedObject.mMirror_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mMirror.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mMirror_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mMirror_property.stopsBeingObserved (by: self.mObserversOf_mMirror)
    }
    for entry in self.mObserversOf_mMirror.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mMirror_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mMirror.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mSymbolInstanceName' stored property
  //····················································································································

  private final var mObserversOf_mSymbolInstanceName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mSymbolInstanceName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mSymbolInstanceName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mSymbolInstanceName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mSymbolInstanceName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mSymbolInstanceName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mSymbolInstanceName_property.startsToBeObserved (by: self.mObserversOf_mSymbolInstanceName)
    }*/
    /* if !self.mObserversOf_mSymbolInstanceName.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mSymbolInstanceName.values () {
          if let observer = entry.possibleObserver {
            managedObject.mSymbolInstanceName_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mSymbolInstanceName.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mSymbolInstanceName_property.stopsBeingObserved (by: self.mObserversOf_mSymbolInstanceName)
    }
    for entry in self.mObserversOf_mSymbolInstanceName.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mSymbolInstanceName_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mSymbolInstanceName.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mSymbolTypeName' stored property
  //····················································································································

  private final var mObserversOf_mSymbolTypeName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mSymbolTypeName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mSymbolTypeName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolTypeName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mSymbolTypeName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mSymbolTypeName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolTypeName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mSymbolTypeName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mSymbolTypeName_property.startsToBeObserved (by: self.mObserversOf_mSymbolTypeName)
    }*/
    /* if !self.mObserversOf_mSymbolTypeName.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mSymbolTypeName.values () {
          if let observer = entry.possibleObserver {
            managedObject.mSymbolTypeName_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mSymbolTypeName.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mSymbolTypeName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mSymbolTypeName_property.stopsBeingObserved (by: self.mObserversOf_mSymbolTypeName)
    }
    for entry in self.mObserversOf_mSymbolTypeName.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mSymbolTypeName_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mSymbolTypeName.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mDisplayComponentNameOffsetX' stored property
  //····················································································································

  private final var mObserversOf_mDisplayComponentNameOffsetX = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDisplayComponentNameOffsetX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetX.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentNameOffsetX_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDisplayComponentNameOffsetX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetX.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentNameOffsetX_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDisplayComponentNameOffsetX_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mDisplayComponentNameOffsetX_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentNameOffsetX)
    }*/
    /* if !self.mObserversOf_mDisplayComponentNameOffsetX.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDisplayComponentNameOffsetX.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDisplayComponentNameOffsetX_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDisplayComponentNameOffsetX.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDisplayComponentNameOffsetX_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mDisplayComponentNameOffsetX_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentNameOffsetX)
    }
    for entry in self.mObserversOf_mDisplayComponentNameOffsetX.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDisplayComponentNameOffsetX_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDisplayComponentNameOffsetX.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mDisplayComponentNameOffsetY' stored property
  //····················································································································

  private final var mObserversOf_mDisplayComponentNameOffsetY = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDisplayComponentNameOffsetY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetY.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentNameOffsetY_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDisplayComponentNameOffsetY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetY.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentNameOffsetY_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDisplayComponentNameOffsetY_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mDisplayComponentNameOffsetY_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentNameOffsetY)
    }*/
    /* if !self.mObserversOf_mDisplayComponentNameOffsetY.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDisplayComponentNameOffsetY.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDisplayComponentNameOffsetY_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDisplayComponentNameOffsetY.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDisplayComponentNameOffsetY_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mDisplayComponentNameOffsetY_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentNameOffsetY)
    }
    for entry in self.mObserversOf_mDisplayComponentNameOffsetY.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDisplayComponentNameOffsetY_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDisplayComponentNameOffsetY.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mDisplayComponentValue' stored property
  //····················································································································

  private final var mObserversOf_mDisplayComponentValue = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDisplayComponentValue_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentValue.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValue_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDisplayComponentValue_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentValue.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValue_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDisplayComponentValue_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mDisplayComponentValue_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentValue)
    }*/
    /* if !self.mObserversOf_mDisplayComponentValue.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDisplayComponentValue.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDisplayComponentValue_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDisplayComponentValue.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDisplayComponentValue_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mDisplayComponentValue_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentValue)
    }
    for entry in self.mObserversOf_mDisplayComponentValue.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDisplayComponentValue_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDisplayComponentValue.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mDisplayComponentValueOffsetX' stored property
  //····················································································································

  private final var mObserversOf_mDisplayComponentValueOffsetX = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDisplayComponentValueOffsetX_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetX.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValueOffsetX_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDisplayComponentValueOffsetX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetX.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValueOffsetX_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDisplayComponentValueOffsetX_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mDisplayComponentValueOffsetX_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentValueOffsetX)
    }*/
    /* if !self.mObserversOf_mDisplayComponentValueOffsetX.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDisplayComponentValueOffsetX.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDisplayComponentValueOffsetX_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDisplayComponentValueOffsetX.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDisplayComponentValueOffsetX_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mDisplayComponentValueOffsetX_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentValueOffsetX)
    }
    for entry in self.mObserversOf_mDisplayComponentValueOffsetX.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDisplayComponentValueOffsetX_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDisplayComponentValueOffsetX.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mDisplayComponentValueOffsetY' stored property
  //····················································································································

  private final var mObserversOf_mDisplayComponentValueOffsetY = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDisplayComponentValueOffsetY_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetY.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValueOffsetY_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDisplayComponentValueOffsetY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetY.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValueOffsetY_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDisplayComponentValueOffsetY_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mDisplayComponentValueOffsetY_property.startsToBeObserved (by: self.mObserversOf_mDisplayComponentValueOffsetY)
    }*/
    /* if !self.mObserversOf_mDisplayComponentValueOffsetY.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDisplayComponentValueOffsetY.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDisplayComponentValueOffsetY_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDisplayComponentValueOffsetY.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDisplayComponentValueOffsetY_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      managedObject.mDisplayComponentValueOffsetY_property.stopsBeingObserved (by: self.mObserversOf_mDisplayComponentValueOffsetY)
    }
    for entry in self.mObserversOf_mDisplayComponentValueOffsetY.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDisplayComponentValueOffsetY_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDisplayComponentValueOffsetY.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'componentValueProxy' proxy property
  //····················································································································

  private final var mObserversOf_componentValueProxy = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_componentValueProxy_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_componentValueProxy.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValueProxy_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_componentValueProxy_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_componentValueProxy.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValueProxy_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_componentValueProxy_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_componentValueProxy.values () {
        if let observer = entry.possibleObserver {
          managedObject.componentValueProxy_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_componentValueProxy.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_componentValueProxy_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for entry in self.mObserversOf_componentValueProxy.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.componentValueProxy_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_componentValueProxy.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private final var mObserversOf_componentName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_componentName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_componentName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_componentName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_componentName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_componentName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_componentName.values () {
        if let observer = entry.possibleObserver {
          managedObject.componentName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_componentName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_componentName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_componentName.values () {
        if let observer = entry.possibleObserver {
          managedObject.componentName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_componentName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private final var mObserversOf_deviceName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_deviceName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_deviceName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_deviceName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_deviceName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_deviceName_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_deviceName.values () {
        if let observer = entry.possibleObserver {
          managedObject.deviceName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_deviceName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_deviceName_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_deviceName.values () {
        if let observer = entry.possibleObserver {
          managedObject.deviceName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_deviceName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'symbolInfo' transient property
  //····················································································································

  private final var mObserversOf_symbolInfo = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_symbolInfo_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_symbolInfo.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolInfo_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_symbolInfo_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_symbolInfo.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolInfo_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_symbolInfo_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_symbolInfo.values () {
        if let observer = entry.possibleObserver {
          managedObject.symbolInfo_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_symbolInfo.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_symbolInfo_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_symbolInfo.values () {
        if let observer = entry.possibleObserver {
          managedObject.symbolInfo_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_symbolInfo.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  private final var mObserversOf_pinPadAssignments = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_pinPadAssignments_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_pinPadAssignments.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_pinPadAssignments_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_pinPadAssignments.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_pinPadAssignments_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_pinPadAssignments.values () {
        if let observer = entry.possibleObserver {
          managedObject.pinPadAssignments_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_pinPadAssignments.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_pinPadAssignments_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_pinPadAssignments.values () {
        if let observer = entry.possibleObserver {
          managedObject.pinPadAssignments_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_pinPadAssignments.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_objectDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_objectDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_selectionDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_selectionDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'symbolInSchematic' transient property
  //····················································································································

  private final var mObserversOf_symbolInSchematic = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_symbolInSchematic_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_symbolInSchematic.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolInSchematic_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_symbolInSchematic_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_symbolInSchematic.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolInSchematic_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_symbolInSchematic_toElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_symbolInSchematic.values () {
        if let observer = entry.possibleObserver {
          managedObject.symbolInSchematic_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_symbolInSchematic.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_symbolInSchematic_fromElementsOfSet (_ inSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_symbolInSchematic.values () {
        if let observer = entry.possibleObserver {
          managedObject.symbolInSchematic_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_symbolInSchematic.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_ComponentSymbolInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_ComponentSymbolInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_ComponentSymbolInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <ComponentSymbolInProject> ()
      for superObject in newModelArray.values {
        if let object = superObject as? ComponentSymbolInProject {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ComponentSymbolInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ComponentSymbolInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ComponentSymbolInProject : ReadOnlyArrayOf_ComponentSymbolInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <ComponentSymbolInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_ComponentSymbolInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ComponentSymbolInProject : ReadWriteArrayOf_ComponentSymbolInProject, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <ComponentSymbolInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! ComponentSymbolInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <ComponentSymbolInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! ComponentSymbolInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentSymbolInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : ComponentSymbolInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <ComponentSymbolInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ComponentSymbolInProject>,
                                 addedSet inAddedSet : EBReferenceSet <ComponentSymbolInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [ComponentSymbolInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ComponentSymbolInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <ComponentSymbolInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : ComponentSymbolInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : ComponentSymbolInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_ComponentSymbolInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

