//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_ComponentInProject : ReadOnlyAbstractObjectProperty <ComponentInProject> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mSlavePadsShouldBeRouted_property.removeEBObserver (self.mSlavePadsShouldBeRouted_property) // Stored property
      oldValue.mX_property.removeEBObserver (self.mX_property) // Stored property
      oldValue.mY_property.removeEBObserver (self.mY_property) // Stored property
      oldValue.mRotation_property.removeEBObserver (self.mRotation_property) // Stored property
      oldValue.mSide_property.removeEBObserver (self.mSide_property) // Stored property
      oldValue.mDisplayLegend_property.removeEBObserver (self.mDisplayLegend_property) // Stored property
      oldValue.mNameIsVisibleInBoard_property.removeEBObserver (self.mNameIsVisibleInBoard_property) // Stored property
      oldValue.mXName_property.removeEBObserver (self.mXName_property) // Stored property
      oldValue.mYName_property.removeEBObserver (self.mYName_property) // Stored property
      oldValue.mNameFontSize_property.removeEBObserver (self.mNameFontSize_property) // Stored property
      oldValue.mNameRotation_property.removeEBObserver (self.mNameRotation_property) // Stored property
      oldValue.mValueIsVisibleInBoard_property.removeEBObserver (self.mValueIsVisibleInBoard_property) // Stored property
      oldValue.mXValue_property.removeEBObserver (self.mXValue_property) // Stored property
      oldValue.mYValue_property.removeEBObserver (self.mYValue_property) // Stored property
      oldValue.mValueFontSize_property.removeEBObserver (self.mValueFontSize_property) // Stored property
      oldValue.mValueRotation_property.removeEBObserver (self.mValueRotation_property) // Stored property
      oldValue.mComponentValue_property.removeEBObserver (self.mComponentValue_property) // Stored property
      oldValue.mNamePrefix_property.removeEBObserver (self.mNamePrefix_property) // Stored property
      oldValue.mNameIndex_property.removeEBObserver (self.mNameIndex_property) // Stored property
      oldValue.mXUnit_property.removeEBObserver (self.mXUnit_property) // Stored property
      oldValue.mYUnit_property.removeEBObserver (self.mYUnit_property) // Stored property
      oldValue.deviceName_property.removeEBObserver (self.deviceName_property) // Transient property
      oldValue.signatureForERCChecking_property.removeEBObserver (self.signatureForERCChecking_property) // Transient property
      oldValue.packagePadDictionary_property.removeEBObserver (self.packagePadDictionary_property) // Transient property
      oldValue.selectedPackageName_property.removeEBObserver (self.selectedPackageName_property) // Transient property
      oldValue.availablePackages_property.removeEBObserver (self.availablePackages_property) // Transient property
      oldValue.issues_property.removeEBObserver (self.issues_property) // Transient property
      oldValue.componentIsPlacedInBoard_property.removeEBObserver (self.componentIsPlacedInBoard_property) // Transient property
      oldValue.componentIsPlacedInBoardString_property.removeEBObserver (self.componentIsPlacedInBoardString_property) // Transient property
      oldValue.strokeBezierPath_property.removeEBObserver (self.strokeBezierPath_property) // Transient property
      oldValue.pinPadAssignments_property.removeEBObserver (self.pinPadAssignments_property) // Transient property
      oldValue.hasSlavePads_property.removeEBObserver (self.hasSlavePads_property) // Transient property
      oldValue.placementInSchematic_property.removeEBObserver (self.placementInSchematic_property) // Transient property
      oldValue.deviceSymbolDictionary_property.removeEBObserver (self.deviceSymbolDictionary_property) // Transient property
      oldValue.componentNameFontName_property.removeEBObserver (self.componentNameFontName_property) // Transient property
      oldValue.componentValueFontName_property.removeEBObserver (self.componentValueFontName_property) // Transient property
      oldValue.componentPadDictionary_property.removeEBObserver (self.componentPadDictionary_property) // Transient property
      oldValue.padNetDictionary_property.removeEBObserver (self.padNetDictionary_property) // Transient property
      oldValue.componentName_property.removeEBObserver (self.componentName_property) // Transient property
      oldValue.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
      oldValue.unplacedSymbols_property.removeEBObserver (self.unplacedSymbols_property) // Transient property
      oldValue.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mSlavePadsShouldBeRouted_property.addEBObserver (self.mSlavePadsShouldBeRouted_property) // Stored property
      newValue.mX_property.addEBObserver (self.mX_property) // Stored property
      newValue.mY_property.addEBObserver (self.mY_property) // Stored property
      newValue.mRotation_property.addEBObserver (self.mRotation_property) // Stored property
      newValue.mSide_property.addEBObserver (self.mSide_property) // Stored property
      newValue.mDisplayLegend_property.addEBObserver (self.mDisplayLegend_property) // Stored property
      newValue.mNameIsVisibleInBoard_property.addEBObserver (self.mNameIsVisibleInBoard_property) // Stored property
      newValue.mXName_property.addEBObserver (self.mXName_property) // Stored property
      newValue.mYName_property.addEBObserver (self.mYName_property) // Stored property
      newValue.mNameFontSize_property.addEBObserver (self.mNameFontSize_property) // Stored property
      newValue.mNameRotation_property.addEBObserver (self.mNameRotation_property) // Stored property
      newValue.mValueIsVisibleInBoard_property.addEBObserver (self.mValueIsVisibleInBoard_property) // Stored property
      newValue.mXValue_property.addEBObserver (self.mXValue_property) // Stored property
      newValue.mYValue_property.addEBObserver (self.mYValue_property) // Stored property
      newValue.mValueFontSize_property.addEBObserver (self.mValueFontSize_property) // Stored property
      newValue.mValueRotation_property.addEBObserver (self.mValueRotation_property) // Stored property
      newValue.mComponentValue_property.addEBObserver (self.mComponentValue_property) // Stored property
      newValue.mNamePrefix_property.addEBObserver (self.mNamePrefix_property) // Stored property
      newValue.mNameIndex_property.addEBObserver (self.mNameIndex_property) // Stored property
      newValue.mXUnit_property.addEBObserver (self.mXUnit_property) // Stored property
      newValue.mYUnit_property.addEBObserver (self.mYUnit_property) // Stored property
      newValue.deviceName_property.addEBObserver (self.deviceName_property) // Transient property
      newValue.signatureForERCChecking_property.addEBObserver (self.signatureForERCChecking_property) // Transient property
      newValue.packagePadDictionary_property.addEBObserver (self.packagePadDictionary_property) // Transient property
      newValue.selectedPackageName_property.addEBObserver (self.selectedPackageName_property) // Transient property
      newValue.availablePackages_property.addEBObserver (self.availablePackages_property) // Transient property
      newValue.issues_property.addEBObserver (self.issues_property) // Transient property
      newValue.componentIsPlacedInBoard_property.addEBObserver (self.componentIsPlacedInBoard_property) // Transient property
      newValue.componentIsPlacedInBoardString_property.addEBObserver (self.componentIsPlacedInBoardString_property) // Transient property
      newValue.strokeBezierPath_property.addEBObserver (self.strokeBezierPath_property) // Transient property
      newValue.pinPadAssignments_property.addEBObserver (self.pinPadAssignments_property) // Transient property
      newValue.hasSlavePads_property.addEBObserver (self.hasSlavePads_property) // Transient property
      newValue.placementInSchematic_property.addEBObserver (self.placementInSchematic_property) // Transient property
      newValue.deviceSymbolDictionary_property.addEBObserver (self.deviceSymbolDictionary_property) // Transient property
      newValue.componentNameFontName_property.addEBObserver (self.componentNameFontName_property) // Transient property
      newValue.componentValueFontName_property.addEBObserver (self.componentValueFontName_property) // Transient property
      newValue.componentPadDictionary_property.addEBObserver (self.componentPadDictionary_property) // Transient property
      newValue.padNetDictionary_property.addEBObserver (self.padNetDictionary_property) // Transient property
      newValue.componentName_property.addEBObserver (self.componentName_property) // Transient property
      newValue.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
      newValue.unplacedSymbols_property.addEBObserver (self.unplacedSymbols_property) // Transient property
      newValue.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mSlavePadsShouldBeRouted' stored property
  //····················································································································

  final let mSlavePadsShouldBeRouted_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  final let mX_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  final let mY_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  final let mRotation_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSide' stored property
  //····················································································································

  final let mSide_property = EBGenericTransientProperty <ComponentSide?> ()

  //····················································································································
  //   Observers of 'mDisplayLegend' stored property
  //····················································································································

  final let mDisplayLegend_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mNameIsVisibleInBoard' stored property
  //····················································································································

  final let mNameIsVisibleInBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  final let mXName_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  final let mYName_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mNameFontSize' stored property
  //····················································································································

  final let mNameFontSize_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'mNameRotation' stored property
  //····················································································································

  final let mNameRotation_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mValueIsVisibleInBoard' stored property
  //····················································································································

  final let mValueIsVisibleInBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mXValue' stored property
  //····················································································································

  final let mXValue_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mYValue' stored property
  //····················································································································

  final let mYValue_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mValueFontSize' stored property
  //····················································································································

  final let mValueFontSize_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'mValueRotation' stored property
  //····················································································································

  final let mValueRotation_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mComponentValue' stored property
  //····················································································································

  final let mComponentValue_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mNamePrefix' stored property
  //····················································································································

  final let mNamePrefix_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mNameIndex' stored property
  //····················································································································

  final let mNameIndex_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mXUnit' stored property
  //····················································································································

  final let mXUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mYUnit' stored property
  //····················································································································

  final let mYUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  final let deviceName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  final let signatureForERCChecking_property = EBGenericTransientProperty <UInt32?> ()

  //····················································································································
  //   Observers of 'packagePadDictionary' transient property
  //····················································································································

  final let packagePadDictionary_property = EBGenericTransientProperty <PackageMasterPadDictionary?> ()

  //····················································································································
  //   Observers of 'selectedPackageName' transient property
  //····················································································································

  final let selectedPackageName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'availablePackages' transient property
  //····················································································································

  final let availablePackages_property = EBGenericTransientProperty <StringArray?> ()

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  final let issues_property = EBGenericTransientProperty <CanariIssueArray?> ()

  //····················································································································
  //   Observers of 'componentIsPlacedInBoard' transient property
  //····················································································································

  final let componentIsPlacedInBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'componentIsPlacedInBoardString' transient property
  //····················································································································

  final let componentIsPlacedInBoardString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  final let strokeBezierPath_property = EBGenericTransientProperty <EBBezierPath?> ()

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  final let pinPadAssignments_property = EBGenericTransientProperty <ThreeStringArray?> ()

  //····················································································································
  //   Observers of 'hasSlavePads' transient property
  //····················································································································

  final let hasSlavePads_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'placementInSchematic' transient property
  //····················································································································

  final let placementInSchematic_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  final let deviceSymbolDictionary_property = EBGenericTransientProperty <DeviceSymbolDictionary?> ()

  //····················································································································
  //   Observers of 'componentNameFontName' transient property
  //····················································································································

  final let componentNameFontName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'componentValueFontName' transient property
  //····················································································································

  final let componentValueFontName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'componentPadDictionary' transient property
  //····················································································································

  final let componentPadDictionary_property = EBGenericTransientProperty <ComponentPadDescriptorDictionary?> ()

  //····················································································································
  //   Observers of 'padNetDictionary' transient property
  //····················································································································

  final let padNetDictionary_property = EBGenericTransientProperty <PadNetDictionary?> ()

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  final let componentName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  final let selectionDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  final let unplacedSymbols_property = EBGenericTransientProperty <StringTagArray?> ()

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  final let objectDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observable toMany property: mConnectors
  //····················································································································

  private final var mObserversOf_mConnectors = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mConnectors (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mConnectors.insert (inObserver)
    if let object = self.propval {
      object.mConnectors_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mConnectors (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mConnectors.remove (inObserver)
    if let object = self.propval {
      object.mConnectors_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbols
  //····················································································································

  private final var mObserversOf_mSymbols = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbols (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSymbols.insert (inObserver)
    if let object = self.propval {
      object.mSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbols (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSymbols.remove (inObserver)
    if let object = self.propval {
      object.mSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mSlavePadsShouldBeRouted simple stored property
    self.mSlavePadsShouldBeRouted_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mSlavePadsShouldBeRouted_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mX simple stored property
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mY simple stored property
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRotation simple stored property
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSide simple stored property
    self.mSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDisplayLegend simple stored property
    self.mDisplayLegend_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDisplayLegend_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mNameIsVisibleInBoard simple stored property
    self.mNameIsVisibleInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mNameIsVisibleInBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mXName simple stored property
    self.mXName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mXName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mYName simple stored property
    self.mYName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mYName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mNameFontSize simple stored property
    self.mNameFontSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mNameFontSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mNameRotation simple stored property
    self.mNameRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mNameRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mValueIsVisibleInBoard simple stored property
    self.mValueIsVisibleInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mValueIsVisibleInBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mXValue simple stored property
    self.mXValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mXValue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mYValue simple stored property
    self.mYValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mYValue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mValueFontSize simple stored property
    self.mValueFontSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mValueFontSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mValueRotation simple stored property
    self.mValueRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mValueRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mComponentValue simple stored property
    self.mComponentValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mComponentValue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mNamePrefix simple stored property
    self.mNamePrefix_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mNamePrefix_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mNameIndex simple stored property
    self.mNameIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mNameIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mXUnit simple stored property
    self.mXUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mXUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mYUnit simple stored property
    self.mYUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mYUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure deviceName transient property
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.deviceName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.signatureForERCChecking_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure packagePadDictionary transient property
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.packagePadDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure selectedPackageName transient property
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.selectedPackageName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure availablePackages transient property
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.availablePackages_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.issues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure componentIsPlacedInBoard transient property
    self.componentIsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.componentIsPlacedInBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure componentIsPlacedInBoardString transient property
    self.componentIsPlacedInBoardString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.componentIsPlacedInBoardString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure strokeBezierPath transient property
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.strokeBezierPath_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure pinPadAssignments transient property
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.pinPadAssignments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure hasSlavePads transient property
    self.hasSlavePads_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.hasSlavePads_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure placementInSchematic transient property
    self.placementInSchematic_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.placementInSchematic_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure deviceSymbolDictionary transient property
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.deviceSymbolDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure componentNameFontName transient property
    self.componentNameFontName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.componentNameFontName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure componentValueFontName transient property
    self.componentValueFontName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.componentValueFontName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure componentPadDictionary transient property
    self.componentPadDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.componentPadDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure padNetDictionary transient property
    self.padNetDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.padNetDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure componentName transient property
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.componentName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.selectionDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure unplacedSymbols transient property
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.unplacedSymbols_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.objectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TransientObject ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class TransientObject_ComponentInProject : ReadOnlyObject_ComponentInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyObject_ComponentInProject? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ComponentInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ComponentInProject?
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mWeakInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ComponentInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let v = self.mWeakInternalValue {
        return .single (v)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ComponentInProject? { return self.mWeakInternalValue }

  //····················································································································

} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_ComponentInProject : ReadOnlyObject_ComponentInProject {

  //····················································································································

  func setProp (_ inValue : ComponentInProject?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ProxyObject_ComponentInProject : ReadWriteObject_ComponentInProject {

  //····················································································································

  private weak var mModel : ReadWriteObject_ComponentInProject? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ComponentInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ComponentInProject?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mWeakInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ComponentInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < ComponentInProject? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ComponentInProject? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

} */
 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_ComponentInProject : ReadWriteObject_ComponentInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorableProperty {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! ComponentInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ComponentInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ComponentInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ComponentInProject? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : ComponentInProject? = nil

  //····················································································································

  override func setProp (_ inValue : ComponentInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

