//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    ReadOnlyObject_ComponentInProject
//--------------------------------------------------------------------------------------------------

class ReadOnlyObject_ComponentInProject : EBReadOnlyAbstractObjectProperty <ComponentInProject> {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mSlavePadsShouldBeRouted_property.stopsBeingObserved (by: self.mSlavePadsShouldBeRouted_property) // Stored property
      oldValue.mX_property.stopsBeingObserved (by: self.mX_property) // Stored property
      oldValue.mY_property.stopsBeingObserved (by: self.mY_property) // Stored property
      oldValue.mRotation_property.stopsBeingObserved (by: self.mRotation_property) // Stored property
      oldValue.mSide_property.stopsBeingObserved (by: self.mSide_property) // Stored property
      oldValue.mDisplayLegend_property.stopsBeingObserved (by: self.mDisplayLegend_property) // Stored property
      oldValue.mNameIsVisibleInBoard_property.stopsBeingObserved (by: self.mNameIsVisibleInBoard_property) // Stored property
      oldValue.mXName_property.stopsBeingObserved (by: self.mXName_property) // Stored property
      oldValue.mYName_property.stopsBeingObserved (by: self.mYName_property) // Stored property
      oldValue.mNameFontSize_property.stopsBeingObserved (by: self.mNameFontSize_property) // Stored property
      oldValue.mNameRotation_property.stopsBeingObserved (by: self.mNameRotation_property) // Stored property
      oldValue.mValueIsVisibleInBoard_property.stopsBeingObserved (by: self.mValueIsVisibleInBoard_property) // Stored property
      oldValue.mXValue_property.stopsBeingObserved (by: self.mXValue_property) // Stored property
      oldValue.mYValue_property.stopsBeingObserved (by: self.mYValue_property) // Stored property
      oldValue.mValueFontSize_property.stopsBeingObserved (by: self.mValueFontSize_property) // Stored property
      oldValue.mValueRotation_property.stopsBeingObserved (by: self.mValueRotation_property) // Stored property
      oldValue.mComponentValue_property.stopsBeingObserved (by: self.mComponentValue_property) // Stored property
      oldValue.mNamePrefix_property.stopsBeingObserved (by: self.mNamePrefix_property) // Stored property
      oldValue.mNameIndex_property.stopsBeingObserved (by: self.mNameIndex_property) // Stored property
      oldValue.mXUnit_property.stopsBeingObserved (by: self.mXUnit_property) // Stored property
      oldValue.mYUnit_property.stopsBeingObserved (by: self.mYUnit_property) // Stored property
      oldValue.mXNameUnit_property.stopsBeingObserved (by: self.mXNameUnit_property) // Stored property
      oldValue.mYNameUnit_property.stopsBeingObserved (by: self.mYNameUnit_property) // Stored property
      oldValue.mXValueUnit_property.stopsBeingObserved (by: self.mXValueUnit_property) // Stored property
      oldValue.mYValueUnit_property.stopsBeingObserved (by: self.mYValueUnit_property) // Stored property
      oldValue.deviceName_property.stopsBeingObserved (by: self.deviceName_property) // Transient property
      oldValue.signatureForERCChecking_property.stopsBeingObserved (by: self.signatureForERCChecking_property) // Transient property
      oldValue.packagePadDictionary_property.stopsBeingObserved (by: self.packagePadDictionary_property) // Transient property
      oldValue.selectedPackageName_property.stopsBeingObserved (by: self.selectedPackageName_property) // Transient property
      oldValue.availablePackages_property.stopsBeingObserved (by: self.availablePackages_property) // Transient property
      oldValue.issues_property.stopsBeingObserved (by: self.issues_property) // Transient property
      oldValue.componentIsPlacedInBoard_property.stopsBeingObserved (by: self.componentIsPlacedInBoard_property) // Transient property
      oldValue.componentIsPlacedInBoardString_property.stopsBeingObserved (by: self.componentIsPlacedInBoardString_property) // Transient property
      oldValue.strokeBezierPath_property.stopsBeingObserved (by: self.strokeBezierPath_property) // Transient property
      oldValue.pinPadAssignments_property.stopsBeingObserved (by: self.pinPadAssignments_property) // Transient property
      oldValue.hasSlavePads_property.stopsBeingObserved (by: self.hasSlavePads_property) // Transient property
      oldValue.placementInSchematic_property.stopsBeingObserved (by: self.placementInSchematic_property) // Transient property
      oldValue.deviceSymbolDictionary_property.stopsBeingObserved (by: self.deviceSymbolDictionary_property) // Transient property
      oldValue.componentNameFontName_property.stopsBeingObserved (by: self.componentNameFontName_property) // Transient property
      oldValue.componentValueFontName_property.stopsBeingObserved (by: self.componentValueFontName_property) // Transient property
      oldValue.componentPadDictionary_property.stopsBeingObserved (by: self.componentPadDictionary_property) // Transient property
      oldValue.padNetDictionary_property.stopsBeingObserved (by: self.padNetDictionary_property) // Transient property
      oldValue.componentName_property.stopsBeingObserved (by: self.componentName_property) // Transient property
      oldValue.selectionDisplay_property.stopsBeingObserved (by: self.selectionDisplay_property) // Transient property
      oldValue.unplacedSymbols_property.stopsBeingObserved (by: self.unplacedSymbols_property) // Transient property
      oldValue.objectDisplay_property.stopsBeingObserved (by: self.objectDisplay_property) // Transient property
      if let relay = self.mObserversOf_mConnectors { // to Many
        oldValue.mConnectors_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbols { // to Many
        oldValue.mSymbols_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mSlavePadsShouldBeRouted_property.startsBeingObserved (by: self.mSlavePadsShouldBeRouted_property) // Stored property
      newValue.mX_property.startsBeingObserved (by: self.mX_property) // Stored property
      newValue.mY_property.startsBeingObserved (by: self.mY_property) // Stored property
      newValue.mRotation_property.startsBeingObserved (by: self.mRotation_property) // Stored property
      newValue.mSide_property.startsBeingObserved (by: self.mSide_property) // Stored property
      newValue.mDisplayLegend_property.startsBeingObserved (by: self.mDisplayLegend_property) // Stored property
      newValue.mNameIsVisibleInBoard_property.startsBeingObserved (by: self.mNameIsVisibleInBoard_property) // Stored property
      newValue.mXName_property.startsBeingObserved (by: self.mXName_property) // Stored property
      newValue.mYName_property.startsBeingObserved (by: self.mYName_property) // Stored property
      newValue.mNameFontSize_property.startsBeingObserved (by: self.mNameFontSize_property) // Stored property
      newValue.mNameRotation_property.startsBeingObserved (by: self.mNameRotation_property) // Stored property
      newValue.mValueIsVisibleInBoard_property.startsBeingObserved (by: self.mValueIsVisibleInBoard_property) // Stored property
      newValue.mXValue_property.startsBeingObserved (by: self.mXValue_property) // Stored property
      newValue.mYValue_property.startsBeingObserved (by: self.mYValue_property) // Stored property
      newValue.mValueFontSize_property.startsBeingObserved (by: self.mValueFontSize_property) // Stored property
      newValue.mValueRotation_property.startsBeingObserved (by: self.mValueRotation_property) // Stored property
      newValue.mComponentValue_property.startsBeingObserved (by: self.mComponentValue_property) // Stored property
      newValue.mNamePrefix_property.startsBeingObserved (by: self.mNamePrefix_property) // Stored property
      newValue.mNameIndex_property.startsBeingObserved (by: self.mNameIndex_property) // Stored property
      newValue.mXUnit_property.startsBeingObserved (by: self.mXUnit_property) // Stored property
      newValue.mYUnit_property.startsBeingObserved (by: self.mYUnit_property) // Stored property
      newValue.mXNameUnit_property.startsBeingObserved (by: self.mXNameUnit_property) // Stored property
      newValue.mYNameUnit_property.startsBeingObserved (by: self.mYNameUnit_property) // Stored property
      newValue.mXValueUnit_property.startsBeingObserved (by: self.mXValueUnit_property) // Stored property
      newValue.mYValueUnit_property.startsBeingObserved (by: self.mYValueUnit_property) // Stored property
      newValue.deviceName_property.startsBeingObserved (by: self.deviceName_property) // Transient property
      newValue.signatureForERCChecking_property.startsBeingObserved (by: self.signatureForERCChecking_property) // Transient property
      newValue.packagePadDictionary_property.startsBeingObserved (by: self.packagePadDictionary_property) // Transient property
      newValue.selectedPackageName_property.startsBeingObserved (by: self.selectedPackageName_property) // Transient property
      newValue.availablePackages_property.startsBeingObserved (by: self.availablePackages_property) // Transient property
      newValue.issues_property.startsBeingObserved (by: self.issues_property) // Transient property
      newValue.componentIsPlacedInBoard_property.startsBeingObserved (by: self.componentIsPlacedInBoard_property) // Transient property
      newValue.componentIsPlacedInBoardString_property.startsBeingObserved (by: self.componentIsPlacedInBoardString_property) // Transient property
      newValue.strokeBezierPath_property.startsBeingObserved (by: self.strokeBezierPath_property) // Transient property
      newValue.pinPadAssignments_property.startsBeingObserved (by: self.pinPadAssignments_property) // Transient property
      newValue.hasSlavePads_property.startsBeingObserved (by: self.hasSlavePads_property) // Transient property
      newValue.placementInSchematic_property.startsBeingObserved (by: self.placementInSchematic_property) // Transient property
      newValue.deviceSymbolDictionary_property.startsBeingObserved (by: self.deviceSymbolDictionary_property) // Transient property
      newValue.componentNameFontName_property.startsBeingObserved (by: self.componentNameFontName_property) // Transient property
      newValue.componentValueFontName_property.startsBeingObserved (by: self.componentValueFontName_property) // Transient property
      newValue.componentPadDictionary_property.startsBeingObserved (by: self.componentPadDictionary_property) // Transient property
      newValue.padNetDictionary_property.startsBeingObserved (by: self.padNetDictionary_property) // Transient property
      newValue.componentName_property.startsBeingObserved (by: self.componentName_property) // Transient property
      newValue.selectionDisplay_property.startsBeingObserved (by: self.selectionDisplay_property) // Transient property
      newValue.unplacedSymbols_property.startsBeingObserved (by: self.unplacedSymbols_property) // Transient property
      newValue.objectDisplay_property.startsBeingObserved (by: self.objectDisplay_property) // Transient property
      if let relay = self.mObserversOf_mConnectors { // to Many
        newValue.mConnectors_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbols { // to Many
        newValue.mSymbols_property.startsBeingObserved (by: relay)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mSlavePadsShouldBeRouted' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mSlavePadsShouldBeRouted_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mX' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mX_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mY' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mY_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mRotation' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mRotation_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mSide' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mSide_property = EBTransientProperty <ComponentSide?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDisplayLegend' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mDisplayLegend_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mNameIsVisibleInBoard' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mNameIsVisibleInBoard_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mXName' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mXName_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mYName' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mYName_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mNameFontSize' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mNameFontSize_property = EBTransientProperty <Double?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mNameRotation' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mNameRotation_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mValueIsVisibleInBoard' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mValueIsVisibleInBoard_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mXValue' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mXValue_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mYValue' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mYValue_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mValueFontSize' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mValueFontSize_property = EBTransientProperty <Double?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mValueRotation' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mValueRotation_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mComponentValue' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mComponentValue_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mNamePrefix' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mNamePrefix_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mNameIndex' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mNameIndex_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mXUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mXUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mYUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mYUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mXNameUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mXNameUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mYNameUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mYNameUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mXValueUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mXValueUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mYValueUnit' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mYValueUnit_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'deviceName' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let deviceName_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'signatureForERCChecking' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let signatureForERCChecking_property = EBTransientProperty <UInt32?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'packagePadDictionary' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let packagePadDictionary_property = EBTransientProperty <PackageMasterPadDictionary?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'selectedPackageName' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let selectedPackageName_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'availablePackages' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let availablePackages_property = EBTransientProperty <StringArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'issues' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let issues_property = EBTransientProperty <CanariIssueArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentIsPlacedInBoard' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let componentIsPlacedInBoard_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentIsPlacedInBoardString' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let componentIsPlacedInBoardString_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'strokeBezierPath' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let strokeBezierPath_property = EBTransientProperty <BézierPath?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'pinPadAssignments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let pinPadAssignments_property = EBTransientProperty <ThreeStringArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'hasSlavePads' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let hasSlavePads_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'placementInSchematic' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let placementInSchematic_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'deviceSymbolDictionary' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let deviceSymbolDictionary_property = EBTransientProperty <DeviceSymbolDictionary?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentNameFontName' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let componentNameFontName_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentValueFontName' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let componentValueFontName_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentPadDictionary' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let componentPadDictionary_property = EBTransientProperty <ComponentPadDescriptorDictionary?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'padNetDictionary' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let padNetDictionary_property = EBTransientProperty <PadNetDictionary?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentName' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let componentName_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'selectionDisplay' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let selectionDisplay_property = EBTransientProperty <EBShape?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'unplacedSymbols' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let unplacedSymbols_property = EBTransientProperty <StringTagArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'objectDisplay' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let objectDisplay_property = EBTransientProperty <EBShape?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mConnectors
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mConnectors : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mConnectors_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mConnectors {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mConnectors_property.startsBeingObserved (by: relay)
      self.mObserversOf_mConnectors = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mConnectors_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mConnectors?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mSymbols
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mSymbols : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbols_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSymbols {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mSymbols_property.startsBeingObserved (by: relay)
      self.mObserversOf_mSymbols = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbols_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mSymbols?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   INIT
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override init () {
    super.init ()
  //--- Configure mSlavePadsShouldBeRouted simple stored property
    self.mSlavePadsShouldBeRouted_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSlavePadsShouldBeRouted_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mX simple stored property
    self.mX_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mX_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mY simple stored property
    self.mY_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mY_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRotation simple stored property
    self.mRotation_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRotation_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSide simple stored property
    self.mSide_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSide_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mDisplayLegend simple stored property
    self.mDisplayLegend_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDisplayLegend_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mNameIsVisibleInBoard simple stored property
    self.mNameIsVisibleInBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNameIsVisibleInBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mXName simple stored property
    self.mXName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mXName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mYName simple stored property
    self.mYName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mYName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mNameFontSize simple stored property
    self.mNameFontSize_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNameFontSize_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mNameRotation simple stored property
    self.mNameRotation_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNameRotation_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mValueIsVisibleInBoard simple stored property
    self.mValueIsVisibleInBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mValueIsVisibleInBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mXValue simple stored property
    self.mXValue_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mXValue_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mYValue simple stored property
    self.mYValue_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mYValue_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mValueFontSize simple stored property
    self.mValueFontSize_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mValueFontSize_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mValueRotation simple stored property
    self.mValueRotation_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mValueRotation_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mComponentValue simple stored property
    self.mComponentValue_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mComponentValue_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mNamePrefix simple stored property
    self.mNamePrefix_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNamePrefix_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mNameIndex simple stored property
    self.mNameIndex_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNameIndex_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mXUnit simple stored property
    self.mXUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mXUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mYUnit simple stored property
    self.mYUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mYUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mXNameUnit simple stored property
    self.mXNameUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mXNameUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mYNameUnit simple stored property
    self.mYNameUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mYNameUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mXValueUnit simple stored property
    self.mXValueUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mXValueUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mYValueUnit simple stored property
    self.mYValueUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mYValueUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure deviceName transient property
    self.deviceName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.deviceName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.signatureForERCChecking_property.optionalSelection ?? .single (nil)
    }
  //--- Configure packagePadDictionary transient property
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.packagePadDictionary_property.optionalSelection ?? .single (nil)
    }
  //--- Configure selectedPackageName transient property
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectedPackageName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure availablePackages transient property
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.availablePackages_property.optionalSelection ?? .single (nil)
    }
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.issues_property.optionalSelection ?? .single (nil)
    }
  //--- Configure componentIsPlacedInBoard transient property
    self.componentIsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentIsPlacedInBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure componentIsPlacedInBoardString transient property
    self.componentIsPlacedInBoardString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentIsPlacedInBoardString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure strokeBezierPath transient property
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.strokeBezierPath_property.optionalSelection ?? .single (nil)
    }
  //--- Configure pinPadAssignments transient property
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.pinPadAssignments_property.optionalSelection ?? .single (nil)
    }
  //--- Configure hasSlavePads transient property
    self.hasSlavePads_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasSlavePads_property.optionalSelection ?? .single (nil)
    }
  //--- Configure placementInSchematic transient property
    self.placementInSchematic_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.placementInSchematic_property.optionalSelection ?? .single (nil)
    }
  //--- Configure deviceSymbolDictionary transient property
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.deviceSymbolDictionary_property.optionalSelection ?? .single (nil)
    }
  //--- Configure componentNameFontName transient property
    self.componentNameFontName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentNameFontName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure componentValueFontName transient property
    self.componentValueFontName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentValueFontName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure componentPadDictionary transient property
    self.componentPadDictionary_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentPadDictionary_property.optionalSelection ?? .single (nil)
    }
  //--- Configure padNetDictionary transient property
    self.padNetDictionary_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.padNetDictionary_property.optionalSelection ?? .single (nil)
    }
  //--- Configure componentName transient property
    self.componentName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectionDisplay_property.optionalSelection ?? .single (nil)
    }
  //--- Configure unplacedSymbols transient property
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.unplacedSymbols_property.optionalSelection ?? .single (nil)
    }
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.objectDisplay_property.optionalSelection ?? .single (nil)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    StoredObject_ComponentInProject
//--------------------------------------------------------------------------------------------------

final class StoredObject_ComponentInProject : ReadOnlyObject_ComponentInProject, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mKey : String
  var key : String { return self.mKey }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromValueDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let objectSavingIndex = inDictionary [self.mKey] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! ComponentInProject
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! ComponentInProject
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [self.mKey] = idx
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Signature ?
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mUsedForSignature : Bool

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Undo manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Opposite relationship management
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ComponentInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model will change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final class MyPrivateUndoer : NSObject { // For Swift 6
    let mOldValue : ComponentInProject?

    init (_ inOldValue : ComponentInProject?) {
      self.mOldValue = inOldValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  // @objc private final func myPerformUndo (_ inObject : MyPrivateUndoer) {  // For Swift 6
  //   self.setProp (inObject.mOldValue)
  // }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
  //--- Register old value in undo manager
     // self.undoManager?.registerUndo (  // For Swift 6
     //  withTarget: self,
     // selector: #selector (Self.myPerformUndo (_:)),
     // object: MyPrivateUndoer (inOldValue)
    // )
    self.undoManager?.registerUndo (withTarget: self) { selfTarget in
      selfTarget.setProp (inOldValue) // Ok in Swift 6.2
      // MainActor.assumeIsolated { selfTarget.setProp (inOldValue) }
    }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model did change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var selection : EBSelection < ComponentInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var propval : ComponentInProject? { return self.mWeakInternalValue }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   setProp
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setProp (_ inValue : ComponentInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSignatureCache : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

