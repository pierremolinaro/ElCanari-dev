//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_ComponentSymbolInProject : ReadOnlyAbstractObjectProperty <ComponentSymbolInProject> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentSymbolInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mCenterX_property.stopsBeingObserved (by: self.mCenterX_property) // Stored property
      oldValue.mCenterY_property.stopsBeingObserved (by: self.mCenterY_property) // Stored property
      oldValue.mRotation_property.stopsBeingObserved (by: self.mRotation_property) // Stored property
      oldValue.mMirror_property.stopsBeingObserved (by: self.mMirror_property) // Stored property
      oldValue.mSymbolInstanceName_property.stopsBeingObserved (by: self.mSymbolInstanceName_property) // Stored property
      oldValue.mSymbolTypeName_property.stopsBeingObserved (by: self.mSymbolTypeName_property) // Stored property
      oldValue.mDisplayComponentNameOffsetX_property.stopsBeingObserved (by: self.mDisplayComponentNameOffsetX_property) // Stored property
      oldValue.mDisplayComponentNameOffsetY_property.stopsBeingObserved (by: self.mDisplayComponentNameOffsetY_property) // Stored property
      oldValue.mDisplayComponentValue_property.stopsBeingObserved (by: self.mDisplayComponentValue_property) // Stored property
      oldValue.mDisplayComponentValueOffsetX_property.stopsBeingObserved (by: self.mDisplayComponentValueOffsetX_property) // Stored property
      oldValue.mDisplayComponentValueOffsetY_property.stopsBeingObserved (by: self.mDisplayComponentValueOffsetY_property) // Stored property
      oldValue.componentName_property.stopsBeingObserved (by: self.componentName_property) // Transient property
      oldValue.deviceName_property.stopsBeingObserved (by: self.deviceName_property) // Transient property
      oldValue.symbolInfo_property.stopsBeingObserved (by: self.symbolInfo_property) // Transient property
      oldValue.pinPadAssignments_property.stopsBeingObserved (by: self.pinPadAssignments_property) // Transient property
      oldValue.objectDisplay_property.stopsBeingObserved (by: self.objectDisplay_property) // Transient property
      oldValue.selectionDisplay_property.stopsBeingObserved (by: self.selectionDisplay_property) // Transient property
      oldValue.symbolInSchematic_property.stopsBeingObserved (by: self.symbolInSchematic_property) // Transient property
      if let relay = self.mObserversOf_mPoints { // to Many
        oldValue.mPoints_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mCenterX_property.startsToBeObserved (by: self.mCenterX_property) // Stored property
      newValue.mCenterY_property.startsToBeObserved (by: self.mCenterY_property) // Stored property
      newValue.mRotation_property.startsToBeObserved (by: self.mRotation_property) // Stored property
      newValue.mMirror_property.startsToBeObserved (by: self.mMirror_property) // Stored property
      newValue.mSymbolInstanceName_property.startsToBeObserved (by: self.mSymbolInstanceName_property) // Stored property
      newValue.mSymbolTypeName_property.startsToBeObserved (by: self.mSymbolTypeName_property) // Stored property
      newValue.mDisplayComponentNameOffsetX_property.startsToBeObserved (by: self.mDisplayComponentNameOffsetX_property) // Stored property
      newValue.mDisplayComponentNameOffsetY_property.startsToBeObserved (by: self.mDisplayComponentNameOffsetY_property) // Stored property
      newValue.mDisplayComponentValue_property.startsToBeObserved (by: self.mDisplayComponentValue_property) // Stored property
      newValue.mDisplayComponentValueOffsetX_property.startsToBeObserved (by: self.mDisplayComponentValueOffsetX_property) // Stored property
      newValue.mDisplayComponentValueOffsetY_property.startsToBeObserved (by: self.mDisplayComponentValueOffsetY_property) // Stored property
      newValue.componentName_property.startsToBeObserved (by: self.componentName_property) // Transient property
      newValue.deviceName_property.startsToBeObserved (by: self.deviceName_property) // Transient property
      newValue.symbolInfo_property.startsToBeObserved (by: self.symbolInfo_property) // Transient property
      newValue.pinPadAssignments_property.startsToBeObserved (by: self.pinPadAssignments_property) // Transient property
      newValue.objectDisplay_property.startsToBeObserved (by: self.objectDisplay_property) // Transient property
      newValue.selectionDisplay_property.startsToBeObserved (by: self.selectionDisplay_property) // Transient property
      newValue.symbolInSchematic_property.startsToBeObserved (by: self.symbolInSchematic_property) // Transient property
      if let relay = self.mObserversOf_mPoints { // to Many
        newValue.mPoints_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCenterX' stored property
  //····················································································································

  final let mCenterX_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mCenterY' stored property
  //····················································································································

  final let mCenterY_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  final let mRotation_property = EBTransientProperty <QuadrantRotation?> ()

  //····················································································································
  //   Observers of 'mMirror' stored property
  //····················································································································

  final let mMirror_property = EBTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mSymbolInstanceName' stored property
  //····················································································································

  final let mSymbolInstanceName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mSymbolTypeName' stored property
  //····················································································································

  final let mSymbolTypeName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mDisplayComponentNameOffsetX' stored property
  //····················································································································

  final let mDisplayComponentNameOffsetX_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDisplayComponentNameOffsetY' stored property
  //····················································································································

  final let mDisplayComponentNameOffsetY_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDisplayComponentValue' stored property
  //····················································································································

  final let mDisplayComponentValue_property = EBTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mDisplayComponentValueOffsetX' stored property
  //····················································································································

  final let mDisplayComponentValueOffsetX_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDisplayComponentValueOffsetY' stored property
  //····················································································································

  final let mDisplayComponentValueOffsetY_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  final let componentName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  final let deviceName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'symbolInfo' transient property
  //····················································································································

  final let symbolInfo_property = EBTransientProperty <ComponentSymbolInfo?> ()

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty <ThreeStringArray?> ()

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  final let objectDisplay_property = EBTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  final let selectionDisplay_property = EBTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'symbolInSchematic' transient property
  //····················································································································

  final let symbolInSchematic_property = EBTransientProperty <Bool?> ()

  //····················································································································
  //   Observable toMany property: mPoints
  //····················································································································

  private final var mObserversOf_mPoints : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mPoints_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPoints {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mPoints_property.startsToBeObserved (by: relay)
      self.mObserversOf_mPoints = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPoints_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPoints?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mCenterX simple stored property
    self.mCenterX_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mCenterX_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mCenterX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mCenterY simple stored property
    self.mCenterY_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mCenterY_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mCenterY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mRotation simple stored property
    self.mRotation_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRotation_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mMirror simple stored property
    self.mMirror_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mMirror_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mMirror_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mSymbolInstanceName simple stored property
    self.mSymbolInstanceName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSymbolInstanceName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mSymbolInstanceName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mSymbolTypeName simple stored property
    self.mSymbolTypeName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSymbolTypeName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mSymbolTypeName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mDisplayComponentNameOffsetX simple stored property
    self.mDisplayComponentNameOffsetX_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDisplayComponentNameOffsetX_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mDisplayComponentNameOffsetX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mDisplayComponentNameOffsetY simple stored property
    self.mDisplayComponentNameOffsetY_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDisplayComponentNameOffsetY_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mDisplayComponentNameOffsetY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mDisplayComponentValue simple stored property
    self.mDisplayComponentValue_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDisplayComponentValue_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mDisplayComponentValue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mDisplayComponentValueOffsetX simple stored property
    self.mDisplayComponentValueOffsetX_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDisplayComponentValueOffsetX_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mDisplayComponentValueOffsetX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mDisplayComponentValueOffsetY simple stored property
    self.mDisplayComponentValueOffsetY_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDisplayComponentValueOffsetY_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mDisplayComponentValueOffsetY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure componentName transient property
    self.componentName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.componentName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure deviceName transient property
    self.deviceName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.deviceName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.deviceName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure symbolInfo transient property
    self.symbolInfo_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.symbolInfo_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.symbolInfo_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure pinPadAssignments transient property
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.pinPadAssignments_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.pinPadAssignments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.objectDisplay_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.objectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectionDisplay_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.selectionDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure symbolInSchematic transient property
    self.symbolInSchematic_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.symbolInSchematic_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.symbolInSchematic_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_ComponentSymbolInProject : ReadOnlyObject_ComponentSymbolInProject, EBSignatureObserverProtocol, DocumentStorablePropertyAndRelationshipProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! ComponentSymbolInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! ComponentSymbolInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentSymbolInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ComponentSymbolInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentSymbolInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ComponentSymbolInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ComponentSymbolInProject? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : ComponentSymbolInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

