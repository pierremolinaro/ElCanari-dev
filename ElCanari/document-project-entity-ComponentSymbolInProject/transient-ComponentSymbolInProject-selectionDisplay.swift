//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_ComponentSymbolInProject_selectionDisplay (
       _ prefs_pinNameFont : NSFont,                      
       _ prefs_schematicBackColor : NSColor,              
       _ self_mDisplayComponentNameOffsetX : Int,         
       _ self_mDisplayComponentNameOffsetY : Int,         
       _ self_mDisplayComponentValue : Bool,              
       _ self_mDisplayComponentValueOffsetX : Int,        
       _ self_mDisplayComponentValueOffsetY : Int,        
       _ self_symbolInfo : ComponentSymbolInfo,           
       _ self_mRotation : QuadrantRotation
) -> EBShape {
//--- START OF USER ZONE 2
        var shape = EBShape ()
      //--- Frame symbol
        var strokeBezierPath = EBBezierPath ()
        strokeBezierPath.append (self_symbolInfo.strokeBezierPath)
        strokeBezierPath.lineWidth = SCHEMATIC_HILITE_WIDTH
        shape.add (stroke: [strokeBezierPath], .cyan)
      //--- Line from center to component value
        let symbolCenter = self_symbolInfo.center.cocoaPoint
        let componentValueCenter = CanariPoint (
          x: self_symbolInfo.center.x + self_mDisplayComponentValueOffsetX,
          y: self_symbolInfo.center.y + self_mDisplayComponentValueOffsetY
        )
        if self_mDisplayComponentValue {
          var bp = EBBezierPath ()
          bp.move (to: symbolCenter)
          bp.line (to: componentValueCenter.cocoaPoint)
          bp.lineWidth = SCHEMATIC_HILITE_WIDTH
          bp.lineCapStyle = .round
          bp.lineJoinStyle = .round
          shape.add (stroke: [bp], .cyan)
        }
      //--- line from center to name
        let componentNameCenter = CanariPoint (x: self_symbolInfo.center.x + self_mDisplayComponentNameOffsetX, y: self_symbolInfo.center.y + self_mDisplayComponentNameOffsetY)
        do{
          var bp = EBBezierPath ()
          bp.move (to: symbolCenter)
          bp.line (to: componentNameCenter.cocoaPoint)
          bp.lineWidth = SCHEMATIC_HILITE_WIDTH
          bp.lineCapStyle = .round
          bp.lineJoinStyle = .round
          shape.add (stroke: [bp], .cyan)
        }
      //--- Component value knob
        if self_mDisplayComponentValue {
          let value = (self_symbolInfo.componentValue != "") ? self_symbolInfo.componentValue : "No value"
          let componentValueShape = EBShape (
            textKnob: value,
            componentValueCenter.cocoaPoint,
            prefs_pinNameFont,
            foreColor: .black,
            backColor: prefs_schematicBackColor,
            .center,
            .center,
            .circ,
            knobIndex: SYMBOL_IN_SCHEMATICS_COMPONENT_VALUE_KNOB
          )
          shape.add (componentValueShape)
        }
      //--- Component name knob
        do{
          shape.add (textKnob: 
            self_symbolInfo.componentName,
            componentNameCenter.cocoaPoint,
            prefs_pinNameFont,
            foreColor: .black,
            backColor: prefs_schematicBackColor,
            .center,
            .center,
            .circ,
            knobIndex: SYMBOL_IN_SCHEMATICS_COMPONENT_NAME_KNOB
          )
        }
      //--- symbol rotation knob
        let symbolRotationInRadians = CGFloat (self_mRotation.rawValue) * .pi / 2.0
      //--- Center knob
        shape.add (knobAt:  symbolCenter, knobIndex: SYMBOL_IN_SCHEMATICS_CENTER_KNOB, .rect, SCHEMATIC_KNOB_SIZE)
      //--- Line from center to rotation knob
        let d = milsToCocoaUnit (200.0)
        let rotationKnobCenter = NSPoint (
          x: canariUnitToCocoa (self_symbolInfo.center.x) + d * cos (symbolRotationInRadians),
          y: canariUnitToCocoa (self_symbolInfo.center.y) + d * sin (symbolRotationInRadians)
        )
        var bp = EBBezierPath ()
        bp.move (to: symbolCenter)
        bp.line (to: rotationKnobCenter)
        bp.lineWidth = SCHEMATIC_HILITE_WIDTH
        bp.lineCapStyle = .round
        bp.lineJoinStyle = .round
        shape.add (stroke: [bp], .cyan)
        shape.add (
          knobAt: rotationKnobCenter,
          knobIndex: SYMBOL_IN_SCHEMATICS_ROTATION_KNOB,
          .circ,
          SCHEMATIC_KNOB_SIZE
        )
      //---
        return shape
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
