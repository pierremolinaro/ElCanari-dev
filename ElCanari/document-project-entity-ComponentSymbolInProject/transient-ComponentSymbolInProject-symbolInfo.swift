//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//--------------------------------------------------------------------------------------------------

@MainActor func transient_ComponentSymbolInProject_symbolInfo (
       _ prefs_pinNameColorForSchematic : NSColor,             
       _ prefs_pinNameFontForSchematic : NSFont,               
       _ prefs_pinNumberColorForSchematic : NSColor,           
       _ prefs_pinNumberFontForSchematic : NSFont,             
       _ self_mRotation : QuadrantRotation,                    
       _ self_mMirror : Bool,                                  
       _ self_componentName : String,                          
       _ self_mComponent_mComponentValue : String?,            
       _ self_mComponent_deviceSymbolDictionary : DeviceSymbolDictionary?,
       _ self_mSymbolInstanceName : String,                    
       _ self_mSymbolTypeName : String,                        
       _ self_mCenterX : Int,                                  
       _ self_mCenterY : Int,                                  
       _ self_mPoints_symbolNameNetName : [PointInSchematic_symbolNameNetName]
) -> ComponentSymbolInfo {
//--- START OF USER ZONE 2
      //--- Symbol pin name - net dictionary
        var pinNetNameDictionary = [String : String] ()
        for entry in self_mPoints_symbolNameNetName {
          if let x = entry.symbolNameNetName {
            pinNetNameDictionary [x.left] = x.right
          }
        }
      //--- Device info
        let key = SymbolInProjectIdentifier (symbolInstanceName: self_mSymbolInstanceName, symbolTypeName: self_mSymbolTypeName)
        if let deviceInfo = self_mComponent_deviceSymbolDictionary? [key], let componentValue = self_mComponent_mComponentValue {
        //--- Pin names and pad names
          let pinNameAttributes : [NSAttributedString.Key : Any] = [
            NSAttributedString.Key.font : prefs_pinNameFontForSchematic,
            NSAttributedString.Key.foregroundColor : prefs_pinNameColorForSchematic
          ]
          let pinNumberAttributes : [NSAttributedString.Key : Any] = [
            NSAttributedString.Key.font : prefs_pinNumberFontForSchematic,
            NSAttributedString.Key.foregroundColor : prefs_pinNumberColorForSchematic
          ]
          var pins = [ComponentPinDescriptor] ()
          for pinPadAssignment in deviceInfo.assignments {
            if let pin = pinPadAssignment.pin,
               pin.symbol.symbolInstanceName == self_mSymbolInstanceName,
               pin.symbol.symbolTypeName == self_mSymbolTypeName {
              // Swift.print ("\(#file):\(#line) — \(pin.symbol.symbolInstanceName)")
              var pinTextShape = EBShape ()
            //--- Pin name
              if pin.pinNameIsDisplayedInSchematics {
                var trText = AffineTransform ()
                trText.translate (x: canariUnitToCocoa (self_mCenterX), y: canariUnitToCocoa (self_mCenterY))
                trText.scale (x: self_mMirror ? -1.0 : 1.0, y: 1.0)
                trText.rotate (byDegrees: CGFloat (self_mRotation.rawValue) * 90.0)
                trText.translate (x: -canariUnitToCocoa (deviceInfo.center.x), y: -canariUnitToCocoa (deviceInfo.center.y))
                trText.translate (x: canariUnitToCocoa (pin.nameXY.x), y: canariUnitToCocoa (pin.nameXY.y))
                trText.rotate (byDegrees: -CGFloat (self_mRotation.rawValue & 2) * 90.0)
                if self_mMirror && ((self_mRotation.rawValue & 1) != 0) {
                  trText.rotate (byDegrees: 180.0)
                }
                trText.scale (x: self_mMirror ? -1.0 : 1.0, y: 1.0)
                let pinNameTextShape = EBShape (
                  text: pin.pinName,
                  NSPoint (),
                  pinNameAttributes,
                  self_mRotation.ebSymbolTextShapeHorizontalAlignment (alignment: pin.nameHorizontalAlignment, mirror: self_mMirror),
                  self_mRotation.ebSymbolTextShapeVerticalAlignment (alignment: pin.nameHorizontalAlignment, mirror: self_mMirror)
                )
                pinTextShape.add (pinNameTextShape.transformed (by: trText))
              }
            //--- Pin number
              var trText = AffineTransform ()
              trText.translate (x: canariUnitToCocoa (self_mCenterX), y: canariUnitToCocoa (self_mCenterY))
              trText.scale (x: self_mMirror ? -1.0 : 1.0, y: 1.0)
              trText.rotate (byDegrees: CGFloat (self_mRotation.rawValue) * 90.0)
              trText.translate (x: -canariUnitToCocoa (deviceInfo.center.x), y: -canariUnitToCocoa (deviceInfo.center.y))
              trText.translate (x: canariUnitToCocoa (pin.numberXY.x), y: canariUnitToCocoa (pin.numberXY.y))
              trText.rotate (byDegrees: -CGFloat (self_mRotation.rawValue & 2) * 90.0)
              if self_mMirror && ((self_mRotation.rawValue & 1) != 0) {
                trText.rotate (byDegrees: 180.0)
              }
              trText.scale (x: self_mMirror ? -1.0 : 1.0, y: 1.0)
              let pinNumberTextShape = EBShape (
                text: pinPadAssignment.padName,
                NSPoint (),
                pinNumberAttributes,
                self_mRotation.ebSymbolTextShapeHorizontalAlignment (alignment: pin.numberHorizontalAlignment, mirror: self_mMirror),
                self_mRotation.ebSymbolTextShapeVerticalAlignment (alignment: pin.nameHorizontalAlignment, mirror: self_mMirror)
              )
              pinTextShape.add (pinNumberTextShape.transformed (by: trText))
            //--- Pin location
              let pinLocationTransform = NSAffineTransform ()
              pinLocationTransform.translateX (by: canariUnitToCocoa (self_mCenterX), yBy: canariUnitToCocoa (self_mCenterY))
              pinLocationTransform.scaleX (by: self_mMirror ? -1.0 : 1.0, yBy: 1.0)
              pinLocationTransform.rotate (byDegrees: CGFloat (self_mRotation.rawValue) * 90.0)
              pinLocationTransform.translateX (by: -canariUnitToCocoa (deviceInfo.center.x), yBy: -canariUnitToCocoa (deviceInfo.center.y))
              let cocoaPinLocation = pinLocationTransform.transform (pin.pinXY.cocoaPoint)
              let pinLocation = cocoaPinLocation.canariPointAligned (onCanariGrid: SCHEMATIC_GRID_IN_CANARI_UNIT)
           //--- Tooltip
              let toolTipRect = NSRect (
                x: cocoaPinLocation.x - SCHEMATIC_GRID_IN_COCOA_UNIT / 2.0,
                y: cocoaPinLocation.y - SCHEMATIC_GRID_IN_COCOA_UNIT / 2.0,
                width: SCHEMATIC_GRID_IN_COCOA_UNIT,
                height: SCHEMATIC_GRID_IN_COCOA_UNIT
              )
              pinTextShape.appendToolTip (toolTipRect, pinNetNameDictionary [pin.pinName] ?? "—")
           //---
              let d = ComponentPinDescriptor (
                pinIdentifier: PinSymbolInProjectIdentifier (symbol: pin.symbol, pinName: pin.pinName),
                pinLocation: pinLocation,
                shape: pinTextShape,
                netName: pinNetNameDictionary [pin.pinName] ?? "",
                padName: pinPadAssignment.padName
              )
              pins.append (d)
            }
          }
        //--- Affine transformation for drawings
          let tr = NSAffineTransform ()
          tr.translateX (by: canariUnitToCocoa (self_mCenterX), yBy: canariUnitToCocoa (self_mCenterY))
          tr.scaleX (by: self_mMirror ? -1.0 : 1.0, yBy: 1.0)
          tr.rotate (byDegrees: CGFloat (self_mRotation.rawValue) * 90.0)
          tr.translateX (by: -canariUnitToCocoa (deviceInfo.center.x), yBy: -canariUnitToCocoa (deviceInfo.center.y))
          let transformedStrokeBezierPath = tr.transform (deviceInfo.strokeBezierPath)
          let transformedFilledBezierPath = tr.transform (deviceInfo.filledBezierPath)
          let componentSymbolCenter = CanariPoint (x: self_mCenterX, y: self_mCenterY)
          return ComponentSymbolInfo (
            filledBezierPath: transformedFilledBezierPath,
            strokeBezierPath: transformedStrokeBezierPath,
            center: componentSymbolCenter,
            pins: pins,
            componentName: self_componentName,
            componentValue: componentValue
          )
        }else{
          return ComponentSymbolInfo (
            filledBezierPath: NSBezierPath (),
            strokeBezierPath: NSBezierPath (),
            center: .zero,
            pins: [],
            componentName: self_componentName,
            componentValue: ""
          )
        }
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————
