//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_mDeviceName : AnyObject {
  var mDeviceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_mPrefix : AnyObject {
  var mPrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_mDeviceVersion : AnyObject {
  var mDeviceVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_mDeviceFileData : AnyObject {
  var mDeviceFileData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_versionString : AnyObject {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_sizeString : AnyObject {
  var sizeString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_canExport : AnyObject {
  var canExport : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_packageNames : AnyObject {
  var packageNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_deviceComponentCountString : AnyObject {
  var deviceComponentCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_canRemove : AnyObject {
  var canRemove : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_symbolAndTypesNames : AnyObject {
  var symbolAndTypesNames : SymbolInProjectIdentifierArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_pinPadAssignments : AnyObject {
  var pinPadAssignments : ThreeStringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceInProject_deviceSymbolDictionary : AnyObject {
  var deviceSymbolDictionary : DeviceSymbolDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DeviceInProject : EBManagedObject,
         DeviceInProject_mDeviceName,
         DeviceInProject_mPrefix,
         DeviceInProject_mDeviceVersion,
         DeviceInProject_mDeviceFileData,
         DeviceInProject_versionString,
         DeviceInProject_sizeString,
         DeviceInProject_canExport,
         DeviceInProject_packageNames,
         DeviceInProject_deviceComponentCountString,
         DeviceInProject_canRemove,
         DeviceInProject_symbolAndTypesNames,
         DeviceInProject_pinPadAssignments,
         DeviceInProject_deviceSymbolDictionary {

  //····················································································································
  //   Atomic property: mDeviceName
  //····················································································································

  final let mDeviceName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mDeviceName_toDefaultValue () {
    self.mDeviceName = ""
  }

  //····················································································································

  final var mDeviceName : String {
    get { return self.mDeviceName_property.propval }
    set { self.mDeviceName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPrefix
  //····················································································································

  final let mPrefix_property : EBStoredProperty_String

  //····················································································································

  final func reset_mPrefix_toDefaultValue () {
    self.mPrefix = ""
  }

  //····················································································································

  final var mPrefix : String {
    get { return self.mPrefix_property.propval }
    set { self.mPrefix_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDeviceVersion
  //····················································································································

  final let mDeviceVersion_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDeviceVersion_toDefaultValue () {
    self.mDeviceVersion = 0
  }

  //····················································································································

  final var mDeviceVersion : Int {
    get { return self.mDeviceVersion_property.propval }
    set { self.mDeviceVersion_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDeviceFileData
  //····················································································································

  final let mDeviceFileData_property : EBStoredProperty_Data

  //····················································································································

  final func reset_mDeviceFileData_toDefaultValue () {
    self.mDeviceFileData = Data ()
  }

  //····················································································································

  final var mDeviceFileData : Data {
    get { return self.mDeviceFileData_property.propval }
    set { self.mDeviceFileData_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPackages
  //····················································································································

  final let mPackages_property = StoredArrayOf_DevicePackageInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mPackages : EBReferenceArray <DevicePackageInProject> {
    get { return self.mPackages_property.propval }
    set { self.mPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbols
  //····················································································································

  final let mSymbols_property = StoredArrayOf_DeviceSymbolInstanceInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mSymbols : EBReferenceArray <DeviceSymbolInstanceInProject> {
    get { return self.mSymbols_property.propval }
    set { self.mSymbols_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mComponents
  //····················································································································

  final let mComponents_property = StoredArrayOf_ComponentInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mComponents : EBReferenceArray <ComponentInProject> {
    get { return self.mComponents_property.propval }
    set { self.mComponents_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPadAssignments
  //····················································································································

  final let mPadAssignments_property = StoredArrayOf_DevicePadAssignmentInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mPadAssignments : EBReferenceArray <DevicePadAssignmentInProject> {
    get { return self.mPadAssignments_property.propval }
    set { self.mPadAssignments_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  final let versionString_property = EBTransientProperty_String ()

  //····················································································································

  final var versionString : String? {
    switch self.versionString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sizeString
  //····················································································································

  final let sizeString_property = EBTransientProperty_String ()

  //····················································································································

  final var sizeString : String? {
    switch self.sizeString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canExport
  //····················································································································

  final let canExport_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canExport : Bool? {
    switch self.canExport_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: packageNames
  //····················································································································

  final let packageNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var packageNames : StringArray? {
    switch self.packageNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceComponentCountString
  //····················································································································

  final let deviceComponentCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var deviceComponentCountString : String? {
    switch self.deviceComponentCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemove
  //····················································································································

  final let canRemove_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemove : Bool? {
    switch self.canRemove_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolAndTypesNames
  //····················································································································

  final let symbolAndTypesNames_property = EBTransientProperty_SymbolInProjectIdentifierArray ()

  //····················································································································

  final var symbolAndTypesNames : SymbolInProjectIdentifierArray? {
    switch self.symbolAndTypesNames_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceSymbolDictionary
  //····················································································································

  final let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································

  final var deviceSymbolDictionary : DeviceSymbolDictionary? {
    switch self.deviceSymbolDictionary_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mDeviceName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mPrefix_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mDeviceVersion_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.mDeviceFileData_property = EBStoredProperty_Data (defaultValue: Data (), undoManager: inUndoManager)
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- To many property: mPackages (no option)
    self.mPackages_property.undoManager = inUndoManager
  //--- To many property: mSymbols (no option)
    self.mSymbols_property.undoManager = inUndoManager
  //--- To many property: mComponents (has opposite relationship)
    self.mComponents_property.undoManager = inUndoManager
    self.mComponents_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mDevice_property.setProp (me) } },
      resetter: { inObject in inObject.mDevice_property.setProp (nil) }
    )
  //--- To many property: mPadAssignments (no option)
    self.mPadAssignments_property.undoManager = inUndoManager
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDeviceVersion_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceInProject_versionString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDeviceVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: sizeString
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDeviceFileData_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceInProject_sizeString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDeviceFileData_property.addEBObserver (self.sizeString_property)
  //--- Atomic property: canExport
    self.canExport_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDeviceFileData_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceInProject_canExport (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDeviceFileData_property.addEBObserver (self.canExport_property)
  //--- Atomic property: packageNames
    self.packageNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPackages_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceInProject_packageNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_mPackageName (self.packageNames_property)
  //--- Atomic property: deviceComponentCountString
    self.deviceComponentCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceInProject_deviceComponentCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserver (self.deviceComponentCountString_property)
  //--- Atomic property: canRemove
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceInProject_canRemove (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserver (self.canRemove_property)
  //--- Atomic property: symbolAndTypesNames
    self.symbolAndTypesNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbols_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceInProject_symbolAndTypesNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolAndTypeName (self.symbolAndTypesNames_property)
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPadAssignments_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceInProject_pinPadAssignments (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPadAssignments_property.addEBObserverOf_pinPadAssignment (self.pinPadAssignments_property)
  //--- Atomic property: deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPadAssignments_property.selection
        let s1 = unwSelf.mSymbols_property.selection
        let s2 = unwSelf.mSymbols_property.selection
        let s3 = unwSelf.mSymbols_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_DeviceInProject_deviceSymbolDictionary (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPadAssignments_property.addEBObserverOf_descriptor (self.deviceSymbolDictionary_property)
    self.mSymbols_property.addEBObserverOf_symbolAndTypeName (self.deviceSymbolDictionary_property)
    self.mSymbols_property.addEBObserverOf_filledBezierPath (self.deviceSymbolDictionary_property)
    self.mSymbols_property.addEBObserverOf_strokeBezierPath (self.deviceSymbolDictionary_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mComponents_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mDevice_property.setProp (me) } },
      resetter: { inObject in inObject.mDevice_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mDeviceName
      self.mDeviceName_property.storeIn (dictionary: ioDictionary, forKey: "mDeviceName")
    //--- Atomic property: mPrefix
      self.mPrefix_property.storeIn (dictionary: ioDictionary, forKey: "mPrefix")
    //--- Atomic property: mDeviceVersion
      self.mDeviceVersion_property.storeIn (dictionary: ioDictionary, forKey: "mDeviceVersion")
    //--- Atomic property: mDeviceFileData
      self.mDeviceFileData_property.storeIn (dictionary: ioDictionary, forKey: "mDeviceFileData")
  //--- To many property: mPackages
    self.store (
      managedObjectArray: self.mPackages_property.propval.values,
      relationshipName: "mPackages",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbols
    self.store (
      managedObjectArray: self.mSymbols_property.propval.values,
      relationshipName: "mSymbols",
      intoDictionary: ioDictionary
    )
  //--- To many property: mComponents
    self.store (
      managedObjectArray: self.mComponents_property.propval.values,
      relationshipName: "mComponents",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPadAssignments
    self.store (
      managedObjectArray: self.mPadAssignments_property.propval.values,
      relationshipName: "mPadAssignments",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: mPackages
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPackages",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [DevicePackageInProject]
      self.mPackages_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mSymbols
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mSymbols",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [DeviceSymbolInstanceInProject]
      self.mSymbols_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mComponents
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mComponents",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [ComponentInProject]
      self.mComponents_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mPadAssignments
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPadAssignments",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [DevicePadAssignmentInProject]
      self.mPadAssignments_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mDeviceName
    self.mDeviceName_property.readFrom (dictionary: inDictionary, forKey: "mDeviceName")
  //--- Atomic property: mPrefix
    self.mPrefix_property.readFrom (dictionary: inDictionary, forKey: "mPrefix")
  //--- Atomic property: mDeviceVersion
    self.mDeviceVersion_property.readFrom (dictionary: inDictionary, forKey: "mDeviceVersion")
  //--- Atomic property: mDeviceFileData
    self.mDeviceFileData_property.readFrom (dictionary: inDictionary, forKey: "mDeviceFileData")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mDeviceName\n"
    ioString += "mPrefix\n"
    ioString += "mDeviceVersion\n"
    ioString += "mDeviceFileData\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mPackages\n"
    ioString += "mSymbols\n"
    ioString += "mComponents\n"
    ioString += "mPadAssignments\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mDeviceName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPrefix.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDeviceVersion.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDeviceFileData.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.mPackages.values, into: &ioData)
    enterToManyRelationshipObjectIndexes (from: self.mSymbols.values, into: &ioData)
    enterToManyRelationshipObjectIndexes (from: self.mComponents.values, into: &ioData)
    enterToManyRelationshipObjectIndexes (from: self.mPadAssignments.values, into: &ioData)
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mDeviceName"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mDeviceName = value
    }
    if let range = inDictionary ["mPrefix"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mPrefix = value
    }
    if let range = inDictionary ["mDeviceVersion"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.mDeviceVersion = value
    }
    if let range = inDictionary ["mDeviceFileData"], let value = Data.unarchiveFromDataRange (inData, range) {
      self.mDeviceFileData = value
    }
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
  //--- To many mPackages
    if let range = inDictionary ["mPackages"], range.length > 0 {
      var relationshipArray = EBReferenceArray <DevicePackageInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! DevicePackageInProject)
      }
      self.mPackages = relationshipArray
    }
  //--- To many mSymbols
    if let range = inDictionary ["mSymbols"], range.length > 0 {
      var relationshipArray = EBReferenceArray <DeviceSymbolInstanceInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! DeviceSymbolInstanceInProject)
      }
      self.mSymbols = relationshipArray
    }
  //--- To many mComponents
    if let range = inDictionary ["mComponents"], range.length > 0 {
      var relationshipArray = EBReferenceArray <ComponentInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! ComponentInProject)
      }
      self.mComponents = relationshipArray
    }
  //--- To many mPadAssignments
    if let range = inDictionary ["mPadAssignments"], range.length > 0 {
      var relationshipArray = EBReferenceArray <DevicePadAssignmentInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! DevicePadAssignmentInProject)
      }
      self.mPadAssignments = relationshipArray
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: mPackages
    for managedObject in self.mPackages.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mSymbols
    for managedObject in self.mSymbols.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mComponents
    for managedObject in self.mComponents.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mPadAssignments
    for managedObject in self.mPadAssignments.values {
      ioObjectArray.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

