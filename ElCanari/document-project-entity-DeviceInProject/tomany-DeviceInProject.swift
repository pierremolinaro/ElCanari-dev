//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DeviceInProject : ReadOnlyAbstractArrayProperty <DeviceInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DeviceInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <DeviceInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mDeviceName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPrefix_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDeviceVersion_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDeviceFileData_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_versionString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_sizeString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_canExport_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_packageNames_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_deviceComponentCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_canRemove_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_symbolAndTypesNames_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_pinPadAssignments_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mDeviceName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPrefix_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDeviceVersion_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDeviceFileData_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_versionString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_sizeString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_canExport_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_packageNames_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_deviceComponentCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_canRemove_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_symbolAndTypesNames_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_pinPadAssignments_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mDeviceName' stored property
  //····················································································································

  private final var mObserversOf_mDeviceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDeviceName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDeviceName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDeviceName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDeviceName_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    if !self.mObserversOf_mDeviceName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mDeviceName.dictionary {
          if let observer = entry.observer {
            managedObject.mDeviceName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mDeviceName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDeviceName_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for (_, entry) in self.mObserversOf_mDeviceName.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDeviceName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mDeviceName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  private final var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPrefix.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPrefix.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPrefix_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    if !self.mObserversOf_mPrefix.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mPrefix.dictionary {
          if let observer = entry.observer {
            managedObject.mPrefix_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mPrefix.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPrefix_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for (_, entry) in self.mObserversOf_mPrefix.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mPrefix_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mPrefix.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mDeviceVersion' stored property
  //····················································································································

  private final var mObserversOf_mDeviceVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDeviceVersion (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDeviceVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceVersion (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDeviceVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDeviceVersion_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    if !self.mObserversOf_mDeviceVersion.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mDeviceVersion.dictionary {
          if let observer = entry.observer {
            managedObject.mDeviceVersion_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mDeviceVersion.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDeviceVersion_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for (_, entry) in self.mObserversOf_mDeviceVersion.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDeviceVersion_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mDeviceVersion.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mDeviceFileData' stored property
  //····················································································································

  private final var mObserversOf_mDeviceFileData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDeviceFileData (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDeviceFileData.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceFileData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceFileData (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDeviceFileData.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceFileData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDeviceFileData_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    if !self.mObserversOf_mDeviceFileData.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mDeviceFileData.dictionary {
          if let observer = entry.observer {
            managedObject.mDeviceFileData_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mDeviceFileData.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDeviceFileData_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for (_, entry) in self.mObserversOf_mDeviceFileData.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDeviceFileData_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mDeviceFileData.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private final var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_versionString.dictionary {
        if let observer = entry.observer {
          managedObject.versionString_property.addEBObserver (observer)
        }else{
          self.mObserversOf_versionString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_versionString.dictionary {
        if let observer = entry.observer {
          managedObject.versionString_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_versionString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'sizeString' transient property
  //····················································································································

  private final var mObserversOf_sizeString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sizeString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sizeString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sizeString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sizeString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sizeString_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_sizeString.dictionary {
        if let observer = entry.observer {
          managedObject.sizeString_property.addEBObserver (observer)
        }else{
          self.mObserversOf_sizeString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sizeString_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_sizeString.dictionary {
        if let observer = entry.observer {
          managedObject.sizeString_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_sizeString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'canExport' transient property
  //····················································································································

  private final var mObserversOf_canExport = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canExport (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canExport.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canExport_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canExport (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canExport.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canExport_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canExport_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_canExport.dictionary {
        if let observer = entry.observer {
          managedObject.canExport_property.addEBObserver (observer)
        }else{
          self.mObserversOf_canExport.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canExport_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_canExport.dictionary {
        if let observer = entry.observer {
          managedObject.canExport_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_canExport.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'packageNames' transient property
  //····················································································································

  private final var mObserversOf_packageNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packageNames (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_packageNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageNames (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_packageNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_packageNames_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_packageNames.dictionary {
        if let observer = entry.observer {
          managedObject.packageNames_property.addEBObserver (observer)
        }else{
          self.mObserversOf_packageNames.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_packageNames_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_packageNames.dictionary {
        if let observer = entry.observer {
          managedObject.packageNames_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_packageNames.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceComponentCountString' transient property
  //····················································································································

  private final var mObserversOf_deviceComponentCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceComponentCountString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceComponentCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceComponentCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceComponentCountString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceComponentCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceComponentCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceComponentCountString_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_deviceComponentCountString.dictionary {
        if let observer = entry.observer {
          managedObject.deviceComponentCountString_property.addEBObserver (observer)
        }else{
          self.mObserversOf_deviceComponentCountString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceComponentCountString_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_deviceComponentCountString.dictionary {
        if let observer = entry.observer {
          managedObject.deviceComponentCountString_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_deviceComponentCountString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  private final var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canRemove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canRemove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canRemove_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_canRemove.dictionary {
        if let observer = entry.observer {
          managedObject.canRemove_property.addEBObserver (observer)
        }else{
          self.mObserversOf_canRemove.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canRemove_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_canRemove.dictionary {
        if let observer = entry.observer {
          managedObject.canRemove_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_canRemove.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolAndTypesNames' transient property
  //····················································································································

  private final var mObserversOf_symbolAndTypesNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolAndTypesNames (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolAndTypesNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypesNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolAndTypesNames (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolAndTypesNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypesNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolAndTypesNames_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolAndTypesNames.dictionary {
        if let observer = entry.observer {
          managedObject.symbolAndTypesNames_property.addEBObserver (observer)
        }else{
          self.mObserversOf_symbolAndTypesNames.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolAndTypesNames_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolAndTypesNames.dictionary {
        if let observer = entry.observer {
          managedObject.symbolAndTypesNames_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_symbolAndTypesNames.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  private final var mObserversOf_pinPadAssignments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinPadAssignments (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinPadAssignments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinPadAssignments (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinPadAssignments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinPadAssignments_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_pinPadAssignments.dictionary {
        if let observer = entry.observer {
          managedObject.pinPadAssignments_property.addEBObserver (observer)
        }else{
          self.mObserversOf_pinPadAssignments.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinPadAssignments_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_pinPadAssignments.dictionary {
        if let observer = entry.observer {
          managedObject.pinPadAssignments_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_pinPadAssignments.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private final var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_deviceSymbolDictionary.dictionary {
        if let observer = entry.observer {
          managedObject.deviceSymbolDictionary_property.addEBObserver (observer)
        }else{
          self.mObserversOf_deviceSymbolDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_deviceSymbolDictionary.dictionary {
        if let observer = entry.observer {
          managedObject.deviceSymbolDictionary_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_deviceSymbolDictionary.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_DeviceInProject : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : DeviceInProject, _ right : DeviceInProject) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_DeviceInProject? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_DeviceInProject,
                        sortCallback inSortCallBack : Optional < (_ left : DeviceInProject, _ right : DeviceInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <DeviceInProject>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [DeviceInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DeviceInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_DeviceInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <DeviceInProject> ()
      for superObject in newModelArray.values {
        if let object = superObject as? DeviceInProject {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [DeviceInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DeviceInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DeviceInProject : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <DeviceInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_DeviceInProject : ReadWriteArrayOf_DeviceInProject {

  //····················································································································

  private weak var mModel : ReadWriteArrayOf_DeviceInProject? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_DeviceInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <DeviceInProject>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <DeviceInProject> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <DeviceInProject>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [DeviceInProject] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DeviceInProject> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_DeviceInProject : ReadWriteArrayOf_DeviceInProject, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : DeviceInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSPopUpButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
          }
        }
      }
    }
  #endif

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <DeviceInProject>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DeviceInProject>,
                                 addedSet inAddedSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [DeviceInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <DeviceInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <DeviceInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : DeviceInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : DeviceInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_DeviceInProject : ReadWriteArrayOf_DeviceInProject {

  //····················································································································

  override var selection : EBSelection < [DeviceInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <DeviceInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <DeviceInProject> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : DeviceInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : DeviceInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_DeviceInProject : StoredArrayOf_DeviceInProject {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <DeviceInProject> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DeviceInProject") as? DeviceInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mDeviceName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPrefix (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDeviceVersion (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDeviceFileData (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { [weak self] in self?.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

