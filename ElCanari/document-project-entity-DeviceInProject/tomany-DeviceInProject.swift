//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DeviceInProject : ReadOnlyAbstractArrayProperty <DeviceInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DeviceInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <DeviceInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      managedObject.mDeviceName_property.stopsBeingObserved (by: self.mObserversOf_mDeviceName) // Stored property
      managedObject.mPrefix_property.stopsBeingObserved (by: self.mObserversOf_mPrefix) // Stored property
      managedObject.mDeviceVersion_property.stopsBeingObserved (by: self.mObserversOf_mDeviceVersion) // Stored property
      managedObject.mDeviceFileData_property.stopsBeingObserved (by: self.mObserversOf_mDeviceFileData) // Stored property
      managedObject.versionString_property.stopsBeingObserved (by: self.mObserversOf_versionString) // Transient property
      managedObject.sizeString_property.stopsBeingObserved (by: self.mObserversOf_sizeString) // Transient property
      managedObject.canExport_property.stopsBeingObserved (by: self.mObserversOf_canExport) // Transient property
      managedObject.packageNames_property.stopsBeingObserved (by: self.mObserversOf_packageNames) // Transient property
      managedObject.deviceComponentCountString_property.stopsBeingObserved (by: self.mObserversOf_deviceComponentCountString) // Transient property
      managedObject.canRemove_property.stopsBeingObserved (by: self.mObserversOf_canRemove) // Transient property
      managedObject.symbolAndTypesNames_property.stopsBeingObserved (by: self.mObserversOf_symbolAndTypesNames) // Transient property
      managedObject.pinPadAssignments_property.stopsBeingObserved (by: self.mObserversOf_pinPadAssignments) // Transient property
      managedObject.deviceSymbolDictionary_property.stopsBeingObserved (by: self.mObserversOf_deviceSymbolDictionary) // Transient property
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      managedObject.mDeviceName_property.startsToBeObserved (by: self.mObserversOf_mDeviceName) // Stored property
      managedObject.mPrefix_property.startsToBeObserved (by: self.mObserversOf_mPrefix) // Stored property
      managedObject.mDeviceVersion_property.startsToBeObserved (by: self.mObserversOf_mDeviceVersion) // Stored property
      managedObject.mDeviceFileData_property.startsToBeObserved (by: self.mObserversOf_mDeviceFileData) // Stored property
      managedObject.versionString_property.startsToBeObserved (by: self.mObserversOf_versionString) // Transient property
      managedObject.sizeString_property.startsToBeObserved (by: self.mObserversOf_sizeString) // Transient property
      managedObject.canExport_property.startsToBeObserved (by: self.mObserversOf_canExport) // Transient property
      managedObject.packageNames_property.startsToBeObserved (by: self.mObserversOf_packageNames) // Transient property
      managedObject.deviceComponentCountString_property.startsToBeObserved (by: self.mObserversOf_deviceComponentCountString) // Transient property
      managedObject.canRemove_property.startsToBeObserved (by: self.mObserversOf_canRemove) // Transient property
      managedObject.symbolAndTypesNames_property.startsToBeObserved (by: self.mObserversOf_symbolAndTypesNames) // Transient property
      managedObject.pinPadAssignments_property.startsToBeObserved (by: self.mObserversOf_pinPadAssignments) // Transient property
      managedObject.deviceSymbolDictionary_property.startsToBeObserved (by: self.mObserversOf_deviceSymbolDictionary) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mDeviceName' stored property
  //····················································································································

  private final var mObserversOf_mDeviceName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDeviceName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDeviceName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDeviceName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDeviceName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDeviceName_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mDeviceName_property.startsToBeObserved (by: self.mObserversOf_mDeviceName)
    }*/
    /* if !self.mObserversOf_mDeviceName.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDeviceName.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDeviceName_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDeviceName.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDeviceName_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      managedObject.mDeviceName_property.stopsBeingObserved (by: self.mObserversOf_mDeviceName)
    }
    for entry in self.mObserversOf_mDeviceName.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDeviceName_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDeviceName.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  private final var mObserversOf_mPrefix = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mPrefix_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mPrefix.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mPrefix_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mPrefix.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mPrefix_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mPrefix_property.startsToBeObserved (by: self.mObserversOf_mPrefix)
    }*/
    /* if !self.mObserversOf_mPrefix.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mPrefix.values () {
          if let observer = entry.possibleObserver {
            managedObject.mPrefix_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mPrefix.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mPrefix_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      managedObject.mPrefix_property.stopsBeingObserved (by: self.mObserversOf_mPrefix)
    }
    for entry in self.mObserversOf_mPrefix.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mPrefix_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mPrefix.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mDeviceVersion' stored property
  //····················································································································

  private final var mObserversOf_mDeviceVersion = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDeviceVersion_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDeviceVersion.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceVersion_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDeviceVersion_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDeviceVersion.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceVersion_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDeviceVersion_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mDeviceVersion_property.startsToBeObserved (by: self.mObserversOf_mDeviceVersion)
    }*/
    /* if !self.mObserversOf_mDeviceVersion.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDeviceVersion.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDeviceVersion_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDeviceVersion.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDeviceVersion_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      managedObject.mDeviceVersion_property.stopsBeingObserved (by: self.mObserversOf_mDeviceVersion)
    }
    for entry in self.mObserversOf_mDeviceVersion.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDeviceVersion_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDeviceVersion.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mDeviceFileData' stored property
  //····················································································································

  private final var mObserversOf_mDeviceFileData = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mDeviceFileData_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mDeviceFileData.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceFileData_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mDeviceFileData_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mDeviceFileData.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceFileData_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mDeviceFileData_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mDeviceFileData_property.startsToBeObserved (by: self.mObserversOf_mDeviceFileData)
    }*/
    /* if !self.mObserversOf_mDeviceFileData.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mDeviceFileData.values () {
          if let observer = entry.possibleObserver {
            managedObject.mDeviceFileData_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mDeviceFileData.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mDeviceFileData_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      managedObject.mDeviceFileData_property.stopsBeingObserved (by: self.mObserversOf_mDeviceFileData)
    }
    for entry in self.mObserversOf_mDeviceFileData.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDeviceFileData_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mDeviceFileData.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private final var mObserversOf_versionString = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_versionString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_versionString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_versionString_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_versionString.values () {
        if let observer = entry.possibleObserver {
          managedObject.versionString_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_versionString.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_versionString.values () {
        if let observer = entry.possibleObserver {
          managedObject.versionString_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_versionString.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'sizeString' transient property
  //····················································································································

  private final var mObserversOf_sizeString = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_sizeString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_sizeString.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_sizeString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_sizeString.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_sizeString_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_sizeString.values () {
        if let observer = entry.possibleObserver {
          managedObject.sizeString_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_sizeString.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_sizeString_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_sizeString.values () {
        if let observer = entry.possibleObserver {
          managedObject.sizeString_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_sizeString.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'canExport' transient property
  //····················································································································

  private final var mObserversOf_canExport = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_canExport_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_canExport.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canExport_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_canExport_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_canExport.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canExport_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_canExport_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_canExport.values () {
        if let observer = entry.possibleObserver {
          managedObject.canExport_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_canExport.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_canExport_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_canExport.values () {
        if let observer = entry.possibleObserver {
          managedObject.canExport_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_canExport.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'packageNames' transient property
  //····················································································································

  private final var mObserversOf_packageNames = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_packageNames_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_packageNames.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageNames_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_packageNames_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_packageNames.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageNames_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_packageNames_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_packageNames.values () {
        if let observer = entry.possibleObserver {
          managedObject.packageNames_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_packageNames.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_packageNames_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_packageNames.values () {
        if let observer = entry.possibleObserver {
          managedObject.packageNames_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_packageNames.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'deviceComponentCountString' transient property
  //····················································································································

  private final var mObserversOf_deviceComponentCountString = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_deviceComponentCountString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_deviceComponentCountString.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceComponentCountString_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_deviceComponentCountString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_deviceComponentCountString.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceComponentCountString_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_deviceComponentCountString_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_deviceComponentCountString.values () {
        if let observer = entry.possibleObserver {
          managedObject.deviceComponentCountString_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_deviceComponentCountString.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_deviceComponentCountString_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_deviceComponentCountString.values () {
        if let observer = entry.possibleObserver {
          managedObject.deviceComponentCountString_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_deviceComponentCountString.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  private final var mObserversOf_canRemove = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_canRemove_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_canRemove.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_canRemove_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_canRemove.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_canRemove_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_canRemove.values () {
        if let observer = entry.possibleObserver {
          managedObject.canRemove_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_canRemove.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_canRemove_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_canRemove.values () {
        if let observer = entry.possibleObserver {
          managedObject.canRemove_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_canRemove.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'symbolAndTypesNames' transient property
  //····················································································································

  private final var mObserversOf_symbolAndTypesNames = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_symbolAndTypesNames_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_symbolAndTypesNames.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypesNames_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_symbolAndTypesNames_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_symbolAndTypesNames.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypesNames_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_symbolAndTypesNames_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_symbolAndTypesNames.values () {
        if let observer = entry.possibleObserver {
          managedObject.symbolAndTypesNames_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_symbolAndTypesNames.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_symbolAndTypesNames_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_symbolAndTypesNames.values () {
        if let observer = entry.possibleObserver {
          managedObject.symbolAndTypesNames_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_symbolAndTypesNames.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  private final var mObserversOf_pinPadAssignments = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_pinPadAssignments_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_pinPadAssignments.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_pinPadAssignments_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_pinPadAssignments.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_pinPadAssignments_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_pinPadAssignments.values () {
        if let observer = entry.possibleObserver {
          managedObject.pinPadAssignments_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_pinPadAssignments.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_pinPadAssignments_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_pinPadAssignments.values () {
        if let observer = entry.possibleObserver {
          managedObject.pinPadAssignments_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_pinPadAssignments.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private final var mObserversOf_deviceSymbolDictionary = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_deviceSymbolDictionary_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_deviceSymbolDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_deviceSymbolDictionary.values () {
        if let observer = entry.possibleObserver {
          managedObject.deviceSymbolDictionary_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_deviceSymbolDictionary.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (_ inSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_deviceSymbolDictionary.values () {
        if let observer = entry.possibleObserver {
          managedObject.deviceSymbolDictionary_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_deviceSymbolDictionary.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_DeviceInProject : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : DeviceInProject, _ right : DeviceInProject) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_DeviceInProject? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_DeviceInProject,
                        sortCallback inSortCallBack : Optional < (_ left : DeviceInProject, _ right : DeviceInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <DeviceInProject>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [DeviceInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DeviceInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_DeviceInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DeviceInProject : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <DeviceInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_DeviceInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_DeviceInProject : ReadWriteArrayOf_DeviceInProject, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <DeviceInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! DeviceInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <DeviceInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! DeviceInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : DeviceInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <DeviceInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DeviceInProject>,
                                 addedSet inAddedSet : EBReferenceSet <DeviceInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [DeviceInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <DeviceInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <DeviceInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : DeviceInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : DeviceInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_DeviceInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

