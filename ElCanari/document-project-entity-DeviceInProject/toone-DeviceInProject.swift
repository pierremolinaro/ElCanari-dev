//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_DeviceInProject : ReadOnlyAbstractObjectProperty <DeviceInProject> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mDeviceName_property.stopsBeingObserved (by: self.mDeviceName_property) // Stored property
      oldValue.mPrefix_property.stopsBeingObserved (by: self.mPrefix_property) // Stored property
      oldValue.mDeviceVersion_property.stopsBeingObserved (by: self.mDeviceVersion_property) // Stored property
      oldValue.mDeviceFileData_property.stopsBeingObserved (by: self.mDeviceFileData_property) // Stored property
      oldValue.versionString_property.stopsBeingObserved (by: self.versionString_property) // Transient property
      oldValue.sizeString_property.stopsBeingObserved (by: self.sizeString_property) // Transient property
      oldValue.canExport_property.stopsBeingObserved (by: self.canExport_property) // Transient property
      oldValue.packageNames_property.stopsBeingObserved (by: self.packageNames_property) // Transient property
      oldValue.deviceComponentCountString_property.stopsBeingObserved (by: self.deviceComponentCountString_property) // Transient property
      oldValue.canRemove_property.stopsBeingObserved (by: self.canRemove_property) // Transient property
      oldValue.symbolAndTypesNames_property.stopsBeingObserved (by: self.symbolAndTypesNames_property) // Transient property
      oldValue.pinPadAssignments_property.stopsBeingObserved (by: self.pinPadAssignments_property) // Transient property
      oldValue.deviceSymbolDictionary_property.stopsBeingObserved (by: self.deviceSymbolDictionary_property) // Transient property
      if let relay = self.mObserversOf_mPackages { // to Many
        oldValue.mPackages_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbols { // to Many
        oldValue.mSymbols_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponents { // to Many
        oldValue.mComponents_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPadAssignments { // to Many
        oldValue.mPadAssignments_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mDeviceName_property.startsToBeObserved (by: self.mDeviceName_property) // Stored property
      newValue.mPrefix_property.startsToBeObserved (by: self.mPrefix_property) // Stored property
      newValue.mDeviceVersion_property.startsToBeObserved (by: self.mDeviceVersion_property) // Stored property
      newValue.mDeviceFileData_property.startsToBeObserved (by: self.mDeviceFileData_property) // Stored property
      newValue.versionString_property.startsToBeObserved (by: self.versionString_property) // Transient property
      newValue.sizeString_property.startsToBeObserved (by: self.sizeString_property) // Transient property
      newValue.canExport_property.startsToBeObserved (by: self.canExport_property) // Transient property
      newValue.packageNames_property.startsToBeObserved (by: self.packageNames_property) // Transient property
      newValue.deviceComponentCountString_property.startsToBeObserved (by: self.deviceComponentCountString_property) // Transient property
      newValue.canRemove_property.startsToBeObserved (by: self.canRemove_property) // Transient property
      newValue.symbolAndTypesNames_property.startsToBeObserved (by: self.symbolAndTypesNames_property) // Transient property
      newValue.pinPadAssignments_property.startsToBeObserved (by: self.pinPadAssignments_property) // Transient property
      newValue.deviceSymbolDictionary_property.startsToBeObserved (by: self.deviceSymbolDictionary_property) // Transient property
      if let relay = self.mObserversOf_mPackages { // to Many
        newValue.mPackages_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbols { // to Many
        newValue.mSymbols_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponents { // to Many
        newValue.mComponents_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPadAssignments { // to Many
        newValue.mPadAssignments_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDeviceName' stored property
  //····················································································································

  final let mDeviceName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  final let mPrefix_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mDeviceVersion' stored property
  //····················································································································

  final let mDeviceVersion_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDeviceFileData' stored property
  //····················································································································

  final let mDeviceFileData_property = EBGenericTransientProperty <Data?> ()

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  final let versionString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'sizeString' transient property
  //····················································································································

  final let sizeString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'canExport' transient property
  //····················································································································

  final let canExport_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'packageNames' transient property
  //····················································································································

  final let packageNames_property = EBGenericTransientProperty <StringArray?> ()

  //····················································································································
  //   Observers of 'deviceComponentCountString' transient property
  //····················································································································

  final let deviceComponentCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  final let canRemove_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'symbolAndTypesNames' transient property
  //····················································································································

  final let symbolAndTypesNames_property = EBGenericTransientProperty <SymbolInProjectIdentifierArray?> ()

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  final let pinPadAssignments_property = EBGenericTransientProperty <ThreeStringArray?> ()

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  final let deviceSymbolDictionary_property = EBGenericTransientProperty <DeviceSymbolDictionary?> ()

  //····················································································································
  //   Observable toMany property: mPackages
  //····················································································································

  private final var mObserversOf_mPackages : EBObservedObject? = nil

  //····················································································································

  final func toMany_mPackages_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mPackages {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.mPackages_property.startsToBeObserved (by: relay)
      self.mObserversOf_mPackages = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPackages_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPackages?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: mSymbols
  //····················································································································

  private final var mObserversOf_mSymbols : EBObservedObject? = nil

  //····················································································································

  final func toMany_mSymbols_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mSymbols {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.mSymbols_property.startsToBeObserved (by: relay)
      self.mObserversOf_mSymbols = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mSymbols_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mSymbols?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: mComponents
  //····················································································································

  private final var mObserversOf_mComponents : EBObservedObject? = nil

  //····················································································································

  final func toMany_mComponents_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mComponents {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.mComponents_property.startsToBeObserved (by: relay)
      self.mObserversOf_mComponents = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mComponents_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mComponents?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: mPadAssignments
  //····················································································································

  private final var mObserversOf_mPadAssignments : EBObservedObject? = nil

  //····················································································································

  final func toMany_mPadAssignments_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mPadAssignments {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.mWeakInternalValue?.mPadAssignments_property.startsToBeObserved (by: relay)
      self.mObserversOf_mPadAssignments = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPadAssignments_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPadAssignments?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mDeviceName simple stored property
    self.mDeviceName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDeviceName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPrefix simple stored property
    self.mPrefix_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mPrefix_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDeviceVersion simple stored property
    self.mDeviceVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDeviceVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDeviceFileData simple stored property
    self.mDeviceFileData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDeviceFileData_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure versionString transient property
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.versionString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure sizeString transient property
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.sizeString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure canExport transient property
    self.canExport_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.canExport_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure packageNames transient property
    self.packageNames_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.packageNames_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure deviceComponentCountString transient property
    self.deviceComponentCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.deviceComponentCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure canRemove transient property
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.canRemove_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure symbolAndTypesNames transient property
    self.symbolAndTypesNames_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.symbolAndTypesNames_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure pinPadAssignments transient property
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.pinPadAssignments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure deviceSymbolDictionary transient property
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.deviceSymbolDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_DeviceInProject : ReadOnlyObject_DeviceInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorablePropertyProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! DeviceInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! DeviceInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < DeviceInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DeviceInProject? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : DeviceInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

