//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    ReadOnlyObject_DeviceInProject
//--------------------------------------------------------------------------------------------------

class ReadOnlyObject_DeviceInProject : EBReadOnlyAbstractObjectProperty <DeviceInProject> {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mDeviceName_property.stopsBeingObserved (by: self.mDeviceName_property) // Stored property
      oldValue.mCategory_property.stopsBeingObserved (by: self.mCategory_property) // Stored property
      oldValue.mPrefix_property.stopsBeingObserved (by: self.mPrefix_property) // Stored property
      oldValue.mDeviceVersion_property.stopsBeingObserved (by: self.mDeviceVersion_property) // Stored property
      oldValue.mDeviceFileData_property.stopsBeingObserved (by: self.mDeviceFileData_property) // Stored property
      oldValue.mFileSystemStatusMessageForDeviceInProject_property.stopsBeingObserved (by: self.mFileSystemStatusMessageForDeviceInProject_property) // Stored property
      oldValue.mFileSystemStatusRequiresAttentionForDeviceInProject_property.stopsBeingObserved (by: self.mFileSystemStatusRequiresAttentionForDeviceInProject_property) // Stored property
      oldValue.versionString_property.stopsBeingObserved (by: self.versionString_property) // Transient property
      oldValue.sizeString_property.stopsBeingObserved (by: self.sizeString_property) // Transient property
      oldValue.canExport_property.stopsBeingObserved (by: self.canExport_property) // Transient property
      oldValue.packageNames_property.stopsBeingObserved (by: self.packageNames_property) // Transient property
      oldValue.fileSystemStatusImage_property.stopsBeingObserved (by: self.fileSystemStatusImage_property) // Transient property
      oldValue.deviceComponentCountString_property.stopsBeingObserved (by: self.deviceComponentCountString_property) // Transient property
      oldValue.canRemove_property.stopsBeingObserved (by: self.canRemove_property) // Transient property
      oldValue.symbolAndTypesNames_property.stopsBeingObserved (by: self.symbolAndTypesNames_property) // Transient property
      oldValue.pinPadAssignments_property.stopsBeingObserved (by: self.pinPadAssignments_property) // Transient property
      oldValue.deviceSymbolDictionary_property.stopsBeingObserved (by: self.deviceSymbolDictionary_property) // Transient property
      if let relay = self.mObserversOf_mPackages { // to Many
        oldValue.mPackages_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbols { // to Many
        oldValue.mSymbols_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponents { // to Many
        oldValue.mComponents_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPadAssignments { // to Many
        oldValue.mPadAssignments_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mDeviceName_property.startsBeingObserved (by: self.mDeviceName_property) // Stored property
      newValue.mCategory_property.startsBeingObserved (by: self.mCategory_property) // Stored property
      newValue.mPrefix_property.startsBeingObserved (by: self.mPrefix_property) // Stored property
      newValue.mDeviceVersion_property.startsBeingObserved (by: self.mDeviceVersion_property) // Stored property
      newValue.mDeviceFileData_property.startsBeingObserved (by: self.mDeviceFileData_property) // Stored property
      newValue.mFileSystemStatusMessageForDeviceInProject_property.startsBeingObserved (by: self.mFileSystemStatusMessageForDeviceInProject_property) // Stored property
      newValue.mFileSystemStatusRequiresAttentionForDeviceInProject_property.startsBeingObserved (by: self.mFileSystemStatusRequiresAttentionForDeviceInProject_property) // Stored property
      newValue.versionString_property.startsBeingObserved (by: self.versionString_property) // Transient property
      newValue.sizeString_property.startsBeingObserved (by: self.sizeString_property) // Transient property
      newValue.canExport_property.startsBeingObserved (by: self.canExport_property) // Transient property
      newValue.packageNames_property.startsBeingObserved (by: self.packageNames_property) // Transient property
      newValue.fileSystemStatusImage_property.startsBeingObserved (by: self.fileSystemStatusImage_property) // Transient property
      newValue.deviceComponentCountString_property.startsBeingObserved (by: self.deviceComponentCountString_property) // Transient property
      newValue.canRemove_property.startsBeingObserved (by: self.canRemove_property) // Transient property
      newValue.symbolAndTypesNames_property.startsBeingObserved (by: self.symbolAndTypesNames_property) // Transient property
      newValue.pinPadAssignments_property.startsBeingObserved (by: self.pinPadAssignments_property) // Transient property
      newValue.deviceSymbolDictionary_property.startsBeingObserved (by: self.deviceSymbolDictionary_property) // Transient property
      if let relay = self.mObserversOf_mPackages { // to Many
        newValue.mPackages_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mSymbols { // to Many
        newValue.mSymbols_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponents { // to Many
        newValue.mComponents_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mPadAssignments { // to Many
        newValue.mPadAssignments_property.startsBeingObserved (by: relay)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDeviceName' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mDeviceName_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mCategory' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mCategory_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mPrefix' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mPrefix_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDeviceVersion' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mDeviceVersion_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDeviceFileData' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mDeviceFileData_property = EBTransientProperty <Data?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFileSystemStatusMessageForDeviceInProject' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFileSystemStatusMessageForDeviceInProject_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFileSystemStatusRequiresAttentionForDeviceInProject' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFileSystemStatusRequiresAttentionForDeviceInProject_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'versionString' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let versionString_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'sizeString' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let sizeString_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'canExport' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let canExport_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'packageNames' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let packageNames_property = EBTransientProperty <StringArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'fileSystemStatusImage' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let fileSystemStatusImage_property = EBTransientProperty <NSImage?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'deviceComponentCountString' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let deviceComponentCountString_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'canRemove' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let canRemove_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'symbolAndTypesNames' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let symbolAndTypesNames_property = EBTransientProperty <SymbolInProjectIdentifierArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'pinPadAssignments' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let pinPadAssignments_property = EBTransientProperty <ThreeStringArray?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'deviceSymbolDictionary' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let deviceSymbolDictionary_property = EBTransientProperty <DeviceSymbolDictionary?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mPackages
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mPackages : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPackages_StartsBeingObserved (by inObserver : some EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPackages {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mPackages_property.startsBeingObserved (by: relay)
      self.mObserversOf_mPackages = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPackages_StopsBeingObserved (by inObserver : some EBObserverProtocol) {
    self.mObserversOf_mPackages?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mSymbols
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mSymbols : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbols_StartsBeingObserved (by inObserver : some EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSymbols {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mSymbols_property.startsBeingObserved (by: relay)
      self.mObserversOf_mSymbols = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mSymbols_StopsBeingObserved (by inObserver : some EBObserverProtocol) {
    self.mObserversOf_mSymbols?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mComponents
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mComponents : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mComponents_StartsBeingObserved (by inObserver : some EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mComponents {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mComponents_property.startsBeingObserved (by: relay)
      self.mObserversOf_mComponents = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mComponents_StopsBeingObserved (by inObserver : some EBObserverProtocol) {
    self.mObserversOf_mComponents?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mPadAssignments
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mPadAssignments : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPadAssignments_StartsBeingObserved (by inObserver : some EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPadAssignments {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mPadAssignments_property.startsBeingObserved (by: relay)
      self.mObserversOf_mPadAssignments = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mPadAssignments_StopsBeingObserved (by inObserver : some EBObserverProtocol) {
    self.mObserversOf_mPadAssignments?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   INIT
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override init () {
    super.init ()
  //--- Configure mDeviceName simple stored property
    self.mDeviceName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDeviceName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mCategory simple stored property
    self.mCategory_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mCategory_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPrefix simple stored property
    self.mPrefix_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPrefix_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mDeviceVersion simple stored property
    self.mDeviceVersion_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDeviceVersion_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mDeviceFileData simple stored property
    self.mDeviceFileData_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDeviceFileData_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mFileSystemStatusMessageForDeviceInProject simple stored property
    self.mFileSystemStatusMessageForDeviceInProject_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFileSystemStatusMessageForDeviceInProject_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mFileSystemStatusRequiresAttentionForDeviceInProject simple stored property
    self.mFileSystemStatusRequiresAttentionForDeviceInProject_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFileSystemStatusRequiresAttentionForDeviceInProject_property.optionalSelection ?? .single (nil)
    }
  //--- Configure versionString transient property
    self.versionString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.versionString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure sizeString transient property
    self.sizeString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.sizeString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure canExport transient property
    self.canExport_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.canExport_property.optionalSelection ?? .single (nil)
    }
  //--- Configure packageNames transient property
    self.packageNames_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.packageNames_property.optionalSelection ?? .single (nil)
    }
  //--- Configure fileSystemStatusImage transient property
    self.fileSystemStatusImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.fileSystemStatusImage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure deviceComponentCountString transient property
    self.deviceComponentCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.deviceComponentCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure canRemove transient property
    self.canRemove_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.canRemove_property.optionalSelection ?? .single (nil)
    }
  //--- Configure symbolAndTypesNames transient property
    self.symbolAndTypesNames_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.symbolAndTypesNames_property.optionalSelection ?? .single (nil)
    }
  //--- Configure pinPadAssignments transient property
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.pinPadAssignments_property.optionalSelection ?? .single (nil)
    }
  //--- Configure deviceSymbolDictionary transient property
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.deviceSymbolDictionary_property.optionalSelection ?? .single (nil)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    StoredObject_DeviceInProject
//--------------------------------------------------------------------------------------------------

final class StoredObject_DeviceInProject : ReadOnlyObject_DeviceInProject, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mKey : String
  var key : String { return self.mKey }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromValueDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let objectSavingIndex = inDictionary [self.mKey] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! DeviceInProject
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! DeviceInProject
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [self.mKey] = idx
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Signature ?
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mUsedForSignature : Bool

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Undo manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Opposite relationship management
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model will change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { selfTarget in
      selfTarget.setProp (inOldValue) // Ok in Swift 6.2
      // MainActor.assumeIsolated { selfTarget.setProp (inOldValue) }
    }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model did change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var selection : EBSelection < DeviceInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var propval : DeviceInProject? { return self.mWeakInternalValue }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   setProp
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setProp (_ inValue : DeviceInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSignatureCache : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

