//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_mWidth : AnyObject {
  var mWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_mHeight : AnyObject {
  var mHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_mHoleWidth : AnyObject {
  var mHoleWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_mHoleHeight : AnyObject {
  var mHoleHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_mShape : AnyObject {
  var mShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_mStyle : AnyObject {
  var mStyle : PadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_mName : AnyObject {
  var mName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceMasterPadInProject_descriptor : AnyObject {
  var descriptor : MasterPadDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceMasterPadInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DeviceMasterPadInProject : EBManagedObject,
         DeviceMasterPadInProject_mCenterX,
         DeviceMasterPadInProject_mCenterY,
         DeviceMasterPadInProject_mWidth,
         DeviceMasterPadInProject_mHeight,
         DeviceMasterPadInProject_mHoleWidth,
         DeviceMasterPadInProject_mHoleHeight,
         DeviceMasterPadInProject_mShape,
         DeviceMasterPadInProject_mStyle,
         DeviceMasterPadInProject_mName,
         DeviceMasterPadInProject_descriptor {

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  final let mCenterX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterX_toDefaultValue () {
    self.mCenterX = 0
  }

  //····················································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  final let mCenterY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterY_toDefaultValue () {
    self.mCenterY = 0
  }

  //····················································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWidth
  //····················································································································

  final let mWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mWidth_toDefaultValue () {
    self.mWidth = 114300
  }

  //····················································································································

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHeight
  //····················································································································

  final let mHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHeight_toDefaultValue () {
    self.mHeight = 228600
  }

  //····················································································································

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
    set { self.mHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHoleWidth
  //····················································································································

  final let mHoleWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHoleWidth_toDefaultValue () {
    self.mHoleWidth = 57150
  }

  //····················································································································

  final var mHoleWidth : Int {
    get { return self.mHoleWidth_property.propval }
    set { self.mHoleWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHoleHeight
  //····················································································································

  final let mHoleHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHoleHeight_toDefaultValue () {
    self.mHoleHeight = 57150
  }

  //····················································································································

  final var mHoleHeight : Int {
    get { return self.mHoleHeight_property.propval }
    set { self.mHoleHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShape
  //····················································································································

  final let mShape_property : EBStoredProperty_PadShape

  //····················································································································

  final func reset_mShape_toDefaultValue () {
    self.mShape = PadShape.octo
  }

  //····················································································································

  final var mShape : PadShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mStyle
  //····················································································································

  final let mStyle_property : EBStoredProperty_PadStyle

  //····················································································································

  final func reset_mStyle_toDefaultValue () {
    self.mStyle = PadStyle.traversing
  }

  //····················································································································

  final var mStyle : PadStyle {
    get { return self.mStyle_property.propval }
    set { self.mStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mName
  //····················································································································

  final let mName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mName_toDefaultValue () {
    self.mName = ""
  }

  //····················································································································

  final var mName : String {
    get { return self.mName_property.propval }
    set { self.mName_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSlavePads
  //····················································································································

  final let mSlavePads_property = StoredArrayOf_DeviceSlavePadInProject (usedForSignature: false, key: "mSlavePads")

  //····················································································································

  //····················································································································

  final var mSlavePads : EBReferenceArray <DeviceSlavePadInProject> {
    get { return self.mSlavePads_property.propval }
    set { self.mSlavePads_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  final let descriptor_property = EBTransientProperty_MasterPadDescriptor ()

  //····················································································································

  final var descriptor : MasterPadDescriptor? {
    return self.descriptor_property.optionalValue
    /* switch self.descriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    } */
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterX")
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterY")
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: inUndoManager, key: "mWidth")
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "mHeight")
    self.mHoleWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mHoleWidth")
    self.mHoleHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mHoleHeight")
    self.mShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: inUndoManager, key: "mShape")
    self.mStyle_property = EBStoredProperty_PadStyle (defaultValue: PadStyle.traversing, undoManager: inUndoManager, key: "mStyle")
    self.mName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mName")
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- To many property: mSlavePads (no option)
    self.mSlavePads_property.undoManager = inUndoManager
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mName_property.selection
        let s1 = unwSelf.mCenterX_property.selection
        let s2 = unwSelf.mCenterY_property.selection
        let s3 = unwSelf.mWidth_property.selection
        let s4 = unwSelf.mHeight_property.selection
        let s5 = unwSelf.mHoleWidth_property.selection
        let s6 = unwSelf.mHoleHeight_property.selection
        let s7 = unwSelf.mShape_property.selection
        let s8 = unwSelf.mStyle_property.selection
        let s9 = unwSelf.mSlavePads_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9)) :
          return .single (transient_DeviceMasterPadInProject_descriptor (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mName_property.startsToBeObserved (by: self.descriptor_property)
    self.mCenterX_property.startsToBeObserved (by: self.descriptor_property)
    self.mCenterY_property.startsToBeObserved (by: self.descriptor_property)
    self.mWidth_property.startsToBeObserved (by: self.descriptor_property)
    self.mHeight_property.startsToBeObserved (by: self.descriptor_property)
    self.mHoleWidth_property.startsToBeObserved (by: self.descriptor_property)
    self.mHoleHeight_property.startsToBeObserved (by: self.descriptor_property)
    self.mShape_property.startsToBeObserved (by: self.descriptor_property)
    self.mStyle_property.startsToBeObserved (by: self.descriptor_property)
    self.mSlavePads_property.toMany_descriptor_StartsToBeObserved (by: self.descriptor_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

