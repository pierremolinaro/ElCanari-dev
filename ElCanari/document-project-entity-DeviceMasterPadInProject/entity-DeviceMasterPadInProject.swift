//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_mWidth : AnyObject {
  var mWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_mHeight : AnyObject {
  var mHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_mHoleWidth : AnyObject {
  var mHoleWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_mHoleHeight : AnyObject {
  var mHoleHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_mShape : AnyObject {
  var mShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_mStyle : AnyObject {
  var mStyle : PadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_mName : AnyObject {
  var mName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceMasterPadInProject_descriptor : AnyObject {
  var descriptor : MasterPadDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceMasterPadInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DeviceMasterPadInProject : EBManagedObject,
         DeviceMasterPadInProject_mCenterX,
         DeviceMasterPadInProject_mCenterY,
         DeviceMasterPadInProject_mWidth,
         DeviceMasterPadInProject_mHeight,
         DeviceMasterPadInProject_mHoleWidth,
         DeviceMasterPadInProject_mHoleHeight,
         DeviceMasterPadInProject_mShape,
         DeviceMasterPadInProject_mStyle,
         DeviceMasterPadInProject_mName,
         DeviceMasterPadInProject_descriptor {

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  final let mCenterX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterX_toDefaultValue () {
    self.mCenterX = 0
  }

  //····················································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  final let mCenterY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCenterY_toDefaultValue () {
    self.mCenterY = 0
  }

  //····················································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWidth
  //····················································································································

  final let mWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mWidth_toDefaultValue () {
    self.mWidth = 114300
  }

  //····················································································································

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHeight
  //····················································································································

  final let mHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHeight_toDefaultValue () {
    self.mHeight = 228600
  }

  //····················································································································

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
    set { self.mHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHoleWidth
  //····················································································································

  final let mHoleWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHoleWidth_toDefaultValue () {
    self.mHoleWidth = 57150
  }

  //····················································································································

  final var mHoleWidth : Int {
    get { return self.mHoleWidth_property.propval }
    set { self.mHoleWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mHoleHeight
  //····················································································································

  final let mHoleHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mHoleHeight_toDefaultValue () {
    self.mHoleHeight = 57150
  }

  //····················································································································

  final var mHoleHeight : Int {
    get { return self.mHoleHeight_property.propval }
    set { self.mHoleHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mShape
  //····················································································································

  final let mShape_property : EBStoredProperty_PadShape

  //····················································································································

  final func reset_mShape_toDefaultValue () {
    self.mShape = PadShape.octo
  }

  //····················································································································

  final var mShape : PadShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mStyle
  //····················································································································

  final let mStyle_property : EBStoredProperty_PadStyle

  //····················································································································

  final func reset_mStyle_toDefaultValue () {
    self.mStyle = PadStyle.traversing
  }

  //····················································································································

  final var mStyle : PadStyle {
    get { return self.mStyle_property.propval }
    set { self.mStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mName
  //····················································································································

  final let mName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mName_toDefaultValue () {
    self.mName = ""
  }

  //····················································································································

  final var mName : String {
    get { return self.mName_property.propval }
    set { self.mName_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSlavePads
  //····················································································································

  final let mSlavePads_property = StoredArrayOf_DeviceSlavePadInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mSlavePads : EBReferenceArray <DeviceSlavePadInProject> {
    get { return self.mSlavePads_property.propval }
    set { self.mSlavePads_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  final let descriptor_property = EBTransientProperty_MasterPadDescriptor ()

  //····················································································································

  final var descriptor : MasterPadDescriptor? {
    switch self.descriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: ebUndoManager)
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: ebUndoManager)
    self.mHoleWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: ebUndoManager)
    self.mHoleHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: ebUndoManager)
    self.mShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: ebUndoManager)
    self.mStyle_property = EBStoredProperty_PadStyle (defaultValue: PadStyle.traversing, undoManager: ebUndoManager)
    self.mName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- To many property: mSlavePads (no option)
    self.mSlavePads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mName_property.selection, unwSelf.mCenterX_property.selection, unwSelf.mCenterY_property.selection, unwSelf.mWidth_property.selection, unwSelf.mHeight_property.selection, unwSelf.mHoleWidth_property.selection, unwSelf.mHoleHeight_property.selection, unwSelf.mShape_property.selection, unwSelf.mStyle_property.selection, unwSelf.mSlavePads_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
          return .single (transient_DeviceMasterPadInProject_descriptor (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mName_property.addEBObserver (self.descriptor_property)
    self.mCenterX_property.addEBObserver (self.descriptor_property)
    self.mCenterY_property.addEBObserver (self.descriptor_property)
    self.mWidth_property.addEBObserver (self.descriptor_property)
    self.mHeight_property.addEBObserver (self.descriptor_property)
    self.mHoleWidth_property.addEBObserver (self.descriptor_property)
    self.mHoleHeight_property.addEBObserver (self.descriptor_property)
    self.mShape_property.addEBObserver (self.descriptor_property)
    self.mStyle_property.addEBObserver (self.descriptor_property)
    self.mSlavePads_property.addEBObserverOf_descriptor (self.descriptor_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override func removeAllObservers () {
    super.removeAllObservers ()
    // self.mName_property.removeEBObserver (self.descriptor_property)
    // self.mCenterX_property.removeEBObserver (self.descriptor_property)
    // self.mCenterY_property.removeEBObserver (self.descriptor_property)
    // self.mWidth_property.removeEBObserver (self.descriptor_property)
    // self.mHeight_property.removeEBObserver (self.descriptor_property)
    // self.mHoleWidth_property.removeEBObserver (self.descriptor_property)
    // self.mHoleHeight_property.removeEBObserver (self.descriptor_property)
    // self.mShape_property.removeEBObserver (self.descriptor_property)
    // self.mStyle_property.removeEBObserver (self.descriptor_property)
    // self.mSlavePads_property.removeEBObserverOf_descriptor (self.descriptor_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "mCenterX",
        object: self.mCenterX_property,
        y: &y,
        view: view,
        observerExplorer: &self.mCenterX_property.mObserverExplorer,
        valueExplorer: &self.mCenterX_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mCenterY",
        object: self.mCenterY_property,
        y: &y,
        view: view,
        observerExplorer: &self.mCenterY_property.mObserverExplorer,
        valueExplorer: &self.mCenterY_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mWidth",
        object: self.mWidth_property,
        y: &y,
        view: view,
        observerExplorer: &self.mWidth_property.mObserverExplorer,
        valueExplorer: &self.mWidth_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mHeight",
        object: self.mHeight_property,
        y: &y,
        view: view,
        observerExplorer: &self.mHeight_property.mObserverExplorer,
        valueExplorer: &self.mHeight_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mHoleWidth",
        object: self.mHoleWidth_property,
        y: &y,
        view: view,
        observerExplorer: &self.mHoleWidth_property.mObserverExplorer,
        valueExplorer: &self.mHoleWidth_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mHoleHeight",
        object: self.mHoleHeight_property,
        y: &y,
        view: view,
        observerExplorer: &self.mHoleHeight_property.mObserverExplorer,
        valueExplorer: &self.mHoleHeight_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mShape",
        object: self.mShape_property,
        y: &y,
        view: view,
        observerExplorer: &self.mShape_property.mObserverExplorer,
        valueExplorer: &self.mShape_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mStyle",
        object: self.mStyle_property,
        y: &y,
        view: view,
        observerExplorer: &self.mStyle_property.mObserverExplorer,
        valueExplorer: &self.mStyle_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mName",
        object: self.mName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mName_property.mObserverExplorer,
        valueExplorer: &self.mName_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "descriptor",
        object: self.descriptor_property,
        y: &y,
        view: view,
        observerExplorer: &self.descriptor_property.mObserverExplorer,
        valueExplorer: &self.descriptor_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForToManyRelationshipNamed (
        "mSlavePads",
        object: mSlavePads_property,
        y: &y,
        view: view,
        valueExplorer:&mSlavePads_property.mValueExplorer
      )
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: mCenterX
    self.mCenterX_property.mObserverExplorer = nil
    self.mCenterX_property.mValueExplorer = nil
  //--- Atomic property: mCenterY
    self.mCenterY_property.mObserverExplorer = nil
    self.mCenterY_property.mValueExplorer = nil
  //--- Atomic property: mWidth
    self.mWidth_property.mObserverExplorer = nil
    self.mWidth_property.mValueExplorer = nil
  //--- Atomic property: mHeight
    self.mHeight_property.mObserverExplorer = nil
    self.mHeight_property.mValueExplorer = nil
  //--- Atomic property: mHoleWidth
    self.mHoleWidth_property.mObserverExplorer = nil
    self.mHoleWidth_property.mValueExplorer = nil
  //--- Atomic property: mHoleHeight
    self.mHoleHeight_property.mObserverExplorer = nil
    self.mHoleHeight_property.mValueExplorer = nil
  //--- Atomic property: mShape
    self.mShape_property.mObserverExplorer = nil
    self.mShape_property.mValueExplorer = nil
  //--- Atomic property: mStyle
    self.mStyle_property.mObserverExplorer = nil
    self.mStyle_property.mValueExplorer = nil
  //--- Atomic property: mName
    self.mName_property.mObserverExplorer = nil
    self.mName_property.mValueExplorer = nil
    //--- To many property: mSlavePads
      self.mSlavePads_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
    self.mSlavePads.removeAll ()
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mCenterX
      self.mCenterX_property.storeIn (dictionary: ioDictionary, forKey: "mCenterX")
    //--- Atomic property: mCenterY
      self.mCenterY_property.storeIn (dictionary: ioDictionary, forKey: "mCenterY")
    //--- Atomic property: mWidth
      self.mWidth_property.storeIn (dictionary: ioDictionary, forKey: "mWidth")
    //--- Atomic property: mHeight
      self.mHeight_property.storeIn (dictionary: ioDictionary, forKey: "mHeight")
    //--- Atomic property: mHoleWidth
      self.mHoleWidth_property.storeIn (dictionary: ioDictionary, forKey: "mHoleWidth")
    //--- Atomic property: mHoleHeight
      self.mHoleHeight_property.storeIn (dictionary: ioDictionary, forKey: "mHoleHeight")
    //--- Atomic property: mShape
      self.mShape_property.storeIn (dictionary: ioDictionary, forKey: "mShape")
    //--- Atomic property: mStyle
      self.mStyle_property.storeIn (dictionary: ioDictionary, forKey: "mStyle")
    //--- Atomic property: mName
      self.mName_property.storeIn (dictionary: ioDictionary, forKey: "mName")
  //--- To many property: mSlavePads
    self.store (
      managedObjectArray: self.mSlavePads_property.propval.values,
      relationshipName: "mSlavePads",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mSlavePads
/*    self.mSlavePads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSlavePads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceSlavePadInProject]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mSlavePads",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [DeviceSlavePadInProject]
      self.mSlavePads_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.readFrom (dictionary: inDictionary, forKey: "mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.readFrom (dictionary: inDictionary, forKey: "mCenterY")
  //--- Atomic property: mWidth
    self.mWidth_property.readFrom (dictionary: inDictionary, forKey: "mWidth")
  //--- Atomic property: mHeight
    self.mHeight_property.readFrom (dictionary: inDictionary, forKey: "mHeight")
  //--- Atomic property: mHoleWidth
    self.mHoleWidth_property.readFrom (dictionary: inDictionary, forKey: "mHoleWidth")
  //--- Atomic property: mHoleHeight
    self.mHoleHeight_property.readFrom (dictionary: inDictionary, forKey: "mHoleHeight")
  //--- Atomic property: mShape
    self.mShape_property.readFrom (dictionary: inDictionary, forKey: "mShape")
  //--- Atomic property: mStyle
    self.mStyle_property.readFrom (dictionary: inDictionary, forKey: "mStyle")
  //--- Atomic property: mName
    self.mName_property.readFrom (dictionary: inDictionary, forKey: "mName")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mCenterX\n"
    ioString += "mCenterY\n"
    ioString += "mWidth\n"
    ioString += "mHeight\n"
    ioString += "mHoleWidth\n"
    ioString += "mHoleHeight\n"
    ioString += "mShape\n"
    ioString += "mStyle\n"
    ioString += "mName\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mSlavePads\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mCenterX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCenterY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHoleWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mHoleHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mShape.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mSlavePads.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mCenterX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCenterX = value
      }
      if let range = inDictionary ["mCenterY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCenterY = value
      }
      if let range = inDictionary ["mWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mWidth = value
      }
      if let range = inDictionary ["mHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHeight = value
      }
      if let range = inDictionary ["mHoleWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHoleWidth = value
      }
      if let range = inDictionary ["mHoleHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mHoleHeight = value
      }
      if let range = inDictionary ["mShape"], let value = PadShape.unarchiveFromDataRange (inData, range) {
        self.mShape = value
      }
      if let range = inDictionary ["mStyle"], let value = PadStyle.unarchiveFromDataRange (inData, range) {
        self.mStyle = value
      }
      if let range = inDictionary ["mName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mName = value
      }
    //--- To one relationships
    //--- To many relationships
      if let range = inDictionary ["mSlavePads"], range.length > 0 {
        var relationshipArray = EBReferenceArray <DeviceSlavePadInProject> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! DeviceSlavePadInProject)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mSlavePads = relationshipArray }
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mSlavePads
    for managedObject in self.mSlavePads.values {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mSlavePads
    for managedObject in self.mSlavePads.values {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

