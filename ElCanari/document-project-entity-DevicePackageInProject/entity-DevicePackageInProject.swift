//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DevicePackageInProject_mPackageName : AnyObject {
  var mPackageName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DevicePackageInProject_mStrokeBezierPath : AnyObject {
  var mStrokeBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DevicePackageInProject_packagePadDictionary : AnyObject {
  var packagePadDictionary : PackageMasterPadDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DevicePackageInProject : EBManagedObject,
         DevicePackageInProject_mPackageName,
         DevicePackageInProject_mStrokeBezierPath,
         DevicePackageInProject_packagePadDictionary {

  //····················································································································
  //   To many property: mMasterPads
  //····················································································································

  final let mMasterPads_property = StoredArrayOf_DeviceMasterPadInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mMasterPads : EBReferenceArray <DeviceMasterPadInProject> {
    get { return self.mMasterPads_property.propval }
    set { self.mMasterPads_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPackageName
  //····················································································································

  final let mPackageName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mPackageName_toDefaultValue () {
    self.mPackageName = ""
  }

  //····················································································································

  final var mPackageName : String {
    get { return self.mPackageName_property.propval }
    set { self.mPackageName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mStrokeBezierPath
  //····················································································································

  final let mStrokeBezierPath_property : EBStoredProperty_NSBezierPath

  //····················································································································

  final func reset_mStrokeBezierPath_toDefaultValue () {
    self.mStrokeBezierPath = NSBezierPath ()
  }

  //····················································································································

  final var mStrokeBezierPath : NSBezierPath {
    get { return self.mStrokeBezierPath_property.propval }
    set { self.mStrokeBezierPath_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: packagePadDictionary
  //····················································································································

  final let packagePadDictionary_property = EBTransientProperty_PackageMasterPadDictionary ()

  //····················································································································

  final var packagePadDictionary : PackageMasterPadDictionary? {
    switch self.packagePadDictionary_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mPackageName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath (), undoManager: inUndoManager)
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- To many property: mMasterPads (no option)
    self.mMasterPads_property.undoManager = inUndoManager
  //--- Atomic property: packagePadDictionary
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mMasterPads_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DevicePackageInProject_packagePadDictionary (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_descriptor (self.packagePadDictionary_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: mMasterPads
    self.store (
      managedObjectArray: self.mMasterPads_property.propval.values,
      relationshipName: "mMasterPads",
      intoDictionary: ioDictionary
    )
    //--- Atomic property: mPackageName
      self.mPackageName_property.storeIn (dictionary: ioDictionary, forKey: "mPackageName")
    //--- Atomic property: mStrokeBezierPath
      self.mStrokeBezierPath_property.storeIn (dictionary: ioDictionary, forKey: "mStrokeBezierPath")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: mMasterPads
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mMasterPads",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [DeviceMasterPadInProject]
      self.mMasterPads_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mPackageName
    self.mPackageName_property.readFrom (dictionary: inDictionary, forKey: "mPackageName")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.readFrom (dictionary: inDictionary, forKey: "mStrokeBezierPath")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mPackageName\n"
    ioString += "mStrokeBezierPath\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mMasterPads\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mPackageName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mStrokeBezierPath.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.mMasterPads.values, into: &ioData)
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mPackageName"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mPackageName = value
    }
    if let range = inDictionary ["mStrokeBezierPath"], let value = NSBezierPath.unarchiveFromDataRange (inData, range) {
      self.mStrokeBezierPath = value
    }
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
      if let range = inDictionary ["mMasterPads"], range.length > 0 {
        var relationshipArray = EBReferenceArray <DeviceMasterPadInProject> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inRawObjectArray [idx].object as! DeviceMasterPadInProject)
        }
        self.mMasterPads = relationshipArray
      }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: mMasterPads
    for managedObject in self.mMasterPads.values {
      ioObjectArray.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

