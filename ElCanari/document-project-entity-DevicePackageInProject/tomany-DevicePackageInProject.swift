//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DevicePackageInProject : EBReadOnlyAbstractArrayProperty <DevicePackageInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DevicePackageInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <DevicePackageInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mPackageName { // Stored property
        managedObject.mPackageName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mStrokeBezierPath { // Stored property
        managedObject.mStrokeBezierPath_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_packagePadDictionary { // Transient property
        managedObject.packagePadDictionary_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mPackageName { // Stored property
        managedObject.mPackageName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mStrokeBezierPath { // Stored property
        managedObject.mStrokeBezierPath_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_packagePadDictionary { // Transient property
        managedObject.packagePadDictionary_property.startsBeingObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageName' stored property
  //····················································································································

  private final var mObserversOf_mPackageName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mPackageName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPackageName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mPackageName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mPackageName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mPackageName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPackageName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  private final var mObserversOf_mStrokeBezierPath : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mStrokeBezierPath_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mStrokeBezierPath {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mStrokeBezierPath_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mStrokeBezierPath = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mStrokeBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mStrokeBezierPath?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'packagePadDictionary' transient property
  //····················································································································

  private final var mObserversOf_packagePadDictionary : EBObservedObserver? = nil

  //····················································································································

  final func toMany_packagePadDictionary_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_packagePadDictionary {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.packagePadDictionary_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_packagePadDictionary = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_packagePadDictionary_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_packagePadDictionary?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_DevicePackageInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_DevicePackageInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DevicePackageInProject : ReadOnlyArrayOf_DevicePackageInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <DevicePackageInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_DevicePackageInProject : ReadWriteArrayOf_DevicePackageInProject {

  //····················································································································

  private weak var mModel : ReadWriteArrayOf_DevicePackageInProject? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_DevicePackageInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <DevicePackageInProject>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <DevicePackageInProject> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <DevicePackageInProject>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [DevicePackageInProject] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <DevicePackageInProject> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_DevicePackageInProject : ReadWriteArrayOf_DevicePackageInProject, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <DevicePackageInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! DevicePackageInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <DevicePackageInProject> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! DevicePackageInProject)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <DevicePackageInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <DevicePackageInProject>,
                                 addedSet inAddedSet : EBReferenceSet <DevicePackageInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [DevicePackageInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <DevicePackageInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <DevicePackageInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : DevicePackageInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : DevicePackageInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_DevicePackageInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————

