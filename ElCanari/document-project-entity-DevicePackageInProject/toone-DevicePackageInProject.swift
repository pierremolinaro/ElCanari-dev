//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_DevicePackageInProject : ReadOnlyAbstractObjectProperty <DevicePackageInProject> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DevicePackageInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mPackageName_property.stopsBeingObserved (by: self.mPackageName_property) // Stored property
      oldValue.mStrokeBezierPath_property.stopsBeingObserved (by: self.mStrokeBezierPath_property) // Stored property
      oldValue.packagePadDictionary_property.stopsBeingObserved (by: self.packagePadDictionary_property) // Transient property
      if let relay = self.mObserversOf_mMasterPads { // to Many
        oldValue.mMasterPads_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mPackageName_property.startsToBeObserved (by: self.mPackageName_property) // Stored property
      newValue.mStrokeBezierPath_property.startsToBeObserved (by: self.mStrokeBezierPath_property) // Stored property
      newValue.packagePadDictionary_property.startsToBeObserved (by: self.packagePadDictionary_property) // Transient property
      if let relay = self.mObserversOf_mMasterPads { // to Many
        newValue.mMasterPads_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageName' stored property
  //····················································································································

  final let mPackageName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  final let mStrokeBezierPath_property = EBGenericTransientProperty <NSBezierPath?> ()

  //····················································································································
  //   Observers of 'packagePadDictionary' transient property
  //····················································································································

  final let packagePadDictionary_property = EBGenericTransientProperty <PackageMasterPadDictionary?> ()

  //····················································································································
  //   Observable toMany property: mMasterPads
  //····················································································································

  private final var mObserversOf_mMasterPads : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mMasterPads_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mMasterPads {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mMasterPads_property.startsToBeObserved (by: relay)
      self.mObserversOf_mMasterPads = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mMasterPads_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mMasterPads?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mPackageName simple stored property
    self.mPackageName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPackageName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mPackageName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mStrokeBezierPath simple stored property
    self.mStrokeBezierPath_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mStrokeBezierPath_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mStrokeBezierPath_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure packagePadDictionary transient property
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.packagePadDictionary_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.packagePadDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_DevicePackageInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_DevicePackageInProject : ReadOnlyObject_DevicePackageInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorablePropertyAndRelationshipProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! DevicePackageInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! DevicePackageInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DevicePackageInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < DevicePackageInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DevicePackageInProject? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : DevicePackageInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

