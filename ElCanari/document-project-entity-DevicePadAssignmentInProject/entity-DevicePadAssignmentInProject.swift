//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DevicePadAssignmentInProject_mPadName : AnyObject {
  var mPadName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DevicePadAssignmentInProject_pinPadAssignment : AnyObject {
  var pinPadAssignment : ThreeStrings? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DevicePadAssignmentInProject_descriptor : AnyObject {
  var descriptor : PinPadAssignmentInProject? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DevicePadAssignmentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DevicePadAssignmentInProject : EBManagedObject,
         DevicePadAssignmentInProject_mPadName,
         DevicePadAssignmentInProject_pinPadAssignment,
         DevicePadAssignmentInProject_descriptor {

  //····················································································································
  //   Atomic property: mPadName
  //····················································································································

  final let mPadName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mPadName_toDefaultValue () {
    self.mPadName = ""
  }

  //····················································································································

  final var mPadName : String {
    get { return self.mPadName_property.propval }
    set { self.mPadName_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mPin
  //····················································································································

  final let mPin_property = StoredObject_DevicePinInProject (usedForSignature: false, strongRef: true, key: "mPin")

  //····················································································································

  final var mPin : DevicePinInProject? {
    get {
      return self.mPin_property.propval
    }
    set {
      if self.mPin_property.propval !== newValue {
        if self.mPin_property.propval != nil {
          self.mPin_property.setProp (nil)
        }
        if newValue != nil {
          self.mPin_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mPin_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: pinPadAssignment
  //····················································································································

  final let pinPadAssignment_property = EBTransientProperty_ThreeStrings ()

  //····················································································································

  final var pinPadAssignment : ThreeStrings? {
    switch self.pinPadAssignment_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  final let descriptor_property = EBTransientProperty_PinPadAssignmentInProject ()

  //····················································································································

  final var descriptor : PinPadAssignmentInProject? {
    switch self.descriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mPadName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mPadName")
    super.init (inUndoManager)
    self.mPin_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mPin_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mPin_property.startsToBeObserved (by: self.mPin_none)
//    gInitSemaphore.wait ()
  //--- To one property: mPin
    self.mPin_property.undoManager = inUndoManager
  //--- Atomic property: pinPadAssignment
    self.pinPadAssignment_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPadName_property.selection
        let s1 = unwSelf.mPin_property.mSymbolInstanceName_property.selection
        let s2 = unwSelf.mPin_property.mPinName_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_DevicePadAssignmentInProject_pinPadAssignment (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPadName_property.startsToBeObserved (by: self.pinPadAssignment_property)
    self.mPin_property.mSymbolInstanceName_property.startsToBeObserved (by: self.pinPadAssignment_property)
    self.mPin_property.mPinName_property.startsToBeObserved (by: self.pinPadAssignment_property)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPadName_property.selection
        let s1 = unwSelf.mPin_property.descriptor_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_DevicePadAssignmentInProject_descriptor (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPadName_property.startsToBeObserved (by: self.descriptor_property)
    self.mPin_property.descriptor_property.startsToBeObserved (by: self.descriptor_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

