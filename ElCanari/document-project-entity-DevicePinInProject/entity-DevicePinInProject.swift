//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinName : AnyObject {
  var mPinName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mSymbolInstanceName : AnyObject {
  var mSymbolInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mSymbolTypeName : AnyObject {
  var mSymbolTypeName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinX : AnyObject {
  var mPinX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinY : AnyObject {
  var mPinY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mXName : AnyObject {
  var mXName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mYName : AnyObject {
  var mYName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mNameHorizontalAlignment : AnyObject {
  var mNameHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinNameIsDisplayedInSchematic : AnyObject {
  var mPinNameIsDisplayedInSchematic : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mXNumber : AnyObject {
  var mXNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mYNumber : AnyObject {
  var mYNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mNumberHorizontalAlignment : AnyObject {
  var mNumberHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_pinQualifiedName : AnyObject {
  var pinQualifiedName : PinQualifiedNameStruct? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_descriptor : AnyObject {
  var descriptor : PinInProjectDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DevicePinInProject : EBManagedObject,
         DevicePinInProject_mPinName,
         DevicePinInProject_mSymbolInstanceName,
         DevicePinInProject_mSymbolTypeName,
         DevicePinInProject_mPinX,
         DevicePinInProject_mPinY,
         DevicePinInProject_mXName,
         DevicePinInProject_mYName,
         DevicePinInProject_mNameHorizontalAlignment,
         DevicePinInProject_mPinNameIsDisplayedInSchematic,
         DevicePinInProject_mXNumber,
         DevicePinInProject_mYNumber,
         DevicePinInProject_mNumberHorizontalAlignment,
         DevicePinInProject_pinQualifiedName,
         DevicePinInProject_descriptor {

  //····················································································································
  //   Atomic property: mPinName
  //····················································································································

  final let mPinName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mPinName_toDefaultValue () {
    self.mPinName = ""
  }

  //····················································································································

  final var mPinName : String {
    get { return self.mPinName_property.propval }
    set { self.mPinName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolInstanceName
  //····················································································································

  final let mSymbolInstanceName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSymbolInstanceName_toDefaultValue () {
    self.mSymbolInstanceName = ""
  }

  //····················································································································

  final var mSymbolInstanceName : String {
    get { return self.mSymbolInstanceName_property.propval }
    set { self.mSymbolInstanceName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolTypeName
  //····················································································································

  final let mSymbolTypeName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSymbolTypeName_toDefaultValue () {
    self.mSymbolTypeName = ""
  }

  //····················································································································

  final var mSymbolTypeName : String {
    get { return self.mSymbolTypeName_property.propval }
    set { self.mSymbolTypeName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPinX
  //····················································································································

  final let mPinX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mPinX_toDefaultValue () {
    self.mPinX = 0
  }

  //····················································································································

  final var mPinX : Int {
    get { return self.mPinX_property.propval }
    set { self.mPinX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPinY
  //····················································································································

  final let mPinY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mPinY_toDefaultValue () {
    self.mPinY = 0
  }

  //····················································································································

  final var mPinY : Int {
    get { return self.mPinY_property.propval }
    set { self.mPinY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mXName
  //····················································································································

  final let mXName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXName_toDefaultValue () {
    self.mXName = 0
  }

  //····················································································································

  final var mXName : Int {
    get { return self.mXName_property.propval }
    set { self.mXName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYName
  //····················································································································

  final let mYName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYName_toDefaultValue () {
    self.mYName = 0
  }

  //····················································································································

  final var mYName : Int {
    get { return self.mYName_property.propval }
    set { self.mYName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNameHorizontalAlignment
  //····················································································································

  final let mNameHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_mNameHorizontalAlignment_toDefaultValue () {
    self.mNameHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var mNameHorizontalAlignment : HorizontalAlignment {
    get { return self.mNameHorizontalAlignment_property.propval }
    set { self.mNameHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPinNameIsDisplayedInSchematic
  //····················································································································

  final let mPinNameIsDisplayedInSchematic_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mPinNameIsDisplayedInSchematic_toDefaultValue () {
    self.mPinNameIsDisplayedInSchematic = true
  }

  //····················································································································

  final var mPinNameIsDisplayedInSchematic : Bool {
    get { return self.mPinNameIsDisplayedInSchematic_property.propval }
    set { self.mPinNameIsDisplayedInSchematic_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mXNumber
  //····················································································································

  final let mXNumber_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXNumber_toDefaultValue () {
    self.mXNumber = 0
  }

  //····················································································································

  final var mXNumber : Int {
    get { return self.mXNumber_property.propval }
    set { self.mXNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYNumber
  //····················································································································

  final let mYNumber_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYNumber_toDefaultValue () {
    self.mYNumber = 0
  }

  //····················································································································

  final var mYNumber : Int {
    get { return self.mYNumber_property.propval }
    set { self.mYNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNumberHorizontalAlignment
  //····················································································································

  final let mNumberHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_mNumberHorizontalAlignment_toDefaultValue () {
    self.mNumberHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var mNumberHorizontalAlignment : HorizontalAlignment {
    get { return self.mNumberHorizontalAlignment_property.propval }
    set { self.mNumberHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: pinQualifiedName
  //····················································································································

  final let pinQualifiedName_property = EBTransientProperty_PinQualifiedNameStruct ()

  //····················································································································

  final var pinQualifiedName : PinQualifiedNameStruct? {
    switch self.pinQualifiedName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  final let descriptor_property = EBTransientProperty_PinInProjectDescriptor ()

  //····················································································································

  final var descriptor : PinInProjectDescriptor? {
    switch self.descriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mPinName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mSymbolInstanceName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mSymbolTypeName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mPinX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mPinY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mXName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mYName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mNameHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: ebUndoManager)
    self.mPinNameIsDisplayedInSchematic_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mXNumber_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mYNumber_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mNumberHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- Atomic property: pinQualifiedName
    self.pinQualifiedName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolInstanceName_property.selection
        let s1 = unwSelf.mPinName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_DevicePinInProject_pinQualifiedName (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstanceName_property.addEBObserver (self.pinQualifiedName_property)
    self.mPinName_property.addEBObserver (self.pinQualifiedName_property)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPinName_property.selection
        let s1 = unwSelf.mSymbolInstanceName_property.selection
        let s2 = unwSelf.mSymbolTypeName_property.selection
        let s3 = unwSelf.mPinX_property.selection
        let s4 = unwSelf.mPinY_property.selection
        let s5 = unwSelf.mXName_property.selection
        let s6 = unwSelf.mYName_property.selection
        let s7 = unwSelf.mNameHorizontalAlignment_property.selection
        let s8 = unwSelf.mPinNameIsDisplayedInSchematic_property.selection
        let s9 = unwSelf.mXNumber_property.selection
        let s10 = unwSelf.mYNumber_property.selection
        let s11 = unwSelf.mNumberHorizontalAlignment_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_DevicePinInProject_descriptor (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPinName_property.addEBObserver (self.descriptor_property)
    self.mSymbolInstanceName_property.addEBObserver (self.descriptor_property)
    self.mSymbolTypeName_property.addEBObserver (self.descriptor_property)
    self.mPinX_property.addEBObserver (self.descriptor_property)
    self.mPinY_property.addEBObserver (self.descriptor_property)
    self.mXName_property.addEBObserver (self.descriptor_property)
    self.mYName_property.addEBObserver (self.descriptor_property)
    self.mNameHorizontalAlignment_property.addEBObserver (self.descriptor_property)
    self.mPinNameIsDisplayedInSchematic_property.addEBObserver (self.descriptor_property)
    self.mXNumber_property.addEBObserver (self.descriptor_property)
    self.mYNumber_property.addEBObserver (self.descriptor_property)
    self.mNumberHorizontalAlignment_property.addEBObserver (self.descriptor_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override func removeAllObservers () {
    super.removeAllObservers ()
    // self.mSymbolInstanceName_property.removeEBObserver (self.pinQualifiedName_property)
    // self.mPinName_property.removeEBObserver (self.pinQualifiedName_property)
    // self.mPinName_property.removeEBObserver (self.descriptor_property)
    // self.mSymbolInstanceName_property.removeEBObserver (self.descriptor_property)
    // self.mSymbolTypeName_property.removeEBObserver (self.descriptor_property)
    // self.mPinX_property.removeEBObserver (self.descriptor_property)
    // self.mPinY_property.removeEBObserver (self.descriptor_property)
    // self.mXName_property.removeEBObserver (self.descriptor_property)
    // self.mYName_property.removeEBObserver (self.descriptor_property)
    // self.mNameHorizontalAlignment_property.removeEBObserver (self.descriptor_property)
    // self.mPinNameIsDisplayedInSchematic_property.removeEBObserver (self.descriptor_property)
    // self.mXNumber_property.removeEBObserver (self.descriptor_property)
    // self.mYNumber_property.removeEBObserver (self.descriptor_property)
    // self.mNumberHorizontalAlignment_property.removeEBObserver (self.descriptor_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "mPinName",
        object: self.mPinName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPinName_property.mObserverExplorer,
        valueExplorer: &self.mPinName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mSymbolInstanceName",
        object: self.mSymbolInstanceName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mSymbolInstanceName_property.mObserverExplorer,
        valueExplorer: &self.mSymbolInstanceName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mSymbolTypeName",
        object: self.mSymbolTypeName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mSymbolTypeName_property.mObserverExplorer,
        valueExplorer: &self.mSymbolTypeName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPinX",
        object: self.mPinX_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPinX_property.mObserverExplorer,
        valueExplorer: &self.mPinX_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPinY",
        object: self.mPinY_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPinY_property.mObserverExplorer,
        valueExplorer: &self.mPinY_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mXName",
        object: self.mXName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mXName_property.mObserverExplorer,
        valueExplorer: &self.mXName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mYName",
        object: self.mYName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mYName_property.mObserverExplorer,
        valueExplorer: &self.mYName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mNameHorizontalAlignment",
        object: self.mNameHorizontalAlignment_property,
        y: &y,
        view: view,
        observerExplorer: &self.mNameHorizontalAlignment_property.mObserverExplorer,
        valueExplorer: &self.mNameHorizontalAlignment_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mPinNameIsDisplayedInSchematic",
        object: self.mPinNameIsDisplayedInSchematic_property,
        y: &y,
        view: view,
        observerExplorer: &self.mPinNameIsDisplayedInSchematic_property.mObserverExplorer,
        valueExplorer: &self.mPinNameIsDisplayedInSchematic_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mXNumber",
        object: self.mXNumber_property,
        y: &y,
        view: view,
        observerExplorer: &self.mXNumber_property.mObserverExplorer,
        valueExplorer: &self.mXNumber_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mYNumber",
        object: self.mYNumber_property,
        y: &y,
        view: view,
        observerExplorer: &self.mYNumber_property.mObserverExplorer,
        valueExplorer: &self.mYNumber_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mNumberHorizontalAlignment",
        object: self.mNumberHorizontalAlignment_property,
        y: &y,
        view: view,
        observerExplorer: &self.mNumberHorizontalAlignment_property.mObserverExplorer,
        valueExplorer: &self.mNumberHorizontalAlignment_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "pinQualifiedName",
        object: self.pinQualifiedName_property,
        y: &y,
        view: view,
        observerExplorer: &self.pinQualifiedName_property.mObserverExplorer,
        valueExplorer: &self.pinQualifiedName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "descriptor",
        object: self.descriptor_property,
        y: &y,
        view: view,
        observerExplorer: &self.descriptor_property.mObserverExplorer,
        valueExplorer: &self.descriptor_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: mPinName
    self.mPinName_property.mObserverExplorer = nil
    self.mPinName_property.mValueExplorer = nil
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.mObserverExplorer = nil
    self.mSymbolInstanceName_property.mValueExplorer = nil
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.mObserverExplorer = nil
    self.mSymbolTypeName_property.mValueExplorer = nil
  //--- Atomic property: mPinX
    self.mPinX_property.mObserverExplorer = nil
    self.mPinX_property.mValueExplorer = nil
  //--- Atomic property: mPinY
    self.mPinY_property.mObserverExplorer = nil
    self.mPinY_property.mValueExplorer = nil
  //--- Atomic property: mXName
    self.mXName_property.mObserverExplorer = nil
    self.mXName_property.mValueExplorer = nil
  //--- Atomic property: mYName
    self.mYName_property.mObserverExplorer = nil
    self.mYName_property.mValueExplorer = nil
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.mObserverExplorer = nil
    self.mNameHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: mPinNameIsDisplayedInSchematic
    self.mPinNameIsDisplayedInSchematic_property.mObserverExplorer = nil
    self.mPinNameIsDisplayedInSchematic_property.mValueExplorer = nil
  //--- Atomic property: mXNumber
    self.mXNumber_property.mObserverExplorer = nil
    self.mXNumber_property.mValueExplorer = nil
  //--- Atomic property: mYNumber
    self.mYNumber_property.mObserverExplorer = nil
    self.mYNumber_property.mValueExplorer = nil
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.mObserverExplorer = nil
    self.mNumberHorizontalAlignment_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: mPinName
      self.mPinName_property.storeIn (dictionary: ioDictionary, forKey: "mPinName")
    //--- Atomic property: mSymbolInstanceName
      self.mSymbolInstanceName_property.storeIn (dictionary: ioDictionary, forKey: "mSymbolInstanceName")
    //--- Atomic property: mSymbolTypeName
      self.mSymbolTypeName_property.storeIn (dictionary: ioDictionary, forKey: "mSymbolTypeName")
    //--- Atomic property: mPinX
      self.mPinX_property.storeIn (dictionary: ioDictionary, forKey: "mPinX")
    //--- Atomic property: mPinY
      self.mPinY_property.storeIn (dictionary: ioDictionary, forKey: "mPinY")
    //--- Atomic property: mXName
      self.mXName_property.storeIn (dictionary: ioDictionary, forKey: "mXName")
    //--- Atomic property: mYName
      self.mYName_property.storeIn (dictionary: ioDictionary, forKey: "mYName")
    //--- Atomic property: mNameHorizontalAlignment
      self.mNameHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "mNameHorizontalAlignment")
    //--- Atomic property: mPinNameIsDisplayedInSchematic
      self.mPinNameIsDisplayedInSchematic_property.storeIn (dictionary: ioDictionary, forKey: "mPinNameIsDisplayedInSchematic")
    //--- Atomic property: mXNumber
      self.mXNumber_property.storeIn (dictionary: ioDictionary, forKey: "mXNumber")
    //--- Atomic property: mYNumber
      self.mYNumber_property.storeIn (dictionary: ioDictionary, forKey: "mYNumber")
    //--- Atomic property: mNumberHorizontalAlignment
      self.mNumberHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "mNumberHorizontalAlignment")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mPinName
    self.mPinName_property.readFrom (dictionary: inDictionary, forKey: "mPinName")
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.readFrom (dictionary: inDictionary, forKey: "mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.readFrom (dictionary: inDictionary, forKey: "mSymbolTypeName")
  //--- Atomic property: mPinX
    self.mPinX_property.readFrom (dictionary: inDictionary, forKey: "mPinX")
  //--- Atomic property: mPinY
    self.mPinY_property.readFrom (dictionary: inDictionary, forKey: "mPinY")
  //--- Atomic property: mXName
    self.mXName_property.readFrom (dictionary: inDictionary, forKey: "mXName")
  //--- Atomic property: mYName
    self.mYName_property.readFrom (dictionary: inDictionary, forKey: "mYName")
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey: "mNameHorizontalAlignment")
  //--- Atomic property: mPinNameIsDisplayedInSchematic
    self.mPinNameIsDisplayedInSchematic_property.readFrom (dictionary: inDictionary, forKey: "mPinNameIsDisplayedInSchematic")
  //--- Atomic property: mXNumber
    self.mXNumber_property.readFrom (dictionary: inDictionary, forKey: "mXNumber")
  //--- Atomic property: mYNumber
    self.mYNumber_property.readFrom (dictionary: inDictionary, forKey: "mYNumber")
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey: "mNumberHorizontalAlignment")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mPinName\n"
    ioString += "mSymbolInstanceName\n"
    ioString += "mSymbolTypeName\n"
    ioString += "mPinX\n"
    ioString += "mPinY\n"
    ioString += "mXName\n"
    ioString += "mYName\n"
    ioString += "mNameHorizontalAlignment\n"
    ioString += "mPinNameIsDisplayedInSchematic\n"
    ioString += "mXNumber\n"
    ioString += "mYNumber\n"
    ioString += "mNumberHorizontalAlignment\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mPinName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolInstanceName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSymbolTypeName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPinX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPinY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameHorizontalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPinNameIsDisplayedInSchematic.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXNumber.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYNumber.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNumberHorizontalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inObjectArray : [EBManagedObject],
                                                   _ inData : Data,
                                                   _ ioParallelObjectSetupContext : inout ParallelObjectSetupContext) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inObjectArray, inData, &ioParallelObjectSetupContext)
    ioParallelObjectSetupContext.addOperation {
      if let range = inDictionary ["mPinName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mPinName = value
      }
      if let range = inDictionary ["mSymbolInstanceName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mSymbolInstanceName = value
      }
      if let range = inDictionary ["mSymbolTypeName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mSymbolTypeName = value
      }
      if let range = inDictionary ["mPinX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mPinX = value
      }
      if let range = inDictionary ["mPinY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mPinY = value
      }
      if let range = inDictionary ["mXName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mXName = value
      }
      if let range = inDictionary ["mYName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mYName = value
      }
      if let range = inDictionary ["mNameHorizontalAlignment"], let value = HorizontalAlignment.unarchiveFromDataRange (inData, range) {
        self.mNameHorizontalAlignment = value
      }
      if let range = inDictionary ["mPinNameIsDisplayedInSchematic"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mPinNameIsDisplayedInSchematic = value
      }
      if let range = inDictionary ["mXNumber"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mXNumber = value
      }
      if let range = inDictionary ["mYNumber"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mYNumber = value
      }
      if let range = inDictionary ["mNumberHorizontalAlignment"], let value = HorizontalAlignment.unarchiveFromDataRange (inData, range) {
        self.mNumberHorizontalAlignment = value
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

