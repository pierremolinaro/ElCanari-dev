//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DevicePinInProject : EBManagedObject {

  //····················································································································
  //   Atomic property: mPinName
  //····················································································································

  final let mPinName_property : EBStoredProperty_String

  //····················································································································

  final var mPinName : String {
    get { return self.mPinName_property.propval }
    set { self.mPinName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolInstanceName
  //····················································································································

  final let mSymbolInstanceName_property : EBStoredProperty_String

  //····················································································································

  final var mSymbolInstanceName : String {
    get { return self.mSymbolInstanceName_property.propval }
    set { self.mSymbolInstanceName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSymbolTypeName
  //····················································································································

  final let mSymbolTypeName_property : EBStoredProperty_String

  //····················································································································

  final var mSymbolTypeName : String {
    get { return self.mSymbolTypeName_property.propval }
    set { self.mSymbolTypeName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPinX
  //····················································································································

  final let mPinX_property : EBStoredProperty_Int

  //····················································································································

  final var mPinX : Int {
    get { return self.mPinX_property.propval }
    set { self.mPinX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPinY
  //····················································································································

  final let mPinY_property : EBStoredProperty_Int

  //····················································································································

  final var mPinY : Int {
    get { return self.mPinY_property.propval }
    set { self.mPinY_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mXName
  //····················································································································

  final let mXName_property : EBStoredProperty_Int

  //····················································································································

  final var mXName : Int {
    get { return self.mXName_property.propval }
    set { self.mXName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYName
  //····················································································································

  final let mYName_property : EBStoredProperty_Int

  //····················································································································

  final var mYName : Int {
    get { return self.mYName_property.propval }
    set { self.mYName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNameHorizontalAlignment
  //····················································································································

  final let mNameHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final var mNameHorizontalAlignment : HorizontalAlignment {
    get { return self.mNameHorizontalAlignment_property.propval }
    set { self.mNameHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPinNameIsDisplayedInSchematic
  //····················································································································

  final let mPinNameIsDisplayedInSchematic_property : EBStoredProperty_Bool

  //····················································································································

  final var mPinNameIsDisplayedInSchematic : Bool {
    get { return self.mPinNameIsDisplayedInSchematic_property.propval }
    set { self.mPinNameIsDisplayedInSchematic_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mXNumber
  //····················································································································

  final let mXNumber_property : EBStoredProperty_Int

  //····················································································································

  final var mXNumber : Int {
    get { return self.mXNumber_property.propval }
    set { self.mXNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mYNumber
  //····················································································································

  final let mYNumber_property : EBStoredProperty_Int

  //····················································································································

  final var mYNumber : Int {
    get { return self.mYNumber_property.propval }
    set { self.mYNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNumberHorizontalAlignment
  //····················································································································

  final let mNumberHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final var mNumberHorizontalAlignment : HorizontalAlignment {
    get { return self.mNumberHorizontalAlignment_property.propval }
    set { self.mNumberHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: pinQualifiedName
  //····················································································································

  final let pinQualifiedName_property = EBTransientProperty <PinQualifiedNameStruct> ()

  //····················································································································

  final var pinQualifiedName : PinQualifiedNameStruct? {
    return self.pinQualifiedName_property.optionalValue
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  final let descriptor_property = EBTransientProperty <PinInProjectDescriptor> ()

  //····················································································································

  final var descriptor : PinInProjectDescriptor? {
    return self.descriptor_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mPinName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mPinName")
    self.mSymbolInstanceName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSymbolInstanceName")
    self.mSymbolTypeName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSymbolTypeName")
    self.mPinX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mPinX")
    self.mPinY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mPinY")
    self.mXName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mXName")
    self.mYName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mYName")
    self.mNameHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: inUndoManager, key: "mNameHorizontalAlignment")
    self.mPinNameIsDisplayedInSchematic_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mPinNameIsDisplayedInSchematic")
    self.mXNumber_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mXNumber")
    self.mYNumber_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mYNumber")
    self.mNumberHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: inUndoManager, key: "mNumberHorizontalAlignment")
    super.init (inUndoManager)
  //--- Atomic property: pinQualifiedName
    self.pinQualifiedName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolInstanceName_property.selection
        let s1 = unwSelf.mPinName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_DevicePinInProject_pinQualifiedName (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstanceName_property.startsToBeObserved (by: self.pinQualifiedName_property)
    self.mPinName_property.startsToBeObserved (by: self.pinQualifiedName_property)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPinName_property.selection
        let s1 = unwSelf.mSymbolInstanceName_property.selection
        let s2 = unwSelf.mSymbolTypeName_property.selection
        let s3 = unwSelf.mPinX_property.selection
        let s4 = unwSelf.mPinY_property.selection
        let s5 = unwSelf.mXName_property.selection
        let s6 = unwSelf.mYName_property.selection
        let s7 = unwSelf.mNameHorizontalAlignment_property.selection
        let s8 = unwSelf.mPinNameIsDisplayedInSchematic_property.selection
        let s9 = unwSelf.mXNumber_property.selection
        let s10 = unwSelf.mYNumber_property.selection
        let s11 = unwSelf.mNumberHorizontalAlignment_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_DevicePinInProject_descriptor (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPinName_property.startsToBeObserved (by: self.descriptor_property)
    self.mSymbolInstanceName_property.startsToBeObserved (by: self.descriptor_property)
    self.mSymbolTypeName_property.startsToBeObserved (by: self.descriptor_property)
    self.mPinX_property.startsToBeObserved (by: self.descriptor_property)
    self.mPinY_property.startsToBeObserved (by: self.descriptor_property)
    self.mXName_property.startsToBeObserved (by: self.descriptor_property)
    self.mYName_property.startsToBeObserved (by: self.descriptor_property)
    self.mNameHorizontalAlignment_property.startsToBeObserved (by: self.descriptor_property)
    self.mPinNameIsDisplayedInSchematic_property.startsToBeObserved (by: self.descriptor_property)
    self.mXNumber_property.startsToBeObserved (by: self.descriptor_property)
    self.mYNumber_property.startsToBeObserved (by: self.descriptor_property)
    self.mNumberHorizontalAlignment_property.startsToBeObserved (by: self.descriptor_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

