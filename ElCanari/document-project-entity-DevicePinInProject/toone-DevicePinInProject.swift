//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_DevicePinInProject : ReadOnlyAbstractObjectProperty <DevicePinInProject> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DevicePinInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mPinName_property.stopsBeingObserved (by: self.mPinName_property) // Stored property
      oldValue.mSymbolInstanceName_property.stopsBeingObserved (by: self.mSymbolInstanceName_property) // Stored property
      oldValue.mSymbolTypeName_property.stopsBeingObserved (by: self.mSymbolTypeName_property) // Stored property
      oldValue.mPinX_property.stopsBeingObserved (by: self.mPinX_property) // Stored property
      oldValue.mPinY_property.stopsBeingObserved (by: self.mPinY_property) // Stored property
      oldValue.mXName_property.stopsBeingObserved (by: self.mXName_property) // Stored property
      oldValue.mYName_property.stopsBeingObserved (by: self.mYName_property) // Stored property
      oldValue.mNameHorizontalAlignment_property.stopsBeingObserved (by: self.mNameHorizontalAlignment_property) // Stored property
      oldValue.mPinNameIsDisplayedInSchematic_property.stopsBeingObserved (by: self.mPinNameIsDisplayedInSchematic_property) // Stored property
      oldValue.mXNumber_property.stopsBeingObserved (by: self.mXNumber_property) // Stored property
      oldValue.mYNumber_property.stopsBeingObserved (by: self.mYNumber_property) // Stored property
      oldValue.mNumberHorizontalAlignment_property.stopsBeingObserved (by: self.mNumberHorizontalAlignment_property) // Stored property
      oldValue.pinQualifiedName_property.stopsBeingObserved (by: self.pinQualifiedName_property) // Transient property
      oldValue.descriptor_property.stopsBeingObserved (by: self.descriptor_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mPinName_property.startsToBeObserved (by: self.mPinName_property) // Stored property
      newValue.mSymbolInstanceName_property.startsToBeObserved (by: self.mSymbolInstanceName_property) // Stored property
      newValue.mSymbolTypeName_property.startsToBeObserved (by: self.mSymbolTypeName_property) // Stored property
      newValue.mPinX_property.startsToBeObserved (by: self.mPinX_property) // Stored property
      newValue.mPinY_property.startsToBeObserved (by: self.mPinY_property) // Stored property
      newValue.mXName_property.startsToBeObserved (by: self.mXName_property) // Stored property
      newValue.mYName_property.startsToBeObserved (by: self.mYName_property) // Stored property
      newValue.mNameHorizontalAlignment_property.startsToBeObserved (by: self.mNameHorizontalAlignment_property) // Stored property
      newValue.mPinNameIsDisplayedInSchematic_property.startsToBeObserved (by: self.mPinNameIsDisplayedInSchematic_property) // Stored property
      newValue.mXNumber_property.startsToBeObserved (by: self.mXNumber_property) // Stored property
      newValue.mYNumber_property.startsToBeObserved (by: self.mYNumber_property) // Stored property
      newValue.mNumberHorizontalAlignment_property.startsToBeObserved (by: self.mNumberHorizontalAlignment_property) // Stored property
      newValue.pinQualifiedName_property.startsToBeObserved (by: self.pinQualifiedName_property) // Transient property
      newValue.descriptor_property.startsToBeObserved (by: self.descriptor_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mPinName' stored property
  //····················································································································

  final let mPinName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mSymbolInstanceName' stored property
  //····················································································································

  final let mSymbolInstanceName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mSymbolTypeName' stored property
  //····················································································································

  final let mSymbolTypeName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mPinX' stored property
  //····················································································································

  final let mPinX_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mPinY' stored property
  //····················································································································

  final let mPinY_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  final let mXName_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  final let mYName_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mNameHorizontalAlignment' stored property
  //····················································································································

  final let mNameHorizontalAlignment_property = EBTransientProperty <HorizontalAlignment?> ()

  //····················································································································
  //   Observers of 'mPinNameIsDisplayedInSchematic' stored property
  //····················································································································

  final let mPinNameIsDisplayedInSchematic_property = EBTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mXNumber' stored property
  //····················································································································

  final let mXNumber_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mYNumber' stored property
  //····················································································································

  final let mYNumber_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mNumberHorizontalAlignment' stored property
  //····················································································································

  final let mNumberHorizontalAlignment_property = EBTransientProperty <HorizontalAlignment?> ()

  //····················································································································
  //   Observers of 'pinQualifiedName' transient property
  //····················································································································

  final let pinQualifiedName_property = EBTransientProperty <PinQualifiedNameStruct?> ()

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  final let descriptor_property = EBTransientProperty <PinInProjectDescriptor?> ()

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mPinName simple stored property
    self.mPinName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPinName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSymbolInstanceName simple stored property
    self.mSymbolInstanceName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSymbolInstanceName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSymbolTypeName simple stored property
    self.mSymbolTypeName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSymbolTypeName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPinX simple stored property
    self.mPinX_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPinX_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPinY simple stored property
    self.mPinY_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPinY_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mXName simple stored property
    self.mXName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mXName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mYName simple stored property
    self.mYName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mYName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mNameHorizontalAlignment simple stored property
    self.mNameHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNameHorizontalAlignment_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPinNameIsDisplayedInSchematic simple stored property
    self.mPinNameIsDisplayedInSchematic_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPinNameIsDisplayedInSchematic_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mXNumber simple stored property
    self.mXNumber_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mXNumber_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mYNumber simple stored property
    self.mYNumber_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mYNumber_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mNumberHorizontalAlignment simple stored property
    self.mNumberHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNumberHorizontalAlignment_property.optionalSelection ?? .single (nil)
    }
  //--- Configure pinQualifiedName transient property
    self.pinQualifiedName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.pinQualifiedName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure descriptor transient property
    self.descriptor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.descriptor_property.optionalSelection ?? .single (nil)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_DevicePinInProject : ReadOnlyObject_DevicePinInProject, EBSignatureObserverProtocol, DocumentStorablePropertyAndRelationshipProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! DevicePinInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! DevicePinInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DevicePinInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < DevicePinInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DevicePinInProject? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : DevicePinInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

