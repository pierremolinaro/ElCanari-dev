//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSlavePadInProject_mCenterX : AnyObject {
  var mCenterX : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSlavePadInProject_mCenterY : AnyObject {
  var mCenterY : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSlavePadInProject_mWidth : AnyObject {
  var mWidth : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSlavePadInProject_mHeight : AnyObject {
  var mHeight : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSlavePadInProject_mHoleWidth : AnyObject {
  var mHoleWidth : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSlavePadInProject_mHoleHeight : AnyObject {
  var mHoleHeight : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSlavePadInProject_mShape : AnyObject {
  var mShape : PadShape { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSlavePadInProject_mStyle : AnyObject {
  var mStyle : SlavePadStyle { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSlavePadInProject_descriptor : AnyObject {
  var descriptor : SlavePadDescriptor? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: DeviceSlavePadInProject
//--------------------------------------------------------------------------------------------------

final class DeviceSlavePadInProject : EBManagedObject,
         DeviceSlavePadInProject_mCenterX,
         DeviceSlavePadInProject_mCenterY,
         DeviceSlavePadInProject_mWidth,
         DeviceSlavePadInProject_mHeight,
         DeviceSlavePadInProject_mHoleWidth,
         DeviceSlavePadInProject_mHoleHeight,
         DeviceSlavePadInProject_mShape,
         DeviceSlavePadInProject_mStyle,
         DeviceSlavePadInProject_descriptor {

  //································································································
  //   Atomic property: mCenterX
  //································································································

  final let mCenterX_property : EBStoredProperty_Int

  //································································································

  final var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mCenterY
  //································································································

  final let mCenterY_property : EBStoredProperty_Int

  //································································································

  final var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mWidth
  //································································································

  final let mWidth_property : EBStoredProperty_Int

  //································································································

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
    set { self.mWidth_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mHeight
  //································································································

  final let mHeight_property : EBStoredProperty_Int

  //································································································

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
    set { self.mHeight_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mHoleWidth
  //································································································

  final let mHoleWidth_property : EBStoredProperty_Int

  //································································································

  final var mHoleWidth : Int {
    get { return self.mHoleWidth_property.propval }
    set { self.mHoleWidth_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mHoleHeight
  //································································································

  final let mHoleHeight_property : EBStoredProperty_Int

  //································································································

  final var mHoleHeight : Int {
    get { return self.mHoleHeight_property.propval }
    set { self.mHoleHeight_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mShape
  //································································································

  final let mShape_property : EBStoredProperty_PadShape

  //································································································

  final var mShape : PadShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mStyle
  //································································································

  final let mStyle_property : EBStoredProperty_SlavePadStyle

  //································································································

  final var mStyle : SlavePadStyle {
    get { return self.mStyle_property.propval }
    set { self.mStyle_property.setProp (newValue) }
  }

  //································································································
  //   Transient property: descriptor
  //································································································

  final let descriptor_property = EBTransientProperty <SlavePadDescriptor> ()

  //································································································

  final var descriptor : SlavePadDescriptor? {
    return self.descriptor_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mCenterX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterX")
    self.mCenterY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mCenterY")
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 114300, undoManager: inUndoManager, key: "mWidth")
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "mHeight")
    self.mHoleWidth_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mHoleWidth")
    self.mHoleHeight_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mHoleHeight")
    self.mShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo, undoManager: inUndoManager, key: "mShape")
    self.mStyle_property = EBStoredProperty_SlavePadStyle (defaultValue: SlavePadStyle.traversing, undoManager: inUndoManager, key: "mStyle")
    super.init (inUndoManager)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mCenterX_property.selection
        let s1 = unwSelf.mCenterY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mHoleWidth_property.selection
        let s5 = unwSelf.mHoleHeight_property.selection
        let s6 = unwSelf.mShape_property.selection
        let s7 = unwSelf.mStyle_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_DeviceSlavePadInProject_descriptor (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.startsBeingObserved (by: self.descriptor_property)
    self.mCenterY_property.startsBeingObserved (by: self.descriptor_property)
    self.mWidth_property.startsBeingObserved (by: self.descriptor_property)
    self.mHeight_property.startsBeingObserved (by: self.descriptor_property)
    self.mHoleWidth_property.startsBeingObserved (by: self.descriptor_property)
    self.mHoleHeight_property.startsBeingObserved (by: self.descriptor_property)
    self.mShape_property.startsBeingObserved (by: self.descriptor_property)
    self.mStyle_property.startsBeingObserved (by: self.descriptor_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

