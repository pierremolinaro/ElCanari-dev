//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSymbolInstanceInProject_mSymbolInstanceName : AnyObject {
  var mSymbolInstanceName : String { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSymbolInstanceInProject_symbolAndTypeName : AnyObject {
  var symbolAndTypeName : SymbolInProjectIdentifier? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSymbolInstanceInProject_symbolTypeName : AnyObject {
  var symbolTypeName : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSymbolInstanceInProject_filledBezierPath : AnyObject {
  var filledBezierPath : NSBezierPath? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol DeviceSymbolInstanceInProject_strokeBezierPath : AnyObject {
  var strokeBezierPath : NSBezierPath? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: DeviceSymbolInstanceInProject
//--------------------------------------------------------------------------------------------------

final class DeviceSymbolInstanceInProject : EBManagedObject,
         DeviceSymbolInstanceInProject_mSymbolInstanceName,
         DeviceSymbolInstanceInProject_symbolAndTypeName,
         DeviceSymbolInstanceInProject_symbolTypeName,
         DeviceSymbolInstanceInProject_filledBezierPath,
         DeviceSymbolInstanceInProject_strokeBezierPath {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSymbolInstanceName
  //------------------------------------------------------------------------------------------------

  final let mSymbolInstanceName_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------

  final var mSymbolInstanceName : String {
    get { return self.mSymbolInstanceName_property.propval }
    set { self.mSymbolInstanceName_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   To one property: mSymbolType
  //------------------------------------------------------------------------------------------------

  final let mSymbolType_property = StoredObject_DeviceSymbolTypeInProject (usedForSignature: false, strongRef: true, key: "mSymbolType")

  //------------------------------------------------------------------------------------------------

  final var mSymbolType : DeviceSymbolTypeInProject? {
    get {
      return self.mSymbolType_property.propval
    }
    set {
      // self.mSymbolType_property.setProp (newValue)
      if self.mSymbolType_property.propval !== newValue {
        if self.mSymbolType_property.propval != nil {
          self.mSymbolType_property.setProp (nil)
        }
        if newValue != nil {
          self.mSymbolType_property.setProp (newValue)
        }
      }
    }
  }

  //------------------------------------------------------------------------------------------------

  final let mSymbolType_none = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------
  //   Transient property: symbolAndTypeName
  //------------------------------------------------------------------------------------------------

  final let symbolAndTypeName_property = EBTransientProperty <SymbolInProjectIdentifier> ()

  //------------------------------------------------------------------------------------------------

  final var symbolAndTypeName : SymbolInProjectIdentifier? {
    return self.symbolAndTypeName_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: symbolTypeName
  //------------------------------------------------------------------------------------------------

  final let symbolTypeName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var symbolTypeName : String? {
    return self.symbolTypeName_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: filledBezierPath
  //------------------------------------------------------------------------------------------------

  final let filledBezierPath_property = EBTransientProperty <NSBezierPath> ()

  //------------------------------------------------------------------------------------------------

  final var filledBezierPath : NSBezierPath? {
    return self.filledBezierPath_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: strokeBezierPath
  //------------------------------------------------------------------------------------------------

  final let strokeBezierPath_property = EBTransientProperty <NSBezierPath> ()

  //------------------------------------------------------------------------------------------------

  final var strokeBezierPath : NSBezierPath? {
    return self.strokeBezierPath_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mSymbolInstanceName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSymbolInstanceName")
    super.init (inUndoManager)
    self.mSymbolType_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mSymbolType_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mSymbolType_property.startsBeingObserved (by: self.mSymbolType_none)
    self.accumulateProperty (self.mSymbolInstanceName_property)
  //--- To one property: mSymbolType
    self.mSymbolType_property.undoManager = inUndoManager
    self.accumulateProperty (self.mSymbolType_property)
  //--- Atomic property: symbolAndTypeName
    self.symbolAndTypeName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolInstanceName_property.selection
        let s1 = unwSelf.mSymbolType_property.mSymbolTypeName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_DeviceSymbolInstanceInProject_symbolAndTypeName (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstanceName_property.startsBeingObserved (by: self.symbolAndTypeName_property)
    self.mSymbolType_property.mSymbolTypeName_property.startsBeingObserved (by: self.symbolAndTypeName_property)
  //--- Atomic property: symbolTypeName
    self.symbolTypeName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolType_property.mSymbolTypeName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceSymbolInstanceInProject_symbolTypeName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolType_property.mSymbolTypeName_property.startsBeingObserved (by: self.symbolTypeName_property)
  //--- Atomic property: filledBezierPath
    self.filledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolType_property.mFilledBezierPath_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_DeviceSymbolInstanceInProject_filledBezierPath (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolType_property.mFilledBezierPath_property.startsBeingObserved (by: self.filledBezierPath_property)
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolType_property.mStrokeBezierPath_property.selection
        let s1 = preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_DeviceSymbolInstanceInProject_strokeBezierPath (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolType_property.mStrokeBezierPath_property.startsBeingObserved (by: self.strokeBezierPath_property)
    preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.startsBeingObserved (by: self.strokeBezierPath_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

