//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceSymbolTypeInProject_mSymbolTypeName : AnyObject {
  var mSymbolTypeName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceSymbolTypeInProject_mStrokeBezierPath : AnyObject {
  var mStrokeBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol DeviceSymbolTypeInProject_mFilledBezierPath : AnyObject {
  var mFilledBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceSymbolTypeInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class DeviceSymbolTypeInProject : EBManagedObject,
         DeviceSymbolTypeInProject_mSymbolTypeName,
         DeviceSymbolTypeInProject_mStrokeBezierPath,
         DeviceSymbolTypeInProject_mFilledBezierPath {

  //····················································································································
  //   Atomic property: mSymbolTypeName
  //····················································································································

  final let mSymbolTypeName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSymbolTypeName_toDefaultValue () {
    self.mSymbolTypeName = ""
  }

  //····················································································································

  final var mSymbolTypeName : String {
    get { return self.mSymbolTypeName_property.propval }
    set { self.mSymbolTypeName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mStrokeBezierPath
  //····················································································································

  final let mStrokeBezierPath_property : EBStoredProperty_NSBezierPath

  //····················································································································

  final func reset_mStrokeBezierPath_toDefaultValue () {
    self.mStrokeBezierPath = NSBezierPath ()
  }

  //····················································································································

  final var mStrokeBezierPath : NSBezierPath {
    get { return self.mStrokeBezierPath_property.propval }
    set { self.mStrokeBezierPath_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mFilledBezierPath
  //····················································································································

  final let mFilledBezierPath_property : EBStoredProperty_NSBezierPath

  //····················································································································

  final func reset_mFilledBezierPath_toDefaultValue () {
    self.mFilledBezierPath = NSBezierPath ()
  }

  //····················································································································

  final var mFilledBezierPath : NSBezierPath {
    get { return self.mFilledBezierPath_property.propval }
    set { self.mFilledBezierPath_property.setProp (newValue) }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mSymbolTypeName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath (), undoManager: inUndoManager)
    self.mFilledBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath (), undoManager: inUndoManager)
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    super.saveIntoDictionary (&ioDictionary)
    //--- Atomic property: mSymbolTypeName
      self.mSymbolTypeName_property.storeIn (dictionary: &ioDictionary, forKey: "mSymbolTypeName")
    //--- Atomic property: mStrokeBezierPath
      self.mStrokeBezierPath_property.storeIn (dictionary: &ioDictionary, forKey: "mStrokeBezierPath")
    //--- Atomic property: mFilledBezierPath
      self.mFilledBezierPath_property.storeIn (dictionary: &ioDictionary, forKey: "mFilledBezierPath")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.readFrom (dictionary: inDictionary, forKey: "mSymbolTypeName")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.readFrom (dictionary: inDictionary, forKey: "mStrokeBezierPath")
  //--- Atomic property: mFilledBezierPath
    self.mFilledBezierPath_property.readFrom (dictionary: inDictionary, forKey: "mFilledBezierPath")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mSymbolTypeName\n"
    ioString += "mStrokeBezierPath\n"
    ioString += "mFilledBezierPath\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mSymbolTypeName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mStrokeBezierPath.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mFilledBezierPath.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mSymbolTypeName"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mSymbolTypeName = value
    }
    if let range = inDictionary ["mStrokeBezierPath"], let value = NSBezierPath.unarchiveFromDataRange (inData, range) {
      self.mStrokeBezierPath = value
    }
    if let range = inDictionary ["mFilledBezierPath"], let value = NSBezierPath.unarchiveFromDataRange (inData, range) {
      self.mFilledBezierPath = value
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

