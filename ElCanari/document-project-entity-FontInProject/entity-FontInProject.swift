//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_mNominalSize : AnyObject {
  var mNominalSize : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_mFontName : AnyObject {
  var mFontName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_mFontVersion : AnyObject {
  var mFontVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_mDescriptiveString : AnyObject {
  var mDescriptiveString : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_versionString : AnyObject {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_sizeString : AnyObject {
  var sizeString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_descriptor : AnyObject {
  var descriptor : BoardFontDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_textCount : AnyObject {
  var textCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_canRemoveFont : AnyObject {
  var canRemoveFont : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_componentNamesCount : AnyObject {
  var componentNamesCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol FontInProject_componentValuesCount : AnyObject {
  var componentValuesCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class FontInProject : EBManagedObject,
         FontInProject_mNominalSize,
         FontInProject_mFontName,
         FontInProject_mFontVersion,
         FontInProject_mDescriptiveString,
         FontInProject_versionString,
         FontInProject_sizeString,
         FontInProject_descriptor,
         FontInProject_textCount,
         FontInProject_canRemoveFont,
         FontInProject_componentNamesCount,
         FontInProject_componentValuesCount {

  //····················································································································
  //   To many property: mTexts
  //····················································································································

  final let mTexts_property = StoredArrayOf_BoardText (usedForSignature: false, key: "mTexts")

  //····················································································································

  //····················································································································

  final var mTexts : EBReferenceArray <BoardText> {
    get { return self.mTexts_property.propval }
    set { self.mTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNominalSize
  //····················································································································

  final let mNominalSize_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mNominalSize_toDefaultValue () {
    self.mNominalSize = 0
  }

  //····················································································································

  final var mNominalSize : Int {
    get { return self.mNominalSize_property.propval }
    set { self.mNominalSize_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mFontName
  //····················································································································

  final let mFontName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mFontName_toDefaultValue () {
    self.mFontName = ""
  }

  //····················································································································

  final var mFontName : String {
    get { return self.mFontName_property.propval }
    set { self.mFontName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mFontVersion
  //····················································································································

  final let mFontVersion_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mFontVersion_toDefaultValue () {
    self.mFontVersion = 0
  }

  //····················································································································

  final var mFontVersion : Int {
    get { return self.mFontVersion_property.propval }
    set { self.mFontVersion_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDescriptiveString
  //····················································································································

  final let mDescriptiveString_property : EBStoredProperty_String

  //····················································································································

  final func reset_mDescriptiveString_toDefaultValue () {
    self.mDescriptiveString = ""
  }

  //····················································································································

  final var mDescriptiveString : String {
    get { return self.mDescriptiveString_property.propval }
    set { self.mDescriptiveString_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mComponentNames
  //····················································································································

  final let mComponentNames_property = StoredArrayOf_ComponentInProject (usedForSignature: false, key: "mComponentNames")

  //····················································································································

  //····················································································································

  final var mComponentNames : EBReferenceArray <ComponentInProject> {
    get { return self.mComponentNames_property.propval }
    set { self.mComponentNames_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mComponentValues
  //····················································································································

  final let mComponentValues_property = StoredArrayOf_ComponentInProject (usedForSignature: false, key: "mComponentValues")

  //····················································································································

  //····················································································································

  final var mComponentValues : EBReferenceArray <ComponentInProject> {
    get { return self.mComponentValues_property.propval }
    set { self.mComponentValues_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  final let versionString_property = EBTransientProperty_String ()

  //····················································································································

  final var versionString : String? {
    switch self.versionString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sizeString
  //····················································································································

  final let sizeString_property = EBTransientProperty_String ()

  //····················································································································

  final var sizeString : String? {
    switch self.sizeString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  final let descriptor_property = EBTransientProperty_BoardFontDescriptor ()

  //····················································································································

  final var descriptor : BoardFontDescriptor? {
    switch self.descriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: textCount
  //····················································································································

  final let textCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var textCount : Int? {
    switch self.textCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveFont
  //····················································································································

  final let canRemoveFont_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveFont : Bool? {
    switch self.canRemoveFont_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentNamesCount
  //····················································································································

  final let componentNamesCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var componentNamesCount : Int? {
    switch self.componentNamesCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentValuesCount
  //····················································································································

  final let componentValuesCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var componentValuesCount : Int? {
    switch self.componentValuesCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mNominalSize_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mNominalSize")
    self.mFontName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mFontName")
    self.mFontVersion_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mFontVersion")
    self.mDescriptiveString_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mDescriptiveString")
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- To many property: mTexts (has opposite relationship)
    self.mTexts_property.undoManager = inUndoManager
    self.mTexts_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mFont_property.setProp (me) } },
      resetter: { inObject in inObject.mFont_property.setProp (nil) }
    )
  //--- To many property: mComponentNames (has opposite relationship)
    self.mComponentNames_property.undoManager = inUndoManager
    self.mComponentNames_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNameFont_property.setProp (me) } },
      resetter: { inObject in inObject.mNameFont_property.setProp (nil) }
    )
  //--- To many property: mComponentValues (has opposite relationship)
    self.mComponentValues_property.undoManager = inUndoManager
    self.mComponentValues_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mValueFont_property.setProp (me) } },
      resetter: { inObject in inObject.mValueFont_property.setProp (nil) }
    )
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mFontVersion_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_versionString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFontVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: sizeString
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDescriptiveString_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_sizeString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDescriptiveString_property.addEBObserver (self.sizeString_property)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNominalSize_property.selection
        let s1 = unwSelf.mDescriptiveString_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_FontInProject_descriptor (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNominalSize_property.addEBObserver (self.descriptor_property)
    self.mDescriptiveString_property.addEBObserver (self.descriptor_property)
  //--- Atomic property: textCount
    self.textCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mTexts_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_textCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTexts_property.addEBObserver (self.textCount_property)
  //--- Atomic property: canRemoveFont
    self.canRemoveFont_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponentNames_property.count_property.selection
        let s1 = unwSelf.mComponentValues_property.count_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_FontInProject_canRemoveFont (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponentNames_property.addEBObserver (self.canRemoveFont_property)
    self.mComponentValues_property.addEBObserver (self.canRemoveFont_property)
  //--- Atomic property: componentNamesCount
    self.componentNamesCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponentNames_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_componentNamesCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponentNames_property.addEBObserver (self.componentNamesCount_property)
  //--- Atomic property: componentValuesCount
    self.componentValuesCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponentValues_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_componentValuesCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponentValues_property.addEBObserver (self.componentValuesCount_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mTexts_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mFont_property.setProp (me) } },
      resetter: { inObject in inObject.mFont_property.setProp (nil) }
    )
    self.mComponentNames_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNameFont_property.setProp (me) } },
      resetter: { inObject in inObject.mNameFont_property.setProp (nil) }
    )
    self.mComponentValues_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mValueFont_property.setProp (me) } },
      resetter: { inObject in inObject.mValueFont_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

