//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_mNominalSize : AnyObject {
  var mNominalSize : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_mFontName : AnyObject {
  var mFontName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_mFontVersion : AnyObject {
  var mFontVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_mDescriptiveString : AnyObject {
  var mDescriptiveString : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_versionString : AnyObject {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_sizeString : AnyObject {
  var sizeString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_descriptor : AnyObject {
  var descriptor : BoardFontDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_textCount : AnyObject {
  var textCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_canRemoveFont : AnyObject {
  var canRemoveFont : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_componentNamesCount : AnyObject {
  var componentNamesCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_componentValuesCount : AnyObject {
  var componentValuesCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class FontInProject : EBManagedObject,
         FontInProject_mNominalSize,
         FontInProject_mFontName,
         FontInProject_mFontVersion,
         FontInProject_mDescriptiveString,
         FontInProject_versionString,
         FontInProject_sizeString,
         FontInProject_descriptor,
         FontInProject_textCount,
         FontInProject_canRemoveFont,
         FontInProject_componentNamesCount,
         FontInProject_componentValuesCount {

  //····················································································································
  //   To many property: mTexts
  //····················································································································

  final let mTexts_property = StoredArrayOf_BoardText (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mTexts : EBReferenceArray <BoardText> {
    get { return self.mTexts_property.propval }
    set { self.mTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNominalSize
  //····················································································································

  final let mNominalSize_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mNominalSize_toDefaultValue () {
    self.mNominalSize = 0
  }

  //····················································································································

  final var mNominalSize : Int {
    get { return self.mNominalSize_property.propval }
    set { self.mNominalSize_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mFontName
  //····················································································································

  final let mFontName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mFontName_toDefaultValue () {
    self.mFontName = ""
  }

  //····················································································································

  final var mFontName : String {
    get { return self.mFontName_property.propval }
    set { self.mFontName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mFontVersion
  //····················································································································

  final let mFontVersion_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mFontVersion_toDefaultValue () {
    self.mFontVersion = 0
  }

  //····················································································································

  final var mFontVersion : Int {
    get { return self.mFontVersion_property.propval }
    set { self.mFontVersion_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDescriptiveString
  //····················································································································

  final let mDescriptiveString_property : EBStoredProperty_String

  //····················································································································

  final func reset_mDescriptiveString_toDefaultValue () {
    self.mDescriptiveString = ""
  }

  //····················································································································

  final var mDescriptiveString : String {
    get { return self.mDescriptiveString_property.propval }
    set { self.mDescriptiveString_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mComponentNames
  //····················································································································

  final let mComponentNames_property = StoredArrayOf_ComponentInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mComponentNames : EBReferenceArray <ComponentInProject> {
    get { return self.mComponentNames_property.propval }
    set { self.mComponentNames_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mComponentValues
  //····················································································································

  final let mComponentValues_property = StoredArrayOf_ComponentInProject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mComponentValues : EBReferenceArray <ComponentInProject> {
    get { return self.mComponentValues_property.propval }
    set { self.mComponentValues_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  final let versionString_property = EBTransientProperty_String ()

  //····················································································································

  final var versionString : String? {
    switch self.versionString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sizeString
  //····················································································································

  final let sizeString_property = EBTransientProperty_String ()

  //····················································································································

  final var sizeString : String? {
    switch self.sizeString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  final let descriptor_property = EBTransientProperty_BoardFontDescriptor ()

  //····················································································································

  final var descriptor : BoardFontDescriptor? {
    switch self.descriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: textCount
  //····················································································································

  final let textCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var textCount : Int? {
    switch self.textCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveFont
  //····················································································································

  final let canRemoveFont_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemoveFont : Bool? {
    switch self.canRemoveFont_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentNamesCount
  //····················································································································

  final let componentNamesCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var componentNamesCount : Int? {
    switch self.componentNamesCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentValuesCount
  //····················································································································

  final let componentValuesCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var componentValuesCount : Int? {
    switch self.componentValuesCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mNominalSize_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mFontName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mFontVersion_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mDescriptiveString_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- To many property: mTexts (has opposite relationship)
    self.mTexts_property.ebUndoManager = self.ebUndoManager
    self.mTexts_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mFont_property.setProp (me) } },
      resetter: { inObject in inObject.mFont_property.setProp (nil) }
    )
  //--- To many property: mComponentNames (has opposite relationship)
    self.mComponentNames_property.ebUndoManager = self.ebUndoManager
    self.mComponentNames_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNameFont_property.setProp (me) } },
      resetter: { inObject in inObject.mNameFont_property.setProp (nil) }
    )
  //--- To many property: mComponentValues (has opposite relationship)
    self.mComponentValues_property.ebUndoManager = self.ebUndoManager
    self.mComponentValues_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mValueFont_property.setProp (me) } },
      resetter: { inObject in inObject.mValueFont_property.setProp (nil) }
    )
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mFontVersion_property.selection) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_versionString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFontVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: sizeString
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mDescriptiveString_property.selection) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_sizeString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDescriptiveString_property.addEBObserver (self.sizeString_property)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mNominalSize_property.selection, unwSelf.mDescriptiveString_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_FontInProject_descriptor (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNominalSize_property.addEBObserver (self.descriptor_property)
    self.mDescriptiveString_property.addEBObserver (self.descriptor_property)
  //--- Atomic property: textCount
    self.textCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mTexts_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_textCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTexts_property.addEBObserver (self.textCount_property)
  //--- Atomic property: canRemoveFont
    self.canRemoveFont_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mComponentNames_property.count_property.selection, unwSelf.mComponentValues_property.count_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_FontInProject_canRemoveFont (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponentNames_property.addEBObserver (self.canRemoveFont_property)
    self.mComponentValues_property.addEBObserver (self.canRemoveFont_property)
  //--- Atomic property: componentNamesCount
    self.componentNamesCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mComponentNames_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_componentNamesCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponentNames_property.addEBObserver (self.componentNamesCount_property)
  //--- Atomic property: componentValuesCount
    self.componentValuesCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mComponentValues_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_FontInProject_componentValuesCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponentValues_property.addEBObserver (self.componentValuesCount_property)
  //--- Install undoers and opposite setter for relationships
    self.mTexts_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mFont_property.setProp (me) } },
      resetter: { inObject in inObject.mFont_property.setProp (nil) }
    )
    self.mComponentNames_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNameFont_property.setProp (me) } },
      resetter: { inObject in inObject.mNameFont_property.setProp (nil) }
    )
    self.mComponentValues_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mValueFont_property.setProp (me) } },
      resetter: { inObject in inObject.mValueFont_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.mFontVersion_property.removeEBObserver (self.versionString_property)
    // self.mDescriptiveString_property.removeEBObserver (self.sizeString_property)
    // self.mNominalSize_property.removeEBObserver (self.descriptor_property)
    // self.mDescriptiveString_property.removeEBObserver (self.descriptor_property)
    // self.mTexts_property.removeEBObserver (self.textCount_property)
    // self.mComponentNames_property.removeEBObserver (self.canRemoveFont_property)
    // self.mComponentValues_property.removeEBObserver (self.canRemoveFont_property)
    // self.mComponentNames_property.removeEBObserver (self.componentNamesCount_property)
    // self.mComponentValues_property.removeEBObserver (self.componentValuesCount_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "mNominalSize",
        object: self.mNominalSize_property,
        y: &y,
        view: view,
        observerExplorer: &self.mNominalSize_property.mObserverExplorer,
        valueExplorer: &self.mNominalSize_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mFontName",
        object: self.mFontName_property,
        y: &y,
        view: view,
        observerExplorer: &self.mFontName_property.mObserverExplorer,
        valueExplorer: &self.mFontName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mFontVersion",
        object: self.mFontVersion_property,
        y: &y,
        view: view,
        observerExplorer: &self.mFontVersion_property.mObserverExplorer,
        valueExplorer: &self.mFontVersion_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "mDescriptiveString",
        object: self.mDescriptiveString_property,
        y: &y,
        view: view,
        observerExplorer: &self.mDescriptiveString_property.mObserverExplorer,
        valueExplorer: &self.mDescriptiveString_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "versionString",
        object: self.versionString_property,
        y: &y,
        view: view,
        observerExplorer: &self.versionString_property.mObserverExplorer,
        valueExplorer: &self.versionString_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "sizeString",
        object: self.sizeString_property,
        y: &y,
        view: view,
        observerExplorer: &self.sizeString_property.mObserverExplorer,
        valueExplorer: &self.sizeString_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "descriptor",
        object: self.descriptor_property,
        y: &y,
        view: view,
        observerExplorer: &self.descriptor_property.mObserverExplorer,
        valueExplorer: &self.descriptor_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "textCount",
        object: self.textCount_property,
        y: &y,
        view: view,
        observerExplorer: &self.textCount_property.mObserverExplorer,
        valueExplorer: &self.textCount_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "canRemoveFont",
        object: self.canRemoveFont_property,
        y: &y,
        view: view,
        observerExplorer: &self.canRemoveFont_property.mObserverExplorer,
        valueExplorer: &self.canRemoveFont_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "componentNamesCount",
        object: self.componentNamesCount_property,
        y: &y,
        view: view,
        observerExplorer: &self.componentNamesCount_property.mObserverExplorer,
        valueExplorer: &self.componentNamesCount_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "componentValuesCount",
        object: self.componentValuesCount_property,
        y: &y,
        view: view,
        observerExplorer: &self.componentValuesCount_property.mObserverExplorer,
        valueExplorer: &self.componentValuesCount_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForToManyRelationshipNamed (
        "mTexts",
        object: mTexts_property,
        y: &y,
        view: view,
        valueExplorer:&mTexts_property.mValueExplorer
      )
      createEntryForToManyRelationshipNamed (
        "mComponentNames",
        object: mComponentNames_property,
        y: &y,
        view: view,
        valueExplorer:&mComponentNames_property.mValueExplorer
      )
      createEntryForToManyRelationshipNamed (
        "mComponentValues",
        object: mComponentValues_property,
        y: &y,
        view: view,
        valueExplorer:&mComponentValues_property.mValueExplorer
      )
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
    //--- To many property: mTexts
      self.mTexts_property.mValueExplorer = nil
  //--- Atomic property: mNominalSize
    self.mNominalSize_property.mObserverExplorer = nil
    self.mNominalSize_property.mValueExplorer = nil
  //--- Atomic property: mFontName
    self.mFontName_property.mObserverExplorer = nil
    self.mFontName_property.mValueExplorer = nil
  //--- Atomic property: mFontVersion
    self.mFontVersion_property.mObserverExplorer = nil
    self.mFontVersion_property.mValueExplorer = nil
  //--- Atomic property: mDescriptiveString
    self.mDescriptiveString_property.mObserverExplorer = nil
    self.mDescriptiveString_property.mValueExplorer = nil
    //--- To many property: mComponentNames
      self.mComponentNames_property.mValueExplorer = nil
    //--- To many property: mComponentValues
      self.mComponentValues_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mTexts.removeAll ()
    self.mComponentNames.removeAll ()
    self.mComponentValues.removeAll ()
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: mTexts
    self.store (
      managedObjectArray: self.mTexts_property.propval.values,
      relationshipName: "mTexts",
      intoDictionary: ioDictionary
    )
    //--- Atomic property: mNominalSize
      self.mNominalSize_property.storeIn (dictionary: ioDictionary, forKey: "mNominalSize")
    //--- Atomic property: mFontName
      self.mFontName_property.storeIn (dictionary: ioDictionary, forKey: "mFontName")
    //--- Atomic property: mFontVersion
      self.mFontVersion_property.storeIn (dictionary: ioDictionary, forKey: "mFontVersion")
    //--- Atomic property: mDescriptiveString
      self.mDescriptiveString_property.storeIn (dictionary: ioDictionary, forKey: "mDescriptiveString")
  //--- To many property: mComponentNames
    self.store (
      managedObjectArray: self.mComponentNames_property.propval.values,
      relationshipName: "mComponentNames",
      intoDictionary: ioDictionary
    )
  //--- To many property: mComponentValues
    self.store (
      managedObjectArray: self.mComponentValues_property.propval.values,
      relationshipName: "mComponentValues",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mTexts
/*    self.mTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardText]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mTexts",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [BoardText]
      self.mTexts_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mComponentNames
/*    self.mComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentInProject]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mComponentNames",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [ComponentInProject]
      self.mComponentNames_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mComponentValues
/*    self.mComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentInProject]) */
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mComponentValues",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as! [ComponentInProject]
      self.mComponentValues_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNominalSize
    self.mNominalSize_property.readFrom (dictionary: inDictionary, forKey: "mNominalSize")
  //--- Atomic property: mFontName
    self.mFontName_property.readFrom (dictionary: inDictionary, forKey: "mFontName")
  //--- Atomic property: mFontVersion
    self.mFontVersion_property.readFrom (dictionary: inDictionary, forKey: "mFontVersion")
  //--- Atomic property: mDescriptiveString
    self.mDescriptiveString_property.readFrom (dictionary: inDictionary, forKey: "mDescriptiveString")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mNominalSize\n"
    ioString += "mFontName\n"
    ioString += "mFontVersion\n"
    ioString += "mDescriptiveString\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mTexts\n"
    ioString += "mComponentNames\n"
    ioString += "mComponentValues\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mNominalSize.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mFontName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mFontVersion.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDescriptiveString.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mTexts.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mComponentNames.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mComponentValues.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mNominalSize"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mNominalSize = value
      }
      if let range = inDictionary ["mFontName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mFontName = value
      }
      if let range = inDictionary ["mFontVersion"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mFontVersion = value
      }
      if let range = inDictionary ["mDescriptiveString"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mDescriptiveString = value
      }
    //--- To one relationships
    //--- To many relationships
      if let range = inDictionary ["mTexts"], range.length > 0 {
        var relationshipArray = EBReferenceArray <BoardText> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! BoardText)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mTexts = relationshipArray }
      }
      if let range = inDictionary ["mComponentNames"], range.length > 0 {
        var relationshipArray = EBReferenceArray <ComponentInProject> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! ComponentInProject)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mComponentNames = relationshipArray }
      }
      if let range = inDictionary ["mComponentValues"], range.length > 0 {
        var relationshipArray = EBReferenceArray <ComponentInProject> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! ComponentInProject)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation { self.mComponentValues = relationshipArray }
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mTexts
    for managedObject in self.mTexts.values {
      objects.append (managedObject)
    }
  //--- To many property: mComponentNames
    for managedObject in self.mComponentNames.values {
      objects.append (managedObject)
    }
  //--- To many property: mComponentValues
    for managedObject in self.mComponentValues.values {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mTexts
    for managedObject in self.mTexts.values {
      objects.append (managedObject)
    }
  //--- To many property: mComponentNames
    for managedObject in self.mComponentNames.values {
      objects.append (managedObject)
    }
  //--- To many property: mComponentValues
    for managedObject in self.mComponentValues.values {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

