//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_FontInProject : ReadOnlyAbstractArrayProperty <FontInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <FontInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <FontInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mNominalSize_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mFontName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mFontVersion_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDescriptiveString_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_versionString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_sizeString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_descriptor_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_textCount_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_canRemoveFont_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentNamesCount_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentValuesCount_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mNominalSize_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mFontName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mFontVersion_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDescriptiveString_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_versionString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_sizeString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_descriptor_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_textCount_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_canRemoveFont_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentNamesCount_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentValuesCount_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mNominalSize' stored property
  //····················································································································

  private final var mObserversOf_mNominalSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNominalSize (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNominalSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNominalSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNominalSize (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNominalSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNominalSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNominalSize_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    if !self.mObserversOf_mNominalSize.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mNominalSize.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mNominalSize_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mNominalSize.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNominalSize_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for (_, entry) in self.mObserversOf_mNominalSize.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNominalSize_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mNominalSize.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mFontName' stored property
  //····················································································································

  private final var mObserversOf_mFontName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFontName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFontName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFontName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFontName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFontName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFontName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFontName_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    if !self.mObserversOf_mFontName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mFontName.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mFontName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mFontName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFontName_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for (_, entry) in self.mObserversOf_mFontName.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mFontName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mFontName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mFontVersion' stored property
  //····················································································································

  private final var mObserversOf_mFontVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFontVersion (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFontVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFontVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFontVersion (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFontVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFontVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFontVersion_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    if !self.mObserversOf_mFontVersion.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mFontVersion.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mFontVersion_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mFontVersion.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFontVersion_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for (_, entry) in self.mObserversOf_mFontVersion.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mFontVersion_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mFontVersion.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mDescriptiveString' stored property
  //····················································································································

  private final var mObserversOf_mDescriptiveString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDescriptiveString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDescriptiveString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDescriptiveString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDescriptiveString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDescriptiveString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDescriptiveString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDescriptiveString_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    if !self.mObserversOf_mDescriptiveString.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mDescriptiveString.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mDescriptiveString_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mDescriptiveString.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDescriptiveString_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for (_, entry) in self.mObserversOf_mDescriptiveString.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mDescriptiveString_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mDescriptiveString.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private final var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_versionString.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.versionString_property.addEBObserver (observer)
        }else{
          self.mObserversOf_versionString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_versionString.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.versionString_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_versionString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'sizeString' transient property
  //····················································································································

  private final var mObserversOf_sizeString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sizeString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sizeString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sizeString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sizeString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sizeString_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_sizeString.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.sizeString_property.addEBObserver (observer)
        }else{
          self.mObserversOf_sizeString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sizeString_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_sizeString.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.sizeString_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_sizeString.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private final var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_descriptor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_descriptor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_descriptor_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_descriptor.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.descriptor_property.addEBObserver (observer)
        }else{
          self.mObserversOf_descriptor.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_descriptor_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_descriptor.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.descriptor_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_descriptor.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'textCount' transient property
  //····················································································································

  private final var mObserversOf_textCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_textCount (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_textCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.textCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_textCount (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_textCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.textCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_textCount_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_textCount.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.textCount_property.addEBObserver (observer)
        }else{
          self.mObserversOf_textCount.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_textCount_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_textCount.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.textCount_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_textCount.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'canRemoveFont' transient property
  //····················································································································

  private final var mObserversOf_canRemoveFont = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canRemoveFont (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canRemoveFont.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemoveFont_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemoveFont (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canRemoveFont.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemoveFont_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canRemoveFont_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_canRemoveFont.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.canRemoveFont_property.addEBObserver (observer)
        }else{
          self.mObserversOf_canRemoveFont.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canRemoveFont_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_canRemoveFont.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.canRemoveFont_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_canRemoveFont.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'componentNamesCount' transient property
  //····················································································································

  private final var mObserversOf_componentNamesCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentNamesCount (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentNamesCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentNamesCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentNamesCount (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentNamesCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentNamesCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentNamesCount_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentNamesCount.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentNamesCount_property.addEBObserver (observer)
        }else{
          self.mObserversOf_componentNamesCount.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentNamesCount_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentNamesCount.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentNamesCount_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_componentNamesCount.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'componentValuesCount' transient property
  //····················································································································

  private final var mObserversOf_componentValuesCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentValuesCount (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentValuesCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValuesCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentValuesCount (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentValuesCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValuesCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentValuesCount_toElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentValuesCount.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentValuesCount_property.addEBObserver (observer)
        }else{
          self.mObserversOf_componentValuesCount.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentValuesCount_fromElementsOfSet (_ inSet : EBReferenceSet <FontInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_componentValuesCount.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.componentValuesCount_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_componentValuesCount.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_FontInProject : ReadOnlyArrayOf_FontInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : FontInProject, _ right : FontInProject) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_FontInProject? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_FontInProject,
                        sortCallback inSortCallBack : Optional < (_ left : FontInProject, _ right : FontInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <FontInProject>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [FontInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <FontInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_FontInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_FontInProject : ReadOnlyArrayOf_FontInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <FontInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_FontInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_FontInProject : ReadWriteArrayOf_FontInProject, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <FontInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! FontInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <FontInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! FontInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : FontInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : FontInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : FontInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : FontInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <FontInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <FontInProject>,
                                 addedSet inAddedSet : EBReferenceSet <FontInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [FontInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <FontInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <FontInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : FontInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : FontInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class StandAloneArrayOf_FontInProject : ReadWriteArrayOf_FontInProject {

  //····················································································································

  override var selection : EBSelection < [FontInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <FontInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <FontInProject> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : FontInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : FontInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_FontInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

