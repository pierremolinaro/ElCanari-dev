//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    ReadOnlyObject_FontInProject
//--------------------------------------------------------------------------------------------------

class ReadOnlyObject_FontInProject : EBReadOnlyAbstractObjectProperty <FontInProject> {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : FontInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mFileSystemStatusMessageForFontInProject_property.stopsBeingObserved (by: self.mFileSystemStatusMessageForFontInProject_property) // Stored property
      oldValue.mFileSystemStatusRequiresAttentionForFontInProject_property.stopsBeingObserved (by: self.mFileSystemStatusRequiresAttentionForFontInProject_property) // Stored property
      oldValue.mNominalSize_property.stopsBeingObserved (by: self.mNominalSize_property) // Stored property
      oldValue.mFontName_property.stopsBeingObserved (by: self.mFontName_property) // Stored property
      oldValue.mFontVersion_property.stopsBeingObserved (by: self.mFontVersion_property) // Stored property
      oldValue.mDescriptiveString_property.stopsBeingObserved (by: self.mDescriptiveString_property) // Stored property
      oldValue.versionString_property.stopsBeingObserved (by: self.versionString_property) // Transient property
      oldValue.sizeString_property.stopsBeingObserved (by: self.sizeString_property) // Transient property
      oldValue.descriptor_property.stopsBeingObserved (by: self.descriptor_property) // Transient property
      oldValue.textCount_property.stopsBeingObserved (by: self.textCount_property) // Transient property
      oldValue.fileSystemStatusImage_property.stopsBeingObserved (by: self.fileSystemStatusImage_property) // Transient property
      oldValue.canRemoveFont_property.stopsBeingObserved (by: self.canRemoveFont_property) // Transient property
      oldValue.componentNamesCount_property.stopsBeingObserved (by: self.componentNamesCount_property) // Transient property
      oldValue.componentValuesCount_property.stopsBeingObserved (by: self.componentValuesCount_property) // Transient property
      if let relay = self.mObserversOf_mTexts { // to Many
        oldValue.mTexts_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponentNames { // to Many
        oldValue.mComponentNames_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponentValues { // to Many
        oldValue.mComponentValues_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mFileSystemStatusMessageForFontInProject_property.startsBeingObserved (by: self.mFileSystemStatusMessageForFontInProject_property) // Stored property
      newValue.mFileSystemStatusRequiresAttentionForFontInProject_property.startsBeingObserved (by: self.mFileSystemStatusRequiresAttentionForFontInProject_property) // Stored property
      newValue.mNominalSize_property.startsBeingObserved (by: self.mNominalSize_property) // Stored property
      newValue.mFontName_property.startsBeingObserved (by: self.mFontName_property) // Stored property
      newValue.mFontVersion_property.startsBeingObserved (by: self.mFontVersion_property) // Stored property
      newValue.mDescriptiveString_property.startsBeingObserved (by: self.mDescriptiveString_property) // Stored property
      newValue.versionString_property.startsBeingObserved (by: self.versionString_property) // Transient property
      newValue.sizeString_property.startsBeingObserved (by: self.sizeString_property) // Transient property
      newValue.descriptor_property.startsBeingObserved (by: self.descriptor_property) // Transient property
      newValue.textCount_property.startsBeingObserved (by: self.textCount_property) // Transient property
      newValue.fileSystemStatusImage_property.startsBeingObserved (by: self.fileSystemStatusImage_property) // Transient property
      newValue.canRemoveFont_property.startsBeingObserved (by: self.canRemoveFont_property) // Transient property
      newValue.componentNamesCount_property.startsBeingObserved (by: self.componentNamesCount_property) // Transient property
      newValue.componentValuesCount_property.startsBeingObserved (by: self.componentValuesCount_property) // Transient property
      if let relay = self.mObserversOf_mTexts { // to Many
        newValue.mTexts_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponentNames { // to Many
        newValue.mComponentNames_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponentValues { // to Many
        newValue.mComponentValues_property.startsBeingObserved (by: relay)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFileSystemStatusMessageForFontInProject' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFileSystemStatusMessageForFontInProject_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFileSystemStatusRequiresAttentionForFontInProject' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFileSystemStatusRequiresAttentionForFontInProject_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mNominalSize' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mNominalSize_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFontName' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFontName_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mFontVersion' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mFontVersion_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'mDescriptiveString' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let mDescriptiveString_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'versionString' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let versionString_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'sizeString' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let sizeString_property = EBTransientProperty <String?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'descriptor' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let descriptor_property = EBTransientProperty <BoardFontDescriptor?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'textCount' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let textCount_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'fileSystemStatusImage' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let fileSystemStatusImage_property = EBTransientProperty <NSImage?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'canRemoveFont' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let canRemoveFont_property = EBTransientProperty <Bool?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentNamesCount' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let componentNamesCount_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of 'componentValuesCount' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let componentValuesCount_property = EBTransientProperty <Int?> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mTexts
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mTexts : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mTexts_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mTexts {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mTexts_property.startsBeingObserved (by: relay)
      self.mObserversOf_mTexts = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mTexts_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mTexts?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mComponentNames
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mComponentNames : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mComponentNames_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mComponentNames {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mComponentNames_property.startsBeingObserved (by: relay)
      self.mObserversOf_mComponentNames = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mComponentNames_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mComponentNames?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observable toMany property: mComponentValues
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mObserversOf_mComponentValues : EBObservedObserver? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mComponentValues_StartsBeingObserved (by inObserver : any EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mComponentValues {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mComponentValues_property.startsBeingObserved (by: relay)
      self.mObserversOf_mComponentValues = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func toMany_mComponentValues_StopsBeingObserved (by inObserver : any EBObserverProtocol) {
    self.mObserversOf_mComponentValues?.stopsBeingObserved (by: inObserver)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   INIT
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override init () {
    super.init ()
  //--- Configure mFileSystemStatusMessageForFontInProject simple stored property
    self.mFileSystemStatusMessageForFontInProject_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFileSystemStatusMessageForFontInProject_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mFileSystemStatusRequiresAttentionForFontInProject simple stored property
    self.mFileSystemStatusRequiresAttentionForFontInProject_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFileSystemStatusRequiresAttentionForFontInProject_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mNominalSize simple stored property
    self.mNominalSize_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNominalSize_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mFontName simple stored property
    self.mFontName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFontName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mFontVersion simple stored property
    self.mFontVersion_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mFontVersion_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mDescriptiveString simple stored property
    self.mDescriptiveString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDescriptiveString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure versionString transient property
    self.versionString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.versionString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure sizeString transient property
    self.sizeString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.sizeString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure descriptor transient property
    self.descriptor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.descriptor_property.optionalSelection ?? .single (nil)
    }
  //--- Configure textCount transient property
    self.textCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.textCount_property.optionalSelection ?? .single (nil)
    }
  //--- Configure fileSystemStatusImage transient property
    self.fileSystemStatusImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.fileSystemStatusImage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure canRemoveFont transient property
    self.canRemoveFont_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.canRemoveFont_property.optionalSelection ?? .single (nil)
    }
  //--- Configure componentNamesCount transient property
    self.componentNamesCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentNamesCount_property.optionalSelection ?? .single (nil)
    }
  //--- Configure componentValuesCount transient property
    self.componentValuesCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentValuesCount_property.optionalSelection ?? .single (nil)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    StoredObject_FontInProject
//--------------------------------------------------------------------------------------------------

final class StoredObject_FontInProject : ReadOnlyObject_FontInProject, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mKey : String?
  var key : String? { return self.mKey }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! FontInProject
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! FontInProject
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Signature ?
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mUsedForSignature : Bool

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Undo manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Opposite relationship management
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : FontInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : FontInProject) -> Void > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : FontInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : FontInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model will change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final class MyPrivateUndoer : NSObject { // For Swift 6
    let mOldValue : FontInProject?

    init (_ inOldValue : FontInProject?) {
      self.mOldValue = inOldValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  // @objc private final func myPerformUndo (_ inObject : MyPrivateUndoer) {  // For Swift 6
  //   self.setProp (inObject.mOldValue)
  // }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : FontInProject?) {
  //--- Register old value in undo manager
     // self.undoManager?.registerUndo (  // For Swift 6
     //  withTarget: self,
     // selector: #selector (Self.myPerformUndo (_:)),
     // object: MyPrivateUndoer (inOldValue)
    // )
    self.undoManager?.registerUndo (withTarget: self) { selfTarget in
      selfTarget.setProp (inOldValue) // Ok in swift 6.2
      // MainActor.assumeIsolated { selfTarget.setProp (inOldValue) }
    }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model did change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var selection : EBSelection < FontInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var propval : FontInProject? { return self.mWeakInternalValue }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   setProp
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setProp (_ inValue : FontInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSignatureCache : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

