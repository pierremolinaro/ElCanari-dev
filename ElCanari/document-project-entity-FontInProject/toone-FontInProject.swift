//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_FontInProject : ReadOnlyAbstractObjectProperty <FontInProject> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : FontInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mNominalSize_property.removeEBObserver (self.mNominalSize_property) // Stored property
      oldValue.mFontName_property.removeEBObserver (self.mFontName_property) // Stored property
      oldValue.mFontVersion_property.removeEBObserver (self.mFontVersion_property) // Stored property
      oldValue.mDescriptiveString_property.removeEBObserver (self.mDescriptiveString_property) // Stored property
      oldValue.versionString_property.removeEBObserver (self.versionString_property) // Transient property
      oldValue.sizeString_property.removeEBObserver (self.sizeString_property) // Transient property
      oldValue.descriptor_property.removeEBObserver (self.descriptor_property) // Transient property
      oldValue.textCount_property.removeEBObserver (self.textCount_property) // Transient property
      oldValue.canRemoveFont_property.removeEBObserver (self.canRemoveFont_property) // Transient property
      oldValue.componentNamesCount_property.removeEBObserver (self.componentNamesCount_property) // Transient property
      oldValue.componentValuesCount_property.removeEBObserver (self.componentValuesCount_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mNominalSize_property.addEBObserver (self.mNominalSize_property) // Stored property
      newValue.mFontName_property.addEBObserver (self.mFontName_property) // Stored property
      newValue.mFontVersion_property.addEBObserver (self.mFontVersion_property) // Stored property
      newValue.mDescriptiveString_property.addEBObserver (self.mDescriptiveString_property) // Stored property
      newValue.versionString_property.addEBObserver (self.versionString_property) // Transient property
      newValue.sizeString_property.addEBObserver (self.sizeString_property) // Transient property
      newValue.descriptor_property.addEBObserver (self.descriptor_property) // Transient property
      newValue.textCount_property.addEBObserver (self.textCount_property) // Transient property
      newValue.canRemoveFont_property.addEBObserver (self.canRemoveFont_property) // Transient property
      newValue.componentNamesCount_property.addEBObserver (self.componentNamesCount_property) // Transient property
      newValue.componentValuesCount_property.addEBObserver (self.componentValuesCount_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mNominalSize' stored property
  //····················································································································

  final let mNominalSize_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mFontName' stored property
  //····················································································································

  final let mFontName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mFontVersion' stored property
  //····················································································································

  final let mFontVersion_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDescriptiveString' stored property
  //····················································································································

  final let mDescriptiveString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  final let versionString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'sizeString' transient property
  //····················································································································

  final let sizeString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  final let descriptor_property = EBGenericTransientProperty <BoardFontDescriptor?> ()

  //····················································································································
  //   Observers of 'textCount' transient property
  //····················································································································

  final let textCount_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'canRemoveFont' transient property
  //····················································································································

  final let canRemoveFont_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'componentNamesCount' transient property
  //····················································································································

  final let componentNamesCount_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'componentValuesCount' transient property
  //····················································································································

  final let componentValuesCount_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observable toMany property: mTexts
  //····················································································································

  private final var mObserversOf_mTexts = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTexts (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mTexts.insert (inObserver)
    if let object = self.propval {
      object.mTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTexts (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mTexts.remove (inObserver)
    if let object = self.propval {
      object.mTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponentNames
  //····················································································································

  private final var mObserversOf_mComponentNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComponentNames (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mComponentNames.insert (inObserver)
    if let object = self.propval {
      object.mComponentNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentNames (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mComponentNames.remove (inObserver)
    if let object = self.propval {
      object.mComponentNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponentValues
  //····················································································································

  private final var mObserversOf_mComponentValues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComponentValues (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mComponentValues.insert (inObserver)
    if let object = self.propval {
      object.mComponentValues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentValues (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mComponentValues.remove (inObserver)
    if let object = self.propval {
      object.mComponentValues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mNominalSize simple stored property
    self.mNominalSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mNominalSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mFontName simple stored property
    self.mFontName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mFontName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mFontVersion simple stored property
    self.mFontVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mFontVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDescriptiveString simple stored property
    self.mDescriptiveString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mDescriptiveString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure versionString transient property
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.versionString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure sizeString transient property
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.sizeString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure descriptor transient property
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.descriptor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure textCount transient property
    self.textCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.textCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure canRemoveFont transient property
    self.canRemoveFont_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.canRemoveFont_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure componentNamesCount transient property
    self.componentNamesCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.componentNamesCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure componentValuesCount transient property
    self.componentValuesCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.componentValuesCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TransientObject FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class TransientObject_FontInProject : ReadOnlyObject_FontInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyObject_FontInProject? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_FontInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : FontInProject?
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mWeakInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < FontInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let v = self.mWeakInternalValue {
        return .single (v)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : FontInProject? { return self.mWeakInternalValue }

  //····················································································································

} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_FontInProject : ReadOnlyObject_FontInProject {

  //····················································································································

  func setProp (_ inValue : FontInProject?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ProxyObject_FontInProject : ReadWriteObject_FontInProject {

  //····················································································································

  private weak var mModel : ReadWriteObject_FontInProject? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_FontInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : FontInProject?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mWeakInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : FontInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < FontInProject? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : FontInProject? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

} */
 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_FontInProject : ReadWriteObject_FontInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : FontInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : FontInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : FontInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : FontInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : FontInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < FontInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : FontInProject? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : FontInProject? = nil

  //····················································································································

  override func setProp (_ inValue : FontInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

