//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NCInSchematic_mOrientation : AnyObject {
  var mOrientation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NCInSchematic_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NCInSchematic_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: NCInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class NCInSchematic : SchematicObject,
         NCInSchematic_mOrientation,
         NCInSchematic_objectDisplay,
         NCInSchematic_selectionDisplay {

  //····················································································································
  //   Atomic property: mOrientation
  //····················································································································

  final let mOrientation_property : EBStoredProperty_QuadrantRotation

  //····················································································································

  //····················································································································

  final var mOrientation : QuadrantRotation {
    get { return self.mOrientation_property.propval }
    set { self.mOrientation_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mPoint
  //····················································································································

  final let mPoint_property = StoredObject_PointInSchematic (usedForSignature: false, strongRef: false, key: "mPoint")

  //····················································································································

  final var mPoint : PointInSchematic? {
    get {
      return self.mPoint_property.propval
    }
    set {
      if self.mPoint_property.propval !== newValue {
        if self.mPoint_property.propval != nil {
          self.mPoint_property.setProp (nil)
        }
        if newValue != nil {
          self.mPoint_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mPoint_none = EBTransientProperty <Bool> ()

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mOrientation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0, undoManager: inUndoManager, key: "mOrientation")
    super.init (inUndoManager)
    self.mPoint_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mPoint_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mPoint_property.startsToBeObserved (by: self.mPoint_none)
  //--- To one property: mPoint (has opposite to one relationship: mNC)
    self.mPoint_property.undoManager = inUndoManager
    self.mPoint_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNC_property.setProp (me) } },
      resetter: { inObject in inObject.mNC_property.setProp (nil) }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPoint_property.location_property.selection
        let s1 = unwSelf.mOrientation_property.selection
        let s2 = unwSelf.mPoint_property.symbolRotation_property.selection
        let s3 = preferences_pinNameFont_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_NCInSchematic_objectDisplay (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPoint_property.location_property.startsToBeObserved (by: self.objectDisplay_property)
    self.mOrientation_property.startsToBeObserved (by: self.objectDisplay_property)
    self.mPoint_property.symbolRotation_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_pinNameFont_property.startsToBeObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPoint_property.location_property.selection
        let s1 = unwSelf.mOrientation_property.selection
        let s2 = unwSelf.mPoint_property.symbolRotation_property.selection
        let s3 = preferences_pinNameFont_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_NCInSchematic_selectionDisplay (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPoint_property.location_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.mOrientation_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.mPoint_property.symbolRotation_property.startsToBeObserved (by: self.selectionDisplay_property)
    preferences_pinNameFont_property.startsToBeObserved (by: self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_NCInSchematic (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_NCInSchematic (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_NCInSchematic (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_NCInSchematic (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_NCInSchematic (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_NCInSchematic (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_NCInSchematic (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_NCInSchematic (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_NCInSchematic ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_NCInSchematic ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_NCInSchematic ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_NCInSchematic ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_NCInSchematic (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_NCInSchematic (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_NCInSchematic (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_NCInSchematic (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_NCInSchematic (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_NCInSchematic ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_NCInSchematic ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

