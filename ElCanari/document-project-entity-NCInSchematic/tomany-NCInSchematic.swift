//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NCInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NCInSchematic : ReadOnlyAbstractArrayProperty <NCInSchematic> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <NCInSchematic>,                            
                                 addedSet inAddedSet : EBReferenceSet <NCInSchematic>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      managedObject.mOrientation_property.stopsBeingObserved (by: self.mObserversOf_mOrientation) // Stored property
      managedObject.objectDisplay_property.stopsBeingObserved (by: self.mObserversOf_objectDisplay) // Transient property
      managedObject.selectionDisplay_property.stopsBeingObserved (by: self.mObserversOf_selectionDisplay) // Transient property
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      managedObject.mOrientation_property.startsToBeObserved (by: self.mObserversOf_mOrientation) // Stored property
      managedObject.objectDisplay_property.startsToBeObserved (by: self.mObserversOf_objectDisplay) // Transient property
      managedObject.selectionDisplay_property.startsToBeObserved (by: self.mObserversOf_selectionDisplay) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mOrientation' stored property
  //····················································································································

  private final var mObserversOf_mOrientation = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mOrientation_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mOrientation.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mOrientation_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mOrientation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mOrientation.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mOrientation_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mOrientation_toElementsOfSet (_ inSet : EBReferenceSet <NCInSchematic>) {
    /* for managedObject in inSet.values {
      managedObject.mOrientation_property.startsToBeObserved (by: self.mObserversOf_mOrientation)
    }*/
    /* if !self.mObserversOf_mOrientation.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mOrientation.values () {
          if let observer = entry.possibleObserver {
            managedObject.mOrientation_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mOrientation.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mOrientation_fromElementsOfSet (_ inSet : EBReferenceSet <NCInSchematic>) {
    for managedObject in inSet.values {
      managedObject.mOrientation_property.stopsBeingObserved (by: self.mObserversOf_mOrientation)
    }
    for entry in self.mObserversOf_mOrientation.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mOrientation_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mOrientation.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <NCInSchematic>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_objectDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <NCInSchematic>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_objectDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.objectDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <NCInSchematic>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_selectionDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <NCInSchematic>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_selectionDisplay.values () {
        if let observer = entry.possibleObserver {
          managedObject.selectionDisplay_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf NCInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_NCInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf NCInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_NCInSchematic <SUPER : EBManagedObject> : ReadOnlyArrayOf_NCInSchematic {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <NCInSchematic> ()
      for superObject in newModelArray.values {
        if let object = superObject as? NCInSchematic {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [NCInSchematic] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <NCInSchematic> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: NCInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_NCInSchematic : ReadOnlyArrayOf_NCInSchematic {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <NCInSchematic>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_NCInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_NCInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: NCInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_NCInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: NCInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_NCInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

