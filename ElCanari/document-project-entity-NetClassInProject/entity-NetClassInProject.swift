//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mNetClassName : AnyObject {
  var mNetClassName : String { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mNetClassColor : AnyObject {
  var mNetClassColor : NSColor { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mTrackWidth : AnyObject {
  var mTrackWidth : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mTrackWidthUnit : AnyObject {
  var mTrackWidthUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mViaHoleDiameter : AnyObject {
  var mViaHoleDiameter : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mViaHoleDiameterUnit : AnyObject {
  var mViaHoleDiameterUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mViaPadDiameter : AnyObject {
  var mViaPadDiameter : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mViaPadDiameterUnit : AnyObject {
  var mViaPadDiameterUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mAllowTracksOnFrontSide : AnyObject {
  var mAllowTracksOnFrontSide : Bool { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mAllowTracksOnBackSide : AnyObject {
  var mAllowTracksOnBackSide : Bool { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mAllowTracksOnInner1Layer : AnyObject {
  var mAllowTracksOnInner1Layer : Bool { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mAllowTracksOnInner2Layer : AnyObject {
  var mAllowTracksOnInner2Layer : Bool { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mAllowTracksOnInner3Layer : AnyObject {
  var mAllowTracksOnInner3Layer : Bool { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_mAllowTracksOnInner4Layer : AnyObject {
  var mAllowTracksOnInner4Layer : Bool { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_trackWidthString : AnyObject {
  var trackWidthString : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_viaHoleDiameter : AnyObject {
  var viaHoleDiameter : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_viaPadDiameter : AnyObject {
  var viaPadDiameter : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_allowTracksOnFrontSideString : AnyObject {
  var allowTracksOnFrontSideString : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_allowTracksOnBackSideString : AnyObject {
  var allowTracksOnBackSideString : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_allowTracksOnInner1LayerString : AnyObject {
  var allowTracksOnInner1LayerString : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_allowTracksOnInner2LayerString : AnyObject {
  var allowTracksOnInner2LayerString : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_allowTracksOnInner3LayerString : AnyObject {
  var allowTracksOnInner3LayerString : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_allowTracksOnInner4LayerString : AnyObject {
  var allowTracksOnInner4LayerString : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_canRemove : AnyObject {
  var canRemove : Bool? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_netUsage : AnyObject {
  var netUsage : String? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_netsDescription : AnyObject {
  var netsDescription : NetInfoArray? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NetClassInProject_netWarningCount : AnyObject {
  var netWarningCount : Int? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: NetClassInProject
//--------------------------------------------------------------------------------------------------

final class NetClassInProject : EBManagedObject,
         NetClassInProject_mNetClassName,
         NetClassInProject_mNetClassColor,
         NetClassInProject_mTrackWidth,
         NetClassInProject_mTrackWidthUnit,
         NetClassInProject_mViaHoleDiameter,
         NetClassInProject_mViaHoleDiameterUnit,
         NetClassInProject_mViaPadDiameter,
         NetClassInProject_mViaPadDiameterUnit,
         NetClassInProject_mAllowTracksOnFrontSide,
         NetClassInProject_mAllowTracksOnBackSide,
         NetClassInProject_mAllowTracksOnInner1Layer,
         NetClassInProject_mAllowTracksOnInner2Layer,
         NetClassInProject_mAllowTracksOnInner3Layer,
         NetClassInProject_mAllowTracksOnInner4Layer,
         NetClassInProject_trackWidthString,
         NetClassInProject_viaHoleDiameter,
         NetClassInProject_viaPadDiameter,
         NetClassInProject_allowTracksOnFrontSideString,
         NetClassInProject_allowTracksOnBackSideString,
         NetClassInProject_allowTracksOnInner1LayerString,
         NetClassInProject_allowTracksOnInner2LayerString,
         NetClassInProject_allowTracksOnInner3LayerString,
         NetClassInProject_allowTracksOnInner4LayerString,
         NetClassInProject_canRemove,
         NetClassInProject_netUsage,
         NetClassInProject_netsDescription,
         NetClassInProject_netWarningCount {

  //································································································
  //   Atomic property: mNetClassName
  //································································································

  final let mNetClassName_property : EBStoredProperty_String

  //································································································

  final var mNetClassName : String {
    get { return self.mNetClassName_property.propval }
    set { self.mNetClassName_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mNetClassColor
  //································································································

  final let mNetClassColor_property : EBStoredProperty_NSColor

  //································································································

  final var mNetClassColor : NSColor {
    get { return self.mNetClassColor_property.propval }
    set { self.mNetClassColor_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mTrackWidth
  //································································································

  final let mTrackWidth_property : EBStoredProperty_Int

  //································································································

  final var mTrackWidth : Int {
    get { return self.mTrackWidth_property.propval }
    set { self.mTrackWidth_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mTrackWidthUnit
  //································································································

  final let mTrackWidthUnit_property : EBStoredProperty_Int

  //································································································

  final var mTrackWidthUnit : Int {
    get { return self.mTrackWidthUnit_property.propval }
    set { self.mTrackWidthUnit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mViaHoleDiameter
  //································································································

  final let mViaHoleDiameter_property : EBStoredProperty_Int

  //································································································

  final var mViaHoleDiameter : Int {
    get { return self.mViaHoleDiameter_property.propval }
    set { self.mViaHoleDiameter_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mViaHoleDiameterUnit
  //································································································

  final let mViaHoleDiameterUnit_property : EBStoredProperty_Int

  //································································································

  final var mViaHoleDiameterUnit : Int {
    get { return self.mViaHoleDiameterUnit_property.propval }
    set { self.mViaHoleDiameterUnit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mViaPadDiameter
  //································································································

  final let mViaPadDiameter_property : EBStoredProperty_Int

  //································································································

  final var mViaPadDiameter : Int {
    get { return self.mViaPadDiameter_property.propval }
    set { self.mViaPadDiameter_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mViaPadDiameterUnit
  //································································································

  final let mViaPadDiameterUnit_property : EBStoredProperty_Int

  //································································································

  final var mViaPadDiameterUnit : Int {
    get { return self.mViaPadDiameterUnit_property.propval }
    set { self.mViaPadDiameterUnit_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mAllowTracksOnFrontSide
  //································································································

  final let mAllowTracksOnFrontSide_property : EBStoredProperty_Bool

  //································································································

  final var mAllowTracksOnFrontSide : Bool {
    get { return self.mAllowTracksOnFrontSide_property.propval }
    set { self.mAllowTracksOnFrontSide_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mAllowTracksOnBackSide
  //································································································

  final let mAllowTracksOnBackSide_property : EBStoredProperty_Bool

  //································································································

  final var mAllowTracksOnBackSide : Bool {
    get { return self.mAllowTracksOnBackSide_property.propval }
    set { self.mAllowTracksOnBackSide_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mAllowTracksOnInner1Layer
  //································································································

  final let mAllowTracksOnInner1Layer_property : EBStoredProperty_Bool

  //································································································

  final var mAllowTracksOnInner1Layer : Bool {
    get { return self.mAllowTracksOnInner1Layer_property.propval }
    set { self.mAllowTracksOnInner1Layer_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mAllowTracksOnInner2Layer
  //································································································

  final let mAllowTracksOnInner2Layer_property : EBStoredProperty_Bool

  //································································································

  final var mAllowTracksOnInner2Layer : Bool {
    get { return self.mAllowTracksOnInner2Layer_property.propval }
    set { self.mAllowTracksOnInner2Layer_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mAllowTracksOnInner3Layer
  //································································································

  final let mAllowTracksOnInner3Layer_property : EBStoredProperty_Bool

  //································································································

  final var mAllowTracksOnInner3Layer : Bool {
    get { return self.mAllowTracksOnInner3Layer_property.propval }
    set { self.mAllowTracksOnInner3Layer_property.setProp (newValue) }
  }

  //································································································
  //   Atomic property: mAllowTracksOnInner4Layer
  //································································································

  final let mAllowTracksOnInner4Layer_property : EBStoredProperty_Bool

  //································································································

  final var mAllowTracksOnInner4Layer : Bool {
    get { return self.mAllowTracksOnInner4Layer_property.propval }
    set { self.mAllowTracksOnInner4Layer_property.setProp (newValue) }
  }

  //································································································
  //   To many property: mNets
  //································································································

  final let mNets_property = StoredArrayOf_NetInProject (usedForSignature: false, key: "mNets")

  //································································································

  final var mNets : EBReferenceArray <NetInProject> {
    get { return self.mNets_property.propval }
  }

  //································································································
  //   Transient property: trackWidthString
  //································································································

  final let trackWidthString_property = EBTransientProperty <String> ()

  //································································································

  final var trackWidthString : String? {
    return self.trackWidthString_property.optionalValue
  }

  //································································································
  //   Transient property: viaHoleDiameter
  //································································································

  final let viaHoleDiameter_property = EBTransientProperty <String> ()

  //································································································

  final var viaHoleDiameter : String? {
    return self.viaHoleDiameter_property.optionalValue
  }

  //································································································
  //   Transient property: viaPadDiameter
  //································································································

  final let viaPadDiameter_property = EBTransientProperty <String> ()

  //································································································

  final var viaPadDiameter : String? {
    return self.viaPadDiameter_property.optionalValue
  }

  //································································································
  //   Transient property: allowTracksOnFrontSideString
  //································································································

  final let allowTracksOnFrontSideString_property = EBTransientProperty <String> ()

  //································································································

  final var allowTracksOnFrontSideString : String? {
    return self.allowTracksOnFrontSideString_property.optionalValue
  }

  //································································································
  //   Transient property: allowTracksOnBackSideString
  //································································································

  final let allowTracksOnBackSideString_property = EBTransientProperty <String> ()

  //································································································

  final var allowTracksOnBackSideString : String? {
    return self.allowTracksOnBackSideString_property.optionalValue
  }

  //································································································
  //   Transient property: allowTracksOnInner1LayerString
  //································································································

  final let allowTracksOnInner1LayerString_property = EBTransientProperty <String> ()

  //································································································

  final var allowTracksOnInner1LayerString : String? {
    return self.allowTracksOnInner1LayerString_property.optionalValue
  }

  //································································································
  //   Transient property: allowTracksOnInner2LayerString
  //································································································

  final let allowTracksOnInner2LayerString_property = EBTransientProperty <String> ()

  //································································································

  final var allowTracksOnInner2LayerString : String? {
    return self.allowTracksOnInner2LayerString_property.optionalValue
  }

  //································································································
  //   Transient property: allowTracksOnInner3LayerString
  //································································································

  final let allowTracksOnInner3LayerString_property = EBTransientProperty <String> ()

  //································································································

  final var allowTracksOnInner3LayerString : String? {
    return self.allowTracksOnInner3LayerString_property.optionalValue
  }

  //································································································
  //   Transient property: allowTracksOnInner4LayerString
  //································································································

  final let allowTracksOnInner4LayerString_property = EBTransientProperty <String> ()

  //································································································

  final var allowTracksOnInner4LayerString : String? {
    return self.allowTracksOnInner4LayerString_property.optionalValue
  }

  //································································································
  //   Transient property: canRemove
  //································································································

  final let canRemove_property = EBTransientProperty <Bool> ()

  //································································································

  final var canRemove : Bool? {
    return self.canRemove_property.optionalValue
  }

  //································································································
  //   Transient property: netUsage
  //································································································

  final let netUsage_property = EBTransientProperty <String> ()

  //································································································

  final var netUsage : String? {
    return self.netUsage_property.optionalValue
  }

  //································································································
  //   Transient property: netsDescription
  //································································································

  final let netsDescription_property = EBTransientProperty <NetInfoArray> ()

  //································································································

  final var netsDescription : NetInfoArray? {
    return self.netsDescription_property.optionalValue
  }

  //································································································
  //   Transient property: netWarningCount
  //································································································

  final let netWarningCount_property = EBTransientProperty <Int> ()

  //································································································

  final var netWarningCount : Int? {
    return self.netWarningCount_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mNetClassName_property = EBStoredProperty_String (defaultValue: "Default", undoManager: inUndoManager, key: "mNetClassName")
    self.mNetClassColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.blue, undoManager: inUndoManager, key: "mNetClassColor")
    self.mTrackWidth_property = EBStoredProperty_Int (defaultValue: 45720, undoManager: inUndoManager, key: "mTrackWidth")
    self.mTrackWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mTrackWidthUnit")
    self.mViaHoleDiameter_property = EBStoredProperty_Int (defaultValue: 45720, undoManager: inUndoManager, key: "mViaHoleDiameter")
    self.mViaHoleDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mViaHoleDiameterUnit")
    self.mViaPadDiameter_property = EBStoredProperty_Int (defaultValue: 91440, undoManager: inUndoManager, key: "mViaPadDiameter")
    self.mViaPadDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mViaPadDiameterUnit")
    self.mAllowTracksOnFrontSide_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mAllowTracksOnFrontSide")
    self.mAllowTracksOnBackSide_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mAllowTracksOnBackSide")
    self.mAllowTracksOnInner1Layer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mAllowTracksOnInner1Layer")
    self.mAllowTracksOnInner2Layer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mAllowTracksOnInner2Layer")
    self.mAllowTracksOnInner3Layer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mAllowTracksOnInner3Layer")
    self.mAllowTracksOnInner4Layer_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mAllowTracksOnInner4Layer")
    super.init (inUndoManager)
  //--- To many property: mNets (has opposite relationship)
    self.mNets_property.undoManager = inUndoManager
    self.mNets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNetClass_property.setProp (me) } },
      resetter: { inObject in inObject.mNetClass_property.setProp (nil) }
    )
  //--- Atomic property: trackWidthString
    self.trackWidthString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mTrackWidth_property.selection
        let s1 = unwSelf.mTrackWidthUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_NetClassInProject_trackWidthString (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTrackWidth_property.startsBeingObserved (by: self.trackWidthString_property)
    self.mTrackWidthUnit_property.startsBeingObserved (by: self.trackWidthString_property)
  //--- Atomic property: viaHoleDiameter
    self.viaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mViaHoleDiameter_property.selection
        let s1 = unwSelf.mViaHoleDiameterUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_NetClassInProject_viaHoleDiameter (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mViaHoleDiameter_property.startsBeingObserved (by: self.viaHoleDiameter_property)
    self.mViaHoleDiameterUnit_property.startsBeingObserved (by: self.viaHoleDiameter_property)
  //--- Atomic property: viaPadDiameter
    self.viaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mViaPadDiameter_property.selection
        let s1 = unwSelf.mViaPadDiameterUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_NetClassInProject_viaPadDiameter (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mViaPadDiameter_property.startsBeingObserved (by: self.viaPadDiameter_property)
    self.mViaPadDiameterUnit_property.startsBeingObserved (by: self.viaPadDiameter_property)
  //--- Atomic property: allowTracksOnFrontSideString
    self.allowTracksOnFrontSideString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mAllowTracksOnFrontSide_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnFrontSideString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnFrontSide_property.startsBeingObserved (by: self.allowTracksOnFrontSideString_property)
  //--- Atomic property: allowTracksOnBackSideString
    self.allowTracksOnBackSideString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mAllowTracksOnBackSide_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnBackSideString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnBackSide_property.startsBeingObserved (by: self.allowTracksOnBackSideString_property)
  //--- Atomic property: allowTracksOnInner1LayerString
    self.allowTracksOnInner1LayerString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mAllowTracksOnInner1Layer_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnInner1LayerString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnInner1Layer_property.startsBeingObserved (by: self.allowTracksOnInner1LayerString_property)
  //--- Atomic property: allowTracksOnInner2LayerString
    self.allowTracksOnInner2LayerString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mAllowTracksOnInner2Layer_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnInner2LayerString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnInner2Layer_property.startsBeingObserved (by: self.allowTracksOnInner2LayerString_property)
  //--- Atomic property: allowTracksOnInner3LayerString
    self.allowTracksOnInner3LayerString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mAllowTracksOnInner3Layer_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnInner3LayerString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnInner3Layer_property.startsBeingObserved (by: self.allowTracksOnInner3LayerString_property)
  //--- Atomic property: allowTracksOnInner4LayerString
    self.allowTracksOnInner4LayerString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mAllowTracksOnInner4Layer_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_allowTracksOnInner4LayerString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnInner4Layer_property.startsBeingObserved (by: self.allowTracksOnInner4LayerString_property)
  //--- Atomic property: canRemove
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNets_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_canRemove (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.startsBeingObserved (by: self.canRemove_property)
  //--- Atomic property: netUsage
    self.netUsage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNets_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_netUsage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.startsBeingObserved (by: self.netUsage_property)
  //--- Atomic property: netsDescription
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNets_property.selection
        let s1 = unwSelf.mNets_property.selection
        let s2 = unwSelf.mNets_property.selection
        let s3 = unwSelf.mNets_property.selection
        let s4 = unwSelf.mNets_property.selection
        let s5 = unwSelf.mNetClassName_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_NetClassInProject_netsDescription (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.startsBeingObserved (by: self.netsDescription_property)
    self.mNets_property.toMany_trackCount_StartsBeingObserved (by: self.netsDescription_property)
    self.mNets_property.toMany_mNetName_StartsBeingObserved (by: self.netsDescription_property)
    self.mNets_property.toMany_netSchematicPointsInfo_StartsBeingObserved (by: self.netsDescription_property)
    self.mNets_property.toMany_mWarnsExactlyOneLabel_StartsBeingObserved (by: self.netsDescription_property)
    self.mNetClassName_property.startsBeingObserved (by: self.netsDescription_property)
  //--- Atomic property: netWarningCount
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.netsDescription_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetClassInProject_netWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.netsDescription_property.startsBeingObserved (by: self.netWarningCount_property)
  //--- Install undoers and opposite setter for relationships
    self.mNets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNetClass_property.setProp (me) } },
      resetter: { inObject in inObject.mNetClass_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

