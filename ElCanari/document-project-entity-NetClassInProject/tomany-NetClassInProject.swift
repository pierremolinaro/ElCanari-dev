//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NetClassInProject : ReadOnlyAbstractArrayProperty <NetClassInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <NetClassInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <NetClassInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mNetClassName { // Stored property
        managedObject.mNetClassName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNetClassColor { // Stored property
        managedObject.mNetClassColor_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mTrackWidth { // Stored property
        managedObject.mTrackWidth_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mTrackWidthUnit { // Stored property
        managedObject.mTrackWidthUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mViaHoleDiameter { // Stored property
        managedObject.mViaHoleDiameter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mViaHoleDiameterUnit { // Stored property
        managedObject.mViaHoleDiameterUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mViaPadDiameter { // Stored property
        managedObject.mViaPadDiameter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mViaPadDiameterUnit { // Stored property
        managedObject.mViaPadDiameterUnit_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnFrontSide { // Stored property
        managedObject.mAllowTracksOnFrontSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnBackSide { // Stored property
        managedObject.mAllowTracksOnBackSide_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnInner1Layer { // Stored property
        managedObject.mAllowTracksOnInner1Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnInner2Layer { // Stored property
        managedObject.mAllowTracksOnInner2Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnInner3Layer { // Stored property
        managedObject.mAllowTracksOnInner3Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnInner4Layer { // Stored property
        managedObject.mAllowTracksOnInner4Layer_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackWidthString { // Transient property
        managedObject.trackWidthString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_viaHoleDiameter { // Transient property
        managedObject.viaHoleDiameter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_viaPadDiameter { // Transient property
        managedObject.viaPadDiameter_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnFrontSideString { // Transient property
        managedObject.allowTracksOnFrontSideString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnBackSideString { // Transient property
        managedObject.allowTracksOnBackSideString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnInner1LayerString { // Transient property
        managedObject.allowTracksOnInner1LayerString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnInner2LayerString { // Transient property
        managedObject.allowTracksOnInner2LayerString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnInner3LayerString { // Transient property
        managedObject.allowTracksOnInner3LayerString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnInner4LayerString { // Transient property
        managedObject.allowTracksOnInner4LayerString_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_canRemove { // Transient property
        managedObject.canRemove_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netUsage { // Transient property
        managedObject.netUsage_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netsDescription { // Transient property
        managedObject.netsDescription_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netWarningCount { // Transient property
        managedObject.netWarningCount_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mNetClassName { // Stored property
        managedObject.mNetClassName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNetClassColor { // Stored property
        managedObject.mNetClassColor_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mTrackWidth { // Stored property
        managedObject.mTrackWidth_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mTrackWidthUnit { // Stored property
        managedObject.mTrackWidthUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mViaHoleDiameter { // Stored property
        managedObject.mViaHoleDiameter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mViaHoleDiameterUnit { // Stored property
        managedObject.mViaHoleDiameterUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mViaPadDiameter { // Stored property
        managedObject.mViaPadDiameter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mViaPadDiameterUnit { // Stored property
        managedObject.mViaPadDiameterUnit_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnFrontSide { // Stored property
        managedObject.mAllowTracksOnFrontSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnBackSide { // Stored property
        managedObject.mAllowTracksOnBackSide_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnInner1Layer { // Stored property
        managedObject.mAllowTracksOnInner1Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnInner2Layer { // Stored property
        managedObject.mAllowTracksOnInner2Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnInner3Layer { // Stored property
        managedObject.mAllowTracksOnInner3Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mAllowTracksOnInner4Layer { // Stored property
        managedObject.mAllowTracksOnInner4Layer_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_trackWidthString { // Transient property
        managedObject.trackWidthString_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_viaHoleDiameter { // Transient property
        managedObject.viaHoleDiameter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_viaPadDiameter { // Transient property
        managedObject.viaPadDiameter_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnFrontSideString { // Transient property
        managedObject.allowTracksOnFrontSideString_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnBackSideString { // Transient property
        managedObject.allowTracksOnBackSideString_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnInner1LayerString { // Transient property
        managedObject.allowTracksOnInner1LayerString_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnInner2LayerString { // Transient property
        managedObject.allowTracksOnInner2LayerString_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnInner3LayerString { // Transient property
        managedObject.allowTracksOnInner3LayerString_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_allowTracksOnInner4LayerString { // Transient property
        managedObject.allowTracksOnInner4LayerString_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_canRemove { // Transient property
        managedObject.canRemove_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_netUsage { // Transient property
        managedObject.netUsage_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_netsDescription { // Transient property
        managedObject.netsDescription_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_netWarningCount { // Transient property
        managedObject.netWarningCount_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNetClassName' stored property
  //····················································································································

  private final var mObserversOf_mNetClassName : EBObservedObject? = nil

  //····················································································································

  final func toMany_mNetClassName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mNetClassName {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNetClassName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mNetClassName = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNetClassName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNetClassName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mNetClassColor' stored property
  //····················································································································

  private final var mObserversOf_mNetClassColor : EBObservedObject? = nil

  //····················································································································

  final func toMany_mNetClassColor_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mNetClassColor {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mNetClassColor_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mNetClassColor = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mNetClassColor_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNetClassColor?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mTrackWidth' stored property
  //····················································································································

  private final var mObserversOf_mTrackWidth : EBObservedObject? = nil

  //····················································································································

  final func toMany_mTrackWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mTrackWidth {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mTrackWidth_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mTrackWidth = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mTrackWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mTrackWidth?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mTrackWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mTrackWidthUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_mTrackWidthUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mTrackWidthUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mTrackWidthUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mTrackWidthUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mTrackWidthUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mTrackWidthUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameter' stored property
  //····················································································································

  private final var mObserversOf_mViaHoleDiameter : EBObservedObject? = nil

  //····················································································································

  final func toMany_mViaHoleDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mViaHoleDiameter {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mViaHoleDiameter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mViaHoleDiameter = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mViaHoleDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mViaHoleDiameter?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mViaHoleDiameterUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_mViaHoleDiameterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mViaHoleDiameterUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mViaHoleDiameterUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mViaHoleDiameterUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mViaHoleDiameterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mViaHoleDiameterUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mViaPadDiameter' stored property
  //····················································································································

  private final var mObserversOf_mViaPadDiameter : EBObservedObject? = nil

  //····················································································································

  final func toMany_mViaPadDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mViaPadDiameter {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mViaPadDiameter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mViaPadDiameter = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mViaPadDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mViaPadDiameter?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mViaPadDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mViaPadDiameterUnit : EBObservedObject? = nil

  //····················································································································

  final func toMany_mViaPadDiameterUnit_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mViaPadDiameterUnit {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mViaPadDiameterUnit_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mViaPadDiameterUnit = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mViaPadDiameterUnit_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mViaPadDiameterUnit?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnFrontSide' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnFrontSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_mAllowTracksOnFrontSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mAllowTracksOnFrontSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mAllowTracksOnFrontSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mAllowTracksOnFrontSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mAllowTracksOnFrontSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mAllowTracksOnFrontSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnBackSide' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnBackSide : EBObservedObject? = nil

  //····················································································································

  final func toMany_mAllowTracksOnBackSide_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mAllowTracksOnBackSide {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mAllowTracksOnBackSide_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mAllowTracksOnBackSide = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mAllowTracksOnBackSide_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mAllowTracksOnBackSide?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnInner1Layer' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnInner1Layer : EBObservedObject? = nil

  //····················································································································

  final func toMany_mAllowTracksOnInner1Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mAllowTracksOnInner1Layer {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mAllowTracksOnInner1Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mAllowTracksOnInner1Layer = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mAllowTracksOnInner1Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mAllowTracksOnInner1Layer?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnInner2Layer' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnInner2Layer : EBObservedObject? = nil

  //····················································································································

  final func toMany_mAllowTracksOnInner2Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mAllowTracksOnInner2Layer {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mAllowTracksOnInner2Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mAllowTracksOnInner2Layer = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mAllowTracksOnInner2Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mAllowTracksOnInner2Layer?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnInner3Layer' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnInner3Layer : EBObservedObject? = nil

  //····················································································································

  final func toMany_mAllowTracksOnInner3Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mAllowTracksOnInner3Layer {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mAllowTracksOnInner3Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mAllowTracksOnInner3Layer = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mAllowTracksOnInner3Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mAllowTracksOnInner3Layer?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnInner4Layer' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnInner4Layer : EBObservedObject? = nil

  //····················································································································

  final func toMany_mAllowTracksOnInner4Layer_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_mAllowTracksOnInner4Layer {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mAllowTracksOnInner4Layer_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_mAllowTracksOnInner4Layer = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mAllowTracksOnInner4Layer_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mAllowTracksOnInner4Layer?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'trackWidthString' transient property
  //····················································································································

  private final var mObserversOf_trackWidthString : EBObservedObject? = nil

  //····················································································································

  final func toMany_trackWidthString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_trackWidthString {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.trackWidthString_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_trackWidthString = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_trackWidthString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_trackWidthString?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'viaHoleDiameter' transient property
  //····················································································································

  private final var mObserversOf_viaHoleDiameter : EBObservedObject? = nil

  //····················································································································

  final func toMany_viaHoleDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_viaHoleDiameter {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.viaHoleDiameter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_viaHoleDiameter = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_viaHoleDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_viaHoleDiameter?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'viaPadDiameter' transient property
  //····················································································································

  private final var mObserversOf_viaPadDiameter : EBObservedObject? = nil

  //····················································································································

  final func toMany_viaPadDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_viaPadDiameter {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.viaPadDiameter_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_viaPadDiameter = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_viaPadDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_viaPadDiameter?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'allowTracksOnFrontSideString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnFrontSideString : EBObservedObject? = nil

  //····················································································································

  final func toMany_allowTracksOnFrontSideString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_allowTracksOnFrontSideString {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.allowTracksOnFrontSideString_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_allowTracksOnFrontSideString = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_allowTracksOnFrontSideString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_allowTracksOnFrontSideString?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'allowTracksOnBackSideString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnBackSideString : EBObservedObject? = nil

  //····················································································································

  final func toMany_allowTracksOnBackSideString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_allowTracksOnBackSideString {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.allowTracksOnBackSideString_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_allowTracksOnBackSideString = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_allowTracksOnBackSideString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_allowTracksOnBackSideString?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'allowTracksOnInner1LayerString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnInner1LayerString : EBObservedObject? = nil

  //····················································································································

  final func toMany_allowTracksOnInner1LayerString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_allowTracksOnInner1LayerString {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.allowTracksOnInner1LayerString_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_allowTracksOnInner1LayerString = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_allowTracksOnInner1LayerString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_allowTracksOnInner1LayerString?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'allowTracksOnInner2LayerString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnInner2LayerString : EBObservedObject? = nil

  //····················································································································

  final func toMany_allowTracksOnInner2LayerString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_allowTracksOnInner2LayerString {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.allowTracksOnInner2LayerString_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_allowTracksOnInner2LayerString = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_allowTracksOnInner2LayerString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_allowTracksOnInner2LayerString?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'allowTracksOnInner3LayerString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnInner3LayerString : EBObservedObject? = nil

  //····················································································································

  final func toMany_allowTracksOnInner3LayerString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_allowTracksOnInner3LayerString {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.allowTracksOnInner3LayerString_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_allowTracksOnInner3LayerString = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_allowTracksOnInner3LayerString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_allowTracksOnInner3LayerString?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'allowTracksOnInner4LayerString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnInner4LayerString : EBObservedObject? = nil

  //····················································································································

  final func toMany_allowTracksOnInner4LayerString_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_allowTracksOnInner4LayerString {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.allowTracksOnInner4LayerString_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_allowTracksOnInner4LayerString = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_allowTracksOnInner4LayerString_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_allowTracksOnInner4LayerString?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  private final var mObserversOf_canRemove : EBObservedObject? = nil

  //····················································································································

  final func toMany_canRemove_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_canRemove {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.canRemove_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_canRemove = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_canRemove_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_canRemove?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netUsage' transient property
  //····················································································································

  private final var mObserversOf_netUsage : EBObservedObject? = nil

  //····················································································································

  final func toMany_netUsage_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_netUsage {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netUsage_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_netUsage = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netUsage_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netUsage?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private final var mObserversOf_netsDescription : EBObservedObject? = nil

  //····················································································································

  final func toMany_netsDescription_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_netsDescription {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netsDescription_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_netsDescription = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netsDescription_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netsDescription?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  private final var mObserversOf_netWarningCount : EBObservedObject? = nil

  //····················································································································

  final func toMany_netWarningCount_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_netWarningCount {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netWarningCount_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_netWarningCount = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netWarningCount_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netWarningCount?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_NetClassInProject : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : NetClassInProject, _ right : NetClassInProject) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_NetClassInProject? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_NetClassInProject,
                        sortCallback inSortCallBack : Optional < (_ left : NetClassInProject, _ right : NetClassInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <NetClassInProject>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [NetClassInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.propval.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <NetClassInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_NetClassInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_NetClassInProject : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <NetClassInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_NetClassInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_NetClassInProject : ReadWriteArrayOf_NetClassInProject, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <NetClassInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! NetClassInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <NetClassInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! NetClassInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetClassInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : NetClassInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <NetClassInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <NetClassInProject>,
                                 addedSet inAddedSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [NetClassInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <NetClassInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <NetClassInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : NetClassInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : NetClassInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_NetClassInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

