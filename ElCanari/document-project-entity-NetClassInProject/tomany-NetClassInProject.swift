//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NetClassInProject : ReadOnlyAbstractArrayProperty <NetClassInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <NetClassInProject>,
                                 
                                 addedSet inAddedSet : EBReferenceSet <NetClassInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mNetClassName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mNetClassColor_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mTrackWidth_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mTrackWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mViaHoleDiameter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mViaHoleDiameterUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mViaPadDiameter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mViaPadDiameterUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mAllowTracksOnFrontSide_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mAllowTracksOnBackSide_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mAllowTracksOnInner1Layer_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mAllowTracksOnInner2Layer_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mAllowTracksOnInner3Layer_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mAllowTracksOnInner4Layer_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_trackWidthString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_viaHoleDiameter_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_viaPadDiameter_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_allowTracksOnFrontSideString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_allowTracksOnBackSideString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_allowTracksOnInner1LayerString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_allowTracksOnInner2LayerString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_allowTracksOnInner3LayerString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_allowTracksOnInner4LayerString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_canRemove_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netUsage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netsDescription_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netWarningCount_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mNetClassName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mNetClassColor_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mTrackWidth_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mTrackWidthUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mViaHoleDiameter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mViaHoleDiameterUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mViaPadDiameter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mViaPadDiameterUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mAllowTracksOnFrontSide_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mAllowTracksOnBackSide_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mAllowTracksOnInner1Layer_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mAllowTracksOnInner2Layer_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mAllowTracksOnInner3Layer_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mAllowTracksOnInner4Layer_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_trackWidthString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_viaHoleDiameter_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_viaPadDiameter_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_allowTracksOnFrontSideString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_allowTracksOnBackSideString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_allowTracksOnInner1LayerString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_allowTracksOnInner2LayerString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_allowTracksOnInner3LayerString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_allowTracksOnInner4LayerString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_canRemove_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netUsage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netsDescription_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netWarningCount_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mNetClassName' stored property
  //····················································································································

  private final var mObserversOf_mNetClassName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetClassName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetClassName_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mNetClassName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mNetClassName.apply { (_ observer : EBObserverProtocol) in
          managedObject.mNetClassName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetClassName_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mNetClassName.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mNetClassName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNetClassColor' stored property
  //····················································································································

  private final var mObserversOf_mNetClassColor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetClassColor (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetClassColor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassColor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassColor (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetClassColor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassColor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetClassColor_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mNetClassColor.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mNetClassColor.apply { (_ observer : EBObserverProtocol) in
          managedObject.mNetClassColor_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetClassColor_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mNetClassColor.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mNetClassColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mTrackWidth' stored property
  //····················································································································

  private final var mObserversOf_mTrackWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTrackWidth (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTrackWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTrackWidth (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTrackWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mTrackWidth_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mTrackWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mTrackWidth.apply { (_ observer : EBObserverProtocol) in
          managedObject.mTrackWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTrackWidth_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mTrackWidth.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mTrackWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mTrackWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mTrackWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTrackWidthUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTrackWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTrackWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTrackWidthUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTrackWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTrackWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mTrackWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mTrackWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mTrackWidthUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mTrackWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTrackWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mTrackWidthUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mTrackWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameter' stored property
  //····················································································································

  private final var mObserversOf_mViaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mViaHoleDiameter.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mViaHoleDiameter.apply { (_ observer : EBObserverProtocol) in
          managedObject.mViaHoleDiameter_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mViaHoleDiameter.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mViaHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mViaHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaHoleDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mViaHoleDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mViaHoleDiameterUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mViaHoleDiameterUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaHoleDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mViaHoleDiameterUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mViaHoleDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaPadDiameter' stored property
  //····················································································································

  private final var mObserversOf_mViaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaPadDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mViaPadDiameter.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mViaPadDiameter.apply { (_ observer : EBObserverProtocol) in
          managedObject.mViaPadDiameter_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mViaPadDiameter.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mViaPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaPadDiameterUnit' stored property
  //····················································································································

  private final var mObserversOf_mViaPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaPadDiameterUnit_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mViaPadDiameterUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mViaPadDiameterUnit.apply { (_ observer : EBObserverProtocol) in
          managedObject.mViaPadDiameterUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaPadDiameterUnit_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mViaPadDiameterUnit.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mViaPadDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnFrontSide' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnFrontSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnFrontSide (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnFrontSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnFrontSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnFrontSide (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnFrontSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnFrontSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAllowTracksOnFrontSide_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mAllowTracksOnFrontSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mAllowTracksOnFrontSide.apply { (_ observer : EBObserverProtocol) in
          managedObject.mAllowTracksOnFrontSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAllowTracksOnFrontSide_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mAllowTracksOnFrontSide.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mAllowTracksOnFrontSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnBackSide' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnBackSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnBackSide (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnBackSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnBackSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnBackSide (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnBackSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnBackSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAllowTracksOnBackSide_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mAllowTracksOnBackSide.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mAllowTracksOnBackSide.apply { (_ observer : EBObserverProtocol) in
          managedObject.mAllowTracksOnBackSide_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAllowTracksOnBackSide_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mAllowTracksOnBackSide.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mAllowTracksOnBackSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnInner1Layer' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnInner1Layer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnInner1Layer (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnInner1Layer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnInner1Layer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnInner1Layer (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnInner1Layer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnInner1Layer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAllowTracksOnInner1Layer_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mAllowTracksOnInner1Layer.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mAllowTracksOnInner1Layer.apply { (_ observer : EBObserverProtocol) in
          managedObject.mAllowTracksOnInner1Layer_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAllowTracksOnInner1Layer_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mAllowTracksOnInner1Layer.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mAllowTracksOnInner1Layer_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnInner2Layer' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnInner2Layer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnInner2Layer (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnInner2Layer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnInner2Layer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnInner2Layer (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnInner2Layer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnInner2Layer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAllowTracksOnInner2Layer_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mAllowTracksOnInner2Layer.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mAllowTracksOnInner2Layer.apply { (_ observer : EBObserverProtocol) in
          managedObject.mAllowTracksOnInner2Layer_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAllowTracksOnInner2Layer_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mAllowTracksOnInner2Layer.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mAllowTracksOnInner2Layer_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnInner3Layer' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnInner3Layer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnInner3Layer (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnInner3Layer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnInner3Layer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnInner3Layer (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnInner3Layer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnInner3Layer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAllowTracksOnInner3Layer_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mAllowTracksOnInner3Layer.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mAllowTracksOnInner3Layer.apply { (_ observer : EBObserverProtocol) in
          managedObject.mAllowTracksOnInner3Layer_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAllowTracksOnInner3Layer_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mAllowTracksOnInner3Layer.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mAllowTracksOnInner3Layer_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnInner4Layer' stored property
  //····················································································································

  private final var mObserversOf_mAllowTracksOnInner4Layer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnInner4Layer (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnInner4Layer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnInner4Layer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnInner4Layer (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnInner4Layer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAllowTracksOnInner4Layer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAllowTracksOnInner4Layer_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    if !self.mObserversOf_mAllowTracksOnInner4Layer.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mAllowTracksOnInner4Layer.apply { (_ observer : EBObserverProtocol) in
          managedObject.mAllowTracksOnInner4Layer_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAllowTracksOnInner4Layer_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    self.mObserversOf_mAllowTracksOnInner4Layer.apply { (_ observer : EBObserverProtocol) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mAllowTracksOnInner4Layer_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackWidthString' transient property
  //····················································································································

  private final var mObserversOf_trackWidthString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackWidthString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackWidthString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackWidthString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackWidthString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackWidthString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackWidthString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackWidthString_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackWidthString.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackWidthString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackWidthString_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackWidthString.apply { (_ observer : EBObserverProtocol) in
        managedObject.trackWidthString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaHoleDiameter' transient property
  //····················································································································

  private final var mObserversOf_viaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaHoleDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_viaHoleDiameter.apply { (_ observer : EBObserverProtocol) in
        managedObject.viaHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_viaHoleDiameter.apply { (_ observer : EBObserverProtocol) in
        managedObject.viaHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaPadDiameter' transient property
  //····················································································································

  private final var mObserversOf_viaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaPadDiameter (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaPadDiameter (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_viaPadDiameter.apply { (_ observer : EBObserverProtocol) in
        managedObject.viaPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_viaPadDiameter.apply { (_ observer : EBObserverProtocol) in
        managedObject.viaPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'allowTracksOnFrontSideString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnFrontSideString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_allowTracksOnFrontSideString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allowTracksOnFrontSideString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnFrontSideString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnFrontSideString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allowTracksOnFrontSideString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnFrontSideString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_allowTracksOnFrontSideString_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnFrontSideString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnFrontSideString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_allowTracksOnFrontSideString_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnFrontSideString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnFrontSideString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'allowTracksOnBackSideString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnBackSideString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_allowTracksOnBackSideString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allowTracksOnBackSideString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnBackSideString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnBackSideString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allowTracksOnBackSideString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnBackSideString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_allowTracksOnBackSideString_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnBackSideString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnBackSideString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_allowTracksOnBackSideString_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnBackSideString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnBackSideString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'allowTracksOnInner1LayerString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnInner1LayerString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_allowTracksOnInner1LayerString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allowTracksOnInner1LayerString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnInner1LayerString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnInner1LayerString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allowTracksOnInner1LayerString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnInner1LayerString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_allowTracksOnInner1LayerString_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnInner1LayerString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnInner1LayerString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_allowTracksOnInner1LayerString_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnInner1LayerString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnInner1LayerString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'allowTracksOnInner2LayerString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnInner2LayerString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_allowTracksOnInner2LayerString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allowTracksOnInner2LayerString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnInner2LayerString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnInner2LayerString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allowTracksOnInner2LayerString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnInner2LayerString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_allowTracksOnInner2LayerString_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnInner2LayerString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnInner2LayerString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_allowTracksOnInner2LayerString_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnInner2LayerString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnInner2LayerString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'allowTracksOnInner3LayerString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnInner3LayerString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_allowTracksOnInner3LayerString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allowTracksOnInner3LayerString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnInner3LayerString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnInner3LayerString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allowTracksOnInner3LayerString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnInner3LayerString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_allowTracksOnInner3LayerString_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnInner3LayerString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnInner3LayerString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_allowTracksOnInner3LayerString_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnInner3LayerString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnInner3LayerString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'allowTracksOnInner4LayerString' transient property
  //····················································································································

  private final var mObserversOf_allowTracksOnInner4LayerString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_allowTracksOnInner4LayerString (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allowTracksOnInner4LayerString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnInner4LayerString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnInner4LayerString (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allowTracksOnInner4LayerString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allowTracksOnInner4LayerString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_allowTracksOnInner4LayerString_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnInner4LayerString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnInner4LayerString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_allowTracksOnInner4LayerString_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_allowTracksOnInner4LayerString.apply { (_ observer : EBObserverProtocol) in
        managedObject.allowTracksOnInner4LayerString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  private final var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canRemove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canRemove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canRemove_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_canRemove.apply { (_ observer : EBObserverProtocol) in
        managedObject.canRemove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canRemove_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_canRemove.apply { (_ observer : EBObserverProtocol) in
        managedObject.canRemove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netUsage' transient property
  //····················································································································

  private final var mObserversOf_netUsage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netUsage (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netUsage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netUsage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netUsage (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netUsage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netUsage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netUsage_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_netUsage.apply { (_ observer : EBObserverProtocol) in
        managedObject.netUsage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netUsage_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_netUsage.apply { (_ observer : EBObserverProtocol) in
        managedObject.netUsage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private final var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netsDescription_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_netsDescription.apply { (_ observer : EBObserverProtocol) in
        managedObject.netsDescription_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netsDescription_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_netsDescription.apply { (_ observer : EBObserverProtocol) in
        managedObject.netsDescription_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  private final var mObserversOf_netWarningCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netWarningCount (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWarningCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWarningCount (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWarningCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netWarningCount_toElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBObserverProtocol) in
        managedObject.netWarningCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netWarningCount_fromElementsOfSet (_ inSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inSet.values {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBObserverProtocol) in
        managedObject.netWarningCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_NetClassInProject : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : NetClassInProject, _ right : NetClassInProject) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_NetClassInProject? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_NetClassInProject,
                        sortCallback inSortCallBack : Optional < (_ left : NetClassInProject, _ right : NetClassInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <NetClassInProject>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [NetClassInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <NetClassInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_NetClassInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <NetClassInProject> ()
      for superObject in newModelArray.values {
        if let object = superObject as? NetClassInProject {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [NetClassInProject] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <NetClassInProject> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_NetClassInProject : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <NetClassInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_NetClassInProject : ReadWriteArrayOf_NetClassInProject {

  //····················································································································

  private var mModel : ReadWriteArrayOf_NetClassInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_NetClassInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <NetClassInProject>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <NetClassInProject> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <NetClassInProject>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [NetClassInProject] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <NetClassInProject> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_NetClassInProject : ReadWriteArrayOf_NetClassInProject, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetClassInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : NetClassInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSPopUpButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
          }
        }
      }
    }
  #endif

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <NetClassInProject>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <NetClassInProject>,
                                 addedSet inAddedSet : EBReferenceSet <NetClassInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [NetClassInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <NetClassInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <NetClassInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : NetClassInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : NetClassInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_NetClassInProject : ReadWriteArrayOf_NetClassInProject {

  //····················································································································

  override var selection : EBSelection < [NetClassInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <NetClassInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <NetClassInProject> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : NetClassInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : NetClassInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_NetClassInProject : StoredArrayOf_NetClassInProject {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <NetClassInProject> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "NetClassInProject") as? NetClassInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mNetClassName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mNetClassColor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mTrackWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mTrackWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mViaHoleDiameter (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mViaHoleDiameterUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mViaPadDiameter (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mViaPadDiameterUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAllowTracksOnFrontSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAllowTracksOnBackSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAllowTracksOnInner1Layer (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAllowTracksOnInner2Layer (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAllowTracksOnInner3Layer (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAllowTracksOnInner4Layer (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

