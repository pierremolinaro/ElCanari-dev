//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_NetClassInProject : ReadOnlyAbstractObjectProperty <NetClassInProject> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : NetClassInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mNetClassName_property.removeEBObserver (self.mNetClassName_property) // Stored property
      oldValue.mNetClassColor_property.removeEBObserver (self.mNetClassColor_property) // Stored property
      oldValue.mTrackWidth_property.removeEBObserver (self.mTrackWidth_property) // Stored property
      oldValue.mTrackWidthUnit_property.removeEBObserver (self.mTrackWidthUnit_property) // Stored property
      oldValue.mViaHoleDiameter_property.removeEBObserver (self.mViaHoleDiameter_property) // Stored property
      oldValue.mViaHoleDiameterUnit_property.removeEBObserver (self.mViaHoleDiameterUnit_property) // Stored property
      oldValue.mViaPadDiameter_property.removeEBObserver (self.mViaPadDiameter_property) // Stored property
      oldValue.mViaPadDiameterUnit_property.removeEBObserver (self.mViaPadDiameterUnit_property) // Stored property
      oldValue.mAllowTracksOnFrontSide_property.removeEBObserver (self.mAllowTracksOnFrontSide_property) // Stored property
      oldValue.mAllowTracksOnBackSide_property.removeEBObserver (self.mAllowTracksOnBackSide_property) // Stored property
      oldValue.mAllowTracksOnInner1Layer_property.removeEBObserver (self.mAllowTracksOnInner1Layer_property) // Stored property
      oldValue.mAllowTracksOnInner2Layer_property.removeEBObserver (self.mAllowTracksOnInner2Layer_property) // Stored property
      oldValue.mAllowTracksOnInner3Layer_property.removeEBObserver (self.mAllowTracksOnInner3Layer_property) // Stored property
      oldValue.mAllowTracksOnInner4Layer_property.removeEBObserver (self.mAllowTracksOnInner4Layer_property) // Stored property
      oldValue.trackWidthString_property.removeEBObserver (self.trackWidthString_property) // Transient property
      oldValue.viaHoleDiameter_property.removeEBObserver (self.viaHoleDiameter_property) // Transient property
      oldValue.viaPadDiameter_property.removeEBObserver (self.viaPadDiameter_property) // Transient property
      oldValue.allowTracksOnFrontSideString_property.removeEBObserver (self.allowTracksOnFrontSideString_property) // Transient property
      oldValue.allowTracksOnBackSideString_property.removeEBObserver (self.allowTracksOnBackSideString_property) // Transient property
      oldValue.allowTracksOnInner1LayerString_property.removeEBObserver (self.allowTracksOnInner1LayerString_property) // Transient property
      oldValue.allowTracksOnInner2LayerString_property.removeEBObserver (self.allowTracksOnInner2LayerString_property) // Transient property
      oldValue.allowTracksOnInner3LayerString_property.removeEBObserver (self.allowTracksOnInner3LayerString_property) // Transient property
      oldValue.allowTracksOnInner4LayerString_property.removeEBObserver (self.allowTracksOnInner4LayerString_property) // Transient property
      oldValue.canRemove_property.removeEBObserver (self.canRemove_property) // Transient property
      oldValue.netUsage_property.removeEBObserver (self.netUsage_property) // Transient property
      oldValue.netsDescription_property.removeEBObserver (self.netsDescription_property) // Transient property
      oldValue.netWarningCount_property.removeEBObserver (self.netWarningCount_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mNetClassName_property.addEBObserver (self.mNetClassName_property) // Stored property
      newValue.mNetClassColor_property.addEBObserver (self.mNetClassColor_property) // Stored property
      newValue.mTrackWidth_property.addEBObserver (self.mTrackWidth_property) // Stored property
      newValue.mTrackWidthUnit_property.addEBObserver (self.mTrackWidthUnit_property) // Stored property
      newValue.mViaHoleDiameter_property.addEBObserver (self.mViaHoleDiameter_property) // Stored property
      newValue.mViaHoleDiameterUnit_property.addEBObserver (self.mViaHoleDiameterUnit_property) // Stored property
      newValue.mViaPadDiameter_property.addEBObserver (self.mViaPadDiameter_property) // Stored property
      newValue.mViaPadDiameterUnit_property.addEBObserver (self.mViaPadDiameterUnit_property) // Stored property
      newValue.mAllowTracksOnFrontSide_property.addEBObserver (self.mAllowTracksOnFrontSide_property) // Stored property
      newValue.mAllowTracksOnBackSide_property.addEBObserver (self.mAllowTracksOnBackSide_property) // Stored property
      newValue.mAllowTracksOnInner1Layer_property.addEBObserver (self.mAllowTracksOnInner1Layer_property) // Stored property
      newValue.mAllowTracksOnInner2Layer_property.addEBObserver (self.mAllowTracksOnInner2Layer_property) // Stored property
      newValue.mAllowTracksOnInner3Layer_property.addEBObserver (self.mAllowTracksOnInner3Layer_property) // Stored property
      newValue.mAllowTracksOnInner4Layer_property.addEBObserver (self.mAllowTracksOnInner4Layer_property) // Stored property
      newValue.trackWidthString_property.addEBObserver (self.trackWidthString_property) // Transient property
      newValue.viaHoleDiameter_property.addEBObserver (self.viaHoleDiameter_property) // Transient property
      newValue.viaPadDiameter_property.addEBObserver (self.viaPadDiameter_property) // Transient property
      newValue.allowTracksOnFrontSideString_property.addEBObserver (self.allowTracksOnFrontSideString_property) // Transient property
      newValue.allowTracksOnBackSideString_property.addEBObserver (self.allowTracksOnBackSideString_property) // Transient property
      newValue.allowTracksOnInner1LayerString_property.addEBObserver (self.allowTracksOnInner1LayerString_property) // Transient property
      newValue.allowTracksOnInner2LayerString_property.addEBObserver (self.allowTracksOnInner2LayerString_property) // Transient property
      newValue.allowTracksOnInner3LayerString_property.addEBObserver (self.allowTracksOnInner3LayerString_property) // Transient property
      newValue.allowTracksOnInner4LayerString_property.addEBObserver (self.allowTracksOnInner4LayerString_property) // Transient property
      newValue.canRemove_property.addEBObserver (self.canRemove_property) // Transient property
      newValue.netUsage_property.addEBObserver (self.netUsage_property) // Transient property
      newValue.netsDescription_property.addEBObserver (self.netsDescription_property) // Transient property
      newValue.netWarningCount_property.addEBObserver (self.netWarningCount_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mNetClassName' stored property
  //····················································································································

  final let mNetClassName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mNetClassColor' stored property
  //····················································································································

  final let mNetClassColor_property = EBGenericTransientProperty <NSColor?> ()

  //····················································································································
  //   Observers of 'mTrackWidth' stored property
  //····················································································································

  final let mTrackWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mTrackWidthUnit' stored property
  //····················································································································

  final let mTrackWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mViaHoleDiameter' stored property
  //····················································································································

  final let mViaHoleDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mViaHoleDiameterUnit' stored property
  //····················································································································

  final let mViaHoleDiameterUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mViaPadDiameter' stored property
  //····················································································································

  final let mViaPadDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mViaPadDiameterUnit' stored property
  //····················································································································

  final let mViaPadDiameterUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mAllowTracksOnFrontSide' stored property
  //····················································································································

  final let mAllowTracksOnFrontSide_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mAllowTracksOnBackSide' stored property
  //····················································································································

  final let mAllowTracksOnBackSide_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mAllowTracksOnInner1Layer' stored property
  //····················································································································

  final let mAllowTracksOnInner1Layer_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mAllowTracksOnInner2Layer' stored property
  //····················································································································

  final let mAllowTracksOnInner2Layer_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mAllowTracksOnInner3Layer' stored property
  //····················································································································

  final let mAllowTracksOnInner3Layer_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mAllowTracksOnInner4Layer' stored property
  //····················································································································

  final let mAllowTracksOnInner4Layer_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'trackWidthString' transient property
  //····················································································································

  final let trackWidthString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'viaHoleDiameter' transient property
  //····················································································································

  final let viaHoleDiameter_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'viaPadDiameter' transient property
  //····················································································································

  final let viaPadDiameter_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'allowTracksOnFrontSideString' transient property
  //····················································································································

  final let allowTracksOnFrontSideString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'allowTracksOnBackSideString' transient property
  //····················································································································

  final let allowTracksOnBackSideString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'allowTracksOnInner1LayerString' transient property
  //····················································································································

  final let allowTracksOnInner1LayerString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'allowTracksOnInner2LayerString' transient property
  //····················································································································

  final let allowTracksOnInner2LayerString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'allowTracksOnInner3LayerString' transient property
  //····················································································································

  final let allowTracksOnInner3LayerString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'allowTracksOnInner4LayerString' transient property
  //····················································································································

  final let allowTracksOnInner4LayerString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  final let canRemove_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'netUsage' transient property
  //····················································································································

  final let netUsage_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  final let netsDescription_property = EBGenericTransientProperty <NetInfoArray?> ()

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  final let netWarningCount_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observable toMany property: mNets
  //····················································································································

  private final var mObserversOf_mNets = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNets (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mNets.insert (inObserver)
    if let object = self.propval {
      object.mNets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNets (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mNets.remove (inObserver)
    if let object = self.propval {
      object.mNets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mNetClassName simple stored property
    self.mNetClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mNetClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mNetClassColor simple stored property
    self.mNetClassColor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mNetClassColor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mTrackWidth simple stored property
    self.mTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mTrackWidthUnit simple stored property
    self.mTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mTrackWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mViaHoleDiameter simple stored property
    self.mViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mViaHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mViaHoleDiameterUnit simple stored property
    self.mViaHoleDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mViaHoleDiameterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mViaPadDiameter simple stored property
    self.mViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mViaPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mViaPadDiameterUnit simple stored property
    self.mViaPadDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mViaPadDiameterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAllowTracksOnFrontSide simple stored property
    self.mAllowTracksOnFrontSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mAllowTracksOnFrontSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAllowTracksOnBackSide simple stored property
    self.mAllowTracksOnBackSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mAllowTracksOnBackSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAllowTracksOnInner1Layer simple stored property
    self.mAllowTracksOnInner1Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mAllowTracksOnInner1Layer_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAllowTracksOnInner2Layer simple stored property
    self.mAllowTracksOnInner2Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mAllowTracksOnInner2Layer_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAllowTracksOnInner3Layer simple stored property
    self.mAllowTracksOnInner3Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mAllowTracksOnInner3Layer_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAllowTracksOnInner4Layer simple stored property
    self.mAllowTracksOnInner4Layer_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mAllowTracksOnInner4Layer_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackWidthString transient property
    self.trackWidthString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.trackWidthString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure viaHoleDiameter transient property
    self.viaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.viaHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure viaPadDiameter transient property
    self.viaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.viaPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure allowTracksOnFrontSideString transient property
    self.allowTracksOnFrontSideString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.allowTracksOnFrontSideString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure allowTracksOnBackSideString transient property
    self.allowTracksOnBackSideString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.allowTracksOnBackSideString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure allowTracksOnInner1LayerString transient property
    self.allowTracksOnInner1LayerString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.allowTracksOnInner1LayerString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure allowTracksOnInner2LayerString transient property
    self.allowTracksOnInner2LayerString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.allowTracksOnInner2LayerString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure allowTracksOnInner3LayerString transient property
    self.allowTracksOnInner3LayerString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.allowTracksOnInner3LayerString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure allowTracksOnInner4LayerString transient property
    self.allowTracksOnInner4LayerString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.allowTracksOnInner4LayerString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure canRemove transient property
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.canRemove_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netUsage transient property
    self.netUsage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netUsage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netsDescription transient property
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netsDescription_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netWarningCount transient property
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netWarningCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_NetClassInProject : ReadOnlyObject_NetClassInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol, DocumentStorablePropertyProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! NetClassInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! NetClassInProject
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetClassInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : NetClassInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : NetClassInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < NetClassInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : NetClassInProject? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining
  // private var mStrongInternalValue : NetClassInProject? = nil

  //····················································································································

  func setProp (_ inValue : NetClassInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

