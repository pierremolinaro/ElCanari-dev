//--------------------------------------------------------------------------------------------------
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

//--- START OF USER ZONE 1

fileprivate struct LocalSubnetDescriptor {
  let severalLabels : Bool
  let pins : [NetPinInSchematics]
  let labels : [NetLabelInSchematics]
}

//--------------------------------------------------------------------------------------------------

fileprivate func computeSubnets (_ inWarnsExactlyOneLabel : Bool,
                                 _ inPointArray : NetInfoPointArray) -> ([SubnetDescriptor], Bool) { // ( ..., has warning)
//--- Wire dictionary (for compute subnet accessibility)
  var wireDictionary = [Int : NetInfoPointArray] ()
  for point in inPointArray {
    for wire in point.wires {
      if let v = wireDictionary [wire] {
        wireDictionary [wire] = v + [point]
      }else{
        wireDictionary [wire] = [point]
      }
    }
  }
//---
  var netLabelCount = 0
  var subnetDescriptionArray = [LocalSubnetDescriptor] ()
  var unExploredPointSet = Set (inPointArray)
  while let aPoint = unExploredPointSet.first {
    unExploredPointSet.removeFirst ()
    var currentPointSet = Set < NetInfoPoint > ([aPoint])
    var exploreArray = [aPoint]
    var exploreWireSet = Set <Int> ()
    while let p = exploreArray.last {
      exploreArray.remove (at: exploreArray.count - 1)
      for wire in p.wires {
        if !exploreWireSet.contains (wire) {
          exploreWireSet.insert (wire)
          if let pts = wireDictionary [wire] {
            for pp in pts {
              if !currentPointSet.contains(pp) {
                currentPointSet.insert (pp)
                exploreArray.append (pp)
                unExploredPointSet.remove (pp)
              }
            }
          }
        }
      }
    }
  //--- Build subnet description string
//    var pointArray = [CanariPoint] ()
    var pinDescriptionArray = [NetPinInSchematics] ()
    var labelDescriptionArray = [NetLabelInSchematics] ()
    var pinArray = [String] ()
    for p in currentPointSet {
      if let pinName = p.pinName {
        pinArray.append (pinName)
        let info = SchematicSheetGeometry.PointLocationInfo (row: p.row, column: p.column, string: p.locationString)
        let pin = NetPinInSchematics (
          pinName: pinName,
          sheetIndex: p.sheet,
          locationInSheet: p.locationInSheet,
          location: info
        )
        pinDescriptionArray.append (pin)
      }
    }
    var labelArray = [SchematicSheetGeometry.PointLocationInfo] ()
    for p in currentPointSet {
      for labelInfo in p.labels {
        labelArray.append (labelInfo)
        let info = SchematicSheetGeometry.PointLocationInfo (row: p.row, column: p.column, string: p.locationString)
        let netLabel = NetLabelInSchematics (
          sheetIndex: p.sheet,
          locationInSheet: p.locationInSheet,
          location: info
        )
        labelDescriptionArray.append (netLabel)
      }
    }
    netLabelCount += labelArray.count
//    subnetDescriptionArray.append ((labelArray.count > 0, pinDescriptionArray, labelDescriptionArray))
    let d = LocalSubnetDescriptor (
      severalLabels: labelArray.count > 0,
      pins: pinDescriptionArray,
      labels: labelDescriptionArray
//      points: pointArray
    )
    subnetDescriptionArray.append (d)
  }
//--- Exactly onre label ?
  let showExactlyOneLabelMessage = inWarnsExactlyOneLabel && (netLabelCount == 1)
  var hasWarning = showExactlyOneLabelMessage
  var netStatusEntryArray = [SubnetDescriptor] ()
//--- Several subnets ?
  if subnetDescriptionArray.count == 1 {
    let netStatus = SubnetDescriptor (
      status: hasWarning ? .warning : .ok,
      showExactlyOneLabelMessage: showExactlyOneLabelMessage,
      pins: subnetDescriptionArray [0].pins,
      labels: subnetDescriptionArray [0].labels
//      points: subnetDescriptionArray [0].points
    )
    netStatusEntryArray.append (netStatus)
  }else if subnetDescriptionArray.count > 1 {
    for descriptor : LocalSubnetDescriptor in subnetDescriptionArray {
      if !descriptor.severalLabels {
        hasWarning = true
      }
      let netStatus = SubnetDescriptor (
        status: descriptor.severalLabels ? .ok : .warning,
        showExactlyOneLabelMessage: showExactlyOneLabelMessage,
        pins: descriptor.pins,
        labels: descriptor.labels
//        points: descriptor.points
      )
      netStatusEntryArray.append (netStatus)
    }
  }
//---
  return (netStatusEntryArray, hasWarning)
}

//--- END OF USER ZONE 1

//--------------------------------------------------------------------------------------------------

@MainActor func transient_NetClassInProject_netsDescription (
       _ self_mNets : [AnyObject],                           
       _ self_mNets_trackCount : [any NetInProject_trackCount],
       _ self_mNets_mNetName : [any NetInProject_mNetName],  
       _ self_mNets_netSchematicPointsInfo : [any NetInProject_netSchematicPointsInfo],
       _ self_mNets_mWarnsExactlyOneLabel : [any NetInProject_mWarnsExactlyOneLabel],
       _ self_mNetClassName : String
) -> NetInfoArray {
//--- START OF USER ZONE 2
        var array = NetInfoArray ()
        var idx = 0
        while idx < self_mNets_mNetName.count {
          let netName = self_mNets_mNetName [idx].mNetName
          let trackCount = self_mNets_trackCount [idx].trackCount!
          let netPointInfo = self_mNets_netSchematicPointsInfo [idx].netSchematicPointsInfo!
          let warnsExactlyOneLabel = self_mNets_mWarnsExactlyOneLabel [idx].mWarnsExactlyOneLabel
          var pinCount = 0
          var labelCount = 0
          for point in netPointInfo {
            labelCount += point.labels.count
            if point.pinName != nil {
              pinCount += 1
            }
          }
          let (subnets, subnetsHaveWarning) = computeSubnets (warnsExactlyOneLabel, netPointInfo)
          let netInfo = NetInfo (
            netIdentifier: objectIntIdentifier (self_mNets [idx]), 
            netName: netName,
            netClassName: self_mNetClassName,
            points: netPointInfo,
            subnets: subnets,
            subnetsHaveWarning : subnetsHaveWarning,
            pinCount: pinCount,
            labelCount: labelCount,
            trackCount: trackCount,
            warnsExactlyOneLabel: warnsExactlyOneLabel
          )
          array.append (netInfo)
          idx += 1
        }
        return array
//--- END OF USER ZONE 2
}

//--------------------------------------------------------------------------------------------------
