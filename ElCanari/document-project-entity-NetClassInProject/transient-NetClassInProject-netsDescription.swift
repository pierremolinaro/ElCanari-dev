//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1

fileprivate func computeSubnets (_ inWarnsExactlyOneLabel : Bool,
                                 _ inPointArray : NetInfoPointArray) -> (NetStatusEntryArray, Bool) { // ( ..., has warning)
//--- Wire dictionary (for compute subnet accessibility)
  var wireDictionary = [Int : NetInfoPointArray] ()
  for point in inPointArray {
    for wire in point.wires {
      if let v = wireDictionary [wire] {
        wireDictionary [wire] = v + [point]
      }else{
        wireDictionary [wire] = [point]
      }
    }
  }
//---
  var netLabelCount = 0
  var subnetDescriptionArray = [(Bool, [NetPinInSchematics], [NetLabelInSchematics])] ()
  var unExploredPointSet = Set (inPointArray)
  while let aPoint = unExploredPointSet.first {
    unExploredPointSet.removeFirst ()
    var currentPointSet = Set < NetInfoPoint > ([aPoint])
    var exploreArray = [aPoint]
    var exploreWireSet = Set <Int> ()
    while let p = exploreArray.last {
      exploreArray.remove (at: exploreArray.count - 1)
      for wire in p.wires {
        if !exploreWireSet.contains (wire) {
          exploreWireSet.insert (wire)
          if let pts = wireDictionary [wire] {
            for pp in pts {
              if !currentPointSet.contains(pp) {
                currentPointSet.insert (pp)
                exploreArray.append (pp)
                unExploredPointSet.remove (pp)
              }
            }
          }
        }
      }
    }
  //--- Build subnet description string
    var pinDescriptionArray = [NetPinInSchematics] ()
    var labelDescriptionArray = [NetLabelInSchematics] ()
    var pinArray = [String] ()
    for p in currentPointSet {
      if let pinName = p.pinName {
        pinArray.append (pinName)
        let pin = NetPinInSchematics (
          pinName: pinName,
          sheetIndex: p.sheet,
          locationInSheet: p.locationInSheet,
          locationString: p.locationString
        )
        pinDescriptionArray.append (pin)
      }
    }
    var labelArray = [String] ()
    for p in currentPointSet {
      for label in p.labels {
        labelArray.append (label)
        let netLabel = NetLabelInSchematics (
          labelName: label,
          sheetIndex: p.sheet,
          locationInSheet: p.locationInSheet,
          locationString: p.locationString
        )
        labelDescriptionArray.append (netLabel)
      }
    }
    netLabelCount += labelArray.count
//    var subnetDescription : String
//    if pinArray.count == 0 {
//      subnetDescription = "No pin"
//    }else if pinArray.count == 1 {
//      subnetDescription = "1 pin: "
//    }else{
//      subnetDescription = "\(pinArray.count) pins: "
//    }
//    subnetDescription += pinArray.joined (separator: ", ")
//    subnetDescription += "; "
//    if labelArray.count == 0 {
//      subnetDescription += "no label"
//    }else if labelArray.count == 1 {
//      subnetDescription += "1 label: "
//    }else{
//      subnetDescription += "\(labelArray.count) labels: "
//    }
//    subnetDescription += labelArray.joined (separator: ", ")
//    if (pinArray.count == 0) && (labelArray.count == 0) {
//      subnetDescription += ", at"
//      for p in currentPointSet {
//        subnetDescription += " "
//        subnetDescription += p.locationString
//      }
//    }
    subnetDescriptionArray.append ((labelArray.count > 0, pinDescriptionArray, labelDescriptionArray))
  }
//--- Exactly onre label ?
  let showExactlyOneLabelMessage = inWarnsExactlyOneLabel && (netLabelCount == 1)
  var hasWarning = showExactlyOneLabelMessage
  var netStatusEntryArray = [NetStatusEntry] ()
//--- Several subnets ?
  if subnetDescriptionArray.count == 1 {
    let netStatus = NetStatusEntry (
      status: hasWarning ? .warning : .ok,
      showExactlyOneLabelMessage: showExactlyOneLabelMessage,
      pins: subnetDescriptionArray [0].1,
      labels: subnetDescriptionArray [0].2
    )
    netStatusEntryArray.append (netStatus)
  }else if subnetDescriptionArray.count > 1 {
    for (severalLabels, pinDescriptionArray, labelDescriptionArray) in subnetDescriptionArray {
      if !severalLabels {
        hasWarning = true
      }
      let netStatus = NetStatusEntry (
        status: severalLabels ? .ok : .warning,
        showExactlyOneLabelMessage: showExactlyOneLabelMessage,
        pins: pinDescriptionArray,
        labels: labelDescriptionArray
      )
      netStatusEntryArray.append (netStatus)
    }
  }
//--- Exactly one label ?
//  if inWarnsExactlyOneLabel && (netLabelCount == 1) {
//    hasWarning = true
//    let netStatus = NetStatusEntry (
//      status: .warning,
//      isSubnetDescription: false,
//      string: "Exactly one label",
//      pins: []
//    )
//    netStatusEntryArray.append (netStatus)
//  }
//---
  return (netStatusEntryArray, hasWarning)
}

//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func transient_NetClassInProject_netsDescription (
       _ self_mNets : [AnyObject],                           
       _ self_mNets_trackCount : [NetInProject_trackCount],  
       _ self_mNets_mNetName : [NetInProject_mNetName],      
       _ self_mNets_netSchematicPointsInfo : [NetInProject_netSchematicPointsInfo],
       _ self_mNets_mWarnsExactlyOneLabel : [NetInProject_mWarnsExactlyOneLabel],
       _ self_mNetClassName : String
) -> NetInfoArray {
//--- START OF USER ZONE 2
        var array = NetInfoArray ()
        var idx = 0
        while idx < self_mNets_mNetName.count {
          let netName = self_mNets_mNetName [idx].mNetName
          let trackCount = self_mNets_trackCount [idx].trackCount!
          let netPointInfo = self_mNets_netSchematicPointsInfo [idx].netSchematicPointsInfo!
          let warnsExactlyOneLabel = self_mNets_mWarnsExactlyOneLabel [idx].mWarnsExactlyOneLabel
          var pinCount = 0
          var labelCount = 0
          for point in netPointInfo {
            labelCount += point.labels.count
            if point.pinName != nil {
              pinCount += 1
            }
          }
          let (subnets, subnetsHaveWarning) = computeSubnets (warnsExactlyOneLabel, netPointInfo)
          let netInfo = NetInfo (
            netIdentifier: objectIntIdentifier (self_mNets [idx]), 
            netName: netName,
            netClassName: self_mNetClassName,
            points: netPointInfo,
            subnets: subnets,
            subnetsHaveWarning : subnetsHaveWarning,
            pinCount: pinCount,
            labelCount: labelCount,
            trackCount: trackCount,
            warnsExactlyOneLabel: warnsExactlyOneLabel
          )
          array.append (netInfo)
          idx += 1
        }
        return array
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
