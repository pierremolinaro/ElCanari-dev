//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NetInProject_mNetName : AnyObject {
  var mNetName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NetInProject_mWarnsExactlyOneLabel : AnyObject {
  var mWarnsExactlyOneLabel : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NetInProject_netClassName : AnyObject {
  var netClassName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NetInProject_netClassTrackWidth : AnyObject {
  var netClassTrackWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NetInProject_netClassViaHoleDiameter : AnyObject {
  var netClassViaHoleDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NetInProject_netClassViaPadDiameter : AnyObject {
  var netClassViaPadDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NetInProject_wireColor : AnyObject {
  var wireColor : NSColor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NetInProject_netSchematicPointsInfo : AnyObject {
  var netSchematicPointsInfo : NetInfoPointArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol NetInProject_trackCount : AnyObject {
  var trackCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class NetInProject : EBManagedObject,
         NetInProject_mNetName,
         NetInProject_mWarnsExactlyOneLabel,
         NetInProject_netClassName,
         NetInProject_netClassTrackWidth,
         NetInProject_netClassViaHoleDiameter,
         NetInProject_netClassViaPadDiameter,
         NetInProject_wireColor,
         NetInProject_netSchematicPointsInfo,
         NetInProject_trackCount {

  //····················································································································
  //   To many property: mPoints
  //····················································································································

  final let mPoints_property = StoredArrayOf_PointInSchematic (usedForSignature: false, key: "mPoints")

  //····················································································································

  //····················································································································

  final var mPoints : EBReferenceArray <PointInSchematic> {
    get { return self.mPoints_property.propval }
    set { self.mPoints_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNetName
  //····················································································································

  final let mNetName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mNetName_toDefaultValue () {
    self.mNetName = ""
  }

  //····················································································································

  final var mNetName : String {
    get { return self.mNetName_property.propval }
    set { self.mNetName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mWarnsExactlyOneLabel
  //····················································································································

  final let mWarnsExactlyOneLabel_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mWarnsExactlyOneLabel_toDefaultValue () {
    self.mWarnsExactlyOneLabel = true
  }

  //····················································································································

  final var mWarnsExactlyOneLabel : Bool {
    get { return self.mWarnsExactlyOneLabel_property.propval }
    set { self.mWarnsExactlyOneLabel_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mTracks
  //····················································································································

  final let mTracks_property = StoredArrayOf_BoardTrack (usedForSignature: false, key: "mTracks")

  //····················································································································

  //····················································································································

  final var mTracks : EBReferenceArray <BoardTrack> {
    get { return self.mTracks_property.propval }
    set { self.mTracks_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mNetClass
  //····················································································································

  final let mNetClass_property = StoredObject_NetClassInProject (usedForSignature: false, strongRef: false, key: "mNetClass")

  //····················································································································

  final var mNetClass : NetClassInProject? {
    get {
      return self.mNetClass_property.propval
    }
    set {
      if self.mNetClass_property.propval !== newValue {
        if self.mNetClass_property.propval != nil {
          self.mNetClass_property.setProp (nil)
        }
        if newValue != nil {
          self.mNetClass_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mNetClass_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: netClassName
  //····················································································································

  final let netClassName_property = EBTransientProperty_String ()

  //····················································································································

  final var netClassName : String? {
    switch self.netClassName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassTrackWidth
  //····················································································································

  final let netClassTrackWidth_property = EBTransientProperty_Int ()

  //····················································································································

  final var netClassTrackWidth : Int? {
    switch self.netClassTrackWidth_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassViaHoleDiameter
  //····················································································································

  final let netClassViaHoleDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  final var netClassViaHoleDiameter : Int? {
    switch self.netClassViaHoleDiameter_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassViaPadDiameter
  //····················································································································

  final let netClassViaPadDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  final var netClassViaPadDiameter : Int? {
    switch self.netClassViaPadDiameter_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: wireColor
  //····················································································································

  final let wireColor_property = EBTransientProperty_NSColor ()

  //····················································································································

  final var wireColor : NSColor? {
    switch self.wireColor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netSchematicPointsInfo
  //····················································································································

  final let netSchematicPointsInfo_property = EBTransientProperty_NetInfoPointArray ()

  //····················································································································

  final var netSchematicPointsInfo : NetInfoPointArray? {
    switch self.netSchematicPointsInfo_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: trackCount
  //····················································································································

  final let trackCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var trackCount : Int? {
    switch self.trackCount_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mNetName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mNetName")
    self.mWarnsExactlyOneLabel_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mWarnsExactlyOneLabel")
    super.init (inUndoManager)
    self.mNetClass_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mNetClass_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mNetClass_property.addEBObserver (self.mNetClass_none)
//    gInitSemaphore.wait ()
  //--- To many property: mPoints (has opposite relationship)
    self.mPoints_property.undoManager = inUndoManager
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNet_property.setProp (me) } },
      resetter: { inObject in inObject.mNet_property.setProp (nil) }
    )
  //--- To many property: mTracks (has opposite relationship)
    self.mTracks_property.undoManager = inUndoManager
    self.mTracks_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNet_property.setProp (me) } },
      resetter: { inObject in inObject.mNet_property.setProp (nil) }
    )
  //--- To one property: mNetClass (has opposite to many relationship: mNets)
    self.mNetClass_property.undoManager = inUndoManager
    self.mNetClass_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNets_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mNets_property.remove (me) } }
    )
  //--- Atomic property: netClassName
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClass_property.mNetClassName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetInProject_netClassName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClass_property.mNetClassName_property.addEBObserver (self.netClassName_property)
  //--- Atomic property: netClassTrackWidth
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClass_property.mTrackWidth_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetInProject_netClassTrackWidth (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClass_property.mTrackWidth_property.addEBObserver (self.netClassTrackWidth_property)
  //--- Atomic property: netClassViaHoleDiameter
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClass_property.mViaHoleDiameter_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetInProject_netClassViaHoleDiameter (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClass_property.mViaHoleDiameter_property.addEBObserver (self.netClassViaHoleDiameter_property)
  //--- Atomic property: netClassViaPadDiameter
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClass_property.mViaPadDiameter_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetInProject_netClassViaPadDiameter (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClass_property.mViaPadDiameter_property.addEBObserver (self.netClassViaPadDiameter_property)
  //--- Atomic property: wireColor
    self.wireColor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClass_property.mNetClassColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetInProject_wireColor (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClass_property.mNetClassColor_property.addEBObserver (self.wireColor_property)
  //--- Atomic property: netSchematicPointsInfo
    self.netSchematicPointsInfo_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPoints_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetInProject_netSchematicPointsInfo (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPoints_property.addEBObserverOf_netInfoForPoint (self.netSchematicPointsInfo_property)
  //--- Atomic property: trackCount
    self.trackCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mTracks_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_NetInProject_trackCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mTracks_property.addEBObserver (self.trackCount_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNet_property.setProp (me) } },
      resetter: { inObject in inObject.mNet_property.setProp (nil) }
    )
    self.mTracks_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNet_property.setProp (me) } },
      resetter: { inObject in inObject.mNet_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

/*  override func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    super.saveIntoDictionary (&ioDictionary)
  //--- To many property: mPoints
    self.store (
      managedObjectArray: self.mPoints_property.propval.values,
      relationshipName: "mPoints",
      intoDictionary: &ioDictionary
    )
    //--- Atomic property: mNetName
      self.mNetName_property.storeIn (dictionary: &ioDictionary, forKey: "mNetName")
    //--- Atomic property: mWarnsExactlyOneLabel
      self.mWarnsExactlyOneLabel_property.storeIn (dictionary: &ioDictionary, forKey: "mWarnsExactlyOneLabel")
  //--- To many property: mTracks
    self.store (
      managedObjectArray: self.mTracks_property.propval.values,
      relationshipName: "mTracks",
      intoDictionary: &ioDictionary
    )
  } */

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

/*  override func setUpWithDictionary (_ inDictionary : [String : Any],
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: mPoints
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPoints",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [PointInSchematic]
      self.mPoints_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mTracks
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mTracks",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [BoardTrack]
      self.mTracks_property.setProp (EBReferenceArray (array))
    }
  //--- To one property: mNetClass
    do{
      let possibleEntity = readEntityFromDictionary (
        relationshipName: "mNetClass",
        dictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? NetClassInProject {
        self.mNetClass_property.setProp (entity)
      }
    }
  } */

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

/*  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : [String : Any]) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNetName
    self.mNetName_property.readFrom (dictionary: inDictionary, forKey: "mNetName")
  //--- Atomic property: mWarnsExactlyOneLabel
    self.mWarnsExactlyOneLabel_property.readFrom (dictionary: inDictionary, forKey: "mWarnsExactlyOneLabel")
  } */

  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

/*  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mNetName\n"
    ioString += "mWarnsExactlyOneLabel\n"
  //--- To one relationships
    ioString += "mNetClass\n"
  //--- To many relationships
    ioString += "mPoints\n"
    ioString += "mTracks\n"
  } */

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

/*  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mNetName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mWarnsExactlyOneLabel.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mNetClass {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.mPoints.values, into: &ioData)
    enterToManyRelationshipObjectIndexes (from: self.mTracks.values, into: &ioData)
  } */

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

/*  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mNetName"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mNetName = value
    }
    if let range = inDictionary ["mWarnsExactlyOneLabel"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.mWarnsExactlyOneLabel = value
    }
  } */

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

/*  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mNetClass"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! NetClassInProject
      self.mNetClass = object
    }
  } */

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

/*  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
  //--- To many mPoints
    if let range = inDictionary ["mPoints"], range.length > 0 {
      var relationshipArray = EBReferenceArray <PointInSchematic> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! PointInSchematic)
      }
      self.mPoints = relationshipArray
    }
  //--- To many mTracks
    if let range = inDictionary ["mTracks"], range.length > 0 {
      var relationshipArray = EBReferenceArray <BoardTrack> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: range)
      for idx in indexArray {
        relationshipArray.append (inRawObjectArray [idx].object as! BoardTrack)
      }
      self.mTracks = relationshipArray
    }
  } */

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

/*  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: mPoints
    for managedObject in self.mPoints.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mTracks
    for managedObject in self.mTracks.values {
      ioObjectArray.append (managedObject)
    }
  //--- To one property: mNetClass
    if let object = self.mNetClass {
      ioObjectArray.append (object)
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

