//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NetInProject : ReadOnlyAbstractArrayProperty <NetInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <NetInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <NetInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      managedObject.mNetName_property.stopsBeingObserved (by: self.mObserversOf_mNetName) // Stored property
      managedObject.mWarnsExactlyOneLabel_property.stopsBeingObserved (by: self.mObserversOf_mWarnsExactlyOneLabel) // Stored property
      managedObject.netClassName_property.stopsBeingObserved (by: self.mObserversOf_netClassName) // Transient property
      managedObject.netClassTrackWidth_property.stopsBeingObserved (by: self.mObserversOf_netClassTrackWidth) // Transient property
      managedObject.netClassViaHoleDiameter_property.stopsBeingObserved (by: self.mObserversOf_netClassViaHoleDiameter) // Transient property
      managedObject.netClassViaPadDiameter_property.stopsBeingObserved (by: self.mObserversOf_netClassViaPadDiameter) // Transient property
      managedObject.wireColor_property.stopsBeingObserved (by: self.mObserversOf_wireColor) // Transient property
      managedObject.netSchematicPointsInfo_property.stopsBeingObserved (by: self.mObserversOf_netSchematicPointsInfo) // Transient property
      managedObject.trackCount_property.stopsBeingObserved (by: self.mObserversOf_trackCount) // Transient property
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      managedObject.mNetName_property.startsToBeObserved (by: self.mObserversOf_mNetName) // Stored property
      managedObject.mWarnsExactlyOneLabel_property.startsToBeObserved (by: self.mObserversOf_mWarnsExactlyOneLabel) // Stored property
      managedObject.netClassName_property.startsToBeObserved (by: self.mObserversOf_netClassName) // Transient property
      managedObject.netClassTrackWidth_property.startsToBeObserved (by: self.mObserversOf_netClassTrackWidth) // Transient property
      managedObject.netClassViaHoleDiameter_property.startsToBeObserved (by: self.mObserversOf_netClassViaHoleDiameter) // Transient property
      managedObject.netClassViaPadDiameter_property.startsToBeObserved (by: self.mObserversOf_netClassViaPadDiameter) // Transient property
      managedObject.wireColor_property.startsToBeObserved (by: self.mObserversOf_wireColor) // Transient property
      managedObject.netSchematicPointsInfo_property.startsToBeObserved (by: self.mObserversOf_netSchematicPointsInfo) // Transient property
      managedObject.trackCount_property.startsToBeObserved (by: self.mObserversOf_trackCount) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mNetName' stored property
  //····················································································································

  private final var mObserversOf_mNetName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mNetName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mNetName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mNetName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mNetName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mNetName_toElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mNetName_property.startsToBeObserved (by: self.mObserversOf_mNetName)
    }*/
    /* if !self.mObserversOf_mNetName.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mNetName.values () {
          if let observer = entry.possibleObserver {
            managedObject.mNetName_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mNetName.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mNetName_fromElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      managedObject.mNetName_property.stopsBeingObserved (by: self.mObserversOf_mNetName)
    }
    for entry in self.mObserversOf_mNetName.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mNetName_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mNetName.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'mWarnsExactlyOneLabel' stored property
  //····················································································································

  private final var mObserversOf_mWarnsExactlyOneLabel = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_mWarnsExactlyOneLabel_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_mWarnsExactlyOneLabel.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWarnsExactlyOneLabel_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_mWarnsExactlyOneLabel_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_mWarnsExactlyOneLabel.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWarnsExactlyOneLabel_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

 // final private func addEBObserversOf_mWarnsExactlyOneLabel_toElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    /* for managedObject in inSet.values {
      managedObject.mWarnsExactlyOneLabel_property.startsToBeObserved (by: self.mObserversOf_mWarnsExactlyOneLabel)
    }*/
    /* if !self.mObserversOf_mWarnsExactlyOneLabel.isEmpty {
      for managedObject in inSet.values {
        for entry in self.mObserversOf_mWarnsExactlyOneLabel.values () {
          if let observer = entry.possibleObserver {
            managedObject.mWarnsExactlyOneLabel_property.startsToBeObserved (by: observer)
          }else{
            self.mObserversOf_mWarnsExactlyOneLabel.triggerPacking ()
          }
        }
      }
    } */
 // }

  //····················································································································

/*  final private func removeEBObserversOf_mWarnsExactlyOneLabel_fromElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      managedObject.mWarnsExactlyOneLabel_property.stopsBeingObserved (by: self.mObserversOf_mWarnsExactlyOneLabel)
    }
    for entry in self.mObserversOf_mWarnsExactlyOneLabel.values () {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mWarnsExactlyOneLabel_property.stopsBeingObserved (by: observer)
        }
      }else{
        self.mObserversOf_mWarnsExactlyOneLabel.triggerPacking ()
      }
    }
  } */

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  private final var mObserversOf_netClassName = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_netClassName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_netClassName.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_netClassName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_netClassName.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_netClassName_toElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassName.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassName_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_netClassName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_netClassName_fromElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassName.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassName_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_netClassName.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'netClassTrackWidth' transient property
  //····················································································································

  private final var mObserversOf_netClassTrackWidth = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_netClassTrackWidth_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_netClassTrackWidth.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassTrackWidth_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_netClassTrackWidth_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_netClassTrackWidth.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassTrackWidth_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_netClassTrackWidth_toElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassTrackWidth.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassTrackWidth_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_netClassTrackWidth.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_netClassTrackWidth_fromElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassTrackWidth.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassTrackWidth_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_netClassTrackWidth.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'netClassViaHoleDiameter' transient property
  //····················································································································

  private final var mObserversOf_netClassViaHoleDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_netClassViaHoleDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_netClassViaHoleDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassViaHoleDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_netClassViaHoleDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_netClassViaHoleDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassViaHoleDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_netClassViaHoleDiameter_toElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassViaHoleDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassViaHoleDiameter_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_netClassViaHoleDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_netClassViaHoleDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassViaHoleDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassViaHoleDiameter_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_netClassViaHoleDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'netClassViaPadDiameter' transient property
  //····················································································································

  private final var mObserversOf_netClassViaPadDiameter = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_netClassViaPadDiameter_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_netClassViaPadDiameter.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassViaPadDiameter_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_netClassViaPadDiameter_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_netClassViaPadDiameter.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassViaPadDiameter_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_netClassViaPadDiameter_toElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassViaPadDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassViaPadDiameter_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_netClassViaPadDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_netClassViaPadDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netClassViaPadDiameter.values () {
        if let observer = entry.possibleObserver {
          managedObject.netClassViaPadDiameter_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_netClassViaPadDiameter.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'wireColor' transient property
  //····················································································································

  private final var mObserversOf_wireColor = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_wireColor_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_wireColor.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.wireColor_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_wireColor_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_wireColor.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.wireColor_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_wireColor_toElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_wireColor.values () {
        if let observer = entry.possibleObserver {
          managedObject.wireColor_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_wireColor.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_wireColor_fromElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_wireColor.values () {
        if let observer = entry.possibleObserver {
          managedObject.wireColor_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_wireColor.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'netSchematicPointsInfo' transient property
  //····················································································································

  private final var mObserversOf_netSchematicPointsInfo = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_netSchematicPointsInfo_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_netSchematicPointsInfo.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netSchematicPointsInfo_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_netSchematicPointsInfo_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_netSchematicPointsInfo.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netSchematicPointsInfo_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_netSchematicPointsInfo_toElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netSchematicPointsInfo.values () {
        if let observer = entry.possibleObserver {
          managedObject.netSchematicPointsInfo_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_netSchematicPointsInfo.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_netSchematicPointsInfo_fromElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_netSchematicPointsInfo.values () {
        if let observer = entry.possibleObserver {
          managedObject.netSchematicPointsInfo_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_netSchematicPointsInfo.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································
  //   Observers of 'trackCount' transient property
  //····················································································································

  private final var mObserversOf_trackCount = EBWeakObserverSetRelay ()

  //····················································································································

  final func toMany_trackCount_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    self.startsToBeObserved (by: inObserver)
    self.mObserversOf_trackCount.insert (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackCount_property.startsToBeObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  final func toMany_trackCount_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.stopsBeingObserved (by: inObserver)
    self.mObserversOf_trackCount.remove (inObserver)
    /* switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackCount_property.stopsBeingObserved (by: inObserver)
      }
    } */
  }

  //····················································································································

  /* final private func addEBObserversOf_trackCount_toElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_trackCount.values () {
        if let observer = entry.possibleObserver {
          managedObject.trackCount_property.startsToBeObserved (by: observer)
        }else{
          self.mObserversOf_trackCount.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

  /* final private func removeEBObserversOf_trackCount_fromElementsOfSet (_ inSet : EBReferenceSet <NetInProject>) {
    for managedObject in inSet.values {
      for entry in self.mObserversOf_trackCount.values () {
        if let observer = entry.possibleObserver {
          managedObject.trackCount_property.stopsBeingObserved (by: observer)
        }else{
          self.mObserversOf_trackCount.triggerPacking ()
        }
      }
    }
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_NetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_NetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_NetInProject : ReadOnlyArrayOf_NetInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <NetInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_NetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_NetInProject : ReadWriteArrayOf_NetInProject, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <NetInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! NetInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if inRange.length > 0 {
      var objectArray = EBReferenceArray <NetInProject> ()
      let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
      for idx in indexArray {
        objectArray.append (inRawObjectArray [idx].object as! NetInProject)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : NetInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : NetInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : NetInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <NetInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <NetInProject>,
                                 addedSet inAddedSet : EBReferenceSet <NetInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [NetInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <NetInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <NetInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : NetInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : NetInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_NetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

