//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_NetInProject : ReadOnlyAbstractObjectProperty <NetInProject> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : NetInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mNetName_property.removeEBObserver (self.mNetName_property) // Stored property
      oldValue.mWarnsExactlyOneLabel_property.removeEBObserver (self.mWarnsExactlyOneLabel_property) // Stored property
      oldValue.netClassName_property.removeEBObserver (self.netClassName_property) // Transient property
      oldValue.netClassTrackWidth_property.removeEBObserver (self.netClassTrackWidth_property) // Transient property
      oldValue.netClassViaHoleDiameter_property.removeEBObserver (self.netClassViaHoleDiameter_property) // Transient property
      oldValue.netClassViaPadDiameter_property.removeEBObserver (self.netClassViaPadDiameter_property) // Transient property
      oldValue.wireColor_property.removeEBObserver (self.wireColor_property) // Transient property
      oldValue.netSchematicPointsInfo_property.removeEBObserver (self.netSchematicPointsInfo_property) // Transient property
      oldValue.trackCount_property.removeEBObserver (self.trackCount_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mNetName_property.addEBObserver (self.mNetName_property) // Stored property
      newValue.mWarnsExactlyOneLabel_property.addEBObserver (self.mWarnsExactlyOneLabel_property) // Stored property
      newValue.netClassName_property.addEBObserver (self.netClassName_property) // Transient property
      newValue.netClassTrackWidth_property.addEBObserver (self.netClassTrackWidth_property) // Transient property
      newValue.netClassViaHoleDiameter_property.addEBObserver (self.netClassViaHoleDiameter_property) // Transient property
      newValue.netClassViaPadDiameter_property.addEBObserver (self.netClassViaPadDiameter_property) // Transient property
      newValue.wireColor_property.addEBObserver (self.wireColor_property) // Transient property
      newValue.netSchematicPointsInfo_property.addEBObserver (self.netSchematicPointsInfo_property) // Transient property
      newValue.trackCount_property.addEBObserver (self.trackCount_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mNetName' stored property
  //····················································································································

  final let mNetName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mWarnsExactlyOneLabel' stored property
  //····················································································································

  final let mWarnsExactlyOneLabel_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  final let netClassName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'netClassTrackWidth' transient property
  //····················································································································

  final let netClassTrackWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'netClassViaHoleDiameter' transient property
  //····················································································································

  final let netClassViaHoleDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'netClassViaPadDiameter' transient property
  //····················································································································

  final let netClassViaPadDiameter_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'wireColor' transient property
  //····················································································································

  final let wireColor_property = EBGenericTransientProperty <NSColor?> ()

  //····················································································································
  //   Observers of 'netSchematicPointsInfo' transient property
  //····················································································································

  final let netSchematicPointsInfo_property = EBGenericTransientProperty <NetInfoPointArray?> ()

  //····················································································································
  //   Observers of 'trackCount' transient property
  //····················································································································

  final let trackCount_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observable toMany property: mPoints
  //····················································································································

  private final var mObserversOf_mPoints = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPoints (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mPoints.insert (inObserver)
    if let object = self.propval {
      object.mPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPoints (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mPoints.remove (inObserver)
    if let object = self.propval {
      object.mPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mTracks
  //····················································································································

  private final var mObserversOf_mTracks = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTracks (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mTracks.insert (inObserver)
    if let object = self.propval {
      object.mTracks_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTracks (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mTracks.remove (inObserver)
    if let object = self.propval {
      object.mTracks_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mNetName simple stored property
    self.mNetName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mNetName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mWarnsExactlyOneLabel simple stored property
    self.mWarnsExactlyOneLabel_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.mWarnsExactlyOneLabel_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassName transient property
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassTrackWidth transient property
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netClassTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassViaHoleDiameter transient property
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netClassViaHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassViaPadDiameter transient property
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netClassViaPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure wireColor transient property
    self.wireColor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.wireColor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netSchematicPointsInfo transient property
    self.netSchematicPointsInfo_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.netSchematicPointsInfo_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackCount transient property
    self.trackCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mWeakInternalValue {
        switch model.trackCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TransientObject NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class TransientObject_NetInProject : ReadOnlyObject_NetInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyObject_NetInProject? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_NetInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : NetInProject?
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mWeakInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < NetInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let v = self.mWeakInternalValue {
        return .single (v)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : NetInProject? { return self.mWeakInternalValue }

  //····················································································································

} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_NetInProject : ReadOnlyObject_NetInProject {

  //····················································································································

  func setProp (_ inValue : NetInProject?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ProxyObject_NetInProject : ReadWriteObject_NetInProject {

  //····················································································································

  private weak var mModel : ReadWriteObject_NetInProject? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_NetInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : NetInProject?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mWeakInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : NetInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < NetInProject? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : NetInProject? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

} */
 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_NetInProject : ReadWriteObject_NetInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : NetInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : NetInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : NetInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : NetInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < NetInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : NetInProject? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : NetInProject? = nil

  //····················································································································

  override func setProp (_ inValue : NetInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

