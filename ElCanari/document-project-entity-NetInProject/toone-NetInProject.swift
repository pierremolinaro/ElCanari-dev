//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_NetInProject : EBReadOnlyAbstractObjectProperty <NetInProject> {

  //································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : NetInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mNetName_property.stopsBeingObserved (by: self.mNetName_property) // Stored property
      oldValue.mWarnsExactlyOneLabel_property.stopsBeingObserved (by: self.mWarnsExactlyOneLabel_property) // Stored property
      oldValue.netClassName_property.stopsBeingObserved (by: self.netClassName_property) // Transient property
      oldValue.netClassTrackWidth_property.stopsBeingObserved (by: self.netClassTrackWidth_property) // Transient property
      oldValue.netClassViaHoleDiameter_property.stopsBeingObserved (by: self.netClassViaHoleDiameter_property) // Transient property
      oldValue.netClassViaPadDiameter_property.stopsBeingObserved (by: self.netClassViaPadDiameter_property) // Transient property
      oldValue.wireColor_property.stopsBeingObserved (by: self.wireColor_property) // Transient property
      oldValue.netSchematicPointsInfo_property.stopsBeingObserved (by: self.netSchematicPointsInfo_property) // Transient property
      oldValue.trackCount_property.stopsBeingObserved (by: self.trackCount_property) // Transient property
      if let relay = self.mObserversOf_mPoints { // to Many
        oldValue.mPoints_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mTracks { // to Many
        oldValue.mTracks_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mNetName_property.startsBeingObserved (by: self.mNetName_property) // Stored property
      newValue.mWarnsExactlyOneLabel_property.startsBeingObserved (by: self.mWarnsExactlyOneLabel_property) // Stored property
      newValue.netClassName_property.startsBeingObserved (by: self.netClassName_property) // Transient property
      newValue.netClassTrackWidth_property.startsBeingObserved (by: self.netClassTrackWidth_property) // Transient property
      newValue.netClassViaHoleDiameter_property.startsBeingObserved (by: self.netClassViaHoleDiameter_property) // Transient property
      newValue.netClassViaPadDiameter_property.startsBeingObserved (by: self.netClassViaPadDiameter_property) // Transient property
      newValue.wireColor_property.startsBeingObserved (by: self.wireColor_property) // Transient property
      newValue.netSchematicPointsInfo_property.startsBeingObserved (by: self.netSchematicPointsInfo_property) // Transient property
      newValue.trackCount_property.startsBeingObserved (by: self.trackCount_property) // Transient property
      if let relay = self.mObserversOf_mPoints { // to Many
        newValue.mPoints_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mTracks { // to Many
        newValue.mTracks_property.startsBeingObserved (by: relay)
      }
    }
  }

  //································································································
  //   Observers of 'mNetName' stored property
  //································································································

  final let mNetName_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'mWarnsExactlyOneLabel' stored property
  //································································································

  final let mWarnsExactlyOneLabel_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'netClassName' transient property
  //································································································

  final let netClassName_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'netClassTrackWidth' transient property
  //································································································

  final let netClassTrackWidth_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'netClassViaHoleDiameter' transient property
  //································································································

  final let netClassViaHoleDiameter_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'netClassViaPadDiameter' transient property
  //································································································

  final let netClassViaPadDiameter_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'wireColor' transient property
  //································································································

  final let wireColor_property = EBTransientProperty <NSColor?> ()

  //································································································
  //   Observers of 'netSchematicPointsInfo' transient property
  //································································································

  final let netSchematicPointsInfo_property = EBTransientProperty <NetInfoPointArray?> ()

  //································································································
  //   Observers of 'trackCount' transient property
  //································································································

  final let trackCount_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observable toMany property: mPoints
  //································································································

  private final var mObserversOf_mPoints : EBObservedObserver? = nil

  //································································································

  final func toMany_mPoints_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mPoints {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mPoints_property.startsBeingObserved (by: relay)
      self.mObserversOf_mPoints = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mPoints_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mPoints?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observable toMany property: mTracks
  //································································································

  private final var mObserversOf_mTracks : EBObservedObserver? = nil

  //································································································

  final func toMany_mTracks_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mTracks {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mTracks_property.startsBeingObserved (by: relay)
      self.mObserversOf_mTracks = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mTracks_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mTracks?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   INIT
  //································································································

  override init () {
    super.init ()
  //--- Configure mNetName simple stored property
    self.mNetName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNetName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mWarnsExactlyOneLabel simple stored property
    self.mWarnsExactlyOneLabel_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mWarnsExactlyOneLabel_property.optionalSelection ?? .single (nil)
    }
  //--- Configure netClassName transient property
    self.netClassName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netClassName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure netClassTrackWidth transient property
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netClassTrackWidth_property.optionalSelection ?? .single (nil)
    }
  //--- Configure netClassViaHoleDiameter transient property
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netClassViaHoleDiameter_property.optionalSelection ?? .single (nil)
    }
  //--- Configure netClassViaPadDiameter transient property
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netClassViaPadDiameter_property.optionalSelection ?? .single (nil)
    }
  //--- Configure wireColor transient property
    self.wireColor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.wireColor_property.optionalSelection ?? .single (nil)
    }
  //--- Configure netSchematicPointsInfo transient property
    self.netSchematicPointsInfo_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netSchematicPointsInfo_property.optionalSelection ?? .single (nil)
    }
  //--- Configure trackCount transient property
    self.trackCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.trackCount_property.optionalSelection ?? .single (nil)
    }
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_NetInProject : ReadOnlyObject_NetInProject, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

 //································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! NetInProject
      self.setProp (object)
    }
  }

  //································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! NetInProject
      self.setProp (object)
    }
  }

  //································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //································································································
  //   Signature ?
  //································································································

  private let mUsedForSignature : Bool

  //································································································
  //   Undo manager
  //································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //································································································
  //   Opposite relationship management
  //································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : NetInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : NetInProject) -> Void > = nil

  //································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : NetInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //································································································
  // Model will change
  //································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : NetInProject?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //································································································
  // Model did change
  //································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //································································································

  override var selection : EBSelection < NetInProject? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //································································································

  var propval : NetInProject? { return self.mWeakInternalValue }

  //································································································
  //   setProp
  //································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //································································································

  func setProp (_ inValue : NetInProject?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //································································································
  //   signature
  //································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //································································································

  private var mSignatureCache : UInt32? = nil

  //································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————

