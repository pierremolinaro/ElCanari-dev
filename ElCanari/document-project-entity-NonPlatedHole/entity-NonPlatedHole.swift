//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mXUnit : AnyObject {
  var mXUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mY : AnyObject {
  var mY : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mYUnit : AnyObject {
  var mYUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mWidth : AnyObject {
  var mWidth : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mWidthUnit : AnyObject {
  var mWidthUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mHeight : AnyObject {
  var mHeight : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mHeightUnit : AnyObject {
  var mHeightUnit : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mRotation : AnyObject {
  var mRotation : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mShowTextRotationKnobInBoard : AnyObject {
  var mShowTextRotationKnobInBoard : Bool { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_mX : AnyObject {
  var mX : Int { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//--------------------------------------------------------------------------------------------------

@MainActor protocol NonPlatedHole_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//--------------------------------------------------------------------------------------------------
//    Entity: NonPlatedHole
//--------------------------------------------------------------------------------------------------

final class NonPlatedHole : BoardObject,
         NonPlatedHole_mXUnit,
         NonPlatedHole_mY,
         NonPlatedHole_mYUnit,
         NonPlatedHole_mWidth,
         NonPlatedHole_mWidthUnit,
         NonPlatedHole_mHeight,
         NonPlatedHole_mHeightUnit,
         NonPlatedHole_mRotation,
         NonPlatedHole_mShowTextRotationKnobInBoard,
         NonPlatedHole_mX,
         NonPlatedHole_objectDisplay,
         NonPlatedHole_selectionDisplay,
         NonPlatedHole_signatureForERCChecking {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mXUnit
  //------------------------------------------------------------------------------------------------

  final let mXUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mXUnit : Int {
    get { return self.mXUnit_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mY
  //------------------------------------------------------------------------------------------------

  final let mY_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mYUnit
  //------------------------------------------------------------------------------------------------

  final let mYUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mYUnit : Int {
    get { return self.mYUnit_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mWidth
  //------------------------------------------------------------------------------------------------

  final let mWidth_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mWidth : Int {
    get { return self.mWidth_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mWidthUnit
  //------------------------------------------------------------------------------------------------

  final let mWidthUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mWidthUnit : Int {
    get { return self.mWidthUnit_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mHeight
  //------------------------------------------------------------------------------------------------

  final let mHeight_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mHeight : Int {
    get { return self.mHeight_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mHeightUnit
  //------------------------------------------------------------------------------------------------

  final let mHeightUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mHeightUnit : Int {
    get { return self.mHeightUnit_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRotation
  //------------------------------------------------------------------------------------------------

  final let mRotation_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mRotation : Int {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mShowTextRotationKnobInBoard
  //------------------------------------------------------------------------------------------------

  final let mShowTextRotationKnobInBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var mShowTextRotationKnobInBoard : Bool {
    get { return self.mShowTextRotationKnobInBoard_property.propval }
    set { self.mShowTextRotationKnobInBoard_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mX
  //------------------------------------------------------------------------------------------------

  final let mX_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mXUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mXUnit")
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mY")
    self.mYUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mYUnit")
    self.mWidth_property = EBStoredProperty_Int (defaultValue: 360000, undoManager: inUndoManager, key: "mWidth")
    self.mWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mWidthUnit")
    self.mHeight_property = EBStoredProperty_Int (defaultValue: 360000, undoManager: inUndoManager, key: "mHeight")
    self.mHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mHeightUnit")
    self.mRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mRotation")
    self.mShowTextRotationKnobInBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mShowTextRotationKnobInBoard")
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mX")
    super.init (inUndoManager)
    self.accumulateProperty (self.mXUnit_property)
    self.accumulateProperty (self.mY_property)
    self.accumulateProperty (self.mYUnit_property)
    self.accumulateProperty (self.mWidth_property)
    self.accumulateProperty (self.mWidthUnit_property)
    self.accumulateProperty (self.mHeight_property)
    self.accumulateProperty (self.mHeightUnit_property)
    self.accumulateProperty (self.mRotation_property)
    self.accumulateProperty (self.mShowTextRotationKnobInBoard_property)
    self.accumulateProperty (self.mX_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_nonPlatedHoleColorForBoard_property.selection
        let s1 = unwSelf.mX_property.selection
        let s2 = unwSelf.mY_property.selection
        let s3 = unwSelf.mWidth_property.selection
        let s4 = unwSelf.mHeight_property.selection
        let s5 = unwSelf.mRotation_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_NonPlatedHole_objectDisplay (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_nonPlatedHoleColorForBoard_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mX_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mY_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mWidth_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mHeight_property.startsBeingObserved (by: self.objectDisplay_property)
    self.mRotation_property.startsBeingObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mRotation_property.selection
        let s5 = preferences_selectionHiliteColor_property.selection
        let s6 = preferences_hiliteWidthMultipliedByTen_property.selection
        let s7 = unwSelf.mShowTextRotationKnobInBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_NonPlatedHole_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mY_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mWidth_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mHeight_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mRotation_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_selectionHiliteColor_property.startsBeingObserved (by: self.selectionDisplay_property)
    preferences_hiliteWidthMultipliedByTen_property.startsBeingObserved (by: self.selectionDisplay_property)
    self.mShowTextRotationKnobInBoard_property.startsBeingObserved (by: self.selectionDisplay_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mWidth_property.selection
        let s3 = unwSelf.mHeight_property.selection
        let s4 = unwSelf.mRotation_property.selection
        let s5 = unwSelf.mShowTextRotationKnobInBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_NonPlatedHole_signatureForERCChecking (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mY_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mWidth_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mHeight_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mRotation_property.startsBeingObserved (by: self.signatureForERCChecking_property)
    self.mShowTextRotationKnobInBoard_property.startsBeingObserved (by: self.signatureForERCChecking_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_NonPlatedHole (knob: inKnobIndex)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Translate
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_NonPlatedHole (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_NonPlatedHole (xBy: inDx, yBy: inDy)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_NonPlatedHole (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Move
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_NonPlatedHole (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_NonPlatedHole (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Snap to grid
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_NonPlatedHole (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_NonPlatedHole (inGrid)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  HORIZONTAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipHorizontally () {
    self.flipHorizontally_NonPlatedHole ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_NonPlatedHole ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  VERTICAL FLIP
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func flipVertically () {
    self.flipVertically_NonPlatedHole ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_NonPlatedHole ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  ROTATE 90
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_NonPlatedHole (accumulatedPoints: &accumulatedPoints)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_NonPlatedHole (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_NonPlatedHole (from: inRotationCenter, userSet: &ioSet)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save into additional dictionary
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_NonPlatedHole (&ioDictionary)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationAfterPasting
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_NonPlatedHole (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Alignment Points
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_NonPlatedHole ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  operationBeforeRemoving
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_NonPlatedHole ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  COPY AND PASTE
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func canCopyAndPaste () -> Bool {
    return true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

