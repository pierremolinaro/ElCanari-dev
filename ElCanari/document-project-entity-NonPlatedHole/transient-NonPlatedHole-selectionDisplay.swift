//--------------------------------------------------------------------------------------------------
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//--------------------------------------------------------------------------------------------------

@MainActor func transient_NonPlatedHole_selectionDisplay (
       _ self_mX : Int,                                   
       _ self_mY : Int,                                   
       _ self_mWidth : Int,                               
       _ self_mHeight : Int,                              
       _ self_mRotation : Int,                            
       _ prefs_selectionHiliteColor : NSColor,            
       _ prefs_hiliteWidthMultipliedByTen : Int,          
       _ self_mShowTextRotationKnobInBoard : Bool
) -> EBShape {
//--- START OF USER ZONE 2
        var af = AffineTransform ()
        let startX = canariUnitToCocoa (self_mX)
        let startY = canariUnitToCocoa (self_mY)
        af.translate (x: startX, y: startY)
        let rotationInDegrees = CGFloat (self_mRotation) / 1000.0
        af.rotate (byDegrees: rotationInDegrees)
        var shape = EBShape ()
        let r = CanariRect (
          center: .zero,
          size: CanariSize (width: self_mWidth, height: self_mHeight)
        )
        var bp = BézierPath (oblongInRect: r.cocoaRect)
        bp.appendOblong (in: r.cocoaRect.insetBy (dx: 2.0, dy: 2.0))
        bp.windingRule = .evenOdd
        shape.add (filled: [bp.transformed (by: af)], prefs_selectionHiliteColor)
      //--- Rotation knob
        let center = NSPoint (x: startX, y: startY)
        if self_mShowTextRotationKnobInBoard {
          var knobLine = BézierPath ()
          knobLine.move (to : center)
          let rotationKnobLocation = center + NSPoint (length: NON_PLATED_HOLE_ROTATION_KNOB_DISTANCE, angleInDegrees: rotationInDegrees)
          knobLine.line (to : rotationKnobLocation)
          knobLine.lineWidth = CGFloat (prefs_hiliteWidthMultipliedByTen) / 10.0
          knobLine.lineCapStyle = .round
          knobLine.lineJoinStyle = .round
          shape.add (stroke: [knobLine], prefs_selectionHiliteColor)
          shape.add (knobAt: rotationKnobLocation, knobIndex: NON_PLATED_HOLE_ROTATION_KNOB, .circ, 2.0)
        }
      //--- Knob
         shape.add (knobAt: center, knobIndex: NON_PLATED_HOLE_ORIGIN_KNOB, .rect, 2.0)
        return shape
//--- END OF USER ZONE 2
}

//--------------------------------------------------------------------------------------------------
