//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_mSymbolPinName : AnyObject {
  var mSymbolPinName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_mX : AnyObject {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_mY : AnyObject {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_location : AnyObject {
  var location : CanariPoint? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_netName : AnyObject {
  var netName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_netClassName : AnyObject {
  var netClassName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_hasNet : AnyObject {
  var hasNet : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_canMove : AnyObject {
  var canMove : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_wireColor : AnyObject {
  var wireColor : NSColor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_symbolRotation : AnyObject {
  var symbolRotation : QuadrantRotation? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_symbolNameNetName : AnyObject {
  var symbolNameNetName : TwoStrings? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_isConnected : AnyObject {
  var isConnected : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_status : AnyObject {
  var status : SchematicPointStatus? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_connectedPoints : AnyObject {
  var connectedPoints : CanariPointArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol PointInSchematic_netInfoForPoint : AnyObject {
  var netInfoForPoint : NetInfoPoint? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PointInSchematic : EBManagedObject,
         PointInSchematic_mSymbolPinName,
         PointInSchematic_mX,
         PointInSchematic_mY,
         PointInSchematic_location,
         PointInSchematic_netName,
         PointInSchematic_netClassName,
         PointInSchematic_hasNet,
         PointInSchematic_canMove,
         PointInSchematic_wireColor,
         PointInSchematic_symbolRotation,
         PointInSchematic_symbolNameNetName,
         PointInSchematic_isConnected,
         PointInSchematic_status,
         PointInSchematic_connectedPoints,
         PointInSchematic_netInfoForPoint {

  //····················································································································
  //   Atomic property: mSymbolPinName
  //····················································································································

  final let mSymbolPinName_property : EBStoredProperty_String

  //····················································································································

  //····················································································································

  final var mSymbolPinName : String {
    get { return self.mSymbolPinName_property.propval }
    set { self.mSymbolPinName_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mLabels
  //····················································································································

  final let mLabels_property = StoredArrayOf_LabelInSchematic (usedForSignature: false, key: "mLabels")

  //····················································································································

  //····················································································································

  final var mLabels : EBReferenceArray <LabelInSchematic> {
    get { return self.mLabels_property.propval }
    set { self.mLabels_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mWiresP2s
  //····················································································································

  final let mWiresP2s_property = StoredArrayOf_WireInSchematic (usedForSignature: false, key: "mWiresP2s")

  //····················································································································

  //····················································································································

  final var mWiresP2s : EBReferenceArray <WireInSchematic> {
    get { return self.mWiresP2s_property.propval }
    set { self.mWiresP2s_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mWiresP1s
  //····················································································································

  final let mWiresP1s_property = StoredArrayOf_WireInSchematic (usedForSignature: false, key: "mWiresP1s")

  //····················································································································

  //····················································································································

  final var mWiresP1s : EBReferenceArray <WireInSchematic> {
    get { return self.mWiresP1s_property.propval }
    set { self.mWiresP1s_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mSymbol
  //····················································································································

  final let mSymbol_property = StoredObject_ComponentSymbolInProject (usedForSignature: false, strongRef: false, key: "mSymbol")

  //····················································································································

  final var mSymbol : ComponentSymbolInProject? {
    get {
      return self.mSymbol_property.propval
    }
    set {
      if self.mSymbol_property.propval !== newValue {
        if self.mSymbol_property.propval != nil {
          self.mSymbol_property.setProp (nil)
        }
        if newValue != nil {
          self.mSymbol_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mSymbol_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mNet
  //····················································································································

  final let mNet_property = StoredObject_NetInProject (usedForSignature: false, strongRef: false, key: "mNet")

  //····················································································································

  final var mNet : NetInProject? {
    get {
      return self.mNet_property.propval
    }
    set {
      if self.mNet_property.propval !== newValue {
        if self.mNet_property.propval != nil {
          self.mNet_property.setProp (nil)
        }
        if newValue != nil {
          self.mNet_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mNet_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mNC
  //····················································································································

  final let mNC_property = StoredObject_NCInSchematic (usedForSignature: false, strongRef: true, key: "mNC")

  //····················································································································

  final var mNC : NCInSchematic? {
    get {
      return self.mNC_property.propval
    }
    set {
      if self.mNC_property.propval !== newValue {
        if self.mNC_property.propval != nil {
          self.mNC_property.setProp (nil)
        }
        if newValue != nil {
          self.mNC_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mNC_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: location
  //····················································································································

  final let location_property = EBTransientProperty_CanariPoint ()

  //····················································································································

  final var location : CanariPoint? {
    return self.location_property.optionalValue
  }

  //····················································································································
  //   Transient property: netName
  //····················································································································

  final let netName_property = EBTransientProperty_String ()

  //····················································································································

  final var netName : String? {
    return self.netName_property.optionalValue
  }

  //····················································································································
  //   Transient property: netClassName
  //····················································································································

  final let netClassName_property = EBTransientProperty_String ()

  //····················································································································

  final var netClassName : String? {
    return self.netClassName_property.optionalValue
  }

  //····················································································································
  //   Transient property: hasNet
  //····················································································································

  final let hasNet_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasNet : Bool? {
    return self.hasNet_property.optionalValue
  }

  //····················································································································
  //   Transient property: canMove
  //····················································································································

  final let canMove_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canMove : Bool? {
    return self.canMove_property.optionalValue
  }

  //····················································································································
  //   Transient property: wireColor
  //····················································································································

  final let wireColor_property = EBTransientProperty_NSColor ()

  //····················································································································

  final var wireColor : NSColor? {
    return self.wireColor_property.optionalValue
  }

  //····················································································································
  //   Transient property: symbolRotation
  //····················································································································

  final let symbolRotation_property = EBTransientProperty_QuadrantRotation ()

  //····················································································································

  final var symbolRotation : QuadrantRotation? {
    return self.symbolRotation_property.optionalValue
  }

  //····················································································································
  //   To one property: mSheet
  //····················································································································

  final let mSheet_property = StoredObject_SheetInProject (usedForSignature: false, strongRef: false, key: "mSheet")

  //····················································································································

  final var mSheet : SheetInProject? {
    get {
      return self.mSheet_property.propval
    }
    set {
      if self.mSheet_property.propval !== newValue {
        if self.mSheet_property.propval != nil {
          self.mSheet_property.setProp (nil)
        }
        if newValue != nil {
          self.mSheet_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mSheet_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: symbolNameNetName
  //····················································································································

  final let symbolNameNetName_property = EBTransientProperty_TwoStrings ()

  //····················································································································

  final var symbolNameNetName : TwoStrings? {
    return self.symbolNameNetName_property.optionalValue
  }

  //····················································································································
  //   Transient property: isConnected
  //····················································································································

  final let isConnected_property = EBTransientProperty_Bool ()

  //····················································································································

  final var isConnected : Bool? {
    return self.isConnected_property.optionalValue
  }

  //····················································································································
  //   Transient property: status
  //····················································································································

  final let status_property = EBTransientProperty_SchematicPointStatus ()

  //····················································································································

  final var status : SchematicPointStatus? {
    return self.status_property.optionalValue
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  final let connectedPoints_property = EBTransientProperty_CanariPointArray ()

  //····················································································································

  final var connectedPoints : CanariPointArray? {
    return self.connectedPoints_property.optionalValue
  }

  //····················································································································
  //   Transient property: netInfoForPoint
  //····················································································································

  final let netInfoForPoint_property = EBTransientProperty_NetInfoPoint ()

  //····················································································································

  final var netInfoForPoint : NetInfoPoint? {
    return self.netInfoForPoint_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mSymbolPinName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSymbolPinName")
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mX")
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mY")
    super.init (inUndoManager)
    self.mSymbol_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mSymbol_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mSymbol_property.startsToBeObserved (by: self.mSymbol_none)
    self.mNet_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mNet_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mNet_property.startsToBeObserved (by: self.mNet_none)
    self.mNC_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mNC_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mNC_property.startsToBeObserved (by: self.mNC_none)
    self.mSheet_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mSheet_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mSheet_property.startsToBeObserved (by: self.mSheet_none)
  //--- To many property: mLabels (has opposite relationship)
    self.mLabels_property.undoManager = inUndoManager
    self.mLabels_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoint_property.setProp (me) } },
      resetter: { inObject in inObject.mPoint_property.setProp (nil) }
    )
  //--- To many property: mWiresP2s (has opposite relationship)
    self.mWiresP2s_property.undoManager = inUndoManager
    self.mWiresP2s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP2_property.setProp (me) } },
      resetter: { inObject in inObject.mP2_property.setProp (nil) }
    )
  //--- To many property: mWiresP1s (has opposite relationship)
    self.mWiresP1s_property.undoManager = inUndoManager
    self.mWiresP1s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP1_property.setProp (me) } },
      resetter: { inObject in inObject.mP1_property.setProp (nil) }
    )
  //--- To one property: mSymbol (has opposite to many relationship: mPoints)
    self.mSymbol_property.undoManager = inUndoManager
    self.mSymbol_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoints_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPoints_property.remove (me) } }
    )
  //--- To one property: mNet (has opposite to many relationship: mPoints)
    self.mNet_property.undoManager = inUndoManager
    self.mNet_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoints_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPoints_property.remove (me) } }
    )
  //--- To one property: mNC (has opposite to one relationship: mPoint)
    self.mNC_property.undoManager = inUndoManager
    self.mNC_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoint_property.setProp (me) } },
      resetter: { inObject in inObject.mPoint_property.setProp (nil) }
    )
  //--- Atomic property: location
    self.location_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mX_property.selection
        let s1 = unwSelf.mY_property.selection
        let s2 = unwSelf.mSymbolPinName_property.selection
        let s3 = unwSelf.mSymbol_property.symbolInfo_property.selection
        let s4 = unwSelf.mSymbol_property.mSymbolInstanceName_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_PointInSchematic_location (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mX_property.startsToBeObserved (by: self.location_property)
    self.mY_property.startsToBeObserved (by: self.location_property)
    self.mSymbolPinName_property.startsToBeObserved (by: self.location_property)
    self.mSymbol_property.symbolInfo_property.startsToBeObserved (by: self.location_property)
    self.mSymbol_property.mSymbolInstanceName_property.startsToBeObserved (by: self.location_property)
  //--- Atomic property: netName
    self.netName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_property.mNetName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PointInSchematic_netName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.mNetName_property.startsToBeObserved (by: self.netName_property)
  //--- Atomic property: netClassName
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_property.netClassName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PointInSchematic_netClassName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.netClassName_property.startsToBeObserved (by: self.netClassName_property)
  //--- Atomic property: hasNet
    self.hasNet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_none.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PointInSchematic_hasNet (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.startsToBeObserved (by: self.hasNet_property)
  //--- Atomic property: canMove
    self.canMove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbol_none.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PointInSchematic_canMove (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbol_property.startsToBeObserved (by: self.canMove_property)
  //--- Atomic property: wireColor
    self.wireColor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNet_property.wireColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_PointInSchematic_wireColor (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.wireColor_property.startsToBeObserved (by: self.wireColor_property)
  //--- Atomic property: symbolRotation
    self.symbolRotation_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbol_property.mRotation_property.selection
        let s1 = unwSelf.mSymbol_property.mMirror_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PointInSchematic_symbolRotation (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbol_property.mRotation_property.startsToBeObserved (by: self.symbolRotation_property)
    self.mSymbol_property.mMirror_property.startsToBeObserved (by: self.symbolRotation_property)
  //--- To one property: mSheet (has opposite to many relationship: mPoints)
    self.mSheet_property.undoManager = inUndoManager
    self.mSheet_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoints_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPoints_property.remove (me) } }
    )
  //--- Atomic property: symbolNameNetName
    self.symbolNameNetName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSymbolPinName_property.selection
        let s1 = unwSelf.netName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PointInSchematic_symbolNameNetName (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSymbolPinName_property.startsToBeObserved (by: self.symbolNameNetName_property)
    self.netName_property.startsToBeObserved (by: self.symbolNameNetName_property)
  //--- Atomic property: isConnected
    self.isConnected_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNC_none.selection
        let s1 = unwSelf.mSymbol_none.selection
        let s2 = unwSelf.mWiresP1s_property.count_property.selection
        let s3 = unwSelf.mWiresP2s_property.count_property.selection
        let s4 = unwSelf.mLabels_property.count_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_PointInSchematic_isConnected (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNC_property.startsToBeObserved (by: self.isConnected_property)
    self.mSymbol_property.startsToBeObserved (by: self.isConnected_property)
    self.mWiresP1s_property.startsToBeObserved (by: self.isConnected_property)
    self.mWiresP2s_property.startsToBeObserved (by: self.isConnected_property)
    self.mLabels_property.startsToBeObserved (by: self.isConnected_property)
  //--- Atomic property: status
    self.status_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.location_property.selection
        let s1 = unwSelf.isConnected_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PointInSchematic_status (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.location_property.startsToBeObserved (by: self.status_property)
    self.isConnected_property.startsToBeObserved (by: self.status_property)
  //--- Atomic property: connectedPoints
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.location_property.selection
        let s1 = unwSelf.isConnected_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_PointInSchematic_connectedPoints (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.location_property.startsToBeObserved (by: self.connectedPoints_property)
    self.isConnected_property.startsToBeObserved (by: self.connectedPoints_property)
  //--- Atomic property: netInfoForPoint
    self.netInfoForPoint_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLabels_property.count_property.selection
        let s1 = unwSelf.mSymbol_property.componentName_property.selection
        let s2 = unwSelf.mSymbol_property.mSymbolInstanceName_property.selection
        let s3 = unwSelf.mSymbolPinName_property.selection
        let s4 = unwSelf.mSymbol_property.pinPadAssignments_property.selection
        let s5 = unwSelf.mWiresP1s_property.selection
        let s6 = unwSelf.mWiresP2s_property.selection
        let s7 = unwSelf.location_property.selection
        let s8 = unwSelf.mSheet_property.sheetDescriptor_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_PointInSchematic_netInfoForPoint (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLabels_property.startsToBeObserved (by: self.netInfoForPoint_property)
    self.mSymbol_property.componentName_property.startsToBeObserved (by: self.netInfoForPoint_property)
    self.mSymbol_property.mSymbolInstanceName_property.startsToBeObserved (by: self.netInfoForPoint_property)
    self.mSymbolPinName_property.startsToBeObserved (by: self.netInfoForPoint_property)
    self.mSymbol_property.pinPadAssignments_property.startsToBeObserved (by: self.netInfoForPoint_property)
    self.mWiresP1s_property.startsToBeObserved (by: self.netInfoForPoint_property)
    self.mWiresP2s_property.startsToBeObserved (by: self.netInfoForPoint_property)
    self.location_property.startsToBeObserved (by: self.netInfoForPoint_property)
    self.mSheet_property.sheetDescriptor_property.startsToBeObserved (by: self.netInfoForPoint_property)
  //--- Install undoers and opposite setter for relationships
    self.mLabels_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoint_property.setProp (me) } },
      resetter: { inObject in inObject.mPoint_property.setProp (nil) }
    )
    self.mWiresP2s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP2_property.setProp (me) } },
      resetter: { inObject in inObject.mP2_property.setProp (nil) }
    )
    self.mWiresP1s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP1_property.setProp (me) } },
      resetter: { inObject in inObject.mP1_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

