//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PointInSchematic : ReadOnlyAbstractArrayProperty <PointInSchematic> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PointInSchematic>,                            
                                 addedSet inAddedSet : EBReferenceSet <PointInSchematic>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mSymbolPinName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_location_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netClassName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_hasNet_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_canMove_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_wireColor_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_symbolRotation_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_symbolNameNetName_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_isConnected_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_status_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_connectedPoints_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netInfoForPoint_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mSymbolPinName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_location_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netClassName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_hasNet_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_canMove_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_wireColor_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_symbolRotation_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_symbolNameNetName_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_isConnected_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_status_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_connectedPoints_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netInfoForPoint_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mSymbolPinName' stored property
  //····················································································································

  private final var mObserversOf_mSymbolPinName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolPinName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolPinName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolPinName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolPinName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolPinName_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    if !self.mObserversOf_mSymbolPinName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mSymbolPinName.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mSymbolPinName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mSymbolPinName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolPinName_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for (_, entry) in self.mObserversOf_mSymbolPinName.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mSymbolPinName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mSymbolPinName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    if !self.mObserversOf_mX.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mX.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mX_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mX.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for (_, entry) in self.mObserversOf_mX.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mX_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mX.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    if !self.mObserversOf_mY.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mY.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mY_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mY.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for (_, entry) in self.mObserversOf_mY.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mY_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mY.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private final var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_location.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_location.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_location_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_location.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.location_property.addEBObserver (observer)
        }else{
          self.mObserversOf_location.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_location_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_location.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.location_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_location.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private final var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netName_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netName_property.addEBObserver (observer)
        }else{
          self.mObserversOf_netName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netName_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netName_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_netName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  private final var mObserversOf_netClassName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netClassName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netClassName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netClassName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netClassName_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netClassName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netClassName_property.addEBObserver (observer)
        }else{
          self.mObserversOf_netClassName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netClassName_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netClassName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netClassName_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_netClassName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'hasNet' transient property
  //····················································································································

  private final var mObserversOf_hasNet = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_hasNet (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasNet.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasNet_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasNet (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasNet.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasNet_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_hasNet_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_hasNet.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.hasNet_property.addEBObserver (observer)
        }else{
          self.mObserversOf_hasNet.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasNet_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_hasNet.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.hasNet_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_hasNet.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'canMove' transient property
  //····················································································································

  private final var mObserversOf_canMove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canMove (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canMove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canMove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canMove (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canMove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canMove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canMove_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_canMove.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.canMove_property.addEBObserver (observer)
        }else{
          self.mObserversOf_canMove.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canMove_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_canMove.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.canMove_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_canMove.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'wireColor' transient property
  //····················································································································

  private final var mObserversOf_wireColor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_wireColor (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_wireColor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.wireColor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_wireColor (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_wireColor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.wireColor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_wireColor_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_wireColor.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.wireColor_property.addEBObserver (observer)
        }else{
          self.mObserversOf_wireColor.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_wireColor_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_wireColor.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.wireColor_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_wireColor.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolRotation' transient property
  //····················································································································

  private final var mObserversOf_symbolRotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolRotation (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolRotation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolRotation (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolRotation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolRotation_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolRotation.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.symbolRotation_property.addEBObserver (observer)
        }else{
          self.mObserversOf_symbolRotation.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolRotation_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolRotation.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.symbolRotation_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_symbolRotation.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolNameNetName' transient property
  //····················································································································

  private final var mObserversOf_symbolNameNetName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolNameNetName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolNameNetName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolNameNetName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolNameNetName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolNameNetName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolNameNetName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolNameNetName_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolNameNetName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.symbolNameNetName_property.addEBObserver (observer)
        }else{
          self.mObserversOf_symbolNameNetName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolNameNetName_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_symbolNameNetName.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.symbolNameNetName_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_symbolNameNetName.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  private final var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isConnected.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnected_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isConnected.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnected_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isConnected_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isConnected.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isConnected_property.addEBObserver (observer)
        }else{
          self.mObserversOf_isConnected.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isConnected_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_isConnected.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.isConnected_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_isConnected.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'status' transient property
  //····················································································································

  private final var mObserversOf_status = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_status (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_status.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.status_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_status (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_status.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.status_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_status_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_status.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.status_property.addEBObserver (observer)
        }else{
          self.mObserversOf_status.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_status_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_status.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.status_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_status.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private final var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connectedPoints.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connectedPoints_property.addEBObserver (observer)
        }else{
          self.mObserversOf_connectedPoints.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connectedPoints.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connectedPoints_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_connectedPoints.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'netInfoForPoint' transient property
  //····················································································································

  private final var mObserversOf_netInfoForPoint = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netInfoForPoint (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netInfoForPoint.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netInfoForPoint_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netInfoForPoint (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netInfoForPoint.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netInfoForPoint_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netInfoForPoint_toElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netInfoForPoint.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netInfoForPoint_property.addEBObserver (observer)
        }else{
          self.mObserversOf_netInfoForPoint.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netInfoForPoint_fromElementsOfSet (_ inSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_netInfoForPoint.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.netInfoForPoint_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_netInfoForPoint.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PointInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_PointInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PointInSchematic : ReadOnlyArrayOf_PointInSchematic {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PointInSchematic>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PointInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_PointInSchematic : ReadWriteArrayOf_PointInSchematic, EBSignatureObserverProtocol, DocumentStorableProperty {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  final func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PointInSchematic) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : PointInSchematic) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <PointInSchematic>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PointInSchematic>,
                                 addedSet inAddedSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [PointInSchematic] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <PointInSchematic>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <PointInSchematic> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : PointInSchematic) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : PointInSchematic) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StandAloneArrayOf_PointInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PointInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

