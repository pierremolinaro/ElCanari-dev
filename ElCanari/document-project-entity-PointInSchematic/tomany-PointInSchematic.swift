//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PointInSchematic : EBReadOnlyAbstractArrayProperty <PointInSchematic> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PointInSchematic>,                            
                                 addedSet inAddedSet : EBReferenceSet <PointInSchematic>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mSymbolPinName { // Stored property
        managedObject.mSymbolPinName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_location { // Transient property
        managedObject.location_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netName { // Transient property
        managedObject.netName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassName { // Transient property
        managedObject.netClassName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_hasNet { // Transient property
        managedObject.hasNet_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_canMove { // Transient property
        managedObject.canMove_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_wireColor { // Transient property
        managedObject.wireColor_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolRotation { // Transient property
        managedObject.symbolRotation_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolNameNetName { // Transient property
        managedObject.symbolNameNetName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_isConnected { // Transient property
        managedObject.isConnected_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_status { // Transient property
        managedObject.status_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_connectedPoints { // Transient property
        managedObject.connectedPoints_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netInfoForPoint { // Transient property
        managedObject.netInfoForPoint_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mSymbolPinName { // Stored property
        managedObject.mSymbolPinName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mX { // Stored property
        managedObject.mX_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mY { // Stored property
        managedObject.mY_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_location { // Transient property
        managedObject.location_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netName { // Transient property
        managedObject.netName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netClassName { // Transient property
        managedObject.netClassName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_hasNet { // Transient property
        managedObject.hasNet_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_canMove { // Transient property
        managedObject.canMove_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_wireColor { // Transient property
        managedObject.wireColor_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolRotation { // Transient property
        managedObject.symbolRotation_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_symbolNameNetName { // Transient property
        managedObject.symbolNameNetName_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_isConnected { // Transient property
        managedObject.isConnected_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_status { // Transient property
        managedObject.status_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_connectedPoints { // Transient property
        managedObject.connectedPoints_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_netInfoForPoint { // Transient property
        managedObject.netInfoForPoint_property.startsBeingObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolPinName' stored property
  //····················································································································

  private final var mObserversOf_mSymbolPinName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mSymbolPinName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSymbolPinName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mSymbolPinName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mSymbolPinName = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mSymbolPinName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mSymbolPinName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mX_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mX {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mX_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mX = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mX_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mX?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mY_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mY {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mY_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mY = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mY_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mY?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private final var mObserversOf_location : EBObservedObserver? = nil

  //····················································································································

  final func toMany_location_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_location {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.location_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_location = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_location_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_location?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private final var mObserversOf_netName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_netName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_netName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_netName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  private final var mObserversOf_netClassName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_netClassName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_netClassName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netClassName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_netClassName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netClassName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netClassName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'hasNet' transient property
  //····················································································································

  private final var mObserversOf_hasNet : EBObservedObserver? = nil

  //····················································································································

  final func toMany_hasNet_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_hasNet {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.hasNet_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_hasNet = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_hasNet_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_hasNet?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'canMove' transient property
  //····················································································································

  private final var mObserversOf_canMove : EBObservedObserver? = nil

  //····················································································································

  final func toMany_canMove_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_canMove {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.canMove_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_canMove = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_canMove_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_canMove?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'wireColor' transient property
  //····················································································································

  private final var mObserversOf_wireColor : EBObservedObserver? = nil

  //····················································································································

  final func toMany_wireColor_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_wireColor {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.wireColor_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_wireColor = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_wireColor_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_wireColor?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'symbolRotation' transient property
  //····················································································································

  private final var mObserversOf_symbolRotation : EBObservedObserver? = nil

  //····················································································································

  final func toMany_symbolRotation_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_symbolRotation {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.symbolRotation_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_symbolRotation = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_symbolRotation_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_symbolRotation?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'symbolNameNetName' transient property
  //····················································································································

  private final var mObserversOf_symbolNameNetName : EBObservedObserver? = nil

  //····················································································································

  final func toMany_symbolNameNetName_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_symbolNameNetName {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.symbolNameNetName_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_symbolNameNetName = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_symbolNameNetName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_symbolNameNetName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  private final var mObserversOf_isConnected : EBObservedObserver? = nil

  //····················································································································

  final func toMany_isConnected_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_isConnected {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.isConnected_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_isConnected = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_isConnected_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_isConnected?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'status' transient property
  //····················································································································

  private final var mObserversOf_status : EBObservedObserver? = nil

  //····················································································································

  final func toMany_status_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_status {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.status_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_status = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_status_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_status?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private final var mObserversOf_connectedPoints : EBObservedObserver? = nil

  //····················································································································

  final func toMany_connectedPoints_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_connectedPoints {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.connectedPoints_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_connectedPoints = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_connectedPoints_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_connectedPoints?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'netInfoForPoint' transient property
  //····················································································································

  private final var mObserversOf_netInfoForPoint : EBObservedObserver? = nil

  //····················································································································

  final func toMany_netInfoForPoint_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_netInfoForPoint {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.netInfoForPoint_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_netInfoForPoint = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_netInfoForPoint_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_netInfoForPoint?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_PointInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_PointInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PointInSchematic : ReadOnlyArrayOf_PointInSchematic {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <PointInSchematic>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_PointInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_PointInSchematic : ReadWriteArrayOf_PointInSchematic, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <PointInSchematic> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! PointInSchematic)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <PointInSchematic> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! PointInSchematic)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PointInSchematic) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : PointInSchematic) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <PointInSchematic>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <PointInSchematic>,
                                 addedSet inAddedSet : EBReferenceSet <PointInSchematic>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [PointInSchematic] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <PointInSchematic>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <PointInSchematic> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : PointInSchematic) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : PointInSchematic) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_PointInSchematic is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————

