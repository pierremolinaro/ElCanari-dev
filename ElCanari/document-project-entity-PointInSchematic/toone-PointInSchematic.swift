//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_PointInSchematic : ReadOnlyAbstractObjectProperty <PointInSchematic> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematic?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mSymbolPinName_property.stopsBeingObserved (by: self.mSymbolPinName_property) // Stored property
      oldValue.mX_property.stopsBeingObserved (by: self.mX_property) // Stored property
      oldValue.mY_property.stopsBeingObserved (by: self.mY_property) // Stored property
      oldValue.location_property.stopsBeingObserved (by: self.location_property) // Transient property
      oldValue.netName_property.stopsBeingObserved (by: self.netName_property) // Transient property
      oldValue.netClassName_property.stopsBeingObserved (by: self.netClassName_property) // Transient property
      oldValue.hasNet_property.stopsBeingObserved (by: self.hasNet_property) // Transient property
      oldValue.canMove_property.stopsBeingObserved (by: self.canMove_property) // Transient property
      oldValue.wireColor_property.stopsBeingObserved (by: self.wireColor_property) // Transient property
      oldValue.symbolRotation_property.stopsBeingObserved (by: self.symbolRotation_property) // Transient property
      oldValue.symbolNameNetName_property.stopsBeingObserved (by: self.symbolNameNetName_property) // Transient property
      oldValue.isConnected_property.stopsBeingObserved (by: self.isConnected_property) // Transient property
      oldValue.status_property.stopsBeingObserved (by: self.status_property) // Transient property
      oldValue.connectedPoints_property.stopsBeingObserved (by: self.connectedPoints_property) // Transient property
      oldValue.netInfoForPoint_property.stopsBeingObserved (by: self.netInfoForPoint_property) // Transient property
      if let relay = self.mObserversOf_mLabels { // to Many
        oldValue.mLabels_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWiresP2s { // to Many
        oldValue.mWiresP2s_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWiresP1s { // to Many
        oldValue.mWiresP1s_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mSymbolPinName_property.startsToBeObserved (by: self.mSymbolPinName_property) // Stored property
      newValue.mX_property.startsToBeObserved (by: self.mX_property) // Stored property
      newValue.mY_property.startsToBeObserved (by: self.mY_property) // Stored property
      newValue.location_property.startsToBeObserved (by: self.location_property) // Transient property
      newValue.netName_property.startsToBeObserved (by: self.netName_property) // Transient property
      newValue.netClassName_property.startsToBeObserved (by: self.netClassName_property) // Transient property
      newValue.hasNet_property.startsToBeObserved (by: self.hasNet_property) // Transient property
      newValue.canMove_property.startsToBeObserved (by: self.canMove_property) // Transient property
      newValue.wireColor_property.startsToBeObserved (by: self.wireColor_property) // Transient property
      newValue.symbolRotation_property.startsToBeObserved (by: self.symbolRotation_property) // Transient property
      newValue.symbolNameNetName_property.startsToBeObserved (by: self.symbolNameNetName_property) // Transient property
      newValue.isConnected_property.startsToBeObserved (by: self.isConnected_property) // Transient property
      newValue.status_property.startsToBeObserved (by: self.status_property) // Transient property
      newValue.connectedPoints_property.startsToBeObserved (by: self.connectedPoints_property) // Transient property
      newValue.netInfoForPoint_property.startsToBeObserved (by: self.netInfoForPoint_property) // Transient property
      if let relay = self.mObserversOf_mLabels { // to Many
        newValue.mLabels_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWiresP2s { // to Many
        newValue.mWiresP2s_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_mWiresP1s { // to Many
        newValue.mWiresP1s_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolPinName' stored property
  //····················································································································

  final let mSymbolPinName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  final let mX_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  final let mY_property = EBTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  final let location_property = EBTransientProperty <CanariPoint?> ()

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  final let netName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  final let netClassName_property = EBTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'hasNet' transient property
  //····················································································································

  final let hasNet_property = EBTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'canMove' transient property
  //····················································································································

  final let canMove_property = EBTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'wireColor' transient property
  //····················································································································

  final let wireColor_property = EBTransientProperty <NSColor?> ()

  //····················································································································
  //   Observers of 'symbolRotation' transient property
  //····················································································································

  final let symbolRotation_property = EBTransientProperty <QuadrantRotation?> ()

  //····················································································································
  //   Observers of 'symbolNameNetName' transient property
  //····················································································································

  final let symbolNameNetName_property = EBTransientProperty <TwoStrings?> ()

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  final let isConnected_property = EBTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'status' transient property
  //····················································································································

  final let status_property = EBTransientProperty <SchematicPointStatus?> ()

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  final let connectedPoints_property = EBTransientProperty <CanariPointArray?> ()

  //····················································································································
  //   Observers of 'netInfoForPoint' transient property
  //····················································································································

  final let netInfoForPoint_property = EBTransientProperty <NetInfoPoint?> ()

  //····················································································································
  //   Observable toMany property: mLabels
  //····················································································································

  private final var mObserversOf_mLabels : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mLabels_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mLabels {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mLabels_property.startsToBeObserved (by: relay)
      self.mObserversOf_mLabels = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mLabels_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mLabels?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: mWiresP2s
  //····················································································································

  private final var mObserversOf_mWiresP2s : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mWiresP2s_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mWiresP2s {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mWiresP2s_property.startsToBeObserved (by: relay)
      self.mObserversOf_mWiresP2s = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mWiresP2s_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mWiresP2s?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observable toMany property: mWiresP1s
  //····················································································································

  private final var mObserversOf_mWiresP1s : EBObservedObserver? = nil

  //····················································································································

  final func toMany_mWiresP1s_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mWiresP1s {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mWiresP1s_property.startsToBeObserved (by: relay)
      self.mObserversOf_mWiresP1s = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_mWiresP1s_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mWiresP1s?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mSymbolPinName simple stored property
    self.mSymbolPinName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSymbolPinName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mSymbolPinName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mX simple stored property
    self.mX_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mX_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure mY simple stored property
    self.mY_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mY_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure location transient property
    self.location_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.location_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.location_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure netName transient property
    self.netName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.netName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure netClassName transient property
    self.netClassName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netClassName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.netClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure hasNet transient property
    self.hasNet_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasNet_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.hasNet_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure canMove transient property
    self.canMove_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.canMove_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.canMove_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure wireColor transient property
    self.wireColor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.wireColor_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.wireColor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure symbolRotation transient property
    self.symbolRotation_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.symbolRotation_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.symbolRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure symbolNameNetName transient property
    self.symbolNameNetName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.symbolNameNetName_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.symbolNameNetName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure isConnected transient property
    self.isConnected_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.isConnected_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.isConnected_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure status transient property
    self.status_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.status_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.status_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure connectedPoints transient property
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.connectedPoints_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.connectedPoints_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  //--- Configure netInfoForPoint transient property
    self.netInfoForPoint_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netInfoForPoint_property.optionalSelection ?? .single (nil)
      /* if let model = self?.mWeakInternalValue {
        switch model.netInfoForPoint_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      } */
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_PointInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_PointInSchematic : ReadOnlyObject_PointInSchematic, EBSignatureObserverProtocol, DocumentStorablePropertyAndRelationshipProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! PointInSchematic
      self.setProp (object)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! PointInSchematic
      self.setProp (object)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PointInSchematic) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PointInSchematic) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematic?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PointInSchematic? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PointInSchematic? { return self.mWeakInternalValue }

  //····················································································································
  //   setProp
  //····················································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //····················································································································

  func setProp (_ inValue : PointInSchematic?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

