//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func transient_PointInSchematic_netInfoForPoint (
       _ self_mLabels_count : Int,                          
       _ self_mSymbol_componentName : String?,              
       _ self_mSymbol_mSymbolInstanceName : String?,        
       _ self_mSymbolPinName : String,                      
       _ self_mSymbol_pinPadAssignments : ThreeStringArray?,
       _ self_mWiresP1s : [ObjectIndexProtocol],            
       _ self_mWiresP2s : [ObjectIndexProtocol],            
       _ self_location : CanariPoint,                       
       _ self_mSheet_sheetDescriptor : SchematicSheetDescriptor?
) -> NetInfoPoint {
//--- START OF USER ZONE 2
      //--- Wires
        var wireIndexSet = Set <Int> ()
        for wire in self_mWiresP1s {
          wireIndexSet.insert (wire.objectIndex)
        }
        for wire in self_mWiresP2s {
          wireIndexSet.insert (wire.objectIndex)
        }
      //--- Location in sheet
        var locationInSheetString : String
        if let sheetDescriptor = self_mSheet_sheetDescriptor {
          locationInSheetString = sheetDescriptor.locationString (self_location)
        }else{
          locationInSheetString = "(no sheet)"
        }
      //--- Labels
        var labelArray = StringArray ()
        if self_mLabels_count > 0 {
          labelArray.append (locationInSheetString)
        }
        var pin : String? = nil
        if self_mSymbolPinName != "",
           let symbolInstanceName = self_mSymbol_mSymbolInstanceName,
           let componentName = self_mSymbol_componentName {
          var s = componentName + ":"
          for threeStrings in self_mSymbol_pinPadAssignments ?? [] {
            // Swift.print ("left '\(threeStrings.mLeft)', center '\(threeStrings.mCenter)' right '\(threeStrings.mRight)'")
            if (threeStrings.mRight == self_mSymbolPinName) && (threeStrings.mCenter == symbolInstanceName) {
              s += threeStrings.mLeft
            }
          }
          s += " at " + locationInSheetString
          pin = s
        }
        return NetInfoPoint (
          pin: pin,
          locationString: locationInSheetString,
          labels: labelArray,
          wires: wireIndexSet
        )
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
