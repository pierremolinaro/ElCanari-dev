//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mArtworkName : AnyObject {
  var mArtworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mArtworkVersion : AnyObject {
  var mArtworkVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mPDFBoardBackgroundColor : AnyObject {
  var mPDFBoardBackgroundColor : NSColor { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mCheckClearanceBetweenPadsOfSameNet : AnyObject {
  var mCheckClearanceBetweenPadsOfSameNet : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mLastERCCheckingIsSuccess : AnyObject {
  var mLastERCCheckingIsSuccess : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mLastERCCheckingSignature : AnyObject {
  var mLastERCCheckingSignature : UInt32 { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mLayerConfiguration : AnyObject {
  var mLayerConfiguration : LayerConfiguration { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardSideForNewTrack : AnyObject {
  var mBoardSideForNewTrack : TrackSide { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mDirectionForNewTrack : AnyObject {
  var mDirectionForNewTrack : TrackCreationDirection { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLayerForNewText : AnyObject {
  var mBoardLayerForNewText : BoardTextLayer { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLayerForNewLine : AnyObject {
  var mBoardLayerForNewLine : BoardLineLayer { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardSideForNewRestrictRectangle : AnyObject {
  var mBoardSideForNewRestrictRectangle : RestrictRectangleLayer { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mNewRestrictRectangleLayers : AnyObject {
  var mNewRestrictRectangleLayers : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mAutoRouterPreferredDirections : AnyObject {
  var mAutoRouterPreferredDirections : AutorouterPreferredDirections { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mAutorouterSnapAngle : AnyObject {
  var mAutorouterSnapAngle : AutorouterSnapAngle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mRouteDirection : AnyObject {
  var mRouteDirection : RouteDirection { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mRouteOrigin : AnyObject {
  var mRouteOrigin : RouteOrigin { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mAutorouterInterfaceMode : AnyObject {
  var mAutorouterInterfaceMode : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mExportExistingTracksAndVias : AnyObject {
  var mExportExistingTracksAndVias : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mExportExistingTracksAndVias2 : AnyObject {
  var mExportExistingTracksAndVias2 : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mTrackLengthUnit : AnyObject {
  var mTrackLengthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mLayoutClearance : AnyObject {
  var mLayoutClearance : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mLayoutClearanceUnit : AnyObject {
  var mLayoutClearanceUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardSelectedInspector : AnyObject {
  var mBoardSelectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardHorizontalFlip : AnyObject {
  var mBoardHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardVerticalFlip : AnyObject {
  var mBoardVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardGridStyle : AnyObject {
  var mBoardGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardGridDisplayFactor : AnyObject {
  var mBoardGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardZoom : AnyObject {
  var mBoardZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardGridStep : AnyObject {
  var mBoardGridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardGridStepUnit : AnyObject {
  var mBoardGridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mErrorOrWarningIssueSize : AnyObject {
  var mErrorOrWarningIssueSize : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mControlKeyHiliteDiameter : AnyObject {
  var mControlKeyHiliteDiameter : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mDSNFileProposedName : AnyObject {
  var mDSNFileProposedName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsWidth : AnyObject {
  var mBoardLimitsWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsWidthUnit : AnyObject {
  var mBoardLimitsWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardClearance : AnyObject {
  var mBoardClearance : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardClearanceUnit : AnyObject {
  var mBoardClearanceUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsSelectedInspector : AnyObject {
  var mBoardLimitsSelectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsHorizontalFlip : AnyObject {
  var mBoardLimitsHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsVerticalFlip : AnyObject {
  var mBoardLimitsVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsGridStyle : AnyObject {
  var mBoardLimitsGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsGridDisplayFactor : AnyObject {
  var mBoardLimitsGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsZoom : AnyObject {
  var mBoardLimitsZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsGridStep : AnyObject {
  var mBoardLimitsGridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsGridStepUnit : AnyObject {
  var mBoardLimitsGridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitsBoundingBoxUnit : AnyObject {
  var mBoardLimitsBoundingBoxUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardPointsBoundingBoxUnit : AnyObject {
  var mBoardPointsBoundingBoxUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardSelectedCurveDisplayUnit : AnyObject {
  var mBoardSelectedCurveDisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardLimitControlPointsDisplayUnit : AnyObject {
  var mBoardLimitControlPointsDisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mBoardShape : AnyObject {
  var mBoardShape : BoardShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mContentOpacityInBoardOutline : AnyObject {
  var mContentOpacityInBoardOutline : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mRectangularBoardWidth : AnyObject {
  var mRectangularBoardWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mRectangularBoardWidthUnit : AnyObject {
  var mRectangularBoardWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mRectangularBoardHeight : AnyObject {
  var mRectangularBoardHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mRectangularBoardHeightUnit : AnyObject {
  var mRectangularBoardHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mDefaultNetClassName : AnyObject {
  var mDefaultNetClassName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSelectedPageIndex : AnyObject {
  var mSelectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSelectedSchematicInspector : AnyObject {
  var mSelectedSchematicInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicTitle : AnyObject {
  var mSchematicTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicVersion : AnyObject {
  var mSchematicVersion : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicDate : AnyObject {
  var mSchematicDate : Date { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicHorizontalFlip : AnyObject {
  var mSchematicHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicVerticalFlip : AnyObject {
  var mSchematicVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicZoom : AnyObject {
  var mSchematicZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicGridStyle : AnyObject {
  var mSchematicGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicGridDisplayFactor : AnyObject {
  var mSchematicGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicCustomWidth : AnyObject {
  var mSchematicCustomWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicCustomWidthUnit : AnyObject {
  var mSchematicCustomWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicCustomHeight : AnyObject {
  var mSchematicCustomHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicCustomHeightUnit : AnyObject {
  var mSchematicCustomHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_drawErrorBackgroundForBoard : AnyObject {
  var drawErrorBackgroundForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayFrontRestrictRectangles : AnyObject {
  var displayFrontRestrictRectangles : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayBackRestrictRectangles : AnyObject {
  var displayBackRestrictRectangles : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayInner1RestrictRectangles : AnyObject {
  var displayInner1RestrictRectangles : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayInner2RestrictRectangles : AnyObject {
  var displayInner2RestrictRectangles : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayInner3RestrictRectangles : AnyObject {
  var displayInner3RestrictRectangles : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayInner4RestrictRectangles : AnyObject {
  var displayInner4RestrictRectangles : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayFrontLegendForBoard : AnyObject {
  var displayFrontLegendForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayFrontLayoutForBoard : AnyObject {
  var displayFrontLayoutForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayBackLayoutForBoard : AnyObject {
  var displayBackLayoutForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayInner1LayoutForBoard : AnyObject {
  var displayInner1LayoutForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayInner2LayoutForBoard : AnyObject {
  var displayInner2LayoutForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayInner3LayoutForBoard : AnyObject {
  var displayInner3LayoutForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayInner4LayoutForBoard : AnyObject {
  var displayInner4LayoutForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayBackLegendForBoard : AnyObject {
  var displayBackLegendForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayFrontPadsForBoard : AnyObject {
  var displayFrontPadsForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayBackPadsForBoard : AnyObject {
  var displayBackPadsForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_displayPadNumbersForBoard : AnyObject {
  var displayPadNumbersForBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_packageDrawingWidthMultpliedByTenForBoard : AnyObject {
  var packageDrawingWidthMultpliedByTenForBoard : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mSchematicSheetOrientation : AnyObject {
  var mSchematicSheetOrientation : SchematicSheetOrientation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mRastnetDisplay : AnyObject {
  var mRastnetDisplay : RastnetDisplay { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mRastnetDisplayedNetName : AnyObject {
  var mRastnetDisplayedNetName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_mRastnetDisplayedComponentName : AnyObject {
  var mRastnetDisplayedComponentName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_minPPTPTTTWdisplayUnit : AnyObject {
  var minPPTPTTTWdisplayUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_minPPTPTTTW : AnyObject {
  var minPPTPTTTW : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_minValueForOARdisplayUnit : AnyObject {
  var minValueForOARdisplayUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_minValueForOARinEBUnit : AnyObject {
  var minValueForOARinEBUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_minValueForPHDdisplayUnit : AnyObject {
  var minValueForPHDdisplayUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_minValueForPHDinEBUnit : AnyObject {
  var minValueForPHDinEBUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_minValueForBoardLimitWidth : AnyObject {
  var minValueForBoardLimitWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_minValueForBoardLimitWidthDisplayUnit : AnyObject {
  var minValueForBoardLimitWidthDisplayUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_artworkComments : AnyObject {
  var artworkComments : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_artworkLayerConfiguration : AnyObject {
  var artworkLayerConfiguration : LayerConfiguration? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_artworkTitle : AnyObject {
  var artworkTitle : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_selectedSheetTitle : AnyObject {
  var selectedSheetTitle : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_drillDataFileExtension : AnyObject {
  var drillDataFileExtension : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_hasInnerElements : AnyObject {
  var hasInnerElements : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_layerConfigurationString : AnyObject {
  var layerConfigurationString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardGridStepMultipliedByDisplayFactor : AnyObject {
  var boardGridStepMultipliedByDisplayFactor : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardLimitsGridStepMultipliedByDisplayFactor : AnyObject {
  var boardLimitsGridStepMultipliedByDisplayFactor : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardShapeIsRectangular : AnyObject {
  var boardShapeIsRectangular : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_selectedSheetIssues : AnyObject {
  var selectedSheetIssues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_schematicOverDisplay : AnyObject {
  var schematicOverDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_connexionWarningString : AnyObject {
  var connexionWarningString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_connexionErrorString : AnyObject {
  var connexionErrorString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_schematicErrorCount : AnyObject {
  var schematicErrorCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_sheetIndexes : AnyObject {
  var sheetIndexes : IntArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_netsDescription : AnyObject {
  var netsDescription : NetInfoArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardIssues : AnyObject {
  var boardIssues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_hasSixLayers : AnyObject {
  var hasSixLayers : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_ercStatusImage : AnyObject {
  var ercStatusImage : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_ercStatusMessage : AnyObject {
  var ercStatusMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_viaCountString : AnyObject {
  var viaCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_topSideTrackCountString : AnyObject {
  var topSideTrackCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_backSideTrackCountString : AnyObject {
  var backSideTrackCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_inner1LayerTrackCountString : AnyObject {
  var inner1LayerTrackCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_inner2LayerTrackCountString : AnyObject {
  var inner2LayerTrackCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_inner3LayerTrackCountString : AnyObject {
  var inner3LayerTrackCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_inner4LayerTrackCountString : AnyObject {
  var inner4LayerTrackCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_trackCountString : AnyObject {
  var trackCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_trackLengthString : AnyObject {
  var trackLengthString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardStatusErrorCount : AnyObject {
  var boardStatusErrorCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_interiorBoundBox : AnyObject {
  var interiorBoundBox : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardBoundBox : AnyObject {
  var boardBoundBox : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardInteriorTop : AnyObject {
  var boardInteriorTop : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardInteriorBottom : AnyObject {
  var boardInteriorBottom : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardInteriorLeft : AnyObject {
  var boardInteriorLeft : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardInteriorRight : AnyObject {
  var boardInteriorRight : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardLimitBorderTop : AnyObject {
  var boardLimitBorderTop : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardLimitBorderBottom : AnyObject {
  var boardLimitBorderBottom : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardLimitBorderLeft : AnyObject {
  var boardLimitBorderLeft : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardLimitBorderRight : AnyObject {
  var boardLimitBorderRight : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_borderElementCountString : AnyObject {
  var borderElementCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_borderOutlineBackground : AnyObject {
  var borderOutlineBackground : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_borderViewBackground : AnyObject {
  var borderViewBackground : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_fontNameArray : AnyObject {
  var fontNameArray : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_deviceNames : AnyObject {
  var deviceNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_allClassNames : AnyObject {
  var allClassNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_sheetGeometry : AnyObject {
  var sheetGeometry : SchematicSheetGeometry? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_schematicBackgroundDisplay : AnyObject {
  var schematicBackgroundDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_netWarningCount : AnyObject {
  var netWarningCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_netNamesArray : AnyObject {
  var netNamesArray : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_unplacedSymbols : AnyObject {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_unplacedPackages : AnyObject {
  var unplacedPackages : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_componentsPlacedInBoard : AnyObject {
  var componentsPlacedInBoard : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardStatusMessage : AnyObject {
  var boardStatusMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_boardStatusWarningCount : AnyObject {
  var boardStatusWarningCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_placedComponentNameArray : AnyObject {
  var placedComponentNameArray : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_schematicHasErrorOrWarning : AnyObject {
  var schematicHasErrorOrWarning : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_schematicStatusMessage : AnyObject {
  var schematicStatusMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol ProjectRoot_schematicWarningCount : AnyObject {
  var schematicWarningCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProjectRoot : EBManagedObject,
         ProjectRoot_mArtworkName,
         ProjectRoot_mArtworkVersion,
         ProjectRoot_mPDFBoardBackgroundColor,
         ProjectRoot_mCheckClearanceBetweenPadsOfSameNet,
         ProjectRoot_mLastERCCheckingIsSuccess,
         ProjectRoot_mLastERCCheckingSignature,
         ProjectRoot_mLayerConfiguration,
         ProjectRoot_mBoardSideForNewTrack,
         ProjectRoot_mDirectionForNewTrack,
         ProjectRoot_mBoardLayerForNewText,
         ProjectRoot_mBoardLayerForNewLine,
         ProjectRoot_mBoardSideForNewRestrictRectangle,
         ProjectRoot_mNewRestrictRectangleLayers,
         ProjectRoot_mAutoRouterPreferredDirections,
         ProjectRoot_mAutorouterSnapAngle,
         ProjectRoot_mRouteDirection,
         ProjectRoot_mRouteOrigin,
         ProjectRoot_mAutorouterInterfaceMode,
         ProjectRoot_mExportExistingTracksAndVias,
         ProjectRoot_mExportExistingTracksAndVias2,
         ProjectRoot_mTrackLengthUnit,
         ProjectRoot_mLayoutClearance,
         ProjectRoot_mLayoutClearanceUnit,
         ProjectRoot_mBoardSelectedInspector,
         ProjectRoot_mBoardHorizontalFlip,
         ProjectRoot_mBoardVerticalFlip,
         ProjectRoot_mBoardGridStyle,
         ProjectRoot_mBoardGridDisplayFactor,
         ProjectRoot_mBoardZoom,
         ProjectRoot_mBoardGridStep,
         ProjectRoot_mBoardGridStepUnit,
         ProjectRoot_mErrorOrWarningIssueSize,
         ProjectRoot_mControlKeyHiliteDiameter,
         ProjectRoot_mDSNFileProposedName,
         ProjectRoot_mBoardLimitsWidth,
         ProjectRoot_mBoardLimitsWidthUnit,
         ProjectRoot_mBoardClearance,
         ProjectRoot_mBoardClearanceUnit,
         ProjectRoot_mBoardLimitsSelectedInspector,
         ProjectRoot_mBoardLimitsHorizontalFlip,
         ProjectRoot_mBoardLimitsVerticalFlip,
         ProjectRoot_mBoardLimitsGridStyle,
         ProjectRoot_mBoardLimitsGridDisplayFactor,
         ProjectRoot_mBoardLimitsZoom,
         ProjectRoot_mBoardLimitsGridStep,
         ProjectRoot_mBoardLimitsGridStepUnit,
         ProjectRoot_mBoardLimitsBoundingBoxUnit,
         ProjectRoot_mBoardPointsBoundingBoxUnit,
         ProjectRoot_mBoardSelectedCurveDisplayUnit,
         ProjectRoot_mBoardLimitControlPointsDisplayUnit,
         ProjectRoot_mBoardShape,
         ProjectRoot_mContentOpacityInBoardOutline,
         ProjectRoot_mRectangularBoardWidth,
         ProjectRoot_mRectangularBoardWidthUnit,
         ProjectRoot_mRectangularBoardHeight,
         ProjectRoot_mRectangularBoardHeightUnit,
         ProjectRoot_mDefaultNetClassName,
         ProjectRoot_mSelectedPageIndex,
         ProjectRoot_mSelectedSchematicInspector,
         ProjectRoot_mSchematicTitle,
         ProjectRoot_mSchematicVersion,
         ProjectRoot_mSchematicDate,
         ProjectRoot_mSchematicHorizontalFlip,
         ProjectRoot_mSchematicVerticalFlip,
         ProjectRoot_mSchematicZoom,
         ProjectRoot_mSchematicGridStyle,
         ProjectRoot_mSchematicGridDisplayFactor,
         ProjectRoot_mSchematicCustomWidth,
         ProjectRoot_mSchematicCustomWidthUnit,
         ProjectRoot_mSchematicCustomHeight,
         ProjectRoot_mSchematicCustomHeightUnit,
         ProjectRoot_drawErrorBackgroundForBoard,
         ProjectRoot_displayFrontRestrictRectangles,
         ProjectRoot_displayBackRestrictRectangles,
         ProjectRoot_displayInner1RestrictRectangles,
         ProjectRoot_displayInner2RestrictRectangles,
         ProjectRoot_displayInner3RestrictRectangles,
         ProjectRoot_displayInner4RestrictRectangles,
         ProjectRoot_displayFrontLegendForBoard,
         ProjectRoot_displayFrontLayoutForBoard,
         ProjectRoot_displayBackLayoutForBoard,
         ProjectRoot_displayInner1LayoutForBoard,
         ProjectRoot_displayInner2LayoutForBoard,
         ProjectRoot_displayInner3LayoutForBoard,
         ProjectRoot_displayInner4LayoutForBoard,
         ProjectRoot_displayBackLegendForBoard,
         ProjectRoot_displayFrontPadsForBoard,
         ProjectRoot_displayBackPadsForBoard,
         ProjectRoot_displayPadNumbersForBoard,
         ProjectRoot_packageDrawingWidthMultpliedByTenForBoard,
         ProjectRoot_mSchematicSheetOrientation,
         ProjectRoot_mRastnetDisplay,
         ProjectRoot_mRastnetDisplayedNetName,
         ProjectRoot_mRastnetDisplayedComponentName,
         ProjectRoot_minPPTPTTTWdisplayUnit,
         ProjectRoot_minPPTPTTTW,
         ProjectRoot_minValueForOARdisplayUnit,
         ProjectRoot_minValueForOARinEBUnit,
         ProjectRoot_minValueForPHDdisplayUnit,
         ProjectRoot_minValueForPHDinEBUnit,
         ProjectRoot_minValueForBoardLimitWidth,
         ProjectRoot_minValueForBoardLimitWidthDisplayUnit,
         ProjectRoot_artworkComments,
         ProjectRoot_artworkLayerConfiguration,
         ProjectRoot_artworkTitle,
         ProjectRoot_selectedSheetTitle,
         ProjectRoot_drillDataFileExtension,
         ProjectRoot_hasInnerElements,
         ProjectRoot_layerConfigurationString,
         ProjectRoot_boardGridStepMultipliedByDisplayFactor,
         ProjectRoot_boardLimitsGridStepMultipliedByDisplayFactor,
         ProjectRoot_boardShapeIsRectangular,
         ProjectRoot_selectedSheetIssues,
         ProjectRoot_schematicOverDisplay,
         ProjectRoot_connexionWarningString,
         ProjectRoot_connexionErrorString,
         ProjectRoot_schematicErrorCount,
         ProjectRoot_sheetIndexes,
         ProjectRoot_netsDescription,
         ProjectRoot_boardIssues,
         ProjectRoot_hasSixLayers,
         ProjectRoot_signatureForERCChecking,
         ProjectRoot_ercStatusImage,
         ProjectRoot_ercStatusMessage,
         ProjectRoot_viaCountString,
         ProjectRoot_topSideTrackCountString,
         ProjectRoot_backSideTrackCountString,
         ProjectRoot_inner1LayerTrackCountString,
         ProjectRoot_inner2LayerTrackCountString,
         ProjectRoot_inner3LayerTrackCountString,
         ProjectRoot_inner4LayerTrackCountString,
         ProjectRoot_trackCountString,
         ProjectRoot_trackLengthString,
         ProjectRoot_boardStatusErrorCount,
         ProjectRoot_interiorBoundBox,
         ProjectRoot_boardBoundBox,
         ProjectRoot_boardInteriorTop,
         ProjectRoot_boardInteriorBottom,
         ProjectRoot_boardInteriorLeft,
         ProjectRoot_boardInteriorRight,
         ProjectRoot_boardLimitBorderTop,
         ProjectRoot_boardLimitBorderBottom,
         ProjectRoot_boardLimitBorderLeft,
         ProjectRoot_boardLimitBorderRight,
         ProjectRoot_borderElementCountString,
         ProjectRoot_borderOutlineBackground,
         ProjectRoot_borderViewBackground,
         ProjectRoot_fontNameArray,
         ProjectRoot_deviceNames,
         ProjectRoot_allClassNames,
         ProjectRoot_sheetGeometry,
         ProjectRoot_schematicBackgroundDisplay,
         ProjectRoot_netWarningCount,
         ProjectRoot_netNamesArray,
         ProjectRoot_unplacedSymbols,
         ProjectRoot_unplacedPackages,
         ProjectRoot_componentsPlacedInBoard,
         ProjectRoot_boardStatusMessage,
         ProjectRoot_boardStatusWarningCount,
         ProjectRoot_placedComponentNameArray,
         ProjectRoot_schematicHasErrorOrWarning,
         ProjectRoot_schematicStatusMessage,
         ProjectRoot_schematicWarningCount {

  //····················································································································
  //   Atomic property: mArtworkName
  //····················································································································

  final let mArtworkName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mArtworkName_toDefaultValue () {
    self.mArtworkName = ""
  }

  //····················································································································

  final var mArtworkName : String {
    get { return self.mArtworkName_property.propval }
    set { self.mArtworkName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mArtworkVersion
  //····················································································································

  final let mArtworkVersion_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mArtworkVersion_toDefaultValue () {
    self.mArtworkVersion = 0
  }

  //····················································································································

  final var mArtworkVersion : Int {
    get { return self.mArtworkVersion_property.propval }
    set { self.mArtworkVersion_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mPDFBoardBackgroundColor
  //····················································································································

  final let mPDFBoardBackgroundColor_property : EBStoredProperty_NSColor

  //····················································································································

  final func reset_mPDFBoardBackgroundColor_toDefaultValue () {
    self.mPDFBoardBackgroundColor = NSColor.lightGray
  }

  //····················································································································

  final var mPDFBoardBackgroundColor : NSColor {
    get { return self.mPDFBoardBackgroundColor_property.propval }
    set { self.mPDFBoardBackgroundColor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mCheckClearanceBetweenPadsOfSameNet
  //····················································································································

  final let mCheckClearanceBetweenPadsOfSameNet_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mCheckClearanceBetweenPadsOfSameNet_toDefaultValue () {
    self.mCheckClearanceBetweenPadsOfSameNet = true
  }

  //····················································································································

  final var mCheckClearanceBetweenPadsOfSameNet : Bool {
    get { return self.mCheckClearanceBetweenPadsOfSameNet_property.propval }
    set { self.mCheckClearanceBetweenPadsOfSameNet_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mLastERCCheckingIsSuccess
  //····················································································································

  final let mLastERCCheckingIsSuccess_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mLastERCCheckingIsSuccess_toDefaultValue () {
    self.mLastERCCheckingIsSuccess = false
  }

  //····················································································································

  final var mLastERCCheckingIsSuccess : Bool {
    get { return self.mLastERCCheckingIsSuccess_property.propval }
    set { self.mLastERCCheckingIsSuccess_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mLastERCCheckingSignature
  //····················································································································

  final let mLastERCCheckingSignature_property : EBStoredProperty_UInt32

  //····················································································································

  final func reset_mLastERCCheckingSignature_toDefaultValue () {
    self.mLastERCCheckingSignature = 1
  }

  //····················································································································

  final var mLastERCCheckingSignature : UInt32 {
    get { return self.mLastERCCheckingSignature_property.propval }
    set { self.mLastERCCheckingSignature_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mLayerConfiguration
  //····················································································································

  final let mLayerConfiguration_property : EBStoredProperty_LayerConfiguration

  //····················································································································

  final func reset_mLayerConfiguration_toDefaultValue () {
    self.mLayerConfiguration = LayerConfiguration.twoLayers
  }

  //····················································································································

  final var mLayerConfiguration : LayerConfiguration {
    get { return self.mLayerConfiguration_property.propval }
    set { self.mLayerConfiguration_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardSideForNewTrack
  //····················································································································

  final let mBoardSideForNewTrack_property : EBStoredProperty_TrackSide

  //····················································································································

  final func reset_mBoardSideForNewTrack_toDefaultValue () {
    self.mBoardSideForNewTrack = TrackSide.front
  }

  //····················································································································

  final var mBoardSideForNewTrack : TrackSide {
    get { return self.mBoardSideForNewTrack_property.propval }
    set { self.mBoardSideForNewTrack_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDirectionForNewTrack
  //····················································································································

  final let mDirectionForNewTrack_property : EBStoredProperty_TrackCreationDirection

  //····················································································································

  final func reset_mDirectionForNewTrack_toDefaultValue () {
    self.mDirectionForNewTrack = TrackCreationDirection.anyAngle
  }

  //····················································································································

  final var mDirectionForNewTrack : TrackCreationDirection {
    get { return self.mDirectionForNewTrack_property.propval }
    set { self.mDirectionForNewTrack_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLayerForNewText
  //····················································································································

  final let mBoardLayerForNewText_property : EBStoredProperty_BoardTextLayer

  //····················································································································

  final func reset_mBoardLayerForNewText_toDefaultValue () {
    self.mBoardLayerForNewText = BoardTextLayer.legendFront
  }

  //····················································································································

  final var mBoardLayerForNewText : BoardTextLayer {
    get { return self.mBoardLayerForNewText_property.propval }
    set { self.mBoardLayerForNewText_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLayerForNewLine
  //····················································································································

  final let mBoardLayerForNewLine_property : EBStoredProperty_BoardLineLayer

  //····················································································································

  final func reset_mBoardLayerForNewLine_toDefaultValue () {
    self.mBoardLayerForNewLine = BoardLineLayer.legendFront
  }

  //····················································································································

  final var mBoardLayerForNewLine : BoardLineLayer {
    get { return self.mBoardLayerForNewLine_property.propval }
    set { self.mBoardLayerForNewLine_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardSideForNewRestrictRectangle
  //····················································································································

  final let mBoardSideForNewRestrictRectangle_property : EBStoredProperty_RestrictRectangleLayer

  //····················································································································

  final func reset_mBoardSideForNewRestrictRectangle_toDefaultValue () {
    self.mBoardSideForNewRestrictRectangle = RestrictRectangleLayer.frontSide
  }

  //····················································································································

  final var mBoardSideForNewRestrictRectangle : RestrictRectangleLayer {
    get { return self.mBoardSideForNewRestrictRectangle_property.propval }
    set { self.mBoardSideForNewRestrictRectangle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNewRestrictRectangleLayers
  //····················································································································

  final let mNewRestrictRectangleLayers_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mNewRestrictRectangleLayers_toDefaultValue () {
    self.mNewRestrictRectangleLayers = 1
  }

  //····················································································································

  final var mNewRestrictRectangleLayers : Int {
    get { return self.mNewRestrictRectangleLayers_property.propval }
    set { self.mNewRestrictRectangleLayers_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mAutoRouterPreferredDirections
  //····················································································································

  final let mAutoRouterPreferredDirections_property : EBStoredProperty_AutorouterPreferredDirections

  //····················································································································

  final func reset_mAutoRouterPreferredDirections_toDefaultValue () {
    self.mAutoRouterPreferredDirections = AutorouterPreferredDirections.vFrontHback
  }

  //····················································································································

  final var mAutoRouterPreferredDirections : AutorouterPreferredDirections {
    get { return self.mAutoRouterPreferredDirections_property.propval }
    set { self.mAutoRouterPreferredDirections_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mAutorouterSnapAngle
  //····················································································································

  final let mAutorouterSnapAngle_property : EBStoredProperty_AutorouterSnapAngle

  //····················································································································

  final func reset_mAutorouterSnapAngle_toDefaultValue () {
    self.mAutorouterSnapAngle = AutorouterSnapAngle.octolinear
  }

  //····················································································································

  final var mAutorouterSnapAngle : AutorouterSnapAngle {
    get { return self.mAutorouterSnapAngle_property.propval }
    set { self.mAutorouterSnapAngle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRouteDirection
  //····················································································································

  final let mRouteDirection_property : EBStoredProperty_RouteDirection

  //····················································································································

  final func reset_mRouteDirection_toDefaultValue () {
    self.mRouteDirection = RouteDirection.from
  }

  //····················································································································

  final var mRouteDirection : RouteDirection {
    get { return self.mRouteDirection_property.propval }
    set { self.mRouteDirection_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRouteOrigin
  //····················································································································

  final let mRouteOrigin_property : EBStoredProperty_RouteOrigin

  //····················································································································

  final func reset_mRouteOrigin_toDefaultValue () {
    self.mRouteOrigin = RouteOrigin.center
  }

  //····················································································································

  final var mRouteOrigin : RouteOrigin {
    get { return self.mRouteOrigin_property.propval }
    set { self.mRouteOrigin_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mAutorouterInterfaceMode
  //····················································································································

  final let mAutorouterInterfaceMode_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mAutorouterInterfaceMode_toDefaultValue () {
    self.mAutorouterInterfaceMode = 0
  }

  //····················································································································

  final var mAutorouterInterfaceMode : Int {
    get { return self.mAutorouterInterfaceMode_property.propval }
    set { self.mAutorouterInterfaceMode_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mExportExistingTracksAndVias
  //····················································································································

  final let mExportExistingTracksAndVias_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mExportExistingTracksAndVias_toDefaultValue () {
    self.mExportExistingTracksAndVias = false
  }

  //····················································································································

  final var mExportExistingTracksAndVias : Bool {
    get { return self.mExportExistingTracksAndVias_property.propval }
    set { self.mExportExistingTracksAndVias_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mExportExistingTracksAndVias2
  //····················································································································

  final let mExportExistingTracksAndVias2_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mExportExistingTracksAndVias2_toDefaultValue () {
    self.mExportExistingTracksAndVias2 = false
  }

  //····················································································································

  final var mExportExistingTracksAndVias2 : Bool {
    get { return self.mExportExistingTracksAndVias2_property.propval }
    set { self.mExportExistingTracksAndVias2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mTrackLengthUnit
  //····················································································································

  final let mTrackLengthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mTrackLengthUnit_toDefaultValue () {
    self.mTrackLengthUnit = 90000000
  }

  //····················································································································

  final var mTrackLengthUnit : Int {
    get { return self.mTrackLengthUnit_property.propval }
    set { self.mTrackLengthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mLayoutClearance
  //····················································································································

  final let mLayoutClearance_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mLayoutClearance_toDefaultValue () {
    self.mLayoutClearance = 22660
  }

  //····················································································································

  final var mLayoutClearance : Int {
    get { return self.mLayoutClearance_property.propval }
    set { self.mLayoutClearance_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mLayoutClearanceUnit
  //····················································································································

  final let mLayoutClearanceUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mLayoutClearanceUnit_toDefaultValue () {
    self.mLayoutClearanceUnit = 2286
  }

  //····················································································································

  final var mLayoutClearanceUnit : Int {
    get { return self.mLayoutClearanceUnit_property.propval }
    set { self.mLayoutClearanceUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardSelectedInspector
  //····················································································································

  final let mBoardSelectedInspector_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardSelectedInspector_toDefaultValue () {
    self.mBoardSelectedInspector = 1
  }

  //····················································································································

  final var mBoardSelectedInspector : Int {
    get { return self.mBoardSelectedInspector_property.propval }
    set { self.mBoardSelectedInspector_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardHorizontalFlip
  //····················································································································

  final let mBoardHorizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mBoardHorizontalFlip_toDefaultValue () {
    self.mBoardHorizontalFlip = false
  }

  //····················································································································

  final var mBoardHorizontalFlip : Bool {
    get { return self.mBoardHorizontalFlip_property.propval }
    set { self.mBoardHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardVerticalFlip
  //····················································································································

  final let mBoardVerticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mBoardVerticalFlip_toDefaultValue () {
    self.mBoardVerticalFlip = false
  }

  //····················································································································

  final var mBoardVerticalFlip : Bool {
    get { return self.mBoardVerticalFlip_property.propval }
    set { self.mBoardVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardGridStyle
  //····················································································································

  final let mBoardGridStyle_property : EBStoredProperty_GridStyle

  //····················································································································

  final func reset_mBoardGridStyle_toDefaultValue () {
    self.mBoardGridStyle = GridStyle.line
  }

  //····················································································································

  final var mBoardGridStyle : GridStyle {
    get { return self.mBoardGridStyle_property.propval }
    set { self.mBoardGridStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardGridDisplayFactor
  //····················································································································

  final let mBoardGridDisplayFactor_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardGridDisplayFactor_toDefaultValue () {
    self.mBoardGridDisplayFactor = 4
  }

  //····················································································································

  final var mBoardGridDisplayFactor : Int {
    get { return self.mBoardGridDisplayFactor_property.propval }
    set { self.mBoardGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardZoom
  //····················································································································

  final let mBoardZoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardZoom_toDefaultValue () {
    self.mBoardZoom = 0
  }

  //····················································································································

  final var mBoardZoom : Int {
    get { return self.mBoardZoom_property.propval }
    set { self.mBoardZoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardGridStep
  //····················································································································

  final let mBoardGridStep_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardGridStep_toDefaultValue () {
    self.mBoardGridStep = 57150
  }

  //····················································································································

  final var mBoardGridStep : Int {
    get { return self.mBoardGridStep_property.propval }
    set { self.mBoardGridStep_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardGridStepUnit
  //····················································································································

  final let mBoardGridStepUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardGridStepUnit_toDefaultValue () {
    self.mBoardGridStepUnit = 2286
  }

  //····················································································································

  final var mBoardGridStepUnit : Int {
    get { return self.mBoardGridStepUnit_property.propval }
    set { self.mBoardGridStepUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mErrorOrWarningIssueSize
  //····················································································································

  final let mErrorOrWarningIssueSize_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mErrorOrWarningIssueSize_toDefaultValue () {
    self.mErrorOrWarningIssueSize = 6
  }

  //····················································································································

  final var mErrorOrWarningIssueSize : Double {
    get { return self.mErrorOrWarningIssueSize_property.propval }
    set { self.mErrorOrWarningIssueSize_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mControlKeyHiliteDiameter
  //····················································································································

  final let mControlKeyHiliteDiameter_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mControlKeyHiliteDiameter_toDefaultValue () {
    self.mControlKeyHiliteDiameter = 100
  }

  //····················································································································

  final var mControlKeyHiliteDiameter : Double {
    get { return self.mControlKeyHiliteDiameter_property.propval }
    set { self.mControlKeyHiliteDiameter_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDSNFileProposedName
  //····················································································································

  final let mDSNFileProposedName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mDSNFileProposedName_toDefaultValue () {
    self.mDSNFileProposedName = "design.dsn"
  }

  //····················································································································

  final var mDSNFileProposedName : String {
    get { return self.mDSNFileProposedName_property.propval }
    set { self.mDSNFileProposedName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsWidth
  //····················································································································

  final let mBoardLimitsWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardLimitsWidth_toDefaultValue () {
    self.mBoardLimitsWidth = 90000
  }

  //····················································································································

  final var mBoardLimitsWidth : Int {
    get { return self.mBoardLimitsWidth_property.propval }
    set { self.mBoardLimitsWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsWidthUnit
  //····················································································································

  final let mBoardLimitsWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardLimitsWidthUnit_toDefaultValue () {
    self.mBoardLimitsWidthUnit = 90000
  }

  //····················································································································

  final var mBoardLimitsWidthUnit : Int {
    get { return self.mBoardLimitsWidthUnit_property.propval }
    set { self.mBoardLimitsWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardClearance
  //····················································································································

  final let mBoardClearance_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardClearance_toDefaultValue () {
    self.mBoardClearance = 90000
  }

  //····················································································································

  final var mBoardClearance : Int {
    get { return self.mBoardClearance_property.propval }
    set { self.mBoardClearance_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardClearanceUnit
  //····················································································································

  final let mBoardClearanceUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardClearanceUnit_toDefaultValue () {
    self.mBoardClearanceUnit = 90000
  }

  //····················································································································

  final var mBoardClearanceUnit : Int {
    get { return self.mBoardClearanceUnit_property.propval }
    set { self.mBoardClearanceUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsSelectedInspector
  //····················································································································

  final let mBoardLimitsSelectedInspector_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardLimitsSelectedInspector_toDefaultValue () {
    self.mBoardLimitsSelectedInspector = 0
  }

  //····················································································································

  final var mBoardLimitsSelectedInspector : Int {
    get { return self.mBoardLimitsSelectedInspector_property.propval }
    set { self.mBoardLimitsSelectedInspector_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsHorizontalFlip
  //····················································································································

  final let mBoardLimitsHorizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mBoardLimitsHorizontalFlip_toDefaultValue () {
    self.mBoardLimitsHorizontalFlip = false
  }

  //····················································································································

  final var mBoardLimitsHorizontalFlip : Bool {
    get { return self.mBoardLimitsHorizontalFlip_property.propval }
    set { self.mBoardLimitsHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsVerticalFlip
  //····················································································································

  final let mBoardLimitsVerticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mBoardLimitsVerticalFlip_toDefaultValue () {
    self.mBoardLimitsVerticalFlip = false
  }

  //····················································································································

  final var mBoardLimitsVerticalFlip : Bool {
    get { return self.mBoardLimitsVerticalFlip_property.propval }
    set { self.mBoardLimitsVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsGridStyle
  //····················································································································

  final let mBoardLimitsGridStyle_property : EBStoredProperty_GridStyle

  //····················································································································

  final func reset_mBoardLimitsGridStyle_toDefaultValue () {
    self.mBoardLimitsGridStyle = GridStyle.line
  }

  //····················································································································

  final var mBoardLimitsGridStyle : GridStyle {
    get { return self.mBoardLimitsGridStyle_property.propval }
    set { self.mBoardLimitsGridStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsGridDisplayFactor
  //····················································································································

  final let mBoardLimitsGridDisplayFactor_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardLimitsGridDisplayFactor_toDefaultValue () {
    self.mBoardLimitsGridDisplayFactor = 5
  }

  //····················································································································

  final var mBoardLimitsGridDisplayFactor : Int {
    get { return self.mBoardLimitsGridDisplayFactor_property.propval }
    set { self.mBoardLimitsGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsZoom
  //····················································································································

  final let mBoardLimitsZoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardLimitsZoom_toDefaultValue () {
    self.mBoardLimitsZoom = 0
  }

  //····················································································································

  final var mBoardLimitsZoom : Int {
    get { return self.mBoardLimitsZoom_property.propval }
    set { self.mBoardLimitsZoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsGridStep
  //····················································································································

  final let mBoardLimitsGridStep_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardLimitsGridStep_toDefaultValue () {
    self.mBoardLimitsGridStep = 90000
  }

  //····················································································································

  final var mBoardLimitsGridStep : Int {
    get { return self.mBoardLimitsGridStep_property.propval }
    set { self.mBoardLimitsGridStep_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsGridStepUnit
  //····················································································································

  final let mBoardLimitsGridStepUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardLimitsGridStepUnit_toDefaultValue () {
    self.mBoardLimitsGridStepUnit = 90000
  }

  //····················································································································

  final var mBoardLimitsGridStepUnit : Int {
    get { return self.mBoardLimitsGridStepUnit_property.propval }
    set { self.mBoardLimitsGridStepUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitsBoundingBoxUnit
  //····················································································································

  final let mBoardLimitsBoundingBoxUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardLimitsBoundingBoxUnit_toDefaultValue () {
    self.mBoardLimitsBoundingBoxUnit = 90000
  }

  //····················································································································

  final var mBoardLimitsBoundingBoxUnit : Int {
    get { return self.mBoardLimitsBoundingBoxUnit_property.propval }
    set { self.mBoardLimitsBoundingBoxUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardPointsBoundingBoxUnit
  //····················································································································

  final let mBoardPointsBoundingBoxUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardPointsBoundingBoxUnit_toDefaultValue () {
    self.mBoardPointsBoundingBoxUnit = 90000
  }

  //····················································································································

  final var mBoardPointsBoundingBoxUnit : Int {
    get { return self.mBoardPointsBoundingBoxUnit_property.propval }
    set { self.mBoardPointsBoundingBoxUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardSelectedCurveDisplayUnit
  //····················································································································

  final let mBoardSelectedCurveDisplayUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardSelectedCurveDisplayUnit_toDefaultValue () {
    self.mBoardSelectedCurveDisplayUnit = 90000
  }

  //····················································································································

  final var mBoardSelectedCurveDisplayUnit : Int {
    get { return self.mBoardSelectedCurveDisplayUnit_property.propval }
    set { self.mBoardSelectedCurveDisplayUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardLimitControlPointsDisplayUnit
  //····················································································································

  final let mBoardLimitControlPointsDisplayUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mBoardLimitControlPointsDisplayUnit_toDefaultValue () {
    self.mBoardLimitControlPointsDisplayUnit = 90000
  }

  //····················································································································

  final var mBoardLimitControlPointsDisplayUnit : Int {
    get { return self.mBoardLimitControlPointsDisplayUnit_property.propval }
    set { self.mBoardLimitControlPointsDisplayUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mBoardShape
  //····················································································································

  final let mBoardShape_property : EBStoredProperty_BoardShape

  //····················································································································

  final func reset_mBoardShape_toDefaultValue () {
    self.mBoardShape = BoardShape.rectangular
  }

  //····················································································································

  final var mBoardShape : BoardShape {
    get { return self.mBoardShape_property.propval }
    set { self.mBoardShape_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mContentOpacityInBoardOutline
  //····················································································································

  final let mContentOpacityInBoardOutline_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mContentOpacityInBoardOutline_toDefaultValue () {
    self.mContentOpacityInBoardOutline = 0.5
  }

  //····················································································································

  final var mContentOpacityInBoardOutline : Double {
    get { return self.mContentOpacityInBoardOutline_property.propval }
    set { self.mContentOpacityInBoardOutline_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRectangularBoardWidth
  //····················································································································

  final let mRectangularBoardWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mRectangularBoardWidth_toDefaultValue () {
    self.mRectangularBoardWidth = 9000000
  }

  //····················································································································

  final var mRectangularBoardWidth : Int {
    get { return self.mRectangularBoardWidth_property.propval }
    set { self.mRectangularBoardWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRectangularBoardWidthUnit
  //····················································································································

  final let mRectangularBoardWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mRectangularBoardWidthUnit_toDefaultValue () {
    self.mRectangularBoardWidthUnit = 90000
  }

  //····················································································································

  final var mRectangularBoardWidthUnit : Int {
    get { return self.mRectangularBoardWidthUnit_property.propval }
    set { self.mRectangularBoardWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRectangularBoardHeight
  //····················································································································

  final let mRectangularBoardHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mRectangularBoardHeight_toDefaultValue () {
    self.mRectangularBoardHeight = 9000000
  }

  //····················································································································

  final var mRectangularBoardHeight : Int {
    get { return self.mRectangularBoardHeight_property.propval }
    set { self.mRectangularBoardHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRectangularBoardHeightUnit
  //····················································································································

  final let mRectangularBoardHeightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mRectangularBoardHeightUnit_toDefaultValue () {
    self.mRectangularBoardHeightUnit = 90000
  }

  //····················································································································

  final var mRectangularBoardHeightUnit : Int {
    get { return self.mRectangularBoardHeightUnit_property.propval }
    set { self.mRectangularBoardHeightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSheets
  //····················································································································

  final let mSheets_property = StoredArrayOf_SheetInProject (usedForSignature: false, key: "mSheets")

  //····················································································································

  //····················································································································

  final var mSheets : EBReferenceArray <SheetInProject> {
    get { return self.mSheets_property.propval }
    set { self.mSheets_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDefaultNetClassName
  //····················································································································

  final let mDefaultNetClassName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mDefaultNetClassName_toDefaultValue () {
    self.mDefaultNetClassName = ""
  }

  //····················································································································

  final var mDefaultNetClassName : String {
    get { return self.mDefaultNetClassName_property.propval }
    set { self.mDefaultNetClassName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSelectedPageIndex
  //····················································································································

  final let mSelectedPageIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSelectedPageIndex_toDefaultValue () {
    self.mSelectedPageIndex = 0
  }

  //····················································································································

  final var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSelectedSchematicInspector
  //····················································································································

  final let mSelectedSchematicInspector_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSelectedSchematicInspector_toDefaultValue () {
    self.mSelectedSchematicInspector = 0
  }

  //····················································································································

  final var mSelectedSchematicInspector : Int {
    get { return self.mSelectedSchematicInspector_property.propval }
    set { self.mSelectedSchematicInspector_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicTitle
  //····················································································································

  final let mSchematicTitle_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSchematicTitle_toDefaultValue () {
    self.mSchematicTitle = ""
  }

  //····················································································································

  final var mSchematicTitle : String {
    get { return self.mSchematicTitle_property.propval }
    set { self.mSchematicTitle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicVersion
  //····················································································································

  final let mSchematicVersion_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSchematicVersion_toDefaultValue () {
    self.mSchematicVersion = ""
  }

  //····················································································································

  final var mSchematicVersion : String {
    get { return self.mSchematicVersion_property.propval }
    set { self.mSchematicVersion_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicDate
  //····················································································································

  final let mSchematicDate_property : EBStoredProperty_Date

  //····················································································································

  final func reset_mSchematicDate_toDefaultValue () {
    self.mSchematicDate = Date ()
  }

  //····················································································································

  final var mSchematicDate : Date {
    get { return self.mSchematicDate_property.propval }
    set { self.mSchematicDate_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicHorizontalFlip
  //····················································································································

  final let mSchematicHorizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mSchematicHorizontalFlip_toDefaultValue () {
    self.mSchematicHorizontalFlip = false
  }

  //····················································································································

  final var mSchematicHorizontalFlip : Bool {
    get { return self.mSchematicHorizontalFlip_property.propval }
    set { self.mSchematicHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicVerticalFlip
  //····················································································································

  final let mSchematicVerticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mSchematicVerticalFlip_toDefaultValue () {
    self.mSchematicVerticalFlip = false
  }

  //····················································································································

  final var mSchematicVerticalFlip : Bool {
    get { return self.mSchematicVerticalFlip_property.propval }
    set { self.mSchematicVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicZoom
  //····················································································································

  final let mSchematicZoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSchematicZoom_toDefaultValue () {
    self.mSchematicZoom = 0
  }

  //····················································································································

  final var mSchematicZoom : Int {
    get { return self.mSchematicZoom_property.propval }
    set { self.mSchematicZoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicGridStyle
  //····················································································································

  final let mSchematicGridStyle_property : EBStoredProperty_GridStyle

  //····················································································································

  final func reset_mSchematicGridStyle_toDefaultValue () {
    self.mSchematicGridStyle = GridStyle.line
  }

  //····················································································································

  final var mSchematicGridStyle : GridStyle {
    get { return self.mSchematicGridStyle_property.propval }
    set { self.mSchematicGridStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicGridDisplayFactor
  //····················································································································

  final let mSchematicGridDisplayFactor_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSchematicGridDisplayFactor_toDefaultValue () {
    self.mSchematicGridDisplayFactor = 4
  }

  //····················································································································

  final var mSchematicGridDisplayFactor : Int {
    get { return self.mSchematicGridDisplayFactor_property.propval }
    set { self.mSchematicGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicCustomWidth
  //····················································································································

  final let mSchematicCustomWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSchematicCustomWidth_toDefaultValue () {
    self.mSchematicCustomWidth = 27000000
  }

  //····················································································································

  final var mSchematicCustomWidth : Int {
    get { return self.mSchematicCustomWidth_property.propval }
    set { self.mSchematicCustomWidth_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicCustomWidthUnit
  //····················································································································

  final let mSchematicCustomWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSchematicCustomWidthUnit_toDefaultValue () {
    self.mSchematicCustomWidthUnit = 90000
  }

  //····················································································································

  final var mSchematicCustomWidthUnit : Int {
    get { return self.mSchematicCustomWidthUnit_property.propval }
    set { self.mSchematicCustomWidthUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicCustomHeight
  //····················································································································

  final let mSchematicCustomHeight_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSchematicCustomHeight_toDefaultValue () {
    self.mSchematicCustomHeight = 27000000
  }

  //····················································································································

  final var mSchematicCustomHeight : Int {
    get { return self.mSchematicCustomHeight_property.propval }
    set { self.mSchematicCustomHeight_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicCustomHeightUnit
  //····················································································································

  final let mSchematicCustomHeightUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mSchematicCustomHeightUnit_toDefaultValue () {
    self.mSchematicCustomHeightUnit = 90000
  }

  //····················································································································

  final var mSchematicCustomHeightUnit : Int {
    get { return self.mSchematicCustomHeightUnit_property.propval }
    set { self.mSchematicCustomHeightUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: drawErrorBackgroundForBoard
  //····················································································································

  final let drawErrorBackgroundForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_drawErrorBackgroundForBoard_toDefaultValue () {
    self.drawErrorBackgroundForBoard = true
  }

  //····················································································································

  final var drawErrorBackgroundForBoard : Bool {
    get { return self.drawErrorBackgroundForBoard_property.propval }
    set { self.drawErrorBackgroundForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayFrontRestrictRectangles
  //····················································································································

  final let displayFrontRestrictRectangles_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayFrontRestrictRectangles_toDefaultValue () {
    self.displayFrontRestrictRectangles = true
  }

  //····················································································································

  final var displayFrontRestrictRectangles : Bool {
    get { return self.displayFrontRestrictRectangles_property.propval }
    set { self.displayFrontRestrictRectangles_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayBackRestrictRectangles
  //····················································································································

  final let displayBackRestrictRectangles_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayBackRestrictRectangles_toDefaultValue () {
    self.displayBackRestrictRectangles = true
  }

  //····················································································································

  final var displayBackRestrictRectangles : Bool {
    get { return self.displayBackRestrictRectangles_property.propval }
    set { self.displayBackRestrictRectangles_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayInner1RestrictRectangles
  //····················································································································

  final let displayInner1RestrictRectangles_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayInner1RestrictRectangles_toDefaultValue () {
    self.displayInner1RestrictRectangles = true
  }

  //····················································································································

  final var displayInner1RestrictRectangles : Bool {
    get { return self.displayInner1RestrictRectangles_property.propval }
    set { self.displayInner1RestrictRectangles_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayInner2RestrictRectangles
  //····················································································································

  final let displayInner2RestrictRectangles_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayInner2RestrictRectangles_toDefaultValue () {
    self.displayInner2RestrictRectangles = true
  }

  //····················································································································

  final var displayInner2RestrictRectangles : Bool {
    get { return self.displayInner2RestrictRectangles_property.propval }
    set { self.displayInner2RestrictRectangles_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayInner3RestrictRectangles
  //····················································································································

  final let displayInner3RestrictRectangles_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayInner3RestrictRectangles_toDefaultValue () {
    self.displayInner3RestrictRectangles = true
  }

  //····················································································································

  final var displayInner3RestrictRectangles : Bool {
    get { return self.displayInner3RestrictRectangles_property.propval }
    set { self.displayInner3RestrictRectangles_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayInner4RestrictRectangles
  //····················································································································

  final let displayInner4RestrictRectangles_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayInner4RestrictRectangles_toDefaultValue () {
    self.displayInner4RestrictRectangles = true
  }

  //····················································································································

  final var displayInner4RestrictRectangles : Bool {
    get { return self.displayInner4RestrictRectangles_property.propval }
    set { self.displayInner4RestrictRectangles_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayFrontLegendForBoard
  //····················································································································

  final let displayFrontLegendForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayFrontLegendForBoard_toDefaultValue () {
    self.displayFrontLegendForBoard = true
  }

  //····················································································································

  final var displayFrontLegendForBoard : Bool {
    get { return self.displayFrontLegendForBoard_property.propval }
    set { self.displayFrontLegendForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayFrontLayoutForBoard
  //····················································································································

  final let displayFrontLayoutForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayFrontLayoutForBoard_toDefaultValue () {
    self.displayFrontLayoutForBoard = true
  }

  //····················································································································

  final var displayFrontLayoutForBoard : Bool {
    get { return self.displayFrontLayoutForBoard_property.propval }
    set { self.displayFrontLayoutForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayBackLayoutForBoard
  //····················································································································

  final let displayBackLayoutForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayBackLayoutForBoard_toDefaultValue () {
    self.displayBackLayoutForBoard = true
  }

  //····················································································································

  final var displayBackLayoutForBoard : Bool {
    get { return self.displayBackLayoutForBoard_property.propval }
    set { self.displayBackLayoutForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayInner1LayoutForBoard
  //····················································································································

  final let displayInner1LayoutForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayInner1LayoutForBoard_toDefaultValue () {
    self.displayInner1LayoutForBoard = true
  }

  //····················································································································

  final var displayInner1LayoutForBoard : Bool {
    get { return self.displayInner1LayoutForBoard_property.propval }
    set { self.displayInner1LayoutForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayInner2LayoutForBoard
  //····················································································································

  final let displayInner2LayoutForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayInner2LayoutForBoard_toDefaultValue () {
    self.displayInner2LayoutForBoard = true
  }

  //····················································································································

  final var displayInner2LayoutForBoard : Bool {
    get { return self.displayInner2LayoutForBoard_property.propval }
    set { self.displayInner2LayoutForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayInner3LayoutForBoard
  //····················································································································

  final let displayInner3LayoutForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayInner3LayoutForBoard_toDefaultValue () {
    self.displayInner3LayoutForBoard = true
  }

  //····················································································································

  final var displayInner3LayoutForBoard : Bool {
    get { return self.displayInner3LayoutForBoard_property.propval }
    set { self.displayInner3LayoutForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayInner4LayoutForBoard
  //····················································································································

  final let displayInner4LayoutForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayInner4LayoutForBoard_toDefaultValue () {
    self.displayInner4LayoutForBoard = true
  }

  //····················································································································

  final var displayInner4LayoutForBoard : Bool {
    get { return self.displayInner4LayoutForBoard_property.propval }
    set { self.displayInner4LayoutForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayBackLegendForBoard
  //····················································································································

  final let displayBackLegendForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayBackLegendForBoard_toDefaultValue () {
    self.displayBackLegendForBoard = true
  }

  //····················································································································

  final var displayBackLegendForBoard : Bool {
    get { return self.displayBackLegendForBoard_property.propval }
    set { self.displayBackLegendForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayFrontPadsForBoard
  //····················································································································

  final let displayFrontPadsForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayFrontPadsForBoard_toDefaultValue () {
    self.displayFrontPadsForBoard = true
  }

  //····················································································································

  final var displayFrontPadsForBoard : Bool {
    get { return self.displayFrontPadsForBoard_property.propval }
    set { self.displayFrontPadsForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayBackPadsForBoard
  //····················································································································

  final let displayBackPadsForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayBackPadsForBoard_toDefaultValue () {
    self.displayBackPadsForBoard = true
  }

  //····················································································································

  final var displayBackPadsForBoard : Bool {
    get { return self.displayBackPadsForBoard_property.propval }
    set { self.displayBackPadsForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: displayPadNumbersForBoard
  //····················································································································

  final let displayPadNumbersForBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_displayPadNumbersForBoard_toDefaultValue () {
    self.displayPadNumbersForBoard = true
  }

  //····················································································································

  final var displayPadNumbersForBoard : Bool {
    get { return self.displayPadNumbersForBoard_property.propval }
    set { self.displayPadNumbersForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: packageDrawingWidthMultpliedByTenForBoard
  //····················································································································

  final let packageDrawingWidthMultpliedByTenForBoard_property : EBStoredProperty_Int

  //····················································································································

  final func reset_packageDrawingWidthMultpliedByTenForBoard_toDefaultValue () {
    self.packageDrawingWidthMultpliedByTenForBoard = 5
  }

  //····················································································································

  final var packageDrawingWidthMultpliedByTenForBoard : Int {
    get { return self.packageDrawingWidthMultpliedByTenForBoard_property.propval }
    set { self.packageDrawingWidthMultpliedByTenForBoard_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mFonts
  //····················································································································

  final let mFonts_property = StoredArrayOf_FontInProject (usedForSignature: false, key: "mFonts")

  //····················································································································

  //····················································································································

  final var mFonts : EBReferenceArray <FontInProject> {
    get { return self.mFonts_property.propval }
    set { self.mFonts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mDevices
  //····················································································································

  final let mDevices_property = StoredArrayOf_DeviceInProject (usedForSignature: false, key: "mDevices")

  //····················································································································

  //····················································································································

  final var mDevices : EBReferenceArray <DeviceInProject> {
    get { return self.mDevices_property.propval }
    set { self.mDevices_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mNetClasses
  //····················································································································

  final let mNetClasses_property = StoredArrayOf_NetClassInProject (usedForSignature: false, key: "mNetClasses")

  //····················································································································

  //····················································································································

  final var mNetClasses : EBReferenceArray <NetClassInProject> {
    get { return self.mNetClasses_property.propval }
    set { self.mNetClasses_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicSheetOrientation
  //····················································································································

  final let mSchematicSheetOrientation_property : EBStoredProperty_SchematicSheetOrientation

  //····················································································································

  final func reset_mSchematicSheetOrientation_toDefaultValue () {
    self.mSchematicSheetOrientation = SchematicSheetOrientation.a4Horizontal
  }

  //····················································································································

  final var mSchematicSheetOrientation : SchematicSheetOrientation {
    get { return self.mSchematicSheetOrientation_property.propval }
    set { self.mSchematicSheetOrientation_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mBorderCurves
  //····················································································································

  final let mBorderCurves_property = StoredArrayOf_BorderCurve (usedForSignature: false, key: "mBorderCurves")

  //····················································································································

  //····················································································································

  final var mBorderCurves : EBReferenceArray <BorderCurve> {
    get { return self.mBorderCurves_property.propval }
    set { self.mBorderCurves_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mBoardObjects
  //····················································································································

  final let mBoardObjects_property = StoredArrayOf_BoardObject (usedForSignature: false, key: "mBoardObjects")

  //····················································································································

  //····················································································································

  final var mBoardObjects : EBReferenceArray <BoardObject> {
    get { return self.mBoardObjects_property.propval }
    set { self.mBoardObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRastnetDisplay
  //····················································································································

  final let mRastnetDisplay_property : EBStoredProperty_RastnetDisplay

  //····················································································································

  final func reset_mRastnetDisplay_toDefaultValue () {
    self.mRastnetDisplay = RastnetDisplay.allNets
  }

  //····················································································································

  final var mRastnetDisplay : RastnetDisplay {
    get { return self.mRastnetDisplay_property.propval }
    set { self.mRastnetDisplay_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRastnetDisplayedNetName
  //····················································································································

  final let mRastnetDisplayedNetName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mRastnetDisplayedNetName_toDefaultValue () {
    self.mRastnetDisplayedNetName = ""
  }

  //····················································································································

  final var mRastnetDisplayedNetName : String {
    get { return self.mRastnetDisplayedNetName_property.propval }
    set { self.mRastnetDisplayedNetName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRastnetDisplayedComponentName
  //····················································································································

  final let mRastnetDisplayedComponentName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mRastnetDisplayedComponentName_toDefaultValue () {
    self.mRastnetDisplayedComponentName = ""
  }

  //····················································································································

  final var mRastnetDisplayedComponentName : String {
    get { return self.mRastnetDisplayedComponentName_property.propval }
    set { self.mRastnetDisplayedComponentName_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mComponents
  //····················································································································

  final let mComponents_property = StoredArrayOf_ComponentInProject (usedForSignature: false, key: "mComponents")

  //····················································································································

  //····················································································································

  final var mComponents : EBReferenceArray <ComponentInProject> {
    get { return self.mComponents_property.propval }
    set { self.mComponents_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic proxy property: minPPTPTTTWdisplayUnit
  //····················································································································

  final let minPPTPTTTWdisplayUnit_property = EBComputedProperty_Int ()

  //····················································································································

  var minPPTPTTTWdisplayUnit : Int? {
    get {
      return self.minPPTPTTTWdisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minPPTPTTTWdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: minPPTPTTTW
  //····················································································································

  final let minPPTPTTTW_property = EBComputedProperty_Int ()

  //····················································································································

  var minPPTPTTTW : Int? {
    get {
      return self.minPPTPTTTW_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minPPTPTTTW_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: minValueForOARdisplayUnit
  //····················································································································

  final let minValueForOARdisplayUnit_property = EBComputedProperty_Int ()

  //····················································································································

  var minValueForOARdisplayUnit : Int? {
    get {
      return self.minValueForOARdisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForOARdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: minValueForOARinEBUnit
  //····················································································································

  final let minValueForOARinEBUnit_property = EBComputedProperty_Int ()

  //····················································································································

  var minValueForOARinEBUnit : Int? {
    get {
      return self.minValueForOARinEBUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForOARinEBUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: minValueForPHDdisplayUnit
  //····················································································································

  final let minValueForPHDdisplayUnit_property = EBComputedProperty_Int ()

  //····················································································································

  var minValueForPHDdisplayUnit : Int? {
    get {
      return self.minValueForPHDdisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForPHDdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: minValueForPHDinEBUnit
  //····················································································································

  final let minValueForPHDinEBUnit_property = EBComputedProperty_Int ()

  //····················································································································

  var minValueForPHDinEBUnit : Int? {
    get {
      return self.minValueForPHDinEBUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForPHDinEBUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: minValueForBoardLimitWidth
  //····················································································································

  final let minValueForBoardLimitWidth_property = EBComputedProperty_Int ()

  //····················································································································

  var minValueForBoardLimitWidth : Int? {
    get {
      return self.minValueForBoardLimitWidth_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForBoardLimitWidth_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
  //····················································································································

  final let minValueForBoardLimitWidthDisplayUnit_property = EBComputedProperty_Int ()

  //····················································································································

  var minValueForBoardLimitWidthDisplayUnit : Int? {
    get {
      return self.minValueForBoardLimitWidthDisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForBoardLimitWidthDisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: artworkComments
  //····················································································································

  final let artworkComments_property = EBComputedProperty_String ()

  //····················································································································

  var artworkComments : String? {
    get {
      return self.artworkComments_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.artworkComments_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: artworkLayerConfiguration
  //····················································································································

  final let artworkLayerConfiguration_property = EBComputedProperty_LayerConfiguration ()

  //····················································································································

  var artworkLayerConfiguration : LayerConfiguration? {
    get {
      return self.artworkLayerConfiguration_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.artworkLayerConfiguration_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: artworkTitle
  //····················································································································

  final let artworkTitle_property = EBComputedProperty_String ()

  //····················································································································

  var artworkTitle : String? {
    get {
      return self.artworkTitle_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.artworkTitle_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   Atomic proxy property: selectedSheetTitle
  //····················································································································

  final let selectedSheetTitle_property = EBComputedProperty_String ()

  //····················································································································

  var selectedSheetTitle : String? {
    get {
      return self.selectedSheetTitle_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.selectedSheetTitle_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   ToMany proxy: selectedSheetObjects
  //····················································································································

  var selectedSheetObjects_modelDidChangeController : EBObservablePropertyController? = nil
  // var selectedSheetObjects_boundObjectDidChangeController : EBObservablePropertyController? = nil
  final let selectedSheetObjects_property = ProxyArrayOf_SchematicObject ()

  //····················································································································

  var selectedSheetObjects : EBReferenceArray <SchematicObject> {
    get {
      switch self.selectedSheetObjects_property.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }
    set {
      self.selectedSheetObjects_property.setProp (newValue)
    }
  }

  //····················································································································
  //   Atomic proxy property: drillDataFileExtension
  //····················································································································

  final let drillDataFileExtension_property = EBComputedProperty_String ()

  //····················································································································

  var drillDataFileExtension : String? {
    get {
      return self.drillDataFileExtension_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.drillDataFileExtension_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································
  //   ToMany proxy: fileGenerationParameterArray
  //····················································································································

  var fileGenerationParameterArray_modelDidChangeController : EBObservablePropertyController? = nil
  // var fileGenerationParameterArray_boundObjectDidChangeController : EBObservablePropertyController? = nil
  final let fileGenerationParameterArray_property = ProxyArrayOf_ArtworkFileGenerationParameters ()

  //····················································································································

  var fileGenerationParameterArray : EBReferenceArray <ArtworkFileGenerationParameters> {
    get {
      switch self.fileGenerationParameterArray_property.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }
    set {
      self.fileGenerationParameterArray_property.setProp (newValue)
    }
  }

  //····················································································································
  //   To one property: mArtwork
  //····················································································································

  final let mArtwork_property = StoredObject_ArtworkRoot (usedForSignature: false, strongRef: true, key: "mArtwork")

  //····················································································································

  final var mArtwork : ArtworkRoot? {
    get {
      return self.mArtwork_property.propval
    }
    set {
      if self.mArtwork_property.propval !== newValue {
        if self.mArtwork_property.propval != nil {
          self.mArtwork_property.setProp (nil)
        }
        if newValue != nil {
          self.mArtwork_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mArtwork_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: hasInnerElements
  //····················································································································

  final let hasInnerElements_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasInnerElements : Bool? {
    return self.hasInnerElements_property.optionalValue
  }

  //····················································································································
  //   Transient property: layerConfigurationString
  //····················································································································

  final let layerConfigurationString_property = EBTransientProperty_String ()

  //····················································································································

  final var layerConfigurationString : String? {
    return self.layerConfigurationString_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardGridStepMultipliedByDisplayFactor
  //····················································································································

  final let boardGridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  //····················································································································

  final var boardGridStepMultipliedByDisplayFactor : Int? {
    return self.boardGridStepMultipliedByDisplayFactor_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardLimitsGridStepMultipliedByDisplayFactor
  //····················································································································

  final let boardLimitsGridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  //····················································································································

  final var boardLimitsGridStepMultipliedByDisplayFactor : Int? {
    return self.boardLimitsGridStepMultipliedByDisplayFactor_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardShapeIsRectangular
  //····················································································································

  final let boardShapeIsRectangular_property = EBTransientProperty_Bool ()

  //····················································································································

  final var boardShapeIsRectangular : Bool? {
    return self.boardShapeIsRectangular_property.optionalValue
  }

  //····················································································································
  //   To one property: mSelectedSheet
  //····················································································································

  final let mSelectedSheet_property = StoredObject_SheetInProject (usedForSignature: false, strongRef: true, key: "mSelectedSheet")

  //····················································································································

  final var mSelectedSheet : SheetInProject? {
    get {
      return self.mSelectedSheet_property.propval
    }
    set {
      if self.mSelectedSheet_property.propval !== newValue {
        if self.mSelectedSheet_property.propval != nil {
          self.mSelectedSheet_property.setProp (nil)
        }
        if newValue != nil {
          self.mSelectedSheet_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mSelectedSheet_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: selectedSheetIssues
  //····················································································································

  final let selectedSheetIssues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var selectedSheetIssues : CanariIssueArray? {
    return self.selectedSheetIssues_property.optionalValue
  }

  //····················································································································
  //   Transient property: schematicOverDisplay
  //····················································································································

  final let schematicOverDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var schematicOverDisplay : EBShape? {
    return self.schematicOverDisplay_property.optionalValue
  }

  //····················································································································
  //   Transient property: connexionWarningString
  //····················································································································

  final let connexionWarningString_property = EBTransientProperty_String ()

  //····················································································································

  final var connexionWarningString : String? {
    return self.connexionWarningString_property.optionalValue
  }

  //····················································································································
  //   Transient property: connexionErrorString
  //····················································································································

  final let connexionErrorString_property = EBTransientProperty_String ()

  //····················································································································

  final var connexionErrorString : String? {
    return self.connexionErrorString_property.optionalValue
  }

  //····················································································································
  //   Transient property: schematicErrorCount
  //····················································································································

  final let schematicErrorCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var schematicErrorCount : Int? {
    return self.schematicErrorCount_property.optionalValue
  }

  //····················································································································
  //   Transient property: sheetIndexes
  //····················································································································

  final let sheetIndexes_property = EBTransientProperty_IntArray ()

  //····················································································································

  final var sheetIndexes : IntArray? {
    return self.sheetIndexes_property.optionalValue
  }

  //····················································································································
  //   Transient property: netsDescription
  //····················································································································

  final let netsDescription_property = EBTransientProperty_NetInfoArray ()

  //····················································································································

  final var netsDescription : NetInfoArray? {
    return self.netsDescription_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardIssues
  //····················································································································

  final let boardIssues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var boardIssues : CanariIssueArray? {
    return self.boardIssues_property.optionalValue
  }

  //····················································································································
  //   Transient property: hasSixLayers
  //····················································································································

  final let hasSixLayers_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasSixLayers : Bool? {
    return self.hasSixLayers_property.optionalValue
  }

  //····················································································································
  //   Transient property: signatureForERCChecking
  //····················································································································

  final let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  //····················································································································

  final var signatureForERCChecking : UInt32? {
    return self.signatureForERCChecking_property.optionalValue
  }

  //····················································································································
  //   Transient property: ercStatusImage
  //····················································································································

  final let ercStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var ercStatusImage : NSImage? {
    return self.ercStatusImage_property.optionalValue
  }

  //····················································································································
  //   Transient property: ercStatusMessage
  //····················································································································

  final let ercStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var ercStatusMessage : String? {
    return self.ercStatusMessage_property.optionalValue
  }

  //····················································································································
  //   Transient property: viaCountString
  //····················································································································

  final let viaCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var viaCountString : String? {
    return self.viaCountString_property.optionalValue
  }

  //····················································································································
  //   Transient property: topSideTrackCountString
  //····················································································································

  final let topSideTrackCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var topSideTrackCountString : String? {
    return self.topSideTrackCountString_property.optionalValue
  }

  //····················································································································
  //   Transient property: backSideTrackCountString
  //····················································································································

  final let backSideTrackCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var backSideTrackCountString : String? {
    return self.backSideTrackCountString_property.optionalValue
  }

  //····················································································································
  //   Transient property: inner1LayerTrackCountString
  //····················································································································

  final let inner1LayerTrackCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var inner1LayerTrackCountString : String? {
    return self.inner1LayerTrackCountString_property.optionalValue
  }

  //····················································································································
  //   Transient property: inner2LayerTrackCountString
  //····················································································································

  final let inner2LayerTrackCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var inner2LayerTrackCountString : String? {
    return self.inner2LayerTrackCountString_property.optionalValue
  }

  //····················································································································
  //   Transient property: inner3LayerTrackCountString
  //····················································································································

  final let inner3LayerTrackCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var inner3LayerTrackCountString : String? {
    return self.inner3LayerTrackCountString_property.optionalValue
  }

  //····················································································································
  //   Transient property: inner4LayerTrackCountString
  //····················································································································

  final let inner4LayerTrackCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var inner4LayerTrackCountString : String? {
    return self.inner4LayerTrackCountString_property.optionalValue
  }

  //····················································································································
  //   Transient property: trackCountString
  //····················································································································

  final let trackCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var trackCountString : String? {
    return self.trackCountString_property.optionalValue
  }

  //····················································································································
  //   Transient property: trackLengthString
  //····················································································································

  final let trackLengthString_property = EBTransientProperty_String ()

  //····················································································································

  final var trackLengthString : String? {
    return self.trackLengthString_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardStatusErrorCount
  //····················································································································

  final let boardStatusErrorCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var boardStatusErrorCount : Int? {
    return self.boardStatusErrorCount_property.optionalValue
  }

  //····················································································································
  //   Transient property: interiorBoundBox
  //····················································································································

  final let interiorBoundBox_property = EBTransientProperty_CanariRect ()

  //····················································································································

  final var interiorBoundBox : CanariRect? {
    return self.interiorBoundBox_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardBoundBox
  //····················································································································

  final let boardBoundBox_property = EBTransientProperty_CanariRect ()

  //····················································································································

  final var boardBoundBox : CanariRect? {
    return self.boardBoundBox_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardInteriorTop
  //····················································································································

  final let boardInteriorTop_property = EBTransientProperty_String ()

  //····················································································································

  final var boardInteriorTop : String? {
    return self.boardInteriorTop_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardInteriorBottom
  //····················································································································

  final let boardInteriorBottom_property = EBTransientProperty_String ()

  //····················································································································

  final var boardInteriorBottom : String? {
    return self.boardInteriorBottom_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardInteriorLeft
  //····················································································································

  final let boardInteriorLeft_property = EBTransientProperty_String ()

  //····················································································································

  final var boardInteriorLeft : String? {
    return self.boardInteriorLeft_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardInteriorRight
  //····················································································································

  final let boardInteriorRight_property = EBTransientProperty_String ()

  //····················································································································

  final var boardInteriorRight : String? {
    return self.boardInteriorRight_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardLimitBorderTop
  //····················································································································

  final let boardLimitBorderTop_property = EBTransientProperty_String ()

  //····················································································································

  final var boardLimitBorderTop : String? {
    return self.boardLimitBorderTop_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardLimitBorderBottom
  //····················································································································

  final let boardLimitBorderBottom_property = EBTransientProperty_String ()

  //····················································································································

  final var boardLimitBorderBottom : String? {
    return self.boardLimitBorderBottom_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardLimitBorderLeft
  //····················································································································

  final let boardLimitBorderLeft_property = EBTransientProperty_String ()

  //····················································································································

  final var boardLimitBorderLeft : String? {
    return self.boardLimitBorderLeft_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardLimitBorderRight
  //····················································································································

  final let boardLimitBorderRight_property = EBTransientProperty_String ()

  //····················································································································

  final var boardLimitBorderRight : String? {
    return self.boardLimitBorderRight_property.optionalValue
  }

  //····················································································································
  //   Transient property: borderElementCountString
  //····················································································································

  final let borderElementCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var borderElementCountString : String? {
    return self.borderElementCountString_property.optionalValue
  }

  //····················································································································
  //   Transient property: borderOutlineBackground
  //····················································································································

  final let borderOutlineBackground_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var borderOutlineBackground : EBShape? {
    return self.borderOutlineBackground_property.optionalValue
  }

  //····················································································································
  //   Transient property: borderViewBackground
  //····················································································································

  final let borderViewBackground_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var borderViewBackground : EBShape? {
    return self.borderViewBackground_property.optionalValue
  }

  //····················································································································
  //   Transient property: fontNameArray
  //····················································································································

  final let fontNameArray_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var fontNameArray : StringArray? {
    return self.fontNameArray_property.optionalValue
  }

  //····················································································································
  //   Transient property: deviceNames
  //····················································································································

  final let deviceNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var deviceNames : StringArray? {
    return self.deviceNames_property.optionalValue
  }

  //····················································································································
  //   Transient property: allClassNames
  //····················································································································

  final let allClassNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var allClassNames : StringArray? {
    return self.allClassNames_property.optionalValue
  }

  //····················································································································
  //   Transient property: sheetGeometry
  //····················································································································

  final let sheetGeometry_property = EBTransientProperty_SchematicSheetGeometry ()

  //····················································································································

  final var sheetGeometry : SchematicSheetGeometry? {
    return self.sheetGeometry_property.optionalValue
  }

  //····················································································································
  //   Transient property: schematicBackgroundDisplay
  //····················································································································

  final let schematicBackgroundDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var schematicBackgroundDisplay : EBShape? {
    return self.schematicBackgroundDisplay_property.optionalValue
  }

  //····················································································································
  //   Transient property: netWarningCount
  //····················································································································

  final let netWarningCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var netWarningCount : Int? {
    return self.netWarningCount_property.optionalValue
  }

  //····················································································································
  //   Transient property: netNamesArray
  //····················································································································

  final let netNamesArray_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var netNamesArray : StringArray? {
    return self.netNamesArray_property.optionalValue
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  final let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  final var unplacedSymbols : StringTagArray? {
    return self.unplacedSymbols_property.optionalValue
  }

  //····················································································································
  //   Transient property: unplacedPackages
  //····················································································································

  final let unplacedPackages_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  final var unplacedPackages : StringTagArray? {
    return self.unplacedPackages_property.optionalValue
  }

  //····················································································································
  //   Transient property: componentsPlacedInBoard
  //····················································································································

  final let componentsPlacedInBoard_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  final var componentsPlacedInBoard : StringTagArray? {
    return self.componentsPlacedInBoard_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardStatusMessage
  //····················································································································

  final let boardStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var boardStatusMessage : String? {
    return self.boardStatusMessage_property.optionalValue
  }

  //····················································································································
  //   Transient property: boardStatusWarningCount
  //····················································································································

  final let boardStatusWarningCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var boardStatusWarningCount : Int? {
    return self.boardStatusWarningCount_property.optionalValue
  }

  //····················································································································
  //   Transient property: placedComponentNameArray
  //····················································································································

  final let placedComponentNameArray_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var placedComponentNameArray : StringArray? {
    return self.placedComponentNameArray_property.optionalValue
  }

  //····················································································································
  //   Transient property: schematicHasErrorOrWarning
  //····················································································································

  final let schematicHasErrorOrWarning_property = EBTransientProperty_Bool ()

  //····················································································································

  final var schematicHasErrorOrWarning : Bool? {
    return self.schematicHasErrorOrWarning_property.optionalValue
  }

  //····················································································································
  //   Transient property: schematicStatusMessage
  //····················································································································

  final let schematicStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var schematicStatusMessage : String? {
    return self.schematicStatusMessage_property.optionalValue
  }

  //····················································································································
  //   Transient property: schematicWarningCount
  //····················································································································

  final let schematicWarningCount_property = EBTransientProperty_Int ()

  //····················································································································

  final var schematicWarningCount : Int? {
    return self.schematicWarningCount_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mArtworkName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mArtworkName")
    self.mArtworkVersion_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mArtworkVersion")
    self.mPDFBoardBackgroundColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.lightGray, undoManager: inUndoManager, key: "mPDFBoardBackgroundColor")
    self.mCheckClearanceBetweenPadsOfSameNet_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mCheckClearanceBetweenPadsOfSameNet")
    self.mLastERCCheckingIsSuccess_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mLastERCCheckingIsSuccess")
    self.mLastERCCheckingSignature_property = EBStoredProperty_UInt32 (defaultValue: 1, undoManager: inUndoManager, key: "mLastERCCheckingSignature")
    self.mLayerConfiguration_property = EBStoredProperty_LayerConfiguration (defaultValue: LayerConfiguration.twoLayers, undoManager: inUndoManager, key: "mLayerConfiguration")
    self.mBoardSideForNewTrack_property = EBStoredProperty_TrackSide (defaultValue: TrackSide.front, undoManager: inUndoManager, key: "mBoardSideForNewTrack")
    self.mDirectionForNewTrack_property = EBStoredProperty_TrackCreationDirection (defaultValue: TrackCreationDirection.anyAngle, undoManager: inUndoManager, key: "mDirectionForNewTrack")
    self.mBoardLayerForNewText_property = EBStoredProperty_BoardTextLayer (defaultValue: BoardTextLayer.legendFront, undoManager: inUndoManager, key: "mBoardLayerForNewText")
    self.mBoardLayerForNewLine_property = EBStoredProperty_BoardLineLayer (defaultValue: BoardLineLayer.legendFront, undoManager: inUndoManager, key: "mBoardLayerForNewLine")
    self.mBoardSideForNewRestrictRectangle_property = EBStoredProperty_RestrictRectangleLayer (defaultValue: RestrictRectangleLayer.frontSide, undoManager: inUndoManager, key: "mBoardSideForNewRestrictRectangle")
    self.mNewRestrictRectangleLayers_property = EBStoredProperty_Int (defaultValue: 1, undoManager: inUndoManager, key: "mNewRestrictRectangleLayers")
    self.mAutoRouterPreferredDirections_property = EBStoredProperty_AutorouterPreferredDirections (defaultValue: AutorouterPreferredDirections.vFrontHback, undoManager: inUndoManager, key: "mAutoRouterPreferredDirections")
    self.mAutorouterSnapAngle_property = EBStoredProperty_AutorouterSnapAngle (defaultValue: AutorouterSnapAngle.octolinear, undoManager: inUndoManager, key: "mAutorouterSnapAngle")
    self.mRouteDirection_property = EBStoredProperty_RouteDirection (defaultValue: RouteDirection.from, undoManager: inUndoManager, key: "mRouteDirection")
    self.mRouteOrigin_property = EBStoredProperty_RouteOrigin (defaultValue: RouteOrigin.center, undoManager: inUndoManager, key: "mRouteOrigin")
    self.mAutorouterInterfaceMode_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mAutorouterInterfaceMode")
    self.mExportExistingTracksAndVias_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mExportExistingTracksAndVias")
    self.mExportExistingTracksAndVias2_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mExportExistingTracksAndVias2")
    self.mTrackLengthUnit_property = EBStoredProperty_Int (defaultValue: 90000000, undoManager: inUndoManager, key: "mTrackLengthUnit")
    self.mLayoutClearance_property = EBStoredProperty_Int (defaultValue: 22660, undoManager: inUndoManager, key: "mLayoutClearance")
    self.mLayoutClearanceUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mLayoutClearanceUnit")
    self.mBoardSelectedInspector_property = EBStoredProperty_Int (defaultValue: 1, undoManager: inUndoManager, key: "mBoardSelectedInspector")
    self.mBoardHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mBoardHorizontalFlip")
    self.mBoardVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mBoardVerticalFlip")
    self.mBoardGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: inUndoManager, key: "mBoardGridStyle")
    self.mBoardGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4, undoManager: inUndoManager, key: "mBoardGridDisplayFactor")
    self.mBoardZoom_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mBoardZoom")
    self.mBoardGridStep_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mBoardGridStep")
    self.mBoardGridStepUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mBoardGridStepUnit")
    self.mErrorOrWarningIssueSize_property = EBStoredProperty_Double (defaultValue: 6, undoManager: inUndoManager, key: "mErrorOrWarningIssueSize")
    self.mControlKeyHiliteDiameter_property = EBStoredProperty_Double (defaultValue: 100, undoManager: inUndoManager, key: "mControlKeyHiliteDiameter")
    self.mDSNFileProposedName_property = EBStoredProperty_String (defaultValue: "design.dsn", undoManager: inUndoManager, key: "mDSNFileProposedName")
    self.mBoardLimitsWidth_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsWidth")
    self.mBoardLimitsWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsWidthUnit")
    self.mBoardClearance_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardClearance")
    self.mBoardClearanceUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardClearanceUnit")
    self.mBoardLimitsSelectedInspector_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mBoardLimitsSelectedInspector")
    self.mBoardLimitsHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mBoardLimitsHorizontalFlip")
    self.mBoardLimitsVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mBoardLimitsVerticalFlip")
    self.mBoardLimitsGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: inUndoManager, key: "mBoardLimitsGridStyle")
    self.mBoardLimitsGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 5, undoManager: inUndoManager, key: "mBoardLimitsGridDisplayFactor")
    self.mBoardLimitsZoom_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mBoardLimitsZoom")
    self.mBoardLimitsGridStep_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsGridStep")
    self.mBoardLimitsGridStepUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsGridStepUnit")
    self.mBoardLimitsBoundingBoxUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsBoundingBoxUnit")
    self.mBoardPointsBoundingBoxUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardPointsBoundingBoxUnit")
    self.mBoardSelectedCurveDisplayUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardSelectedCurveDisplayUnit")
    self.mBoardLimitControlPointsDisplayUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitControlPointsDisplayUnit")
    self.mBoardShape_property = EBStoredProperty_BoardShape (defaultValue: BoardShape.rectangular, undoManager: inUndoManager, key: "mBoardShape")
    self.mContentOpacityInBoardOutline_property = EBStoredProperty_Double (defaultValue: 0.5, undoManager: inUndoManager, key: "mContentOpacityInBoardOutline")
    self.mRectangularBoardWidth_property = EBStoredProperty_Int (defaultValue: 9000000, undoManager: inUndoManager, key: "mRectangularBoardWidth")
    self.mRectangularBoardWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mRectangularBoardWidthUnit")
    self.mRectangularBoardHeight_property = EBStoredProperty_Int (defaultValue: 9000000, undoManager: inUndoManager, key: "mRectangularBoardHeight")
    self.mRectangularBoardHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mRectangularBoardHeightUnit")
    self.mDefaultNetClassName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mDefaultNetClassName")
    self.mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mSelectedPageIndex")
    self.mSelectedSchematicInspector_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mSelectedSchematicInspector")
    self.mSchematicTitle_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSchematicTitle")
    self.mSchematicVersion_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSchematicVersion")
    self.mSchematicDate_property = EBStoredProperty_Date (defaultValue: Date (), undoManager: inUndoManager, key: "mSchematicDate")
    self.mSchematicHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mSchematicHorizontalFlip")
    self.mSchematicVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mSchematicVerticalFlip")
    self.mSchematicZoom_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mSchematicZoom")
    self.mSchematicGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: inUndoManager, key: "mSchematicGridStyle")
    self.mSchematicGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4, undoManager: inUndoManager, key: "mSchematicGridDisplayFactor")
    self.mSchematicCustomWidth_property = EBStoredProperty_Int (defaultValue: 27000000, undoManager: inUndoManager, key: "mSchematicCustomWidth")
    self.mSchematicCustomWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mSchematicCustomWidthUnit")
    self.mSchematicCustomHeight_property = EBStoredProperty_Int (defaultValue: 27000000, undoManager: inUndoManager, key: "mSchematicCustomHeight")
    self.mSchematicCustomHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mSchematicCustomHeightUnit")
    self.drawErrorBackgroundForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "drawErrorBackgroundForBoard")
    self.displayFrontRestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayFrontRestrictRectangles")
    self.displayBackRestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayBackRestrictRectangles")
    self.displayInner1RestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner1RestrictRectangles")
    self.displayInner2RestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner2RestrictRectangles")
    self.displayInner3RestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner3RestrictRectangles")
    self.displayInner4RestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner4RestrictRectangles")
    self.displayFrontLegendForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayFrontLegendForBoard")
    self.displayFrontLayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayFrontLayoutForBoard")
    self.displayBackLayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayBackLayoutForBoard")
    self.displayInner1LayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner1LayoutForBoard")
    self.displayInner2LayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner2LayoutForBoard")
    self.displayInner3LayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner3LayoutForBoard")
    self.displayInner4LayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner4LayoutForBoard")
    self.displayBackLegendForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayBackLegendForBoard")
    self.displayFrontPadsForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayFrontPadsForBoard")
    self.displayBackPadsForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayBackPadsForBoard")
    self.displayPadNumbersForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayPadNumbersForBoard")
    self.packageDrawingWidthMultpliedByTenForBoard_property = EBStoredProperty_Int (defaultValue: 5, undoManager: inUndoManager, key: "packageDrawingWidthMultpliedByTenForBoard")
    self.mSchematicSheetOrientation_property = EBStoredProperty_SchematicSheetOrientation (defaultValue: SchematicSheetOrientation.a4Horizontal, undoManager: inUndoManager, key: "mSchematicSheetOrientation")
    self.mRastnetDisplay_property = EBStoredProperty_RastnetDisplay (defaultValue: RastnetDisplay.allNets, undoManager: inUndoManager, key: "mRastnetDisplay")
    self.mRastnetDisplayedNetName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mRastnetDisplayedNetName")
    self.mRastnetDisplayedComponentName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mRastnetDisplayedComponentName")
    super.init (inUndoManager)
    self.mArtwork_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mArtwork_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mArtwork_property.startsToBeObserved (by: self.mArtwork_none)
    self.mSelectedSheet_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mSelectedSheet_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.startsToBeObserved (by: self.mSelectedSheet_none)
  //--- To many property: mSheets (has opposite relationship)
    self.mSheets_property.undoManager = inUndoManager
    self.mSheets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mFonts (no option)
    self.mFonts_property.undoManager = inUndoManager
  //--- To many property: mDevices (no option)
    self.mDevices_property.undoManager = inUndoManager
  //--- To many property: mNetClasses (no option)
    self.mNetClasses_property.undoManager = inUndoManager
  //--- To many property: mBorderCurves (has opposite relationship)
    self.mBorderCurves_property.undoManager = inUndoManager
    self.mBorderCurves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mBoardObjects (has opposite relationship)
    self.mBoardObjects_property.undoManager = inUndoManager
    self.mBoardObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mComponents (no option)
    self.mComponents_property.undoManager = inUndoManager
  //--- Atomic proxy property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minPPTPTTTWdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minPPTPTTTWdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minPPTPTTTWdisplayUnit = inValue
    }
    self.mArtwork_property.minPPTPTTTWdisplayUnit_property.startsToBeObserved (by: self.minPPTPTTTWdisplayUnit_property)
  //--- Atomic proxy property: minPPTPTTTW
    self.minPPTPTTTW_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minPPTPTTTW_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minPPTPTTTW_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minPPTPTTTW = inValue
    }
    self.mArtwork_property.minPPTPTTTW_property.startsToBeObserved (by: self.minPPTPTTTW_property)
  //--- Atomic proxy property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForOARdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForOARdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForOARdisplayUnit = inValue
    }
    self.mArtwork_property.minValueForOARdisplayUnit_property.startsToBeObserved (by: self.minValueForOARdisplayUnit_property)
  //--- Atomic proxy property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForOARinEBUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForOARinEBUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForOARinEBUnit = inValue
    }
    self.mArtwork_property.minValueForOARinEBUnit_property.startsToBeObserved (by: self.minValueForOARinEBUnit_property)
  //--- Atomic proxy property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForPHDdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForPHDdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForPHDdisplayUnit = inValue
    }
    self.mArtwork_property.minValueForPHDdisplayUnit_property.startsToBeObserved (by: self.minValueForPHDdisplayUnit_property)
  //--- Atomic proxy property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForPHDinEBUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForPHDinEBUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForPHDinEBUnit = inValue
    }
    self.mArtwork_property.minValueForPHDinEBUnit_property.startsToBeObserved (by: self.minValueForPHDinEBUnit_property)
  //--- Atomic proxy property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForBoardLimitWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidth_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForBoardLimitWidth = inValue
    }
    self.mArtwork_property.minValueForBoardLimitWidth_property.startsToBeObserved (by: self.minValueForBoardLimitWidth_property)
  //--- Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForBoardLimitWidthDisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidthDisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForBoardLimitWidthDisplayUnit = inValue
    }
    self.mArtwork_property.minValueForBoardLimitWidthDisplayUnit_property.startsToBeObserved (by: self.minValueForBoardLimitWidthDisplayUnit_property)
  //--- Atomic proxy property: artworkComments
    self.artworkComments_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.comments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.artworkComments_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mArtwork?.comments = inValue
    }
    self.mArtwork_property.comments_property.startsToBeObserved (by: self.artworkComments_property)
  //--- Atomic proxy property: artworkLayerConfiguration
    self.artworkLayerConfiguration_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.layerConfiguration_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.artworkLayerConfiguration_property.mWriteModelFunction = { [weak self] (_ inValue : LayerConfiguration) in
      self?.mArtwork?.layerConfiguration = inValue
    }
    self.mArtwork_property.layerConfiguration_property.startsToBeObserved (by: self.artworkLayerConfiguration_property)
  //--- Atomic proxy property: artworkTitle
    self.artworkTitle_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.title_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.artworkTitle_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mArtwork?.title = inValue
    }
    self.mArtwork_property.title_property.startsToBeObserved (by: self.artworkTitle_property)
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mReadModelFunction = { [weak self] in
      if let object = self?.mSelectedSheet_property {
        switch object.mSheetTitle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.selectedSheetTitle_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mSelectedSheet?.mSheetTitle = inValue
    }
    self.mSelectedSheet_property.mSheetTitle_property.startsToBeObserved (by: self.selectedSheetTitle_property)
  //--- ToMany proxy: selectedSheetObjects
    do{
      let controller = EBObservablePropertyController (
        observedObjects: [self.mSelectedSheet_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mSelectedSheet {
            me.selectedSheetObjects_property.setModel (model.mObjects_property)
          }
        }
      )
      self.mSelectedSheet_property.toMany_mObjects_StartsToBeObserved (by: controller)
      self.selectedSheetObjects_modelDidChangeController = controller
    }
  //--- Atomic proxy property: drillDataFileExtension
    self.drillDataFileExtension_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.drillDataFileExtension_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.drillDataFileExtension_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mArtwork?.drillDataFileExtension = inValue
    }
    self.mArtwork_property.drillDataFileExtension_property.startsToBeObserved (by: self.drillDataFileExtension_property)
  //--- ToMany proxy: fileGenerationParameterArray
    do{
      let controller = EBObservablePropertyController (
        observedObjects: [self.mArtwork_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mArtwork {
            me.fileGenerationParameterArray_property.setModel (model.fileGenerationParameterArray_property)
          }
        }
      )
      self.mArtwork_property.toMany_fileGenerationParameterArray_StartsToBeObserved (by: controller)
      self.fileGenerationParameterArray_modelDidChangeController = controller
    }
  //--- To one property: mArtwork
    self.mArtwork_property.undoManager = inUndoManager
  //--- Atomic property: hasInnerElements
    self.hasInnerElements_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mArtwork_property.hasInnerElements_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_hasInnerElements (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mArtwork_property.hasInnerElements_property.startsToBeObserved (by: self.hasInnerElements_property)
  //--- Atomic property: layerConfigurationString
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLayerConfiguration_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_layerConfigurationString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLayerConfiguration_property.startsToBeObserved (by: self.layerConfigurationString_property)
  //--- Atomic property: boardGridStepMultipliedByDisplayFactor
    self.boardGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardGridStep_property.selection
        let s1 = unwSelf.mBoardGridDisplayFactor_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardGridStepMultipliedByDisplayFactor (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardGridStep_property.startsToBeObserved (by: self.boardGridStepMultipliedByDisplayFactor_property)
    self.mBoardGridDisplayFactor_property.startsToBeObserved (by: self.boardGridStepMultipliedByDisplayFactor_property)
  //--- Atomic property: boardLimitsGridStepMultipliedByDisplayFactor
    self.boardLimitsGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardLimitsGridStep_property.selection
        let s1 = unwSelf.mBoardLimitsGridDisplayFactor_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitsGridStepMultipliedByDisplayFactor (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardLimitsGridStep_property.startsToBeObserved (by: self.boardLimitsGridStepMultipliedByDisplayFactor_property)
    self.mBoardLimitsGridDisplayFactor_property.startsToBeObserved (by: self.boardLimitsGridStepMultipliedByDisplayFactor_property)
  //--- Atomic property: boardShapeIsRectangular
    self.boardShapeIsRectangular_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardShape_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_boardShapeIsRectangular (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardShape_property.startsToBeObserved (by: self.boardShapeIsRectangular_property)
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.undoManager = inUndoManager
  //--- Atomic property: selectedSheetIssues
    self.selectedSheetIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSelectedSheet_property.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_selectedSheetIssues (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.issues_property.startsToBeObserved (by: self.selectedSheetIssues_property)
  //--- Atomic property: schematicOverDisplay
    self.schematicOverDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSelectedSheet_property.connectedPoints_property.selection
        let s1 = unwSelf.selectedSheetIssues_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_schematicOverDisplay (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.connectedPoints_property.startsToBeObserved (by: self.schematicOverDisplay_property)
    self.selectedSheetIssues_property.startsToBeObserved (by: self.schematicOverDisplay_property)
  //--- Atomic property: connexionWarningString
    self.connexionWarningString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSheets_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_connexionWarningString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.toMany_connexionWarnings_StartsToBeObserved (by: self.connexionWarningString_property)
  //--- Atomic property: connexionErrorString
    self.connexionErrorString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSheets_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_connexionErrorString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.toMany_connexionErrors_StartsToBeObserved (by: self.connexionErrorString_property)
  //--- Atomic property: schematicErrorCount
    self.schematicErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSheets_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_schematicErrorCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.toMany_connexionErrors_StartsToBeObserved (by: self.schematicErrorCount_property)
  //--- Atomic property: sheetIndexes
    self.sheetIndexes_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSheets_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_sheetIndexes (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.startsToBeObserved (by: self.sheetIndexes_property)
  //--- Atomic property: netsDescription
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClasses_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_netsDescription (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.toMany_netsDescription_StartsToBeObserved (by: self.netsDescription_property)
  //--- Atomic property: boardIssues
    self.boardIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_boardIssues (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_issues_StartsToBeObserved (by: self.boardIssues_property)
  //--- Atomic property: hasSixLayers
    self.hasSixLayers_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.artworkLayerConfiguration_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_hasSixLayers (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.artworkLayerConfiguration_property.startsToBeObserved (by: self.hasSixLayers_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        let s1 = unwSelf.mArtwork_property.signatureForERCChecking_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_signatureForERCChecking (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_signatureForERCChecking_StartsToBeObserved (by: self.signatureForERCChecking_property)
    self.mArtwork_property.signatureForERCChecking_property.startsToBeObserved (by: self.signatureForERCChecking_property)
  //--- Atomic property: ercStatusImage
    self.ercStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLastERCCheckingIsSuccess_property.selection
        let s1 = unwSelf.mLastERCCheckingSignature_property.selection
        let s2 = unwSelf.signatureForERCChecking_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_ercStatusImage (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLastERCCheckingIsSuccess_property.startsToBeObserved (by: self.ercStatusImage_property)
    self.mLastERCCheckingSignature_property.startsToBeObserved (by: self.ercStatusImage_property)
    self.signatureForERCChecking_property.startsToBeObserved (by: self.ercStatusImage_property)
  //--- Atomic property: ercStatusMessage
    self.ercStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLastERCCheckingIsSuccess_property.selection
        let s1 = unwSelf.mLastERCCheckingSignature_property.selection
        let s2 = unwSelf.signatureForERCChecking_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_ercStatusMessage (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLastERCCheckingIsSuccess_property.startsToBeObserved (by: self.ercStatusMessage_property)
    self.mLastERCCheckingSignature_property.startsToBeObserved (by: self.ercStatusMessage_property)
    self.signatureForERCChecking_property.startsToBeObserved (by: self.ercStatusMessage_property)
  //--- Atomic property: viaCountString
    self.viaCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_viaCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_isVia_StartsToBeObserved (by: self.viaCountString_property)
  //--- Atomic property: topSideTrackCountString
    self.topSideTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_topSideTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsToBeObserved (by: self.topSideTrackCountString_property)
  //--- Atomic property: backSideTrackCountString
    self.backSideTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_backSideTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsToBeObserved (by: self.backSideTrackCountString_property)
  //--- Atomic property: inner1LayerTrackCountString
    self.inner1LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_inner1LayerTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsToBeObserved (by: self.inner1LayerTrackCountString_property)
  //--- Atomic property: inner2LayerTrackCountString
    self.inner2LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_inner2LayerTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsToBeObserved (by: self.inner2LayerTrackCountString_property)
  //--- Atomic property: inner3LayerTrackCountString
    self.inner3LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_inner3LayerTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsToBeObserved (by: self.inner3LayerTrackCountString_property)
  //--- Atomic property: inner4LayerTrackCountString
    self.inner4LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_inner4LayerTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsToBeObserved (by: self.inner4LayerTrackCountString_property)
  //--- Atomic property: trackCountString
    self.trackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_trackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackLengthInCanariUnit_StartsToBeObserved (by: self.trackCountString_property)
  //--- Atomic property: trackLengthString
    self.trackLengthString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        let s1 = unwSelf.mTrackLengthUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_trackLengthString (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackLengthInCanariUnit_StartsToBeObserved (by: self.trackLengthString_property)
    self.mTrackLengthUnit_property.startsToBeObserved (by: self.trackLengthString_property)
  //--- Atomic property: boardStatusErrorCount
    self.boardStatusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_boardStatusErrorCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardIssues_property.startsToBeObserved (by: self.boardStatusErrorCount_property)
  //--- Atomic property: interiorBoundBox
    self.interiorBoundBox_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBorderCurves_property.selection
        let s1 = unwSelf.mBoardShape_property.selection
        let s2 = unwSelf.mRectangularBoardWidth_property.selection
        let s3 = unwSelf.mRectangularBoardHeight_property.selection
        let s4 = unwSelf.mBoardClearance_property.selection
        let s5 = unwSelf.mBoardLimitsWidth_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_ProjectRoot_interiorBoundBox (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBorderCurves_property.toMany_descriptor_StartsToBeObserved (by: self.interiorBoundBox_property)
    self.mBoardShape_property.startsToBeObserved (by: self.interiorBoundBox_property)
    self.mRectangularBoardWidth_property.startsToBeObserved (by: self.interiorBoundBox_property)
    self.mRectangularBoardHeight_property.startsToBeObserved (by: self.interiorBoundBox_property)
    self.mBoardClearance_property.startsToBeObserved (by: self.interiorBoundBox_property)
    self.mBoardLimitsWidth_property.startsToBeObserved (by: self.interiorBoundBox_property)
  //--- Atomic property: boardBoundBox
    self.boardBoundBox_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsWidth_property.selection
        let s2 = unwSelf.mBoardClearance_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_boardBoundBox (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsToBeObserved (by: self.boardBoundBox_property)
    self.mBoardLimitsWidth_property.startsToBeObserved (by: self.boardBoundBox_property)
    self.mBoardClearance_property.startsToBeObserved (by: self.boardBoundBox_property)
  //--- Atomic property: boardInteriorTop
    self.boardInteriorTop_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardPointsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardInteriorTop (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsToBeObserved (by: self.boardInteriorTop_property)
    self.mBoardPointsBoundingBoxUnit_property.startsToBeObserved (by: self.boardInteriorTop_property)
  //--- Atomic property: boardInteriorBottom
    self.boardInteriorBottom_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardPointsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardInteriorBottom (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsToBeObserved (by: self.boardInteriorBottom_property)
    self.mBoardPointsBoundingBoxUnit_property.startsToBeObserved (by: self.boardInteriorBottom_property)
  //--- Atomic property: boardInteriorLeft
    self.boardInteriorLeft_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardPointsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardInteriorLeft (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsToBeObserved (by: self.boardInteriorLeft_property)
    self.mBoardPointsBoundingBoxUnit_property.startsToBeObserved (by: self.boardInteriorLeft_property)
  //--- Atomic property: boardInteriorRight
    self.boardInteriorRight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardPointsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardInteriorRight (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsToBeObserved (by: self.boardInteriorRight_property)
    self.mBoardPointsBoundingBoxUnit_property.startsToBeObserved (by: self.boardInteriorRight_property)
  //--- Atomic property: boardLimitBorderTop
    self.boardLimitBorderTop_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitBorderTop (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.startsToBeObserved (by: self.boardLimitBorderTop_property)
    self.mBoardLimitsBoundingBoxUnit_property.startsToBeObserved (by: self.boardLimitBorderTop_property)
  //--- Atomic property: boardLimitBorderBottom
    self.boardLimitBorderBottom_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitBorderBottom (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.startsToBeObserved (by: self.boardLimitBorderBottom_property)
    self.mBoardLimitsBoundingBoxUnit_property.startsToBeObserved (by: self.boardLimitBorderBottom_property)
  //--- Atomic property: boardLimitBorderLeft
    self.boardLimitBorderLeft_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitBorderLeft (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.startsToBeObserved (by: self.boardLimitBorderLeft_property)
    self.mBoardLimitsBoundingBoxUnit_property.startsToBeObserved (by: self.boardLimitBorderLeft_property)
  //--- Atomic property: boardLimitBorderRight
    self.boardLimitBorderRight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitBorderRight (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.startsToBeObserved (by: self.boardLimitBorderRight_property)
    self.mBoardLimitsBoundingBoxUnit_property.startsToBeObserved (by: self.boardLimitBorderRight_property)
  //--- Atomic property: borderElementCountString
    self.borderElementCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBorderCurves_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_borderElementCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBorderCurves_property.startsToBeObserved (by: self.borderElementCountString_property)
  //--- Atomic property: borderOutlineBackground
    self.borderOutlineBackground_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBorderCurves_property.selection
        let s1 = unwSelf.mBoardShape_property.selection
        let s2 = unwSelf.mRectangularBoardWidth_property.selection
        let s3 = unwSelf.mRectangularBoardHeight_property.selection
        let s4 = unwSelf.mBoardLimitsWidth_property.selection
        let s5 = preferences_boardLimitsColorForBoard_property.selection
        let s6 = unwSelf.mBoardClearance_property.selection
        let s7 = preferences_boardClearanceColorForBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_ProjectRoot_borderOutlineBackground (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBorderCurves_property.toMany_descriptor_StartsToBeObserved (by: self.borderOutlineBackground_property)
    self.mBoardShape_property.startsToBeObserved (by: self.borderOutlineBackground_property)
    self.mRectangularBoardWidth_property.startsToBeObserved (by: self.borderOutlineBackground_property)
    self.mRectangularBoardHeight_property.startsToBeObserved (by: self.borderOutlineBackground_property)
    self.mBoardLimitsWidth_property.startsToBeObserved (by: self.borderOutlineBackground_property)
    preferences_boardLimitsColorForBoard_property.startsToBeObserved (by: self.borderOutlineBackground_property)
    self.mBoardClearance_property.startsToBeObserved (by: self.borderOutlineBackground_property)
    preferences_boardClearanceColorForBoard_property.startsToBeObserved (by: self.borderOutlineBackground_property)
  //--- Atomic property: borderViewBackground
    self.borderViewBackground_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_boardBackgroundColorForBoard_property.selection
        let s1 = unwSelf.borderOutlineBackground_property.selection
        let s2 = unwSelf.mBoardObjects_property.selection
        let s3 = unwSelf.boardBoundBox_property.selection
        let s4 = preferences_boardLimitsColorForBoard_property.selection
        let s5 = unwSelf.mContentOpacityInBoardOutline_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_ProjectRoot_borderViewBackground (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_boardBackgroundColorForBoard_property.startsToBeObserved (by: self.borderViewBackground_property)
    self.borderOutlineBackground_property.startsToBeObserved (by: self.borderViewBackground_property)
    self.mBoardObjects_property.toMany_objectDisplay_StartsToBeObserved (by: self.borderViewBackground_property)
    self.boardBoundBox_property.startsToBeObserved (by: self.borderViewBackground_property)
    preferences_boardLimitsColorForBoard_property.startsToBeObserved (by: self.borderViewBackground_property)
    self.mContentOpacityInBoardOutline_property.startsToBeObserved (by: self.borderViewBackground_property)
  //--- Atomic property: fontNameArray
    self.fontNameArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mFonts_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_fontNameArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFonts_property.toMany_mFontName_StartsToBeObserved (by: self.fontNameArray_property)
  //--- Atomic property: deviceNames
    self.deviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDevices_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_deviceNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDevices_property.toMany_mDeviceName_StartsToBeObserved (by: self.deviceNames_property)
  //--- Atomic property: allClassNames
    self.allClassNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClasses_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_allClassNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.toMany_mNetClassName_StartsToBeObserved (by: self.allClassNames_property)
  //--- Atomic property: sheetGeometry
    self.sheetGeometry_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSchematicSheetOrientation_property.selection
        let s1 = unwSelf.mSchematicCustomWidth_property.selection
        let s2 = unwSelf.mSchematicCustomHeight_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_sheetGeometry (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSchematicSheetOrientation_property.startsToBeObserved (by: self.sheetGeometry_property)
    self.mSchematicCustomWidth_property.startsToBeObserved (by: self.sheetGeometry_property)
    self.mSchematicCustomHeight_property.startsToBeObserved (by: self.sheetGeometry_property)
  //--- Atomic property: schematicBackgroundDisplay
    self.schematicBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSchematicTitle_property.selection
        let s1 = unwSelf.mSchematicVersion_property.selection
        let s2 = unwSelf.sheetGeometry_property.selection
        let s3 = unwSelf.mSelectedSheet_property.mSheetTitle_property.selection
        let s4 = unwSelf.mSheets_property.selection
        let s5 = unwSelf.mSelectedSheet_property.selection
        let s6 = unwSelf.mSchematicDate_property.selection
        let s7 = preferences_schematicBackColor_property.selection
        let s8 = preferences_schematicFrameColor_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8)) :
          return .single (transient_ProjectRoot_schematicBackgroundDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSchematicTitle_property.startsToBeObserved (by: self.schematicBackgroundDisplay_property)
    self.mSchematicVersion_property.startsToBeObserved (by: self.schematicBackgroundDisplay_property)
    self.sheetGeometry_property.startsToBeObserved (by: self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.mSheetTitle_property.startsToBeObserved (by: self.schematicBackgroundDisplay_property)
    self.mSheets_property.startsToBeObserved (by: self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.startsToBeObserved (by: self.schematicBackgroundDisplay_property)
    self.mSchematicDate_property.startsToBeObserved (by: self.schematicBackgroundDisplay_property)
    preferences_schematicBackColor_property.startsToBeObserved (by: self.schematicBackgroundDisplay_property)
    preferences_schematicFrameColor_property.startsToBeObserved (by: self.schematicBackgroundDisplay_property)
  //--- Atomic property: netWarningCount
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClasses_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_netWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.toMany_netWarningCount_StartsToBeObserved (by: self.netWarningCount_property)
  //--- Atomic property: netNamesArray
    self.netNamesArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClasses_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_netNamesArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.toMany_netsDescription_StartsToBeObserved (by: self.netNamesArray_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_unplacedSymbols (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.toMany_unplacedSymbols_StartsToBeObserved (by: self.unplacedSymbols_property)
  //--- Atomic property: unplacedPackages
    self.unplacedPackages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.selection
        let s1 = unwSelf.mComponents_property.selection
        let s2 = unwSelf.mComponents_property.selection
        let s3 = unwSelf.mComponents_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_ProjectRoot_unplacedPackages (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.startsToBeObserved (by: self.unplacedPackages_property)
    self.mComponents_property.toMany_componentName_StartsToBeObserved (by: self.unplacedPackages_property)
    self.mComponents_property.toMany_mComponentValue_StartsToBeObserved (by: self.unplacedPackages_property)
    self.mComponents_property.toMany_componentIsPlacedInBoard_StartsToBeObserved (by: self.unplacedPackages_property)
  //--- Atomic property: componentsPlacedInBoard
    self.componentsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.selection
        let s1 = unwSelf.mComponents_property.selection
        let s2 = unwSelf.mComponents_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_componentsPlacedInBoard (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.toMany_mNamePrefix_StartsToBeObserved (by: self.componentsPlacedInBoard_property)
    self.mComponents_property.toMany_mNameIndex_StartsToBeObserved (by: self.componentsPlacedInBoard_property)
    self.mComponents_property.toMany_componentIsPlacedInBoard_StartsToBeObserved (by: self.componentsPlacedInBoard_property)
  //--- Atomic property: boardStatusMessage
    self.boardStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardIssues_property.selection
        let s1 = unwSelf.unplacedPackages_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardStatusMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardIssues_property.startsToBeObserved (by: self.boardStatusMessage_property)
    self.unplacedPackages_property.startsToBeObserved (by: self.boardStatusMessage_property)
  //--- Atomic property: boardStatusWarningCount
    self.boardStatusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardIssues_property.selection
        let s1 = unwSelf.unplacedPackages_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardStatusWarningCount (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardIssues_property.startsToBeObserved (by: self.boardStatusWarningCount_property)
    self.unplacedPackages_property.startsToBeObserved (by: self.boardStatusWarningCount_property)
  //--- Atomic property: placedComponentNameArray
    self.placedComponentNameArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.selection
        let s1 = unwSelf.mComponents_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_placedComponentNameArray (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.toMany_componentName_StartsToBeObserved (by: self.placedComponentNameArray_property)
    self.mComponents_property.toMany_componentIsPlacedInBoard_StartsToBeObserved (by: self.placedComponentNameArray_property)
  //--- Atomic property: schematicHasErrorOrWarning
    self.schematicHasErrorOrWarning_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbols_property.selection
        let s1 = unwSelf.netWarningCount_property.selection
        let s2 = unwSelf.mSheets_property.selection
        let s3 = unwSelf.mSheets_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_ProjectRoot_schematicHasErrorOrWarning (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.startsToBeObserved (by: self.schematicHasErrorOrWarning_property)
    self.netWarningCount_property.startsToBeObserved (by: self.schematicHasErrorOrWarning_property)
    self.mSheets_property.toMany_connexionWarnings_StartsToBeObserved (by: self.schematicHasErrorOrWarning_property)
    self.mSheets_property.toMany_connexionErrors_StartsToBeObserved (by: self.schematicHasErrorOrWarning_property)
  //--- Atomic property: schematicStatusMessage
    self.schematicStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbols_property.selection
        let s1 = unwSelf.netWarningCount_property.selection
        let s2 = unwSelf.mSheets_property.selection
        let s3 = unwSelf.mSheets_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_ProjectRoot_schematicStatusMessage (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.startsToBeObserved (by: self.schematicStatusMessage_property)
    self.netWarningCount_property.startsToBeObserved (by: self.schematicStatusMessage_property)
    self.mSheets_property.toMany_connexionWarnings_StartsToBeObserved (by: self.schematicStatusMessage_property)
    self.mSheets_property.toMany_connexionErrors_StartsToBeObserved (by: self.schematicStatusMessage_property)
  //--- Atomic property: schematicWarningCount
    self.schematicWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbols_property.selection
        let s1 = unwSelf.netWarningCount_property.selection
        let s2 = unwSelf.mSheets_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_schematicWarningCount (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.startsToBeObserved (by: self.schematicWarningCount_property)
    self.netWarningCount_property.startsToBeObserved (by: self.schematicWarningCount_property)
    self.mSheets_property.toMany_connexionWarnings_StartsToBeObserved (by: self.schematicWarningCount_property)
  //--- Install undoers and opposite setter for relationships
    self.mSheets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.mBorderCurves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.mBoardObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

