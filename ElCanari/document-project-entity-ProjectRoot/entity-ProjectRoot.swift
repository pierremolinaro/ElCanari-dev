//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    Entity: ProjectRoot
//--------------------------------------------------------------------------------------------------

final class ProjectRoot : EBManagedObject {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mArtworkName
  //------------------------------------------------------------------------------------------------

  final let mArtworkName_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------

  final var mArtworkName : String {
    get { return self.mArtworkName_property.propval }
    set { self.mArtworkName_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mArtworkVersion
  //------------------------------------------------------------------------------------------------

  final let mArtworkVersion_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mArtworkVersion : Int {
    get { return self.mArtworkVersion_property.propval }
    set { self.mArtworkVersion_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mArtworkFileSystemLibraryStatus
  //------------------------------------------------------------------------------------------------

  final let mArtworkFileSystemLibraryStatus_property : EBStandAloneProperty_String

  //------------------------------------------------------------------------------------------------

  final var mArtworkFileSystemLibraryStatus : String {
    get { return self.mArtworkFileSystemLibraryStatus_property.propval }
    set { self.mArtworkFileSystemLibraryStatus_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mArtworkFileSystemLibraryRequiresAttention
  //------------------------------------------------------------------------------------------------

  final let mArtworkFileSystemLibraryRequiresAttention_property : EBStandAloneProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var mArtworkFileSystemLibraryRequiresAttention : Bool {
    get { return self.mArtworkFileSystemLibraryRequiresAttention_property.propval }
    set { self.mArtworkFileSystemLibraryRequiresAttention_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mArtworkIsUpdatable
  //------------------------------------------------------------------------------------------------

  final let mArtworkIsUpdatable_property : EBStandAloneProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var mArtworkIsUpdatable : Bool {
    get { return self.mArtworkIsUpdatable_property.propval }
    set { self.mArtworkIsUpdatable_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mPDFBoardBackgroundColor
  //------------------------------------------------------------------------------------------------

  final let mPDFBoardBackgroundColor_property : EBStoredProperty_NSColor

  //------------------------------------------------------------------------------------------------

  final var mPDFBoardBackgroundColor : NSColor {
    get { return self.mPDFBoardBackgroundColor_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mGenerateMergerArchive
  //------------------------------------------------------------------------------------------------

  final let mGenerateMergerArchive_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mGenerateBOM
  //------------------------------------------------------------------------------------------------

  final let mGenerateBOM_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mGenerateGerberAndPDF
  //------------------------------------------------------------------------------------------------

  final let mGenerateGerberAndPDF_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mPDFProductGrid
  //------------------------------------------------------------------------------------------------

  final let mPDFProductGrid_property : EBStoredProperty_PDFProductGrid

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mGerberProductUnit
  //------------------------------------------------------------------------------------------------

  final let mGerberProductUnit_property : EBStoredProperty_GerberUnit

  //------------------------------------------------------------------------------------------------

  final var mGerberProductUnit : GerberUnit {
    get { return self.mGerberProductUnit_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mExpandInner1BoardSettings
  //------------------------------------------------------------------------------------------------

  final let mExpandInner1BoardSettings_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mExpandInner2BoardSettings
  //------------------------------------------------------------------------------------------------

  final let mExpandInner2BoardSettings_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mExpandInner3BoardSettings
  //------------------------------------------------------------------------------------------------

  final let mExpandInner3BoardSettings_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mExpandInner4BoardSettings
  //------------------------------------------------------------------------------------------------

  final let mExpandInner4BoardSettings_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mExpandOtherBoardSettings
  //------------------------------------------------------------------------------------------------

  final let mExpandOtherBoardSettings_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mExpandFrontSideBoardSettings
  //------------------------------------------------------------------------------------------------

  final let mExpandFrontSideBoardSettings_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mExpandBackSideBoardSettings
  //------------------------------------------------------------------------------------------------

  final let mExpandBackSideBoardSettings_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mCheckClearanceBetweenPadsOfSameNet
  //------------------------------------------------------------------------------------------------

  final let mCheckClearanceBetweenPadsOfSameNet_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var mCheckClearanceBetweenPadsOfSameNet : Bool {
    get { return self.mCheckClearanceBetweenPadsOfSameNet_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mLastERCCheckingIsSuccess
  //------------------------------------------------------------------------------------------------

  final let mLastERCCheckingIsSuccess_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var mLastERCCheckingIsSuccess : Bool {
    get { return self.mLastERCCheckingIsSuccess_property.propval }
    set { self.mLastERCCheckingIsSuccess_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mLastERCCheckingSignature
  //------------------------------------------------------------------------------------------------

  final let mLastERCCheckingSignature_property : EBStoredProperty_UInt32

  //------------------------------------------------------------------------------------------------

  final var mLastERCCheckingSignature : UInt32 {
    get { return self.mLastERCCheckingSignature_property.propval }
    set { self.mLastERCCheckingSignature_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mLayerConfiguration
  //------------------------------------------------------------------------------------------------

  final let mLayerConfiguration_property : EBStoredProperty_LayerConfiguration

  //------------------------------------------------------------------------------------------------

  final var mLayerConfiguration : LayerConfiguration {
    get { return self.mLayerConfiguration_property.propval }
    set { self.mLayerConfiguration_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardSideForNewTrack
  //------------------------------------------------------------------------------------------------

  final let mBoardSideForNewTrack_property : EBStoredProperty_TrackSide

  //------------------------------------------------------------------------------------------------

  final var mBoardSideForNewTrack : TrackSide {
    get { return self.mBoardSideForNewTrack_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mDirectionForNewTrack
  //------------------------------------------------------------------------------------------------

  final let mDirectionForNewTrack_property : EBStoredProperty_TrackCreationDirection

  //------------------------------------------------------------------------------------------------

  final var mDirectionForNewTrack : TrackCreationDirection {
    get { return self.mDirectionForNewTrack_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLayerForNewText
  //------------------------------------------------------------------------------------------------

  final let mBoardLayerForNewText_property : EBStoredProperty_BoardTextLayer

  //------------------------------------------------------------------------------------------------

  final var mBoardLayerForNewText : BoardTextLayer {
    get { return self.mBoardLayerForNewText_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLayerForNewQRCode
  //------------------------------------------------------------------------------------------------

  final let mBoardLayerForNewQRCode_property : EBStoredProperty_BoardQRCodeLayer

  //------------------------------------------------------------------------------------------------

  final var mBoardLayerForNewQRCode : BoardQRCodeLayer {
    get { return self.mBoardLayerForNewQRCode_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLayerForNewImage
  //------------------------------------------------------------------------------------------------

  final let mBoardLayerForNewImage_property : EBStoredProperty_BoardQRCodeLayer

  //------------------------------------------------------------------------------------------------

  final var mBoardLayerForNewImage : BoardQRCodeLayer {
    get { return self.mBoardLayerForNewImage_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLayerForNewLine
  //------------------------------------------------------------------------------------------------

  final let mBoardLayerForNewLine_property : EBStoredProperty_BoardLineLayer

  //------------------------------------------------------------------------------------------------

  final var mBoardLayerForNewLine : BoardLineLayer {
    get { return self.mBoardLayerForNewLine_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardSideForNewRestrictRectangle
  //------------------------------------------------------------------------------------------------

  final let mBoardSideForNewRestrictRectangle_property : EBStoredProperty_RestrictRectangleLayer

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mNewRestrictRectangleLayers
  //------------------------------------------------------------------------------------------------

  final let mNewRestrictRectangleLayers_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mNewRestrictRectangleLayers : Int {
    get { return self.mNewRestrictRectangleLayers_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mAutoRouterPreferredDirections
  //------------------------------------------------------------------------------------------------

  final let mAutoRouterPreferredDirections_property : EBStoredProperty_AutorouterPreferredDirections

  //------------------------------------------------------------------------------------------------

  final var mAutoRouterPreferredDirections : AutorouterPreferredDirections {
    get { return self.mAutoRouterPreferredDirections_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mAutorouterSnapAngle
  //------------------------------------------------------------------------------------------------

  final let mAutorouterSnapAngle_property : EBStoredProperty_AutorouterSnapAngle

  //------------------------------------------------------------------------------------------------

  final var mAutorouterSnapAngle : AutorouterSnapAngle {
    get { return self.mAutorouterSnapAngle_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRouteDirection
  //------------------------------------------------------------------------------------------------

  final let mRouteDirection_property : EBStoredProperty_RouteDirection

  //------------------------------------------------------------------------------------------------

  final var mRouteDirection : RouteDirection {
    get { return self.mRouteDirection_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRouteOrigin
  //------------------------------------------------------------------------------------------------

  final let mRouteOrigin_property : EBStoredProperty_RouteOrigin

  //------------------------------------------------------------------------------------------------

  final var mRouteOrigin : RouteOrigin {
    get { return self.mRouteOrigin_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mAutorouterInterfaceMode
  //------------------------------------------------------------------------------------------------

  final let mAutorouterInterfaceMode_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mExportExistingTracksAndVias
  //------------------------------------------------------------------------------------------------

  final let mExportExistingTracksAndVias_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var mExportExistingTracksAndVias : Bool {
    get { return self.mExportExistingTracksAndVias_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mAllowViaAtSMD
  //------------------------------------------------------------------------------------------------

  final let mAllowViaAtSMD_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var mAllowViaAtSMD : Bool {
    get { return self.mAllowViaAtSMD_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mTrackLengthUnit
  //------------------------------------------------------------------------------------------------

  final let mTrackLengthUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mLayoutClearance
  //------------------------------------------------------------------------------------------------

  final let mLayoutClearance_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mLayoutClearance : Int {
    get { return self.mLayoutClearance_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mLayoutClearanceUnit
  //------------------------------------------------------------------------------------------------

  final let mLayoutClearanceUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardSelectedInspector
  //------------------------------------------------------------------------------------------------

  final let mBoardSelectedInspector_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mBoardSelectedInspector : Int {
    get { return self.mBoardSelectedInspector_property.propval }
    set { self.mBoardSelectedInspector_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardHorizontalFlip
  //------------------------------------------------------------------------------------------------

  final let mBoardHorizontalFlip_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardVerticalFlip
  //------------------------------------------------------------------------------------------------

  final let mBoardVerticalFlip_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardGridStyle
  //------------------------------------------------------------------------------------------------

  final let mBoardGridStyle_property : EBStoredProperty_GridStyle

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardGridDisplayFactor
  //------------------------------------------------------------------------------------------------

  final let mBoardGridDisplayFactor_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardZoom
  //------------------------------------------------------------------------------------------------

  final let mBoardZoom_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardGridStep
  //------------------------------------------------------------------------------------------------

  final let mBoardGridStep_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mBoardGridStep : Int {
    get { return self.mBoardGridStep_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardGridStepUnit
  //------------------------------------------------------------------------------------------------

  final let mBoardGridStepUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mBoardGridStepUnit : Int {
    get { return self.mBoardGridStepUnit_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mErrorOrWarningIssueSize
  //------------------------------------------------------------------------------------------------

  final let mErrorOrWarningIssueSize_property : EBStoredProperty_Double

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mControlKeyHiliteDiameter
  //------------------------------------------------------------------------------------------------

  final let mControlKeyHiliteDiameter_property : EBStoredProperty_Double

  //------------------------------------------------------------------------------------------------

  final var mControlKeyHiliteDiameter : Double {
    get { return self.mControlKeyHiliteDiameter_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mDSNFileProposedName
  //------------------------------------------------------------------------------------------------

  final let mDSNFileProposedName_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------

  final var mDSNFileProposedName : String {
    get { return self.mDSNFileProposedName_property.propval }
    set { self.mDSNFileProposedName_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsWidth
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsWidth_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mBoardLimitsWidth : Int {
    get { return self.mBoardLimitsWidth_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsWidthUnit
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsWidthUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mBoardLimitsWidthUnit : Int {
    get { return self.mBoardLimitsWidthUnit_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardClearance
  //------------------------------------------------------------------------------------------------

  final let mBoardClearance_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mBoardClearance : Int {
    get { return self.mBoardClearance_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardClearanceUnit
  //------------------------------------------------------------------------------------------------

  final let mBoardClearanceUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsSelectedInspector
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsSelectedInspector_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsHorizontalFlip
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsHorizontalFlip_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsVerticalFlip
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsVerticalFlip_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsGridStyle
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsGridStyle_property : EBStoredProperty_GridStyle

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsGridDisplayFactor
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsGridDisplayFactor_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsZoom
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsZoom_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsGridStep
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsGridStep_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mBoardLimitsGridStep : Int {
    get { return self.mBoardLimitsGridStep_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsGridStepUnit
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsGridStepUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitsBoundingBoxUnit
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitsBoundingBoxUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardPointsBoundingBoxUnit
  //------------------------------------------------------------------------------------------------

  final let mBoardPointsBoundingBoxUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardSelectedCurveDisplayUnit
  //------------------------------------------------------------------------------------------------

  final let mBoardSelectedCurveDisplayUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardLimitControlPointsDisplayUnit
  //------------------------------------------------------------------------------------------------

  final let mBoardLimitControlPointsDisplayUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mBoardShape
  //------------------------------------------------------------------------------------------------

  final let mBoardShape_property : EBStoredProperty_BoardShape

  //------------------------------------------------------------------------------------------------

  final var mBoardShape : BoardShape {
    get { return self.mBoardShape_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mContentOpacityInBoardOutline
  //------------------------------------------------------------------------------------------------

  final let mContentOpacityInBoardOutline_property : EBStoredProperty_Double

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRectangularBoardWidth
  //------------------------------------------------------------------------------------------------

  final let mRectangularBoardWidth_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mRectangularBoardWidth : Int {
    get { return self.mRectangularBoardWidth_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRectangularBoardWidthUnit
  //------------------------------------------------------------------------------------------------

  final let mRectangularBoardWidthUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRectangularBoardHeight
  //------------------------------------------------------------------------------------------------

  final let mRectangularBoardHeight_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mRectangularBoardHeight : Int {
    get { return self.mRectangularBoardHeight_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRectangularBoardHeightUnit
  //------------------------------------------------------------------------------------------------

  final let mRectangularBoardHeightUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   To many property: mSheets
  //------------------------------------------------------------------------------------------------

  final let mSheets_property = StoredArrayOf_SheetInProject (usedForSignature: false, key: "mSheets")

  //------------------------------------------------------------------------------------------------

  final var mSheets : EBReferenceArray <SheetInProject> {
    get { return self.mSheets_property.propval }
    set { self.mSheets_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mDefaultNetClassName
  //------------------------------------------------------------------------------------------------

  final let mDefaultNetClassName_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------

  final var mDefaultNetClassName : String {
    get { return self.mDefaultNetClassName_property.propval }
    set { self.mDefaultNetClassName_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicHilitedColumnIndex
  //------------------------------------------------------------------------------------------------

  final let mSchematicHilitedColumnIndex_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mSchematicHilitedColumnIndex : Int {
    get { return self.mSchematicHilitedColumnIndex_property.propval }
    set { self.mSchematicHilitedColumnIndex_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicHilitedRowIndex
  //------------------------------------------------------------------------------------------------

  final let mSchematicHilitedRowIndex_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mSchematicHilitedRowIndex : Int {
    get { return self.mSchematicHilitedRowIndex_property.propval }
    set { self.mSchematicHilitedRowIndex_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicEnableHiliteColumnAndRow
  //------------------------------------------------------------------------------------------------

  final let mSchematicEnableHiliteColumnAndRow_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------

  final var mSchematicEnableHiliteColumnAndRow : Bool {
    get { return self.mSchematicEnableHiliteColumnAndRow_property.propval }
    set { self.mSchematicEnableHiliteColumnAndRow_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSelectedPageIndex
  //------------------------------------------------------------------------------------------------

  final let mSelectedPageIndex_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSelectedSchematicInspector
  //------------------------------------------------------------------------------------------------

  final let mSelectedSchematicInspector_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicTitle
  //------------------------------------------------------------------------------------------------

  final let mSchematicTitle_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicVersion
  //------------------------------------------------------------------------------------------------

  final let mSchematicVersion_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicDate
  //------------------------------------------------------------------------------------------------

  final let mSchematicDate_property : EBStoredProperty_Date

  //------------------------------------------------------------------------------------------------

  final var mSchematicDate : Date {
    get { return self.mSchematicDate_property.propval }
    set { self.mSchematicDate_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicHorizontalFlip
  //------------------------------------------------------------------------------------------------

  final let mSchematicHorizontalFlip_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicVerticalFlip
  //------------------------------------------------------------------------------------------------

  final let mSchematicVerticalFlip_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicZoom
  //------------------------------------------------------------------------------------------------

  final let mSchematicZoom_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicGridStyle
  //------------------------------------------------------------------------------------------------

  final let mSchematicGridStyle_property : EBStoredProperty_GridStyle

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicGridDisplayFactor
  //------------------------------------------------------------------------------------------------

  final let mSchematicGridDisplayFactor_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicCustomWidth
  //------------------------------------------------------------------------------------------------

  final let mSchematicCustomWidth_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mSchematicCustomWidth : Int {
    get { return self.mSchematicCustomWidth_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicCustomWidthUnit
  //------------------------------------------------------------------------------------------------

  final let mSchematicCustomWidthUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicCustomHeight
  //------------------------------------------------------------------------------------------------

  final let mSchematicCustomHeight_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var mSchematicCustomHeight : Int {
    get { return self.mSchematicCustomHeight_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicCustomHeightUnit
  //------------------------------------------------------------------------------------------------

  final let mSchematicCustomHeightUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mWorkingAreaRectString
  //------------------------------------------------------------------------------------------------

  final let mWorkingAreaRectString_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------
  //   Atomic property: drawErrorBackgroundForBoard
  //------------------------------------------------------------------------------------------------

  final let drawErrorBackgroundForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayFrontRestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayFrontRestrictRectangles_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayBackRestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayBackRestrictRectangles_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayInner1RestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayInner1RestrictRectangles_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayInner2RestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayInner2RestrictRectangles_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayInner3RestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayInner3RestrictRectangles_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayInner4RestrictRectangles
  //------------------------------------------------------------------------------------------------

  final let displayInner4RestrictRectangles_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayFrontLegendForBoard
  //------------------------------------------------------------------------------------------------

  final let displayFrontLegendForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayFrontLayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayFrontLayoutForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayBackLayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayBackLayoutForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayInner1LayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayInner1LayoutForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayInner2LayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayInner2LayoutForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayInner3LayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayInner3LayoutForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayInner4LayoutForBoard
  //------------------------------------------------------------------------------------------------

  final let displayInner4LayoutForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayBackLegendForBoard
  //------------------------------------------------------------------------------------------------

  final let displayBackLegendForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayFrontPadsForBoard
  //------------------------------------------------------------------------------------------------

  final let displayFrontPadsForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayBackPadsForBoard
  //------------------------------------------------------------------------------------------------

  final let displayBackPadsForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: displayPadNumbersForBoard
  //------------------------------------------------------------------------------------------------

  final let displayPadNumbersForBoard_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: packageDrawingWidthMultpliedByTenForBoard
  //------------------------------------------------------------------------------------------------

  final let packageDrawingWidthMultpliedByTenForBoard_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------

  final var packageDrawingWidthMultpliedByTenForBoard : Int {
    get { return self.packageDrawingWidthMultpliedByTenForBoard_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   To many property: mFonts
  //------------------------------------------------------------------------------------------------

  final let mFonts_property = StoredArrayOf_FontInProject (usedForSignature: false, key: "mFonts")

  //------------------------------------------------------------------------------------------------

  final var mFonts : EBReferenceArray <FontInProject> {
    get { return self.mFonts_property.propval }
    set { self.mFonts_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   To many property: mDevices
  //------------------------------------------------------------------------------------------------

  final let mDevices_property = StoredArrayOf_DeviceInProject (usedForSignature: false, key: "mDevices")

  //------------------------------------------------------------------------------------------------

  final var mDevices : EBReferenceArray <DeviceInProject> {
    get { return self.mDevices_property.propval }
    set { self.mDevices_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   To many property: mNetClasses
  //------------------------------------------------------------------------------------------------

  final let mNetClasses_property = StoredArrayOf_NetClassInProject (usedForSignature: false, key: "mNetClasses")

  //------------------------------------------------------------------------------------------------

  final var mNetClasses : EBReferenceArray <NetClassInProject> {
    get { return self.mNetClasses_property.propval }
    set { self.mNetClasses_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mSchematicSheetOrientation
  //------------------------------------------------------------------------------------------------

  final let mSchematicSheetOrientation_property : EBStoredProperty_SchematicSheetOrientation

  //------------------------------------------------------------------------------------------------

  final var mSchematicSheetOrientation : SchematicSheetOrientation {
    get { return self.mSchematicSheetOrientation_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   To many property: mBorderCurves
  //------------------------------------------------------------------------------------------------

  final let mBorderCurves_property = StoredArrayOf_BorderCurve (usedForSignature: false, key: "mBorderCurves")

  //------------------------------------------------------------------------------------------------

  final var mBorderCurves : EBReferenceArray <BorderCurve> {
    get { return self.mBorderCurves_property.propval }
    set { self.mBorderCurves_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   To many property: mBoardObjects
  //------------------------------------------------------------------------------------------------

  final let mBoardObjects_property = StoredArrayOf_BoardObject (usedForSignature: false, key: "mBoardObjects")

  //------------------------------------------------------------------------------------------------

  final var mBoardObjects : EBReferenceArray <BoardObject> {
    get { return self.mBoardObjects_property.propval }
    set { self.mBoardObjects_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRastnetDisplay
  //------------------------------------------------------------------------------------------------

  final let mRastnetDisplay_property : EBStoredProperty_RastnetDisplay

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRastnetDisplayedNetName
  //------------------------------------------------------------------------------------------------

  final let mRastnetDisplayedNetName_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------

  final var mRastnetDisplayedNetName : String {
    get { return self.mRastnetDisplayedNetName_property.propval }
    set { self.mRastnetDisplayedNetName_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: mRastnetDisplayedComponentName
  //------------------------------------------------------------------------------------------------

  final let mRastnetDisplayedComponentName_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------
  //   To many property: mComponents
  //------------------------------------------------------------------------------------------------

  final let mComponents_property = StoredArrayOf_ComponentInProject (usedForSignature: false, key: "mComponents")

  //------------------------------------------------------------------------------------------------

  final var mComponents : EBReferenceArray <ComponentInProject> {
    get { return self.mComponents_property.propval }
    set { self.mComponents_property.setProp (newValue) }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: minPPTPTTTWdisplayUnit
  //------------------------------------------------------------------------------------------------

  final let minPPTPTTTWdisplayUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------

  var minPPTPTTTWdisplayUnit : Int? {
    get {
      return self.minPPTPTTTWdisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minPPTPTTTWdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: minPPTPTTTW
  //------------------------------------------------------------------------------------------------

  final let minPPTPTTTW_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------

  var minPPTPTTTW : Int? {
    get {
      return self.minPPTPTTTW_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minPPTPTTTW_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: minValueForOARdisplayUnit
  //------------------------------------------------------------------------------------------------

  final let minValueForOARdisplayUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------

  var minValueForOARdisplayUnit : Int? {
    get {
      return self.minValueForOARdisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForOARdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: minValueForOARinEBUnit
  //------------------------------------------------------------------------------------------------

  final let minValueForOARinEBUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------

  var minValueForOARinEBUnit : Int? {
    get {
      return self.minValueForOARinEBUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForOARinEBUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: minValueForPHDdisplayUnit
  //------------------------------------------------------------------------------------------------

  final let minValueForPHDdisplayUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------

  var minValueForPHDdisplayUnit : Int? {
    get {
      return self.minValueForPHDdisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForPHDdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: minValueForPHDinEBUnit
  //------------------------------------------------------------------------------------------------

  final let minValueForPHDinEBUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------

  var minValueForPHDinEBUnit : Int? {
    get {
      return self.minValueForPHDinEBUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForPHDinEBUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: minValueForBoardLimitWidth
  //------------------------------------------------------------------------------------------------

  final let minValueForBoardLimitWidth_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------

  var minValueForBoardLimitWidth : Int? {
    get {
      return self.minValueForBoardLimitWidth_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForBoardLimitWidth_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
  //------------------------------------------------------------------------------------------------

  final let minValueForBoardLimitWidthDisplayUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------

  var minValueForBoardLimitWidthDisplayUnit : Int? {
    get {
      return self.minValueForBoardLimitWidthDisplayUnit_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForBoardLimitWidthDisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: artworkComments
  //------------------------------------------------------------------------------------------------

  final let artworkComments_property = EBComputedProperty_String ()

  //------------------------------------------------------------------------------------------------

  var artworkComments : String? {
    get {
      return self.artworkComments_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.artworkComments_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: artworkLayerConfiguration
  //------------------------------------------------------------------------------------------------

  final let artworkLayerConfiguration_property = EBComputedProperty_LayerConfiguration ()

  //------------------------------------------------------------------------------------------------

  var artworkLayerConfiguration : LayerConfiguration? {
    get {
      return self.artworkLayerConfiguration_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.artworkLayerConfiguration_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: artworkTitle
  //------------------------------------------------------------------------------------------------

  final let artworkTitle_property = EBComputedProperty_String ()

  //------------------------------------------------------------------------------------------------

  var artworkTitle : String? {
    get {
      return self.artworkTitle_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.artworkTitle_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: selectedSheetTitle
  //------------------------------------------------------------------------------------------------

  final let selectedSheetTitle_property = EBComputedProperty_String ()

  //------------------------------------------------------------------------------------------------

  var selectedSheetTitle : String? {
    get {
      return self.selectedSheetTitle_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.selectedSheetTitle_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   ToMany proxy: selectedSheetObjects
  //------------------------------------------------------------------------------------------------

  var selectedSheetObjects_modelDidChangeController : EBObservablePropertyController? = nil
  final let selectedSheetObjects_property = ProxyArrayOf_SchematicObject ()

  //------------------------------------------------------------------------------------------------

  var selectedSheetObjects : EBReferenceArray <SchematicObject> {
    get {
      switch self.selectedSheetObjects_property.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }
    set {
      self.selectedSheetObjects_property.setProp (newValue)
    }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: drillDataFileExtension
  //------------------------------------------------------------------------------------------------

  final let drillDataFileExtension_property = EBComputedProperty_String ()

  //------------------------------------------------------------------------------------------------

  var drillDataFileExtension : String? {
    get {
      return self.drillDataFileExtension_property.optionalValue
    }
    set {
      if let unwrappedNewValue = newValue {
        self.drillDataFileExtension_property.setProp (unwrappedNewValue)
      }
    }
  }

  //------------------------------------------------------------------------------------------------
  //   ToMany proxy: fileGenerationParameterArray
  //------------------------------------------------------------------------------------------------

  var fileGenerationParameterArray_modelDidChangeController : EBObservablePropertyController? = nil
  final let fileGenerationParameterArray_property = ProxyArrayOf_ArtworkFileGenerationParameters ()

  //------------------------------------------------------------------------------------------------

  var fileGenerationParameterArray : EBReferenceArray <ArtworkFileGenerationParameters> {
    get {
      switch self.fileGenerationParameterArray_property.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }
    set {
      self.fileGenerationParameterArray_property.setProp (newValue)
    }
  }

  //------------------------------------------------------------------------------------------------
  //   To one property: mArtwork
  //------------------------------------------------------------------------------------------------

  final let mArtwork_property = StoredObject_ArtworkRoot (usedForSignature: false, strongRef: true, key: "mArtwork")

  //------------------------------------------------------------------------------------------------

  final var mArtwork : ArtworkRoot? {
    get {
      return self.mArtwork_property.propval
    }
    set {
      // self.mArtwork_property.setProp (newValue)
      if self.mArtwork_property.propval !== newValue {
        if self.mArtwork_property.propval != nil {
          self.mArtwork_property.setProp (nil)
        }
        if newValue != nil {
          self.mArtwork_property.setProp (newValue)
        }
      }
    }
  }

  //------------------------------------------------------------------------------------------------

  final let mArtwork_none = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------
  //   Transient property: hasInnerElements
  //------------------------------------------------------------------------------------------------

  final let hasInnerElements_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var hasInnerElements : Bool? {
    return self.hasInnerElements_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: segmentedControlArtworkAttentionImage
  //------------------------------------------------------------------------------------------------

  final let segmentedControlArtworkAttentionImage_property = EBTransientProperty <NSImage> ()

  //------------------------------------------------------------------------------------------------

  final var segmentedControlArtworkAttentionImage : NSImage? {
    return self.segmentedControlArtworkAttentionImage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: layerConfigurationString
  //------------------------------------------------------------------------------------------------

  final let layerConfigurationString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var layerConfigurationString : String? {
    return self.layerConfigurationString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardGridStepMultipliedByDisplayFactor
  //------------------------------------------------------------------------------------------------

  final let boardGridStepMultipliedByDisplayFactor_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var boardGridStepMultipliedByDisplayFactor : Int? {
    return self.boardGridStepMultipliedByDisplayFactor_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardLimitsGridStepMultipliedByDisplayFactor
  //------------------------------------------------------------------------------------------------

  final let boardLimitsGridStepMultipliedByDisplayFactor_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var boardLimitsGridStepMultipliedByDisplayFactor : Int? {
    return self.boardLimitsGridStepMultipliedByDisplayFactor_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardShapeIsRectangular
  //------------------------------------------------------------------------------------------------

  final let boardShapeIsRectangular_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var boardShapeIsRectangular : Bool? {
    return self.boardShapeIsRectangular_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   To one property: mSelectedSheet
  //------------------------------------------------------------------------------------------------

  final let mSelectedSheet_property = StoredObject_SheetInProject (usedForSignature: false, strongRef: true, key: "mSelectedSheet")

  //------------------------------------------------------------------------------------------------

  final var mSelectedSheet : SheetInProject? {
    get {
      return self.mSelectedSheet_property.propval
    }
    set {
      // self.mSelectedSheet_property.setProp (newValue)
      if self.mSelectedSheet_property.propval !== newValue {
        if self.mSelectedSheet_property.propval != nil {
          self.mSelectedSheet_property.setProp (nil)
        }
        if newValue != nil {
          self.mSelectedSheet_property.setProp (newValue)
        }
      }
    }
  }

  //------------------------------------------------------------------------------------------------

  final let mSelectedSheet_none = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------
  //   Transient property: selectedSheetIssues
  //------------------------------------------------------------------------------------------------

  final let selectedSheetIssues_property = EBTransientProperty <CanariIssueArray> ()

  //------------------------------------------------------------------------------------------------

  final var selectedSheetIssues : CanariIssueArray? {
    return self.selectedSheetIssues_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: schematicOverDisplay
  //------------------------------------------------------------------------------------------------

  final let schematicOverDisplay_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------

  final var schematicOverDisplay : EBShape? {
    return self.schematicOverDisplay_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: schematicTooltips
  //------------------------------------------------------------------------------------------------

  final let schematicTooltips_property = EBTransientProperty <GraphicViewTooltipArray> ()

  //------------------------------------------------------------------------------------------------

  final var schematicTooltips : GraphicViewTooltipArray? {
    return self.schematicTooltips_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: segmentedControlSheetIssueImage
  //------------------------------------------------------------------------------------------------

  final let segmentedControlSheetIssueImage_property = EBTransientProperty <NSImage> ()

  //------------------------------------------------------------------------------------------------

  final var segmentedControlSheetIssueImage : NSImage? {
    return self.segmentedControlSheetIssueImage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: schematicErrorCount
  //------------------------------------------------------------------------------------------------

  final let schematicErrorCount_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var schematicErrorCount : Int? {
    return self.schematicErrorCount_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: sheetIndexes
  //------------------------------------------------------------------------------------------------

  final let sheetIndexes_property = EBTransientProperty <IntArray> ()

  //------------------------------------------------------------------------------------------------

  final var sheetIndexes : IntArray? {
    return self.sheetIndexes_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: netsDescription
  //------------------------------------------------------------------------------------------------

  final let netsDescription_property = EBTransientProperty <NetInfoArray> ()

  //------------------------------------------------------------------------------------------------

  final var netsDescription : NetInfoArray? {
    return self.netsDescription_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardIssues
  //------------------------------------------------------------------------------------------------

  final let boardIssues_property = EBTransientProperty <CanariIssueArray> ()

  //------------------------------------------------------------------------------------------------

  final var boardIssues : CanariIssueArray? {
    return self.boardIssues_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: hasSixLayers
  //------------------------------------------------------------------------------------------------

  final let hasSixLayers_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var hasSixLayers : Bool? {
    return self.hasSixLayers_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: signatureForERCChecking
  //------------------------------------------------------------------------------------------------

  final let signatureForERCChecking_property = EBTransientProperty <UInt32> ()

  //------------------------------------------------------------------------------------------------

  final var signatureForERCChecking : UInt32? {
    return self.signatureForERCChecking_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: ercStatusImageOrNoneOnSuccess
  //------------------------------------------------------------------------------------------------

  final let ercStatusImageOrNoneOnSuccess_property = EBTransientProperty <NSImage> ()

  //------------------------------------------------------------------------------------------------

  final var ercStatusImageOrNoneOnSuccess : NSImage? {
    return self.ercStatusImageOrNoneOnSuccess_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: ercStatusMessage
  //------------------------------------------------------------------------------------------------

  final let ercStatusMessage_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var ercStatusMessage : String? {
    return self.ercStatusMessage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: ercStatusValue
  //------------------------------------------------------------------------------------------------

  final let ercStatusValue_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var ercStatusValue : Int? {
    return self.ercStatusValue_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: fileSystemDeviceLibraryStatusImage
  //------------------------------------------------------------------------------------------------

  final let fileSystemDeviceLibraryStatusImage_property = EBTransientProperty <NSImage> ()

  //------------------------------------------------------------------------------------------------

  final var fileSystemDeviceLibraryStatusImage : NSImage? {
    return self.fileSystemDeviceLibraryStatusImage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: fileSystemFontLibraryStatusImage
  //------------------------------------------------------------------------------------------------

  final let fileSystemFontLibraryStatusImage_property = EBTransientProperty <NSImage> ()

  //------------------------------------------------------------------------------------------------

  final var fileSystemFontLibraryStatusImage : NSImage? {
    return self.fileSystemFontLibraryStatusImage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: libraryPageRequiresAttentionImage
  //------------------------------------------------------------------------------------------------

  final let libraryPageRequiresAttentionImage_property = EBTransientProperty <NSImage> ()

  //------------------------------------------------------------------------------------------------

  final var libraryPageRequiresAttentionImage : NSImage? {
    return self.libraryPageRequiresAttentionImage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: viaCountString
  //------------------------------------------------------------------------------------------------

  final let viaCountString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var viaCountString : String? {
    return self.viaCountString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: topSideTrackCountString
  //------------------------------------------------------------------------------------------------

  final let topSideTrackCountString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var topSideTrackCountString : String? {
    return self.topSideTrackCountString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: backSideTrackCountString
  //------------------------------------------------------------------------------------------------

  final let backSideTrackCountString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var backSideTrackCountString : String? {
    return self.backSideTrackCountString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: inner1LayerTrackCountString
  //------------------------------------------------------------------------------------------------

  final let inner1LayerTrackCountString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var inner1LayerTrackCountString : String? {
    return self.inner1LayerTrackCountString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: inner2LayerTrackCountString
  //------------------------------------------------------------------------------------------------

  final let inner2LayerTrackCountString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var inner2LayerTrackCountString : String? {
    return self.inner2LayerTrackCountString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: inner3LayerTrackCountString
  //------------------------------------------------------------------------------------------------

  final let inner3LayerTrackCountString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var inner3LayerTrackCountString : String? {
    return self.inner3LayerTrackCountString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: inner4LayerTrackCountString
  //------------------------------------------------------------------------------------------------

  final let inner4LayerTrackCountString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var inner4LayerTrackCountString : String? {
    return self.inner4LayerTrackCountString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: trackCountString
  //------------------------------------------------------------------------------------------------

  final let trackCountString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var trackCountString : String? {
    return self.trackCountString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: trackLengthString
  //------------------------------------------------------------------------------------------------

  final let trackLengthString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var trackLengthString : String? {
    return self.trackLengthString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardStatusErrorCount
  //------------------------------------------------------------------------------------------------

  final let boardStatusErrorCount_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var boardStatusErrorCount : Int? {
    return self.boardStatusErrorCount_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: interiorBoundBox
  //------------------------------------------------------------------------------------------------

  final let interiorBoundBox_property = EBTransientProperty <CanariRect> ()

  //------------------------------------------------------------------------------------------------

  final var interiorBoundBox : CanariRect? {
    return self.interiorBoundBox_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardBoundBox
  //------------------------------------------------------------------------------------------------

  final let boardBoundBox_property = EBTransientProperty <CanariRect> ()

  //------------------------------------------------------------------------------------------------

  final var boardBoundBox : CanariRect? {
    return self.boardBoundBox_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardInteriorTop
  //------------------------------------------------------------------------------------------------

  final let boardInteriorTop_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var boardInteriorTop : String? {
    return self.boardInteriorTop_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardInteriorBottom
  //------------------------------------------------------------------------------------------------

  final let boardInteriorBottom_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var boardInteriorBottom : String? {
    return self.boardInteriorBottom_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardInteriorLeft
  //------------------------------------------------------------------------------------------------

  final let boardInteriorLeft_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var boardInteriorLeft : String? {
    return self.boardInteriorLeft_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardInteriorRight
  //------------------------------------------------------------------------------------------------

  final let boardInteriorRight_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var boardInteriorRight : String? {
    return self.boardInteriorRight_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardLimitBorderTop
  //------------------------------------------------------------------------------------------------

  final let boardLimitBorderTop_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var boardLimitBorderTop : String? {
    return self.boardLimitBorderTop_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardLimitBorderBottom
  //------------------------------------------------------------------------------------------------

  final let boardLimitBorderBottom_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var boardLimitBorderBottom : String? {
    return self.boardLimitBorderBottom_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardLimitBorderLeft
  //------------------------------------------------------------------------------------------------

  final let boardLimitBorderLeft_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var boardLimitBorderLeft : String? {
    return self.boardLimitBorderLeft_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardLimitBorderRight
  //------------------------------------------------------------------------------------------------

  final let boardLimitBorderRight_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var boardLimitBorderRight : String? {
    return self.boardLimitBorderRight_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: borderElementCountString
  //------------------------------------------------------------------------------------------------

  final let borderElementCountString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var borderElementCountString : String? {
    return self.borderElementCountString_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: borderOutlineBackground
  //------------------------------------------------------------------------------------------------

  final let borderOutlineBackground_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------

  final var borderOutlineBackground : EBShape? {
    return self.borderOutlineBackground_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: borderViewBackground
  //------------------------------------------------------------------------------------------------

  final let borderViewBackground_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------

  final var borderViewBackground : EBShape? {
    return self.borderViewBackground_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: fontNameArray
  //------------------------------------------------------------------------------------------------

  final let fontNameArray_property = EBTransientProperty <StringArray> ()

  //------------------------------------------------------------------------------------------------

  final var fontNameArray : StringArray? {
    return self.fontNameArray_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: deviceNames
  //------------------------------------------------------------------------------------------------

  final let deviceNames_property = EBTransientProperty <StringArray> ()

  //------------------------------------------------------------------------------------------------

  final var deviceNames : StringArray? {
    return self.deviceNames_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: allClassNames
  //------------------------------------------------------------------------------------------------

  final let allClassNames_property = EBTransientProperty <StringArray> ()

  //------------------------------------------------------------------------------------------------

  final var allClassNames : StringArray? {
    return self.allClassNames_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: sheetGeometry
  //------------------------------------------------------------------------------------------------

  final let sheetGeometry_property = EBTransientProperty <SchematicSheetGeometry> ()

  //------------------------------------------------------------------------------------------------

  final var sheetGeometry : SchematicSheetGeometry? {
    return self.sheetGeometry_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: schematicBackgroundDisplay
  //------------------------------------------------------------------------------------------------

  final let schematicBackgroundDisplay_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------

  final var schematicBackgroundDisplay : EBShape? {
    return self.schematicBackgroundDisplay_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: netWarningCount
  //------------------------------------------------------------------------------------------------

  final let netWarningCount_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var netWarningCount : Int? {
    return self.netWarningCount_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: segmentedControlNetListIssueImage
  //------------------------------------------------------------------------------------------------

  final let segmentedControlNetListIssueImage_property = EBTransientProperty <NSImage> ()

  //------------------------------------------------------------------------------------------------

  final var segmentedControlNetListIssueImage : NSImage? {
    return self.segmentedControlNetListIssueImage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: netNamesArray
  //------------------------------------------------------------------------------------------------

  final let netNamesArray_property = EBTransientProperty <StringArray> ()

  //------------------------------------------------------------------------------------------------

  final var netNamesArray : StringArray? {
    return self.netNamesArray_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: unplacedSymbols
  //------------------------------------------------------------------------------------------------

  final let unplacedSymbols_property = EBTransientProperty <StringTagArray> ()

  //------------------------------------------------------------------------------------------------

  final var unplacedSymbols : StringTagArray? {
    return self.unplacedSymbols_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: unplacedPackages
  //------------------------------------------------------------------------------------------------

  final let unplacedPackages_property = EBTransientProperty <StringTagArray> ()

  //------------------------------------------------------------------------------------------------

  final var unplacedPackages : StringTagArray? {
    return self.unplacedPackages_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: componentsPlacedInBoard
  //------------------------------------------------------------------------------------------------

  final let componentsPlacedInBoard_property = EBTransientProperty <StringTagArray> ()

  //------------------------------------------------------------------------------------------------

  final var componentsPlacedInBoard : StringTagArray? {
    return self.componentsPlacedInBoard_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardStatusMessage
  //------------------------------------------------------------------------------------------------

  final let boardStatusMessage_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var boardStatusMessage : String? {
    return self.boardStatusMessage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: boardStatusWarningCount
  //------------------------------------------------------------------------------------------------

  final let boardStatusWarningCount_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var boardStatusWarningCount : Int? {
    return self.boardStatusWarningCount_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: placedComponentNameArray
  //------------------------------------------------------------------------------------------------

  final let placedComponentNameArray_property = EBTransientProperty <StringArray> ()

  //------------------------------------------------------------------------------------------------

  final var placedComponentNameArray : StringArray? {
    return self.placedComponentNameArray_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: schematicHasErrorOrWarning
  //------------------------------------------------------------------------------------------------

  final let schematicHasErrorOrWarning_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var schematicHasErrorOrWarning : Bool? {
    return self.schematicHasErrorOrWarning_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: schematicStatusMessage
  //------------------------------------------------------------------------------------------------

  final let schematicStatusMessage_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------

  final var schematicStatusMessage : String? {
    return self.schematicStatusMessage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: segmentedControlSchematicIssueImage
  //------------------------------------------------------------------------------------------------

  final let segmentedControlSchematicIssueImage_property = EBTransientProperty <NSImage> ()

  //------------------------------------------------------------------------------------------------

  final var segmentedControlSchematicIssueImage : NSImage? {
    return self.segmentedControlSchematicIssueImage_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: schematicWarningCount
  //------------------------------------------------------------------------------------------------

  final let schematicWarningCount_property = EBTransientProperty <Int> ()

  //------------------------------------------------------------------------------------------------

  final var schematicWarningCount : Int? {
    return self.schematicWarningCount_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: hasSchematicIssue
  //------------------------------------------------------------------------------------------------

  final let hasSchematicIssue_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------

  final var hasSchematicIssue : Bool? {
    return self.hasSchematicIssue_property.optionalValue
  }

  //------------------------------------------------------------------------------------------------
  //   Transient property: segmentedControlBoardIssueImage
  //------------------------------------------------------------------------------------------------

  final let segmentedControlBoardIssueImage_property = EBTransientProperty <NSImage> ()

  //------------------------------------------------------------------------------------------------

  final var segmentedControlBoardIssueImage : NSImage? {
    return self.segmentedControlBoardIssueImage_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mArtworkName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mArtworkName")
    self.mArtworkVersion_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mArtworkVersion")
    self.mArtworkFileSystemLibraryStatus_property = EBStandAloneProperty_String ("")
    self.mArtworkFileSystemLibraryRequiresAttention_property = EBStandAloneProperty_Bool (false)
    self.mArtworkIsUpdatable_property = EBStandAloneProperty_Bool (false)
    self.mPDFBoardBackgroundColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.lightGray, undoManager: inUndoManager, key: "mPDFBoardBackgroundColor")
    self.mGenerateMergerArchive_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mGenerateMergerArchive")
    self.mGenerateBOM_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mGenerateBOM")
    self.mGenerateGerberAndPDF_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mGenerateGerberAndPDF")
    self.mPDFProductGrid_property = EBStoredProperty_PDFProductGrid (defaultValue: PDFProductGrid.noGrid, undoManager: inUndoManager, key: "mPDFProductGrid")
    self.mGerberProductUnit_property = EBStoredProperty_GerberUnit (defaultValue: GerberUnit.metric, undoManager: inUndoManager, key: "mGerberProductUnit")
    self.mExpandInner1BoardSettings_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mExpandInner1BoardSettings")
    self.mExpandInner2BoardSettings_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mExpandInner2BoardSettings")
    self.mExpandInner3BoardSettings_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mExpandInner3BoardSettings")
    self.mExpandInner4BoardSettings_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mExpandInner4BoardSettings")
    self.mExpandOtherBoardSettings_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mExpandOtherBoardSettings")
    self.mExpandFrontSideBoardSettings_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mExpandFrontSideBoardSettings")
    self.mExpandBackSideBoardSettings_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mExpandBackSideBoardSettings")
    self.mCheckClearanceBetweenPadsOfSameNet_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "mCheckClearanceBetweenPadsOfSameNet")
    self.mLastERCCheckingIsSuccess_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mLastERCCheckingIsSuccess")
    self.mLastERCCheckingSignature_property = EBStoredProperty_UInt32 (defaultValue: 1, undoManager: inUndoManager, key: "mLastERCCheckingSignature")
    self.mLayerConfiguration_property = EBStoredProperty_LayerConfiguration (defaultValue: LayerConfiguration.twoLayers, undoManager: inUndoManager, key: "mLayerConfiguration")
    self.mBoardSideForNewTrack_property = EBStoredProperty_TrackSide (defaultValue: TrackSide.front, undoManager: inUndoManager, key: "mBoardSideForNewTrack")
    self.mDirectionForNewTrack_property = EBStoredProperty_TrackCreationDirection (defaultValue: TrackCreationDirection.anyAngle, undoManager: inUndoManager, key: "mDirectionForNewTrack")
    self.mBoardLayerForNewText_property = EBStoredProperty_BoardTextLayer (defaultValue: BoardTextLayer.legendFront, undoManager: inUndoManager, key: "mBoardLayerForNewText")
    self.mBoardLayerForNewQRCode_property = EBStoredProperty_BoardQRCodeLayer (defaultValue: BoardQRCodeLayer.legendFront, undoManager: inUndoManager, key: "mBoardLayerForNewQRCode")
    self.mBoardLayerForNewImage_property = EBStoredProperty_BoardQRCodeLayer (defaultValue: BoardQRCodeLayer.legendFront, undoManager: inUndoManager, key: "mBoardLayerForNewImage")
    self.mBoardLayerForNewLine_property = EBStoredProperty_BoardLineLayer (defaultValue: BoardLineLayer.legendFront, undoManager: inUndoManager, key: "mBoardLayerForNewLine")
    self.mBoardSideForNewRestrictRectangle_property = EBStoredProperty_RestrictRectangleLayer (defaultValue: RestrictRectangleLayer.frontSide, undoManager: inUndoManager, key: "mBoardSideForNewRestrictRectangle")
    self.mNewRestrictRectangleLayers_property = EBStoredProperty_Int (defaultValue: 1, undoManager: inUndoManager, key: "mNewRestrictRectangleLayers")
    self.mAutoRouterPreferredDirections_property = EBStoredProperty_AutorouterPreferredDirections (defaultValue: AutorouterPreferredDirections.vFrontHback, undoManager: inUndoManager, key: "mAutoRouterPreferredDirections")
    self.mAutorouterSnapAngle_property = EBStoredProperty_AutorouterSnapAngle (defaultValue: AutorouterSnapAngle.octolinear, undoManager: inUndoManager, key: "mAutorouterSnapAngle")
    self.mRouteDirection_property = EBStoredProperty_RouteDirection (defaultValue: RouteDirection.from, undoManager: inUndoManager, key: "mRouteDirection")
    self.mRouteOrigin_property = EBStoredProperty_RouteOrigin (defaultValue: RouteOrigin.center, undoManager: inUndoManager, key: "mRouteOrigin")
    self.mAutorouterInterfaceMode_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mAutorouterInterfaceMode")
    self.mExportExistingTracksAndVias_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mExportExistingTracksAndVias")
    self.mAllowViaAtSMD_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mAllowViaAtSMD")
    self.mTrackLengthUnit_property = EBStoredProperty_Int (defaultValue: 90000000, undoManager: inUndoManager, key: "mTrackLengthUnit")
    self.mLayoutClearance_property = EBStoredProperty_Int (defaultValue: 22860, undoManager: inUndoManager, key: "mLayoutClearance")
    self.mLayoutClearanceUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mLayoutClearanceUnit")
    self.mBoardSelectedInspector_property = EBStoredProperty_Int (defaultValue: 1, undoManager: inUndoManager, key: "mBoardSelectedInspector")
    self.mBoardHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mBoardHorizontalFlip")
    self.mBoardVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mBoardVerticalFlip")
    self.mBoardGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: inUndoManager, key: "mBoardGridStyle")
    self.mBoardGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4, undoManager: inUndoManager, key: "mBoardGridDisplayFactor")
    self.mBoardZoom_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mBoardZoom")
    self.mBoardGridStep_property = EBStoredProperty_Int (defaultValue: 57150, undoManager: inUndoManager, key: "mBoardGridStep")
    self.mBoardGridStepUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "mBoardGridStepUnit")
    self.mErrorOrWarningIssueSize_property = EBStoredProperty_Double (defaultValue: 6, undoManager: inUndoManager, key: "mErrorOrWarningIssueSize")
    self.mControlKeyHiliteDiameter_property = EBStoredProperty_Double (defaultValue: 100, undoManager: inUndoManager, key: "mControlKeyHiliteDiameter")
    self.mDSNFileProposedName_property = EBStoredProperty_String (defaultValue: "design.dsn", undoManager: inUndoManager, key: "mDSNFileProposedName")
    self.mBoardLimitsWidth_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsWidth")
    self.mBoardLimitsWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsWidthUnit")
    self.mBoardClearance_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardClearance")
    self.mBoardClearanceUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardClearanceUnit")
    self.mBoardLimitsSelectedInspector_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mBoardLimitsSelectedInspector")
    self.mBoardLimitsHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mBoardLimitsHorizontalFlip")
    self.mBoardLimitsVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mBoardLimitsVerticalFlip")
    self.mBoardLimitsGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: inUndoManager, key: "mBoardLimitsGridStyle")
    self.mBoardLimitsGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 5, undoManager: inUndoManager, key: "mBoardLimitsGridDisplayFactor")
    self.mBoardLimitsZoom_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mBoardLimitsZoom")
    self.mBoardLimitsGridStep_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsGridStep")
    self.mBoardLimitsGridStepUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsGridStepUnit")
    self.mBoardLimitsBoundingBoxUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitsBoundingBoxUnit")
    self.mBoardPointsBoundingBoxUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardPointsBoundingBoxUnit")
    self.mBoardSelectedCurveDisplayUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardSelectedCurveDisplayUnit")
    self.mBoardLimitControlPointsDisplayUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mBoardLimitControlPointsDisplayUnit")
    self.mBoardShape_property = EBStoredProperty_BoardShape (defaultValue: BoardShape.rectangular, undoManager: inUndoManager, key: "mBoardShape")
    self.mContentOpacityInBoardOutline_property = EBStoredProperty_Double (defaultValue: 0.5, undoManager: inUndoManager, key: "mContentOpacityInBoardOutline")
    self.mRectangularBoardWidth_property = EBStoredProperty_Int (defaultValue: 9000000, undoManager: inUndoManager, key: "mRectangularBoardWidth")
    self.mRectangularBoardWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mRectangularBoardWidthUnit")
    self.mRectangularBoardHeight_property = EBStoredProperty_Int (defaultValue: 9000000, undoManager: inUndoManager, key: "mRectangularBoardHeight")
    self.mRectangularBoardHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mRectangularBoardHeightUnit")
    self.mDefaultNetClassName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mDefaultNetClassName")
    self.mSchematicHilitedColumnIndex_property = EBStoredProperty_Int (defaultValue: -1, undoManager: inUndoManager, key: "mSchematicHilitedColumnIndex")
    self.mSchematicHilitedRowIndex_property = EBStoredProperty_Int (defaultValue: -1, undoManager: inUndoManager, key: "mSchematicHilitedRowIndex")
    self.mSchematicEnableHiliteColumnAndRow_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mSchematicEnableHiliteColumnAndRow")
    self.mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mSelectedPageIndex")
    self.mSelectedSchematicInspector_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mSelectedSchematicInspector")
    self.mSchematicTitle_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSchematicTitle")
    self.mSchematicVersion_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSchematicVersion")
    self.mSchematicDate_property = EBStoredProperty_Date (defaultValue: Date (), undoManager: inUndoManager, key: "mSchematicDate")
    self.mSchematicHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mSchematicHorizontalFlip")
    self.mSchematicVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "mSchematicVerticalFlip")
    self.mSchematicZoom_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "mSchematicZoom")
    self.mSchematicGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: inUndoManager, key: "mSchematicGridStyle")
    self.mSchematicGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4, undoManager: inUndoManager, key: "mSchematicGridDisplayFactor")
    self.mSchematicCustomWidth_property = EBStoredProperty_Int (defaultValue: 27000000, undoManager: inUndoManager, key: "mSchematicCustomWidth")
    self.mSchematicCustomWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mSchematicCustomWidthUnit")
    self.mSchematicCustomHeight_property = EBStoredProperty_Int (defaultValue: 27000000, undoManager: inUndoManager, key: "mSchematicCustomHeight")
    self.mSchematicCustomHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000, undoManager: inUndoManager, key: "mSchematicCustomHeightUnit")
    self.mWorkingAreaRectString_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mWorkingAreaRectString")
    self.drawErrorBackgroundForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "drawErrorBackgroundForBoard")
    self.displayFrontRestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayFrontRestrictRectangles")
    self.displayBackRestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayBackRestrictRectangles")
    self.displayInner1RestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner1RestrictRectangles")
    self.displayInner2RestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner2RestrictRectangles")
    self.displayInner3RestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner3RestrictRectangles")
    self.displayInner4RestrictRectangles_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner4RestrictRectangles")
    self.displayFrontLegendForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayFrontLegendForBoard")
    self.displayFrontLayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayFrontLayoutForBoard")
    self.displayBackLayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayBackLayoutForBoard")
    self.displayInner1LayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner1LayoutForBoard")
    self.displayInner2LayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner2LayoutForBoard")
    self.displayInner3LayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner3LayoutForBoard")
    self.displayInner4LayoutForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayInner4LayoutForBoard")
    self.displayBackLegendForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayBackLegendForBoard")
    self.displayFrontPadsForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayFrontPadsForBoard")
    self.displayBackPadsForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayBackPadsForBoard")
    self.displayPadNumbersForBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "displayPadNumbersForBoard")
    self.packageDrawingWidthMultpliedByTenForBoard_property = EBStoredProperty_Int (defaultValue: 5, undoManager: inUndoManager, key: "packageDrawingWidthMultpliedByTenForBoard")
    self.mSchematicSheetOrientation_property = EBStoredProperty_SchematicSheetOrientation (defaultValue: SchematicSheetOrientation.a4Horizontal, undoManager: inUndoManager, key: "mSchematicSheetOrientation")
    self.mRastnetDisplay_property = EBStoredProperty_RastnetDisplay (defaultValue: RastnetDisplay.allNets, undoManager: inUndoManager, key: "mRastnetDisplay")
    self.mRastnetDisplayedNetName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mRastnetDisplayedNetName")
    self.mRastnetDisplayedComponentName_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mRastnetDisplayedComponentName")
    super.init (inUndoManager)
    self.mArtwork_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mArtwork_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mArtwork_property.startsBeingObserved (by: self.mArtwork_none)
    self.mSelectedSheet_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mSelectedSheet_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.startsBeingObserved (by: self.mSelectedSheet_none)
  //--- To many property: mSheets (has opposite relationship)
    self.mSheets_property.undoManager = inUndoManager
    self.mSheets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mFonts (no option)
    self.mFonts_property.undoManager = inUndoManager
  //--- To many property: mDevices (no option)
    self.mDevices_property.undoManager = inUndoManager
  //--- To many property: mNetClasses (no option)
    self.mNetClasses_property.undoManager = inUndoManager
  //--- To many property: mBorderCurves (has opposite relationship)
    self.mBorderCurves_property.undoManager = inUndoManager
    self.mBorderCurves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mBoardObjects (has opposite relationship)
    self.mBoardObjects_property.undoManager = inUndoManager
    self.mBoardObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mComponents (no option)
    self.mComponents_property.undoManager = inUndoManager
  //--- Atomic proxy property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minPPTPTTTWdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minPPTPTTTWdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minPPTPTTTWdisplayUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minPPTPTTTWdisplayUnit_property.startsBeingObserved (by: self.minPPTPTTTWdisplayUnit_property)
  //--- Atomic proxy property: minPPTPTTTW
    self.minPPTPTTTW_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minPPTPTTTW_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minPPTPTTTW_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minPPTPTTTW_property.setProp (inValue)
    }
    self.mArtwork_property.minPPTPTTTW_property.startsBeingObserved (by: self.minPPTPTTTW_property)
  //--- Atomic proxy property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForOARdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForOARdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForOARdisplayUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForOARdisplayUnit_property.startsBeingObserved (by: self.minValueForOARdisplayUnit_property)
  //--- Atomic proxy property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForOARinEBUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForOARinEBUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForOARinEBUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForOARinEBUnit_property.startsBeingObserved (by: self.minValueForOARinEBUnit_property)
  //--- Atomic proxy property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForPHDdisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForPHDdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForPHDdisplayUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForPHDdisplayUnit_property.startsBeingObserved (by: self.minValueForPHDdisplayUnit_property)
  //--- Atomic proxy property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForPHDinEBUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForPHDinEBUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForPHDinEBUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForPHDinEBUnit_property.startsBeingObserved (by: self.minValueForPHDinEBUnit_property)
  //--- Atomic proxy property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForBoardLimitWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidth_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForBoardLimitWidth_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForBoardLimitWidth_property.startsBeingObserved (by: self.minValueForBoardLimitWidth_property)
  //--- Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.minValueForBoardLimitWidthDisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidthDisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForBoardLimitWidthDisplayUnit_property.setProp (inValue)
    }
    self.mArtwork_property.minValueForBoardLimitWidthDisplayUnit_property.startsBeingObserved (by: self.minValueForBoardLimitWidthDisplayUnit_property)
  //--- Atomic proxy property: artworkComments
    self.artworkComments_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.comments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.artworkComments_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mArtwork?.comments_property.setProp (inValue)
    }
    self.mArtwork_property.comments_property.startsBeingObserved (by: self.artworkComments_property)
  //--- Atomic proxy property: artworkLayerConfiguration
    self.artworkLayerConfiguration_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.layerConfiguration_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.artworkLayerConfiguration_property.mWriteModelFunction = { [weak self] (_ inValue : LayerConfiguration) in
      self?.mArtwork?.layerConfiguration_property.setProp (inValue)
    }
    self.mArtwork_property.layerConfiguration_property.startsBeingObserved (by: self.artworkLayerConfiguration_property)
  //--- Atomic proxy property: artworkTitle
    self.artworkTitle_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.title_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.artworkTitle_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mArtwork?.title_property.setProp (inValue)
    }
    self.mArtwork_property.title_property.startsBeingObserved (by: self.artworkTitle_property)
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mReadModelFunction = { [weak self] in
      if let object = self?.mSelectedSheet_property {
        switch object.mSheetTitle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.selectedSheetTitle_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mSelectedSheet?.mSheetTitle_property.setProp (inValue)
    }
    self.mSelectedSheet_property.mSheetTitle_property.startsBeingObserved (by: self.selectedSheetTitle_property)
  //--- ToMany proxy: selectedSheetObjects
    do{
      let controller = EBObservablePropertyController (
        observedObjects: [self.mSelectedSheet_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mSelectedSheet {
            me.selectedSheetObjects_property.setModel (model.mObjects_property)
          }
        }
      )
      self.mSelectedSheet_property.toMany_mObjects_StartsBeingObserved (by: controller)
      self.selectedSheetObjects_modelDidChangeController = controller
    }
  //--- Atomic proxy property: drillDataFileExtension
    self.drillDataFileExtension_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork_property {
        switch object.drillDataFileExtension_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let optionalV) :
          if let v = optionalV {
            return .single (v)
          }else{
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.drillDataFileExtension_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mArtwork?.drillDataFileExtension_property.setProp (inValue)
    }
    self.mArtwork_property.drillDataFileExtension_property.startsBeingObserved (by: self.drillDataFileExtension_property)
  //--- ToMany proxy: fileGenerationParameterArray
    do{
      let controller = EBObservablePropertyController (
        observedObjects: [self.mArtwork_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mArtwork {
            me.fileGenerationParameterArray_property.setModel (model.fileGenerationParameterArray_property)
          }
        }
      )
      self.mArtwork_property.toMany_fileGenerationParameterArray_StartsBeingObserved (by: controller)
      self.fileGenerationParameterArray_modelDidChangeController = controller
    }
  //--- To one property: mArtwork
    self.mArtwork_property.undoManager = inUndoManager
  //--- Atomic property: hasInnerElements
    self.hasInnerElements_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mArtwork_property.hasInnerElements_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_hasInnerElements (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mArtwork_property.hasInnerElements_property.startsBeingObserved (by: self.hasInnerElements_property)
  //--- Atomic property: segmentedControlArtworkAttentionImage
    self.segmentedControlArtworkAttentionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mArtworkFileSystemLibraryRequiresAttention_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_segmentedControlArtworkAttentionImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mArtworkFileSystemLibraryRequiresAttention_property.startsBeingObserved (by: self.segmentedControlArtworkAttentionImage_property)
  //--- Atomic property: layerConfigurationString
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLayerConfiguration_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_layerConfigurationString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLayerConfiguration_property.startsBeingObserved (by: self.layerConfigurationString_property)
  //--- Atomic property: boardGridStepMultipliedByDisplayFactor
    self.boardGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardGridStep_property.selection
        let s1 = unwSelf.mBoardGridDisplayFactor_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardGridStepMultipliedByDisplayFactor (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardGridStep_property.startsBeingObserved (by: self.boardGridStepMultipliedByDisplayFactor_property)
    self.mBoardGridDisplayFactor_property.startsBeingObserved (by: self.boardGridStepMultipliedByDisplayFactor_property)
  //--- Atomic property: boardLimitsGridStepMultipliedByDisplayFactor
    self.boardLimitsGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardLimitsGridStep_property.selection
        let s1 = unwSelf.mBoardLimitsGridDisplayFactor_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitsGridStepMultipliedByDisplayFactor (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardLimitsGridStep_property.startsBeingObserved (by: self.boardLimitsGridStepMultipliedByDisplayFactor_property)
    self.mBoardLimitsGridDisplayFactor_property.startsBeingObserved (by: self.boardLimitsGridStepMultipliedByDisplayFactor_property)
  //--- Atomic property: boardShapeIsRectangular
    self.boardShapeIsRectangular_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardShape_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_boardShapeIsRectangular (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardShape_property.startsBeingObserved (by: self.boardShapeIsRectangular_property)
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.undoManager = inUndoManager
  //--- Atomic property: selectedSheetIssues
    self.selectedSheetIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSelectedSheet_property.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_selectedSheetIssues (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.issues_property.startsBeingObserved (by: self.selectedSheetIssues_property)
  //--- Atomic property: schematicOverDisplay
    self.schematicOverDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSelectedSheet_property.connectedPoints_property.selection
        let s1 = unwSelf.selectedSheetIssues_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_schematicOverDisplay (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.connectedPoints_property.startsBeingObserved (by: self.schematicOverDisplay_property)
    self.selectedSheetIssues_property.startsBeingObserved (by: self.schematicOverDisplay_property)
  //--- Atomic property: schematicTooltips
    self.schematicTooltips_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSelectedSheet_property.schematicIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_schematicTooltips (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.schematicIssues_property.startsBeingObserved (by: self.schematicTooltips_property)
  //--- Atomic property: segmentedControlSheetIssueImage
    self.segmentedControlSheetIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSheets_property.selection
        let s1 = unwSelf.mSheets_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_segmentedControlSheetIssueImage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.toMany_schematicConnexionWarnings_StartsBeingObserved (by: self.segmentedControlSheetIssueImage_property)
    self.mSheets_property.toMany_schematicConnexionErrors_StartsBeingObserved (by: self.segmentedControlSheetIssueImage_property)
  //--- Atomic property: schematicErrorCount
    self.schematicErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSheets_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_schematicErrorCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.toMany_schematicConnexionErrors_StartsBeingObserved (by: self.schematicErrorCount_property)
  //--- Atomic property: sheetIndexes
    self.sheetIndexes_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSheets_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_sheetIndexes (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.startsBeingObserved (by: self.sheetIndexes_property)
  //--- Atomic property: netsDescription
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClasses_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_netsDescription (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.toMany_netsDescription_StartsBeingObserved (by: self.netsDescription_property)
  //--- Atomic property: boardIssues
    self.boardIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_boardIssues (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_issues_StartsBeingObserved (by: self.boardIssues_property)
  //--- Atomic property: hasSixLayers
    self.hasSixLayers_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.artworkLayerConfiguration_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_hasSixLayers (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.artworkLayerConfiguration_property.startsBeingObserved (by: self.hasSixLayers_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        let s1 = unwSelf.mArtwork_property.signatureForERCChecking_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_signatureForERCChecking (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_signatureForERCChecking_StartsBeingObserved (by: self.signatureForERCChecking_property)
    self.mArtwork_property.signatureForERCChecking_property.startsBeingObserved (by: self.signatureForERCChecking_property)
  //--- Atomic property: ercStatusImageOrNoneOnSuccess
    self.ercStatusImageOrNoneOnSuccess_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLastERCCheckingIsSuccess_property.selection
        let s1 = unwSelf.mLastERCCheckingSignature_property.selection
        let s2 = unwSelf.signatureForERCChecking_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_ercStatusImageOrNoneOnSuccess (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLastERCCheckingIsSuccess_property.startsBeingObserved (by: self.ercStatusImageOrNoneOnSuccess_property)
    self.mLastERCCheckingSignature_property.startsBeingObserved (by: self.ercStatusImageOrNoneOnSuccess_property)
    self.signatureForERCChecking_property.startsBeingObserved (by: self.ercStatusImageOrNoneOnSuccess_property)
  //--- Atomic property: ercStatusMessage
    self.ercStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLastERCCheckingIsSuccess_property.selection
        let s1 = unwSelf.mLastERCCheckingSignature_property.selection
        let s2 = unwSelf.signatureForERCChecking_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_ercStatusMessage (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLastERCCheckingIsSuccess_property.startsBeingObserved (by: self.ercStatusMessage_property)
    self.mLastERCCheckingSignature_property.startsBeingObserved (by: self.ercStatusMessage_property)
    self.signatureForERCChecking_property.startsBeingObserved (by: self.ercStatusMessage_property)
  //--- Atomic property: ercStatusValue
    self.ercStatusValue_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLastERCCheckingIsSuccess_property.selection
        let s1 = unwSelf.mLastERCCheckingSignature_property.selection
        let s2 = unwSelf.signatureForERCChecking_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_ercStatusValue (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLastERCCheckingIsSuccess_property.startsBeingObserved (by: self.ercStatusValue_property)
    self.mLastERCCheckingSignature_property.startsBeingObserved (by: self.ercStatusValue_property)
    self.signatureForERCChecking_property.startsBeingObserved (by: self.ercStatusValue_property)
  //--- Atomic property: fileSystemDeviceLibraryStatusImage
    self.fileSystemDeviceLibraryStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDevices_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_fileSystemDeviceLibraryStatusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDevices_property.toMany_mFileSystemStatusRequiresAttentionForDeviceInProject_StartsBeingObserved (by: self.fileSystemDeviceLibraryStatusImage_property)
  //--- Atomic property: fileSystemFontLibraryStatusImage
    self.fileSystemFontLibraryStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mFonts_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_fileSystemFontLibraryStatusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFonts_property.toMany_mFileSystemStatusRequiresAttentionForFontInProject_StartsBeingObserved (by: self.fileSystemFontLibraryStatusImage_property)
  //--- Atomic property: libraryPageRequiresAttentionImage
    self.libraryPageRequiresAttentionImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDevices_property.selection
        let s1 = unwSelf.mFonts_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_libraryPageRequiresAttentionImage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDevices_property.toMany_mFileSystemStatusRequiresAttentionForDeviceInProject_StartsBeingObserved (by: self.libraryPageRequiresAttentionImage_property)
    self.mFonts_property.toMany_mFileSystemStatusRequiresAttentionForFontInProject_StartsBeingObserved (by: self.libraryPageRequiresAttentionImage_property)
  //--- Atomic property: viaCountString
    self.viaCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_viaCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_isVia_StartsBeingObserved (by: self.viaCountString_property)
  //--- Atomic property: topSideTrackCountString
    self.topSideTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_topSideTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsBeingObserved (by: self.topSideTrackCountString_property)
  //--- Atomic property: backSideTrackCountString
    self.backSideTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_backSideTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsBeingObserved (by: self.backSideTrackCountString_property)
  //--- Atomic property: inner1LayerTrackCountString
    self.inner1LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_inner1LayerTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsBeingObserved (by: self.inner1LayerTrackCountString_property)
  //--- Atomic property: inner2LayerTrackCountString
    self.inner2LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_inner2LayerTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsBeingObserved (by: self.inner2LayerTrackCountString_property)
  //--- Atomic property: inner3LayerTrackCountString
    self.inner3LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_inner3LayerTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsBeingObserved (by: self.inner3LayerTrackCountString_property)
  //--- Atomic property: inner4LayerTrackCountString
    self.inner4LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_inner4LayerTrackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackSide_StartsBeingObserved (by: self.inner4LayerTrackCountString_property)
  //--- Atomic property: trackCountString
    self.trackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_trackCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackLengthInCanariUnit_StartsBeingObserved (by: self.trackCountString_property)
  //--- Atomic property: trackLengthString
    self.trackLengthString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBoardObjects_property.selection
        let s1 = unwSelf.mTrackLengthUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_trackLengthString (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.toMany_trackLengthInCanariUnit_StartsBeingObserved (by: self.trackLengthString_property)
    self.mTrackLengthUnit_property.startsBeingObserved (by: self.trackLengthString_property)
  //--- Atomic property: boardStatusErrorCount
    self.boardStatusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_boardStatusErrorCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardIssues_property.startsBeingObserved (by: self.boardStatusErrorCount_property)
  //--- Atomic property: interiorBoundBox
    self.interiorBoundBox_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBorderCurves_property.selection
        let s1 = unwSelf.mBoardShape_property.selection
        let s2 = unwSelf.mRectangularBoardWidth_property.selection
        let s3 = unwSelf.mRectangularBoardHeight_property.selection
        let s4 = unwSelf.mBoardClearance_property.selection
        let s5 = unwSelf.mBoardLimitsWidth_property.selection
        switch (s0, s1, s2, s3, s4, s5) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5)) :
          return .single (transient_ProjectRoot_interiorBoundBox (v0, v1, v2, v3, v4, v5))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBorderCurves_property.toMany_descriptor_StartsBeingObserved (by: self.interiorBoundBox_property)
    self.mBoardShape_property.startsBeingObserved (by: self.interiorBoundBox_property)
    self.mRectangularBoardWidth_property.startsBeingObserved (by: self.interiorBoundBox_property)
    self.mRectangularBoardHeight_property.startsBeingObserved (by: self.interiorBoundBox_property)
    self.mBoardClearance_property.startsBeingObserved (by: self.interiorBoundBox_property)
    self.mBoardLimitsWidth_property.startsBeingObserved (by: self.interiorBoundBox_property)
  //--- Atomic property: boardBoundBox
    self.boardBoundBox_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsWidth_property.selection
        let s2 = unwSelf.mBoardClearance_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_boardBoundBox (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsBeingObserved (by: self.boardBoundBox_property)
    self.mBoardLimitsWidth_property.startsBeingObserved (by: self.boardBoundBox_property)
    self.mBoardClearance_property.startsBeingObserved (by: self.boardBoundBox_property)
  //--- Atomic property: boardInteriorTop
    self.boardInteriorTop_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardPointsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardInteriorTop (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsBeingObserved (by: self.boardInteriorTop_property)
    self.mBoardPointsBoundingBoxUnit_property.startsBeingObserved (by: self.boardInteriorTop_property)
  //--- Atomic property: boardInteriorBottom
    self.boardInteriorBottom_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardPointsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardInteriorBottom (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsBeingObserved (by: self.boardInteriorBottom_property)
    self.mBoardPointsBoundingBoxUnit_property.startsBeingObserved (by: self.boardInteriorBottom_property)
  //--- Atomic property: boardInteriorLeft
    self.boardInteriorLeft_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardPointsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardInteriorLeft (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsBeingObserved (by: self.boardInteriorLeft_property)
    self.mBoardPointsBoundingBoxUnit_property.startsBeingObserved (by: self.boardInteriorLeft_property)
  //--- Atomic property: boardInteriorRight
    self.boardInteriorRight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.interiorBoundBox_property.selection
        let s1 = unwSelf.mBoardPointsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardInteriorRight (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.startsBeingObserved (by: self.boardInteriorRight_property)
    self.mBoardPointsBoundingBoxUnit_property.startsBeingObserved (by: self.boardInteriorRight_property)
  //--- Atomic property: boardLimitBorderTop
    self.boardLimitBorderTop_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitBorderTop (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.startsBeingObserved (by: self.boardLimitBorderTop_property)
    self.mBoardLimitsBoundingBoxUnit_property.startsBeingObserved (by: self.boardLimitBorderTop_property)
  //--- Atomic property: boardLimitBorderBottom
    self.boardLimitBorderBottom_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitBorderBottom (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.startsBeingObserved (by: self.boardLimitBorderBottom_property)
    self.mBoardLimitsBoundingBoxUnit_property.startsBeingObserved (by: self.boardLimitBorderBottom_property)
  //--- Atomic property: boardLimitBorderLeft
    self.boardLimitBorderLeft_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitBorderLeft (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.startsBeingObserved (by: self.boardLimitBorderLeft_property)
    self.mBoardLimitsBoundingBoxUnit_property.startsBeingObserved (by: self.boardLimitBorderLeft_property)
  //--- Atomic property: boardLimitBorderRight
    self.boardLimitBorderRight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardBoundBox_property.selection
        let s1 = unwSelf.mBoardLimitsBoundingBoxUnit_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardLimitBorderRight (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.startsBeingObserved (by: self.boardLimitBorderRight_property)
    self.mBoardLimitsBoundingBoxUnit_property.startsBeingObserved (by: self.boardLimitBorderRight_property)
  //--- Atomic property: borderElementCountString
    self.borderElementCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBorderCurves_property.count_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_borderElementCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBorderCurves_property.startsBeingObserved (by: self.borderElementCountString_property)
  //--- Atomic property: borderOutlineBackground
    self.borderOutlineBackground_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mBorderCurves_property.selection
        let s1 = unwSelf.mBoardShape_property.selection
        let s2 = unwSelf.mRectangularBoardWidth_property.selection
        let s3 = unwSelf.mRectangularBoardHeight_property.selection
        let s4 = unwSelf.mBoardLimitsWidth_property.selection
        let s5 = preferences_boardLimitsColorForBoard_property.selection
        let s6 = unwSelf.mBoardClearance_property.selection
        let s7 = preferences_boardClearanceColorForBoard_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_ProjectRoot_borderOutlineBackground (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mBorderCurves_property.toMany_descriptor_StartsBeingObserved (by: self.borderOutlineBackground_property)
    self.mBoardShape_property.startsBeingObserved (by: self.borderOutlineBackground_property)
    self.mRectangularBoardWidth_property.startsBeingObserved (by: self.borderOutlineBackground_property)
    self.mRectangularBoardHeight_property.startsBeingObserved (by: self.borderOutlineBackground_property)
    self.mBoardLimitsWidth_property.startsBeingObserved (by: self.borderOutlineBackground_property)
    preferences_boardLimitsColorForBoard_property.startsBeingObserved (by: self.borderOutlineBackground_property)
    self.mBoardClearance_property.startsBeingObserved (by: self.borderOutlineBackground_property)
    preferences_boardClearanceColorForBoard_property.startsBeingObserved (by: self.borderOutlineBackground_property)
  //--- Atomic property: borderViewBackground
    self.borderViewBackground_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.borderOutlineBackground_property.selection
        let s1 = unwSelf.mBoardObjects_property.selection
        let s2 = unwSelf.boardBoundBox_property.selection
        let s3 = preferences_boardLimitsColorForBoard_property.selection
        let s4 = unwSelf.mContentOpacityInBoardOutline_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_ProjectRoot_borderViewBackground (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.borderOutlineBackground_property.startsBeingObserved (by: self.borderViewBackground_property)
    self.mBoardObjects_property.toMany_objectDisplay_StartsBeingObserved (by: self.borderViewBackground_property)
    self.boardBoundBox_property.startsBeingObserved (by: self.borderViewBackground_property)
    preferences_boardLimitsColorForBoard_property.startsBeingObserved (by: self.borderViewBackground_property)
    self.mContentOpacityInBoardOutline_property.startsBeingObserved (by: self.borderViewBackground_property)
  //--- Atomic property: fontNameArray
    self.fontNameArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mFonts_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_fontNameArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mFonts_property.toMany_mFontName_StartsBeingObserved (by: self.fontNameArray_property)
  //--- Atomic property: deviceNames
    self.deviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mDevices_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_deviceNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDevices_property.toMany_mDeviceName_StartsBeingObserved (by: self.deviceNames_property)
  //--- Atomic property: allClassNames
    self.allClassNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClasses_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_allClassNames (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.toMany_mNetClassName_StartsBeingObserved (by: self.allClassNames_property)
  //--- Atomic property: sheetGeometry
    self.sheetGeometry_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSchematicSheetOrientation_property.selection
        let s1 = unwSelf.mSchematicCustomWidth_property.selection
        let s2 = unwSelf.mSchematicCustomHeight_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_sheetGeometry (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSchematicSheetOrientation_property.startsBeingObserved (by: self.sheetGeometry_property)
    self.mSchematicCustomWidth_property.startsBeingObserved (by: self.sheetGeometry_property)
    self.mSchematicCustomHeight_property.startsBeingObserved (by: self.sheetGeometry_property)
  //--- Atomic property: schematicBackgroundDisplay
    self.schematicBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSchematicTitle_property.selection
        let s1 = unwSelf.mSchematicVersion_property.selection
        let s2 = unwSelf.sheetGeometry_property.selection
        let s3 = unwSelf.mSchematicHilitedColumnIndex_property.selection
        let s4 = unwSelf.mSchematicHilitedRowIndex_property.selection
        let s5 = unwSelf.mSchematicEnableHiliteColumnAndRow_property.selection
        let s6 = unwSelf.mSelectedSheet_property.mSheetTitle_property.selection
        let s7 = unwSelf.mSheets_property.selection
        let s8 = unwSelf.mSelectedSheet_property.selection
        let s9 = unwSelf.mSchematicDate_property.selection
        let s10 = preferences_schematicBackColor_property.selection
        let s11 = preferences_schematicFrameColor_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_ProjectRoot_schematicBackgroundDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSchematicTitle_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    self.mSchematicVersion_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    self.sheetGeometry_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    self.mSchematicHilitedColumnIndex_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    self.mSchematicHilitedRowIndex_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    self.mSchematicEnableHiliteColumnAndRow_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.mSheetTitle_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    self.mSheets_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    self.mSchematicDate_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    preferences_schematicBackColor_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
    preferences_schematicFrameColor_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property)
  //--- Atomic property: netWarningCount
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClasses_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_netWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.toMany_netWarningCount_StartsBeingObserved (by: self.netWarningCount_property)
  //--- Atomic property: segmentedControlNetListIssueImage
    self.segmentedControlNetListIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.netWarningCount_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_segmentedControlNetListIssueImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.netWarningCount_property.startsBeingObserved (by: self.segmentedControlNetListIssueImage_property)
  //--- Atomic property: netNamesArray
    self.netNamesArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mNetClasses_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_netNamesArray (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.toMany_netsDescription_StartsBeingObserved (by: self.netNamesArray_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_ProjectRoot_unplacedSymbols (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.toMany_unplacedSymbols_StartsBeingObserved (by: self.unplacedSymbols_property)
  //--- Atomic property: unplacedPackages
    self.unplacedPackages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.selection
        let s1 = unwSelf.mComponents_property.selection
        let s2 = unwSelf.mComponents_property.selection
        let s3 = unwSelf.mComponents_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_ProjectRoot_unplacedPackages (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.startsBeingObserved (by: self.unplacedPackages_property)
    self.mComponents_property.toMany_componentName_StartsBeingObserved (by: self.unplacedPackages_property)
    self.mComponents_property.toMany_mComponentValue_StartsBeingObserved (by: self.unplacedPackages_property)
    self.mComponents_property.toMany_componentIsPlacedInBoard_StartsBeingObserved (by: self.unplacedPackages_property)
  //--- Atomic property: componentsPlacedInBoard
    self.componentsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.selection
        let s1 = unwSelf.mComponents_property.selection
        let s2 = unwSelf.mComponents_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_componentsPlacedInBoard (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.toMany_mNamePrefix_StartsBeingObserved (by: self.componentsPlacedInBoard_property)
    self.mComponents_property.toMany_mNameIndex_StartsBeingObserved (by: self.componentsPlacedInBoard_property)
    self.mComponents_property.toMany_componentIsPlacedInBoard_StartsBeingObserved (by: self.componentsPlacedInBoard_property)
  //--- Atomic property: boardStatusMessage
    self.boardStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardIssues_property.selection
        let s1 = unwSelf.unplacedPackages_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardStatusMessage (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardIssues_property.startsBeingObserved (by: self.boardStatusMessage_property)
    self.unplacedPackages_property.startsBeingObserved (by: self.boardStatusMessage_property)
  //--- Atomic property: boardStatusWarningCount
    self.boardStatusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.boardIssues_property.selection
        let s1 = unwSelf.unplacedPackages_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_boardStatusWarningCount (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.boardIssues_property.startsBeingObserved (by: self.boardStatusWarningCount_property)
    self.unplacedPackages_property.startsBeingObserved (by: self.boardStatusWarningCount_property)
  //--- Atomic property: placedComponentNameArray
    self.placedComponentNameArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mComponents_property.selection
        let s1 = unwSelf.mComponents_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_placedComponentNameArray (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.toMany_componentName_StartsBeingObserved (by: self.placedComponentNameArray_property)
    self.mComponents_property.toMany_componentIsPlacedInBoard_StartsBeingObserved (by: self.placedComponentNameArray_property)
  //--- Atomic property: schematicHasErrorOrWarning
    self.schematicHasErrorOrWarning_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbols_property.selection
        let s1 = unwSelf.netWarningCount_property.selection
        let s2 = unwSelf.mSheets_property.selection
        let s3 = unwSelf.mSheets_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_ProjectRoot_schematicHasErrorOrWarning (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.startsBeingObserved (by: self.schematicHasErrorOrWarning_property)
    self.netWarningCount_property.startsBeingObserved (by: self.schematicHasErrorOrWarning_property)
    self.mSheets_property.toMany_schematicConnexionWarnings_StartsBeingObserved (by: self.schematicHasErrorOrWarning_property)
    self.mSheets_property.toMany_schematicConnexionErrors_StartsBeingObserved (by: self.schematicHasErrorOrWarning_property)
  //--- Atomic property: schematicStatusMessage
    self.schematicStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbols_property.selection
        let s1 = unwSelf.netWarningCount_property.selection
        let s2 = unwSelf.mSheets_property.selection
        let s3 = unwSelf.mSheets_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_ProjectRoot_schematicStatusMessage (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.startsBeingObserved (by: self.schematicStatusMessage_property)
    self.netWarningCount_property.startsBeingObserved (by: self.schematicStatusMessage_property)
    self.mSheets_property.toMany_schematicConnexionWarnings_StartsBeingObserved (by: self.schematicStatusMessage_property)
    self.mSheets_property.toMany_schematicConnexionErrors_StartsBeingObserved (by: self.schematicStatusMessage_property)
  //--- Atomic property: segmentedControlSchematicIssueImage
    self.segmentedControlSchematicIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbols_property.selection
        let s1 = unwSelf.mSheets_property.selection
        let s2 = unwSelf.mSheets_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_segmentedControlSchematicIssueImage (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.startsBeingObserved (by: self.segmentedControlSchematicIssueImage_property)
    self.mSheets_property.toMany_schematicConnexionWarnings_StartsBeingObserved (by: self.segmentedControlSchematicIssueImage_property)
    self.mSheets_property.toMany_schematicConnexionErrors_StartsBeingObserved (by: self.segmentedControlSchematicIssueImage_property)
  //--- Atomic property: schematicWarningCount
    self.schematicWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.unplacedSymbols_property.selection
        let s1 = unwSelf.netWarningCount_property.selection
        let s2 = unwSelf.mSheets_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_ProjectRoot_schematicWarningCount (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.startsBeingObserved (by: self.schematicWarningCount_property)
    self.netWarningCount_property.startsBeingObserved (by: self.schematicWarningCount_property)
    self.mSheets_property.toMany_schematicConnexionWarnings_StartsBeingObserved (by: self.schematicWarningCount_property)
  //--- Atomic property: hasSchematicIssue
    self.hasSchematicIssue_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.schematicErrorCount_property.selection
        let s1 = unwSelf.schematicWarningCount_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_ProjectRoot_hasSchematicIssue (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.schematicErrorCount_property.startsBeingObserved (by: self.hasSchematicIssue_property)
    self.schematicWarningCount_property.startsBeingObserved (by: self.hasSchematicIssue_property)
  //--- Atomic property: segmentedControlBoardIssueImage
    self.segmentedControlBoardIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mLastERCCheckingIsSuccess_property.selection
        let s1 = unwSelf.mLastERCCheckingSignature_property.selection
        let s2 = unwSelf.signatureForERCChecking_property.selection
        let s3 = unwSelf.boardStatusErrorCount_property.selection
        let s4 = unwSelf.boardStatusWarningCount_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_ProjectRoot_segmentedControlBoardIssueImage (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mLastERCCheckingIsSuccess_property.startsBeingObserved (by: self.segmentedControlBoardIssueImage_property)
    self.mLastERCCheckingSignature_property.startsBeingObserved (by: self.segmentedControlBoardIssueImage_property)
    self.signatureForERCChecking_property.startsBeingObserved (by: self.segmentedControlBoardIssueImage_property)
    self.boardStatusErrorCount_property.startsBeingObserved (by: self.segmentedControlBoardIssueImage_property)
    self.boardStatusWarningCount_property.startsBeingObserved (by: self.segmentedControlBoardIssueImage_property)
  //--- Install undoers and opposite setter for relationships
    self.mSheets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.mBorderCurves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.mBoardObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

