//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ProjectRoot : ReadOnlyAbstractArrayProperty <ProjectRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ProjectRoot>,
                                          addedSet inAddedSet : EBReferenceSet <ProjectRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRastnetDisplay_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRastnetDisplayedNetName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRastnetDisplayedComponentName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mArtworkName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mArtworkVersion_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mPDFBoardBackgroundColor_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mCheckClearanceBetweenPadsOfSameNet_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mLastERCCheckingIsSuccess_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mLastERCCheckingSignature_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mLayerConfiguration_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardSideForNewTrack_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDirectionForNewTrack_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLayerForNewText_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLayerForNewLine_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardSideForNewRestrictRectangle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mAutoRouterPreferredDirections_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mAutorouterSnapAngle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRouteDirection_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRouteOrigin_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mAutorouterInterfaceMode_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mExportExistingTracksAndVias_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mTrackLengthUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mLayoutClearance_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mLayoutClearanceUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardSelectedInspector_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardZoom_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardGridStep_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardGridStepUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mErrorOrWarningIssueSize_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mControlKeyHiliteDiameter_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDSNFileProposedName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsWidth_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardClearance_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardClearanceUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsSelectedInspector_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsZoom_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsGridStep_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsGridStepUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitsBoundingBoxUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardPointsBoundingBoxUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardSelectedCurveDisplayUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardLimitControlPointsDisplayUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mBoardShape_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRectangularBoardWidth_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRectangularBoardWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRectangularBoardHeight_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mRectangularBoardHeightUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mDefaultNetClassName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSelectedSchematicInspector_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicTitle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicVersion_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicDate_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicZoom_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicCustomWidth_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicCustomWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicCustomHeight_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_mSchematicCustomHeightUnit_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_hasInnerElements_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_hasSixLayers_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_layerConfigurationString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardGridStepMultipliedByDisplayFactor_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardShapeIsRectangular_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_connectedPoints_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_sheetGeometry_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_schematicBackgroundDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_connexionWarningString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_connexionErrorString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_sheetIndexes_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netsDescription_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardIssues_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_ercStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_ercStatusMessage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_viaCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_topSideTrackCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_backSideTrackCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_inner1LayerTrackCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_inner2LayerTrackCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_inner3LayerTrackCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_inner4LayerTrackCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_trackCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_trackLengthString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardStatusMessage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_interiorBoundBox_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardBoundBox_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardInteriorTop_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardInteriorBottom_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardInteriorLeft_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardInteriorRight_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardLimitBorderTop_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardLimitBorderBottom_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardLimitBorderLeft_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_boardLimitBorderRight_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_borderElementCountString_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_borderOutlineBackground_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_borderViewBackground_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_deviceNames_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_allClassNames_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netWarningCount_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_netNamesArray_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_unplacedPackages_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_componentsPlacedInBoard_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_placedComponentNameArray_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_schematicHasErrorOrWarning_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_schematicStatusMessage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_schematicStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_fileGenerationParameterArray_fromElementsOfSet (inAddedSet) // ToMany proxy
      self.removeEBObserversOf_selectedSheetObjects_fromElementsOfSet (inAddedSet) // ToMany proxy
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRastnetDisplay_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRastnetDisplayedNetName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRastnetDisplayedComponentName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mArtworkName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mArtworkVersion_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mPDFBoardBackgroundColor_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mCheckClearanceBetweenPadsOfSameNet_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mLastERCCheckingIsSuccess_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mLastERCCheckingSignature_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mLayerConfiguration_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardSideForNewTrack_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDirectionForNewTrack_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLayerForNewText_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLayerForNewLine_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardSideForNewRestrictRectangle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mAutoRouterPreferredDirections_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mAutorouterSnapAngle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRouteDirection_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRouteOrigin_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mAutorouterInterfaceMode_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mExportExistingTracksAndVias_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mTrackLengthUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mLayoutClearance_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mLayoutClearanceUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardSelectedInspector_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardGridStyle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardZoom_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardGridStep_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardGridStepUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mErrorOrWarningIssueSize_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mControlKeyHiliteDiameter_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDSNFileProposedName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsWidth_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsWidthUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardClearance_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardClearanceUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsSelectedInspector_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsGridStyle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsZoom_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsGridStep_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsGridStepUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitsBoundingBoxUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardPointsBoundingBoxUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardSelectedCurveDisplayUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardLimitControlPointsDisplayUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mBoardShape_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRectangularBoardWidth_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRectangularBoardWidthUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRectangularBoardHeight_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mRectangularBoardHeightUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mDefaultNetClassName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSelectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSelectedSchematicInspector_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicTitle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicVersion_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicDate_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicZoom_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicGridStyle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicCustomWidth_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicCustomWidthUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicCustomHeight_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_mSchematicCustomHeightUnit_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_hasInnerElements_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_hasSixLayers_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_layerConfigurationString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardGridStepMultipliedByDisplayFactor_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardShapeIsRectangular_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectedSheetIssues_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_connectedPoints_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_sheetGeometry_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_schematicBackgroundDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_connexionWarningString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_connexionErrorString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_sheetIndexes_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netsDescription_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardIssues_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_signatureForERCChecking_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_ercStatusImage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_ercStatusMessage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_viaCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_topSideTrackCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_backSideTrackCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_inner1LayerTrackCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_inner2LayerTrackCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_inner3LayerTrackCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_inner4LayerTrackCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_trackCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_trackLengthString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardStatusImage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardStatusMessage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_interiorBoundBox_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardBoundBox_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardInteriorTop_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardInteriorBottom_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardInteriorLeft_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardInteriorRight_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardLimitBorderTop_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardLimitBorderBottom_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardLimitBorderLeft_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_boardLimitBorderRight_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_borderElementCountString_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_borderOutlineBackground_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_borderViewBackground_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_deviceNames_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_allClassNames_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netWarningCount_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_netNamesArray_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_unplacedSymbols_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_unplacedPackages_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_componentsPlacedInBoard_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_placedComponentNameArray_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_schematicHasErrorOrWarning_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_schematicStatusMessage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_schematicStatusImage_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_fileGenerationParameterArray_toElementsOfSet (inAddedSet) // ToMany proxy
      self.addEBObserversOf_selectedSheetObjects_toElementsOfSet (inAddedSet) // ToMany proxy
   }
  }

  //····················································································································
  //   Observers of 'mSchematicSheetOrientation' stored property
  //····················································································································

  private final var mObserversOf_mSchematicSheetOrientation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicSheetOrientation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicSheetOrientation.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
          managedObject.mSchematicSheetOrientation_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRastnetDisplay' stored property
  //····················································································································

  private final var mObserversOf_mRastnetDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRastnetDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRastnetDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRastnetDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRastnetDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRastnetDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRastnetDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRastnetDisplay_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mRastnetDisplay.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mRastnetDisplay.apply { (_ observer : EBEvent) in
          managedObject.mRastnetDisplay_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRastnetDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mRastnetDisplay.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mRastnetDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRastnetDisplayedNetName' stored property
  //····················································································································

  private final var mObserversOf_mRastnetDisplayedNetName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRastnetDisplayedNetName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRastnetDisplayedNetName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRastnetDisplayedNetName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRastnetDisplayedNetName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRastnetDisplayedNetName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRastnetDisplayedNetName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRastnetDisplayedNetName_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mRastnetDisplayedNetName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mRastnetDisplayedNetName.apply { (_ observer : EBEvent) in
          managedObject.mRastnetDisplayedNetName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRastnetDisplayedNetName_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mRastnetDisplayedNetName.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mRastnetDisplayedNetName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRastnetDisplayedComponentName' stored property
  //····················································································································

  private final var mObserversOf_mRastnetDisplayedComponentName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRastnetDisplayedComponentName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRastnetDisplayedComponentName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRastnetDisplayedComponentName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRastnetDisplayedComponentName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRastnetDisplayedComponentName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRastnetDisplayedComponentName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRastnetDisplayedComponentName_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mRastnetDisplayedComponentName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mRastnetDisplayedComponentName.apply { (_ observer : EBEvent) in
          managedObject.mRastnetDisplayedComponentName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRastnetDisplayedComponentName_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mRastnetDisplayedComponentName.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mRastnetDisplayedComponentName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mArtworkName' stored property
  //····················································································································

  private final var mObserversOf_mArtworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mArtworkName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mArtworkName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mArtworkName_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mArtworkName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mArtworkName.apply { (_ observer : EBEvent) in
          managedObject.mArtworkName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mArtworkName_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mArtworkName.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mArtworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mArtworkVersion' stored property
  //····················································································································

  private final var mObserversOf_mArtworkVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mArtworkVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mArtworkVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mArtworkVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mArtworkVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mArtworkVersion_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mArtworkVersion.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mArtworkVersion.apply { (_ observer : EBEvent) in
          managedObject.mArtworkVersion_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mArtworkVersion_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mArtworkVersion.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mArtworkVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPDFBoardBackgroundColor' stored property
  //····················································································································

  private final var mObserversOf_mPDFBoardBackgroundColor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPDFBoardBackgroundColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPDFBoardBackgroundColor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPDFBoardBackgroundColor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPDFBoardBackgroundColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPDFBoardBackgroundColor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPDFBoardBackgroundColor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPDFBoardBackgroundColor_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mPDFBoardBackgroundColor.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mPDFBoardBackgroundColor.apply { (_ observer : EBEvent) in
          managedObject.mPDFBoardBackgroundColor_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPDFBoardBackgroundColor_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mPDFBoardBackgroundColor.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mPDFBoardBackgroundColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCheckClearanceBetweenPadsOfSameNet' stored property
  //····················································································································

  private final var mObserversOf_mCheckClearanceBetweenPadsOfSameNet = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCheckClearanceBetweenPadsOfSameNet (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCheckClearanceBetweenPadsOfSameNet.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCheckClearanceBetweenPadsOfSameNet_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCheckClearanceBetweenPadsOfSameNet (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCheckClearanceBetweenPadsOfSameNet.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCheckClearanceBetweenPadsOfSameNet_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCheckClearanceBetweenPadsOfSameNet_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mCheckClearanceBetweenPadsOfSameNet.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mCheckClearanceBetweenPadsOfSameNet.apply { (_ observer : EBEvent) in
          managedObject.mCheckClearanceBetweenPadsOfSameNet_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCheckClearanceBetweenPadsOfSameNet_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mCheckClearanceBetweenPadsOfSameNet.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mCheckClearanceBetweenPadsOfSameNet_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mLastERCCheckingIsSuccess' stored property
  //····················································································································

  private final var mObserversOf_mLastERCCheckingIsSuccess = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLastERCCheckingIsSuccess (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLastERCCheckingIsSuccess.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLastERCCheckingIsSuccess_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLastERCCheckingIsSuccess (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLastERCCheckingIsSuccess.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLastERCCheckingIsSuccess_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLastERCCheckingIsSuccess_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mLastERCCheckingIsSuccess.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mLastERCCheckingIsSuccess.apply { (_ observer : EBEvent) in
          managedObject.mLastERCCheckingIsSuccess_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLastERCCheckingIsSuccess_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mLastERCCheckingIsSuccess.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mLastERCCheckingIsSuccess_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mLastERCCheckingSignature' stored property
  //····················································································································

  private final var mObserversOf_mLastERCCheckingSignature = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLastERCCheckingSignature (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLastERCCheckingSignature.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLastERCCheckingSignature_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLastERCCheckingSignature (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLastERCCheckingSignature.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLastERCCheckingSignature_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLastERCCheckingSignature_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mLastERCCheckingSignature.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mLastERCCheckingSignature.apply { (_ observer : EBEvent) in
          managedObject.mLastERCCheckingSignature_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLastERCCheckingSignature_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mLastERCCheckingSignature.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mLastERCCheckingSignature_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mLayerConfiguration' stored property
  //····················································································································

  private final var mObserversOf_mLayerConfiguration = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLayerConfiguration (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLayerConfiguration.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayerConfiguration_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLayerConfiguration (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLayerConfiguration.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayerConfiguration_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLayerConfiguration_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mLayerConfiguration.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mLayerConfiguration.apply { (_ observer : EBEvent) in
          managedObject.mLayerConfiguration_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLayerConfiguration_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mLayerConfiguration.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mLayerConfiguration_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardSideForNewTrack' stored property
  //····················································································································

  private final var mObserversOf_mBoardSideForNewTrack = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardSideForNewTrack (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardSideForNewTrack.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSideForNewTrack_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSideForNewTrack (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardSideForNewTrack.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSideForNewTrack_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardSideForNewTrack_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardSideForNewTrack.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardSideForNewTrack.apply { (_ observer : EBEvent) in
          managedObject.mBoardSideForNewTrack_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardSideForNewTrack_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardSideForNewTrack.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardSideForNewTrack_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDirectionForNewTrack' stored property
  //····················································································································

  private final var mObserversOf_mDirectionForNewTrack = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDirectionForNewTrack (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDirectionForNewTrack.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDirectionForNewTrack_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDirectionForNewTrack (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDirectionForNewTrack.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDirectionForNewTrack_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDirectionForNewTrack_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mDirectionForNewTrack.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mDirectionForNewTrack.apply { (_ observer : EBEvent) in
          managedObject.mDirectionForNewTrack_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDirectionForNewTrack_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mDirectionForNewTrack.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mDirectionForNewTrack_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLayerForNewText' stored property
  //····················································································································

  private final var mObserversOf_mBoardLayerForNewText = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLayerForNewText (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLayerForNewText.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLayerForNewText_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLayerForNewText (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLayerForNewText.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLayerForNewText_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLayerForNewText_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLayerForNewText.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLayerForNewText.apply { (_ observer : EBEvent) in
          managedObject.mBoardLayerForNewText_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLayerForNewText_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLayerForNewText.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLayerForNewText_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLayerForNewLine' stored property
  //····················································································································

  private final var mObserversOf_mBoardLayerForNewLine = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLayerForNewLine (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLayerForNewLine.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLayerForNewLine_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLayerForNewLine (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLayerForNewLine.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLayerForNewLine_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLayerForNewLine_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLayerForNewLine.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLayerForNewLine.apply { (_ observer : EBEvent) in
          managedObject.mBoardLayerForNewLine_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLayerForNewLine_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLayerForNewLine.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLayerForNewLine_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardSideForNewRestrictRectangle' stored property
  //····················································································································

  private final var mObserversOf_mBoardSideForNewRestrictRectangle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardSideForNewRestrictRectangle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardSideForNewRestrictRectangle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSideForNewRestrictRectangle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSideForNewRestrictRectangle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardSideForNewRestrictRectangle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSideForNewRestrictRectangle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardSideForNewRestrictRectangle_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardSideForNewRestrictRectangle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardSideForNewRestrictRectangle.apply { (_ observer : EBEvent) in
          managedObject.mBoardSideForNewRestrictRectangle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardSideForNewRestrictRectangle_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardSideForNewRestrictRectangle.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardSideForNewRestrictRectangle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAutoRouterPreferredDirections' stored property
  //····················································································································

  private final var mObserversOf_mAutoRouterPreferredDirections = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAutoRouterPreferredDirections (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAutoRouterPreferredDirections.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutoRouterPreferredDirections_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAutoRouterPreferredDirections (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAutoRouterPreferredDirections.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutoRouterPreferredDirections_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAutoRouterPreferredDirections_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mAutoRouterPreferredDirections.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mAutoRouterPreferredDirections.apply { (_ observer : EBEvent) in
          managedObject.mAutoRouterPreferredDirections_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAutoRouterPreferredDirections_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mAutoRouterPreferredDirections.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mAutoRouterPreferredDirections_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAutorouterSnapAngle' stored property
  //····················································································································

  private final var mObserversOf_mAutorouterSnapAngle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAutorouterSnapAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAutorouterSnapAngle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutorouterSnapAngle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAutorouterSnapAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAutorouterSnapAngle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutorouterSnapAngle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAutorouterSnapAngle_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mAutorouterSnapAngle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mAutorouterSnapAngle.apply { (_ observer : EBEvent) in
          managedObject.mAutorouterSnapAngle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAutorouterSnapAngle_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mAutorouterSnapAngle.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mAutorouterSnapAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRouteDirection' stored property
  //····················································································································

  private final var mObserversOf_mRouteDirection = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRouteDirection (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRouteDirection.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRouteDirection_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRouteDirection (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRouteDirection.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRouteDirection_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRouteDirection_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mRouteDirection.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mRouteDirection.apply { (_ observer : EBEvent) in
          managedObject.mRouteDirection_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRouteDirection_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mRouteDirection.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mRouteDirection_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRouteOrigin' stored property
  //····················································································································

  private final var mObserversOf_mRouteOrigin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRouteOrigin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRouteOrigin.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRouteOrigin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRouteOrigin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRouteOrigin.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRouteOrigin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRouteOrigin_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mRouteOrigin.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mRouteOrigin.apply { (_ observer : EBEvent) in
          managedObject.mRouteOrigin_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRouteOrigin_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mRouteOrigin.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mRouteOrigin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAutorouterInterfaceMode' stored property
  //····················································································································

  private final var mObserversOf_mAutorouterInterfaceMode = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAutorouterInterfaceMode (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAutorouterInterfaceMode.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutorouterInterfaceMode_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAutorouterInterfaceMode (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAutorouterInterfaceMode.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutorouterInterfaceMode_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAutorouterInterfaceMode_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mAutorouterInterfaceMode.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mAutorouterInterfaceMode.apply { (_ observer : EBEvent) in
          managedObject.mAutorouterInterfaceMode_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAutorouterInterfaceMode_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mAutorouterInterfaceMode.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mAutorouterInterfaceMode_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mExportExistingTracksAndVias' stored property
  //····················································································································

  private final var mObserversOf_mExportExistingTracksAndVias = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mExportExistingTracksAndVias (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mExportExistingTracksAndVias.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mExportExistingTracksAndVias_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mExportExistingTracksAndVias (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mExportExistingTracksAndVias.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mExportExistingTracksAndVias_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mExportExistingTracksAndVias_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mExportExistingTracksAndVias.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mExportExistingTracksAndVias.apply { (_ observer : EBEvent) in
          managedObject.mExportExistingTracksAndVias_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mExportExistingTracksAndVias_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mExportExistingTracksAndVias.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mExportExistingTracksAndVias_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mTrackLengthUnit' stored property
  //····················································································································

  private final var mObserversOf_mTrackLengthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTrackLengthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTrackLengthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTrackLengthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTrackLengthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTrackLengthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTrackLengthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mTrackLengthUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mTrackLengthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mTrackLengthUnit.apply { (_ observer : EBEvent) in
          managedObject.mTrackLengthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTrackLengthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mTrackLengthUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mTrackLengthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mLayoutClearance' stored property
  //····················································································································

  private final var mObserversOf_mLayoutClearance = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLayoutClearance (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLayoutClearance.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayoutClearance_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLayoutClearance (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLayoutClearance.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayoutClearance_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLayoutClearance_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mLayoutClearance.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mLayoutClearance.apply { (_ observer : EBEvent) in
          managedObject.mLayoutClearance_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLayoutClearance_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mLayoutClearance.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mLayoutClearance_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mLayoutClearanceUnit' stored property
  //····················································································································

  private final var mObserversOf_mLayoutClearanceUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLayoutClearanceUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLayoutClearanceUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayoutClearanceUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLayoutClearanceUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLayoutClearanceUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayoutClearanceUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLayoutClearanceUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mLayoutClearanceUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mLayoutClearanceUnit.apply { (_ observer : EBEvent) in
          managedObject.mLayoutClearanceUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLayoutClearanceUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mLayoutClearanceUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mLayoutClearanceUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardSelectedInspector' stored property
  //····················································································································

  private final var mObserversOf_mBoardSelectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardSelectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSelectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardSelectedInspector_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardSelectedInspector.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardSelectedInspector.apply { (_ observer : EBEvent) in
          managedObject.mBoardSelectedInspector_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardSelectedInspector_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardSelectedInspector.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardSelectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardHorizontalFlip' stored property
  //····················································································································

  private final var mObserversOf_mBoardHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardHorizontalFlip_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardHorizontalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardHorizontalFlip.apply { (_ observer : EBEvent) in
          managedObject.mBoardHorizontalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardHorizontalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardVerticalFlip' stored property
  //····················································································································

  private final var mObserversOf_mBoardVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardVerticalFlip_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardVerticalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardVerticalFlip.apply { (_ observer : EBEvent) in
          managedObject.mBoardVerticalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardVerticalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardVerticalFlip.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardGridStyle' stored property
  //····················································································································

  private final var mObserversOf_mBoardGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardGridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardGridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardGridStyle_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardGridStyle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardGridStyle.apply { (_ observer : EBEvent) in
          managedObject.mBoardGridStyle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardGridStyle_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardGridStyle.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardGridDisplayFactor' stored property
  //····················································································································

  private final var mObserversOf_mBoardGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardGridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardGridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardGridDisplayFactor_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardGridDisplayFactor.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardGridDisplayFactor.apply { (_ observer : EBEvent) in
          managedObject.mBoardGridDisplayFactor_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardGridDisplayFactor_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardZoom' stored property
  //····················································································································

  private final var mObserversOf_mBoardZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardZoom_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardZoom.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardZoom.apply { (_ observer : EBEvent) in
          managedObject.mBoardZoom_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardZoom_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardZoom.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardGridStep' stored property
  //····················································································································

  private final var mObserversOf_mBoardGridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardGridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardGridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardGridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardGridStep_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardGridStep.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardGridStep.apply { (_ observer : EBEvent) in
          managedObject.mBoardGridStep_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardGridStep_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardGridStep.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardGridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardGridStepUnit' stored property
  //····················································································································

  private final var mObserversOf_mBoardGridStepUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardGridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardGridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStepUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardGridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStepUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardGridStepUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardGridStepUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardGridStepUnit.apply { (_ observer : EBEvent) in
          managedObject.mBoardGridStepUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardGridStepUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardGridStepUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardGridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mErrorOrWarningIssueSize' stored property
  //····················································································································

  private final var mObserversOf_mErrorOrWarningIssueSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mErrorOrWarningIssueSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mErrorOrWarningIssueSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mErrorOrWarningIssueSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mErrorOrWarningIssueSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mErrorOrWarningIssueSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mErrorOrWarningIssueSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mErrorOrWarningIssueSize_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mErrorOrWarningIssueSize.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mErrorOrWarningIssueSize.apply { (_ observer : EBEvent) in
          managedObject.mErrorOrWarningIssueSize_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mErrorOrWarningIssueSize_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mErrorOrWarningIssueSize.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mErrorOrWarningIssueSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mControlKeyHiliteDiameter' stored property
  //····················································································································

  private final var mObserversOf_mControlKeyHiliteDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mControlKeyHiliteDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mControlKeyHiliteDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mControlKeyHiliteDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mControlKeyHiliteDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mControlKeyHiliteDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mControlKeyHiliteDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mControlKeyHiliteDiameter_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mControlKeyHiliteDiameter.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mControlKeyHiliteDiameter.apply { (_ observer : EBEvent) in
          managedObject.mControlKeyHiliteDiameter_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mControlKeyHiliteDiameter_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mControlKeyHiliteDiameter.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mControlKeyHiliteDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDSNFileProposedName' stored property
  //····················································································································

  private final var mObserversOf_mDSNFileProposedName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDSNFileProposedName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDSNFileProposedName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDSNFileProposedName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDSNFileProposedName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDSNFileProposedName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDSNFileProposedName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDSNFileProposedName_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mDSNFileProposedName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mDSNFileProposedName.apply { (_ observer : EBEvent) in
          managedObject.mDSNFileProposedName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDSNFileProposedName_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mDSNFileProposedName.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mDSNFileProposedName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidth' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsWidth_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsWidth.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsWidth_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsWidth.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsWidthUnit.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsWidthUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardClearance' stored property
  //····················································································································

  private final var mObserversOf_mBoardClearance = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardClearance (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardClearance.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearance_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardClearance (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardClearance.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearance_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardClearance_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardClearance.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardClearance.apply { (_ observer : EBEvent) in
          managedObject.mBoardClearance_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardClearance_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardClearance.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardClearance_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardClearanceUnit' stored property
  //····················································································································

  private final var mObserversOf_mBoardClearanceUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardClearanceUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardClearanceUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearanceUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardClearanceUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardClearanceUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearanceUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardClearanceUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardClearanceUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardClearanceUnit.apply { (_ observer : EBEvent) in
          managedObject.mBoardClearanceUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardClearanceUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardClearanceUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardClearanceUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsSelectedInspector' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsSelectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsSelectedInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsSelectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsSelectedInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsSelectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsSelectedInspector_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsSelectedInspector.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsSelectedInspector.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsSelectedInspector_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsSelectedInspector_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsSelectedInspector.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsSelectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsHorizontalFlip' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsHorizontalFlip_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsHorizontalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsHorizontalFlip.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsHorizontalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsHorizontalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsVerticalFlip' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsVerticalFlip_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsVerticalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsVerticalFlip.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsVerticalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsVerticalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsVerticalFlip.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStyle' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStyle_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsGridStyle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsGridStyle.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsGridStyle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStyle_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStyle.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridDisplayFactor' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridDisplayFactor_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsGridDisplayFactor.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsGridDisplayFactor.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsGridDisplayFactor_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridDisplayFactor_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsZoom' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsZoom_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsZoom.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsZoom.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsZoom_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsZoom_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsZoom.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStep' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsGridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStep_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsGridStep.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsGridStep.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsGridStep_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStep_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStep.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsGridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStepUnit' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsGridStepUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStepUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStepUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStepUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsGridStepUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsGridStepUnit.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsGridStepUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStepUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStepUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsGridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsBoundingBoxUnit' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsBoundingBoxUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsBoundingBoxUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitsBoundingBoxUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitsBoundingBoxUnit.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitsBoundingBoxUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsBoundingBoxUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardPointsBoundingBoxUnit' stored property
  //····················································································································

  private final var mObserversOf_mBoardPointsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardPointsBoundingBoxUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardPointsBoundingBoxUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardPointsBoundingBoxUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardPointsBoundingBoxUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardPointsBoundingBoxUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardPointsBoundingBoxUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardPointsBoundingBoxUnit.apply { (_ observer : EBEvent) in
          managedObject.mBoardPointsBoundingBoxUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardPointsBoundingBoxUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardPointsBoundingBoxUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardPointsBoundingBoxUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardSelectedCurveDisplayUnit' stored property
  //····················································································································

  private final var mObserversOf_mBoardSelectedCurveDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedCurveDisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardSelectedCurveDisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardSelectedCurveDisplayUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardSelectedCurveDisplayUnit.apply { (_ observer : EBEvent) in
          managedObject.mBoardSelectedCurveDisplayUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardSelectedCurveDisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitControlPointsDisplayUnit' stored property
  //····················································································································

  private final var mObserversOf_mBoardLimitControlPointsDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitControlPointsDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitControlPointsDisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitControlPointsDisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitControlPointsDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitControlPointsDisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitControlPointsDisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitControlPointsDisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardLimitControlPointsDisplayUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardLimitControlPointsDisplayUnit.apply { (_ observer : EBEvent) in
          managedObject.mBoardLimitControlPointsDisplayUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitControlPointsDisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardLimitControlPointsDisplayUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardLimitControlPointsDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardShape' stored property
  //····················································································································

  private final var mObserversOf_mBoardShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardShape_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mBoardShape.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mBoardShape.apply { (_ observer : EBEvent) in
          managedObject.mBoardShape_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardShape_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mBoardShape.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mBoardShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRectangularBoardWidth' stored property
  //····················································································································

  private final var mObserversOf_mRectangularBoardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRectangularBoardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRectangularBoardWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRectangularBoardWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRectangularBoardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRectangularBoardWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRectangularBoardWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRectangularBoardWidth_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mRectangularBoardWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mRectangularBoardWidth.apply { (_ observer : EBEvent) in
          managedObject.mRectangularBoardWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRectangularBoardWidth_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mRectangularBoardWidth.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mRectangularBoardWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRectangularBoardWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mRectangularBoardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRectangularBoardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRectangularBoardWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRectangularBoardWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRectangularBoardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRectangularBoardWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRectangularBoardWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRectangularBoardWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mRectangularBoardWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mRectangularBoardWidthUnit.apply { (_ observer : EBEvent) in
          managedObject.mRectangularBoardWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRectangularBoardWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mRectangularBoardWidthUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mRectangularBoardWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRectangularBoardHeight' stored property
  //····················································································································

  private final var mObserversOf_mRectangularBoardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRectangularBoardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRectangularBoardHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRectangularBoardHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRectangularBoardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRectangularBoardHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRectangularBoardHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRectangularBoardHeight_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mRectangularBoardHeight.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mRectangularBoardHeight.apply { (_ observer : EBEvent) in
          managedObject.mRectangularBoardHeight_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRectangularBoardHeight_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mRectangularBoardHeight.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mRectangularBoardHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRectangularBoardHeightUnit' stored property
  //····················································································································

  private final var mObserversOf_mRectangularBoardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRectangularBoardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRectangularBoardHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRectangularBoardHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRectangularBoardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRectangularBoardHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRectangularBoardHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRectangularBoardHeightUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mRectangularBoardHeightUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mRectangularBoardHeightUnit.apply { (_ observer : EBEvent) in
          managedObject.mRectangularBoardHeightUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRectangularBoardHeightUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mRectangularBoardHeightUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mRectangularBoardHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDefaultNetClassName' stored property
  //····················································································································

  private final var mObserversOf_mDefaultNetClassName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDefaultNetClassName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDefaultNetClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultNetClassName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDefaultNetClassName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDefaultNetClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDefaultNetClassName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDefaultNetClassName_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mDefaultNetClassName.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mDefaultNetClassName.apply { (_ observer : EBEvent) in
          managedObject.mDefaultNetClassName_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDefaultNetClassName_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mDefaultNetClassName.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mDefaultNetClassName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private final var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSelectedPageIndex.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
          managedObject.mSelectedPageIndex_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedSchematicInspector' stored property
  //····················································································································

  private final var mObserversOf_mSelectedSchematicInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedSchematicInspector_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSelectedSchematicInspector.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSelectedSchematicInspector.apply { (_ observer : EBEvent) in
          managedObject.mSelectedSchematicInspector_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedSchematicInspector_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSelectedSchematicInspector.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSelectedSchematicInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicTitle' stored property
  //····················································································································

  private final var mObserversOf_mSchematicTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicTitle_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicTitle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
          managedObject.mSchematicTitle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicTitle_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVersion' stored property
  //····················································································································

  private final var mObserversOf_mSchematicVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVersion_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicVersion.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
          managedObject.mSchematicVersion_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVersion_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicDate' stored property
  //····················································································································

  private final var mObserversOf_mSchematicDate = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicDate_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicDate_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicDate_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicDate.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
          managedObject.mSchematicDate_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicDate_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicDate_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicHorizontalFlip' stored property
  //····················································································································

  private final var mObserversOf_mSchematicHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicHorizontalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
          managedObject.mSchematicHorizontalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVerticalFlip' stored property
  //····················································································································

  private final var mObserversOf_mSchematicVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicVerticalFlip.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
          managedObject.mSchematicVerticalFlip_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicZoom' stored property
  //····················································································································

  private final var mObserversOf_mSchematicZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicZoom_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicZoom.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
          managedObject.mSchematicZoom_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicZoom_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridStyle' stored property
  //····················································································································

  private final var mObserversOf_mSchematicGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridStyle_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicGridStyle.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
          managedObject.mSchematicGridStyle_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridDisplayFactor' stored property
  //····················································································································

  private final var mObserversOf_mSchematicGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicGridDisplayFactor.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
          managedObject.mSchematicGridDisplayFactor_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicCustomWidth' stored property
  //····················································································································

  private final var mObserversOf_mSchematicCustomWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicCustomWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicCustomWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicCustomWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicCustomWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicCustomWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicCustomWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicCustomWidth_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicCustomWidth.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicCustomWidth.apply { (_ observer : EBEvent) in
          managedObject.mSchematicCustomWidth_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicCustomWidth_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicCustomWidth.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicCustomWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicCustomWidthUnit' stored property
  //····················································································································

  private final var mObserversOf_mSchematicCustomWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicCustomWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicCustomWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicCustomWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicCustomWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicCustomWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicCustomWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicCustomWidthUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicCustomWidthUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicCustomWidthUnit.apply { (_ observer : EBEvent) in
          managedObject.mSchematicCustomWidthUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicCustomWidthUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicCustomWidthUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicCustomWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicCustomHeight' stored property
  //····················································································································

  private final var mObserversOf_mSchematicCustomHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicCustomHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicCustomHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicCustomHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicCustomHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicCustomHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicCustomHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicCustomHeight_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicCustomHeight.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicCustomHeight.apply { (_ observer : EBEvent) in
          managedObject.mSchematicCustomHeight_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicCustomHeight_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicCustomHeight.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicCustomHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicCustomHeightUnit' stored property
  //····················································································································

  private final var mObserversOf_mSchematicCustomHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicCustomHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicCustomHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicCustomHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicCustomHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicCustomHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicCustomHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicCustomHeightUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    if !self.mObserversOf_mSchematicCustomHeightUnit.isEmpty {
      for managedObject in inSet.values {
        self.mObserversOf_mSchematicCustomHeightUnit.apply { (_ observer : EBEvent) in
          managedObject.mSchematicCustomHeightUnit_property.addEBObserver (observer)
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicCustomHeightUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_mSchematicCustomHeightUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.mSchematicCustomHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'fileGenerationParameterArray' toMany proxy
  //····················································································································

  private final var mObserversOf_fileGenerationParameterArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_fileGenerationParameterArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_fileGenerationParameterArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileGenerationParameterArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_fileGenerationParameterArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_fileGenerationParameterArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileGenerationParameterArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_fileGenerationParameterArray_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_fileGenerationParameterArray.apply { (_ observer : EBEvent) in
        managedObject.fileGenerationParameterArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_fileGenerationParameterArray_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_fileGenerationParameterArray.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.fileGenerationParameterArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetObjects' toMany proxy
  //····················································································································

  private final var mObserversOf_selectedSheetObjects = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetObjects (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetObjects.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetObjects_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetObjects (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetObjects.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetObjects_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetObjects_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_selectedSheetObjects.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetObjects_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetObjects_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_selectedSheetObjects.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.selectedSheetObjects_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkLayerConfiguration' proxy property
  //····················································································································

  private final var mObserversOf_artworkLayerConfiguration = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkLayerConfiguration (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_artworkLayerConfiguration.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkLayerConfiguration_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkLayerConfiguration (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_artworkLayerConfiguration.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkLayerConfiguration_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkLayerConfiguration_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_artworkLayerConfiguration.apply { (_ observer : EBEvent) in
        managedObject.artworkLayerConfiguration_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkLayerConfiguration_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_artworkLayerConfiguration.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.artworkLayerConfiguration_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTWdisplayUnit' proxy property
  //····················································································································

  private final var mObserversOf_minPPTPTTTWdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTWdisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTWdisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTW' proxy property
  //····················································································································

  private final var mObserversOf_minPPTPTTTW = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTW_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTW_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTW_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTW_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTW_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.minPPTPTTTW_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidth' proxy property
  //····················································································································

  private final var mObserversOf_minValueForBoardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidth_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidth_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidthDisplayUnit' proxy property
  //····················································································································

  private final var mObserversOf_minValueForBoardLimitWidthDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidthDisplayUnit_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidthDisplayUnit_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkComments' proxy property
  //····················································································································

  private final var mObserversOf_artworkComments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkComments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_artworkComments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkComments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkComments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_artworkComments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkComments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkComments_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_artworkComments.apply { (_ observer : EBEvent) in
        managedObject.artworkComments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkComments_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_artworkComments.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.artworkComments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkTitle' proxy property
  //····················································································································

  private final var mObserversOf_artworkTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_artworkTitle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_artworkTitle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkTitle_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_artworkTitle.apply { (_ observer : EBEvent) in
        managedObject.artworkTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkTitle_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_artworkTitle.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.artworkTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetTitle' proxy property
  //····················································································································

  private final var mObserversOf_selectedSheetTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetTitle_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetTitle_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.selectedSheetTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFileExtension' proxy property
  //····················································································································

  private final var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFileExtension_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
        managedObject.drillDataFileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
      observer.observedObjectDidChange ()
      for managedObject in inSet.values {
        managedObject.drillDataFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'hasInnerElements' transient property
  //····················································································································

  private final var mObserversOf_hasInnerElements = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_hasInnerElements (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasInnerElements.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasInnerElements_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasInnerElements (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasInnerElements.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasInnerElements_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_hasInnerElements_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasInnerElements.apply { (_ observer : EBEvent) in
        managedObject.hasInnerElements_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasInnerElements_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasInnerElements.apply { (_ observer : EBEvent) in
        managedObject.hasInnerElements_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'hasSixLayers' transient property
  //····················································································································

  private final var mObserversOf_hasSixLayers = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_hasSixLayers (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasSixLayers.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasSixLayers_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasSixLayers (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasSixLayers.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.hasSixLayers_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_hasSixLayers_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasSixLayers.apply { (_ observer : EBEvent) in
        managedObject.hasSixLayers_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasSixLayers_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_hasSixLayers.apply { (_ observer : EBEvent) in
        managedObject.hasSixLayers_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'layerConfigurationString' transient property
  //····················································································································

  private final var mObserversOf_layerConfigurationString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_layerConfigurationString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_layerConfigurationString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.layerConfigurationString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_layerConfigurationString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_layerConfigurationString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.layerConfigurationString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_layerConfigurationString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_layerConfigurationString.apply { (_ observer : EBEvent) in
        managedObject.layerConfigurationString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_layerConfigurationString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_layerConfigurationString.apply { (_ observer : EBEvent) in
        managedObject.layerConfigurationString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private final var mObserversOf_boardGridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardGridStepMultipliedByDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardGridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardGridStepMultipliedByDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardGridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardGridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardGridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardGridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardGridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private final var mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardShapeIsRectangular' transient property
  //····················································································································

  private final var mObserversOf_boardShapeIsRectangular = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardShapeIsRectangular (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardShapeIsRectangular.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardShapeIsRectangular_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardShapeIsRectangular (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardShapeIsRectangular.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardShapeIsRectangular_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardShapeIsRectangular_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardShapeIsRectangular.apply { (_ observer : EBEvent) in
        managedObject.boardShapeIsRectangular_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardShapeIsRectangular_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardShapeIsRectangular.apply { (_ observer : EBEvent) in
        managedObject.boardShapeIsRectangular_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetIssues' transient property
  //····················································································································

  private final var mObserversOf_selectedSheetIssues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetIssues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetIssues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetIssues_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private final var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sheetGeometry' transient property
  //····················································································································

  private final var mObserversOf_sheetGeometry = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sheetGeometry (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sheetGeometry.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetGeometry_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sheetGeometry (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sheetGeometry.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetGeometry_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sheetGeometry_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_sheetGeometry.apply { (_ observer : EBEvent) in
        managedObject.sheetGeometry_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sheetGeometry_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_sheetGeometry.apply { (_ observer : EBEvent) in
        managedObject.sheetGeometry_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicBackgroundDisplay' transient property
  //····················································································································

  private final var mObserversOf_schematicBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicBackgroundDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicBackgroundDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicBackgroundDisplay_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_schematicBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicBackgroundDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicBackgroundDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_schematicBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicBackgroundDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionWarningString' transient property
  //····················································································································

  private final var mObserversOf_connexionWarningString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarningString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarningString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionWarningString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionWarningString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionErrorString' transient property
  //····················································································································

  private final var mObserversOf_connexionErrorString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrorString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrorString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionErrorString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionErrorString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sheetIndexes' transient property
  //····················································································································

  private final var mObserversOf_sheetIndexes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetIndexes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetIndexes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sheetIndexes_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_sheetIndexes.apply { (_ observer : EBEvent) in
        managedObject.sheetIndexes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sheetIndexes_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_sheetIndexes.apply { (_ observer : EBEvent) in
        managedObject.sheetIndexes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private final var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netsDescription_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netsDescription_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardIssues' transient property
  //····················································································································

  private final var mObserversOf_boardIssues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardIssues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardIssues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardIssues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardIssues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardIssues_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardIssues.apply { (_ observer : EBEvent) in
        managedObject.boardIssues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardIssues_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardIssues.apply { (_ observer : EBEvent) in
        managedObject.boardIssues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBEvent) in
        managedObject.signatureForERCChecking_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBEvent) in
        managedObject.signatureForERCChecking_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'ercStatusImage' transient property
  //····················································································································

  private final var mObserversOf_ercStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_ercStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_ercStatusImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.ercStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_ercStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_ercStatusImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.ercStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_ercStatusImage_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_ercStatusImage.apply { (_ observer : EBEvent) in
        managedObject.ercStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_ercStatusImage_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_ercStatusImage.apply { (_ observer : EBEvent) in
        managedObject.ercStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'ercStatusMessage' transient property
  //····················································································································

  private final var mObserversOf_ercStatusMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_ercStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_ercStatusMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.ercStatusMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_ercStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_ercStatusMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.ercStatusMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_ercStatusMessage_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_ercStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.ercStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_ercStatusMessage_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_ercStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.ercStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaCountString' transient property
  //····················································································································

  private final var mObserversOf_viaCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaCountString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_viaCountString.apply { (_ observer : EBEvent) in
        managedObject.viaCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaCountString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_viaCountString.apply { (_ observer : EBEvent) in
        managedObject.viaCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'topSideTrackCountString' transient property
  //····················································································································

  private final var mObserversOf_topSideTrackCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_topSideTrackCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_topSideTrackCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.topSideTrackCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_topSideTrackCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_topSideTrackCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.topSideTrackCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_topSideTrackCountString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_topSideTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.topSideTrackCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_topSideTrackCountString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_topSideTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.topSideTrackCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backSideTrackCountString' transient property
  //····················································································································

  private final var mObserversOf_backSideTrackCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backSideTrackCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backSideTrackCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSideTrackCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backSideTrackCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backSideTrackCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSideTrackCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backSideTrackCountString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_backSideTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.backSideTrackCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backSideTrackCountString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_backSideTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.backSideTrackCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inner1LayerTrackCountString' transient property
  //····················································································································

  private final var mObserversOf_inner1LayerTrackCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_inner1LayerTrackCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inner1LayerTrackCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inner1LayerTrackCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_inner1LayerTrackCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inner1LayerTrackCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inner1LayerTrackCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_inner1LayerTrackCountString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inner1LayerTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.inner1LayerTrackCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inner1LayerTrackCountString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inner1LayerTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.inner1LayerTrackCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inner2LayerTrackCountString' transient property
  //····················································································································

  private final var mObserversOf_inner2LayerTrackCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_inner2LayerTrackCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inner2LayerTrackCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inner2LayerTrackCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_inner2LayerTrackCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inner2LayerTrackCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inner2LayerTrackCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_inner2LayerTrackCountString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inner2LayerTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.inner2LayerTrackCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inner2LayerTrackCountString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inner2LayerTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.inner2LayerTrackCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inner3LayerTrackCountString' transient property
  //····················································································································

  private final var mObserversOf_inner3LayerTrackCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_inner3LayerTrackCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inner3LayerTrackCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inner3LayerTrackCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_inner3LayerTrackCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inner3LayerTrackCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inner3LayerTrackCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_inner3LayerTrackCountString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inner3LayerTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.inner3LayerTrackCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inner3LayerTrackCountString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inner3LayerTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.inner3LayerTrackCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inner4LayerTrackCountString' transient property
  //····················································································································

  private final var mObserversOf_inner4LayerTrackCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_inner4LayerTrackCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inner4LayerTrackCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inner4LayerTrackCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_inner4LayerTrackCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inner4LayerTrackCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inner4LayerTrackCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_inner4LayerTrackCountString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inner4LayerTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.inner4LayerTrackCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inner4LayerTrackCountString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_inner4LayerTrackCountString.apply { (_ observer : EBEvent) in
        managedObject.inner4LayerTrackCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackCountString' transient property
  //····················································································································

  private final var mObserversOf_trackCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackCountString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackCountString.apply { (_ observer : EBEvent) in
        managedObject.trackCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackCountString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackCountString.apply { (_ observer : EBEvent) in
        managedObject.trackCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackLengthString' transient property
  //····················································································································

  private final var mObserversOf_trackLengthString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackLengthString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackLengthString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackLengthString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackLengthString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackLengthString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackLengthString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackLengthString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackLengthString.apply { (_ observer : EBEvent) in
        managedObject.trackLengthString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackLengthString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_trackLengthString.apply { (_ observer : EBEvent) in
        managedObject.trackLengthString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardStatusImage' transient property
  //····················································································································

  private final var mObserversOf_boardStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardStatusImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardStatusImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardStatusImage_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardStatusImage.apply { (_ observer : EBEvent) in
        managedObject.boardStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardStatusImage_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardStatusImage.apply { (_ observer : EBEvent) in
        managedObject.boardStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardStatusMessage' transient property
  //····················································································································

  private final var mObserversOf_boardStatusMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardStatusMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardStatusMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardStatusMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardStatusMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardStatusMessage_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.boardStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardStatusMessage_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.boardStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'interiorBoundBox' transient property
  //····················································································································

  private final var mObserversOf_interiorBoundBox = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_interiorBoundBox (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_interiorBoundBox.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.interiorBoundBox_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_interiorBoundBox (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_interiorBoundBox.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.interiorBoundBox_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_interiorBoundBox_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_interiorBoundBox.apply { (_ observer : EBEvent) in
        managedObject.interiorBoundBox_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_interiorBoundBox_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_interiorBoundBox.apply { (_ observer : EBEvent) in
        managedObject.interiorBoundBox_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardBoundBox' transient property
  //····················································································································

  private final var mObserversOf_boardBoundBox = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardBoundBox (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardBoundBox.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardBoundBox_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardBoundBox (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardBoundBox.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardBoundBox_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardBoundBox_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardBoundBox.apply { (_ observer : EBEvent) in
        managedObject.boardBoundBox_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardBoundBox_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardBoundBox.apply { (_ observer : EBEvent) in
        managedObject.boardBoundBox_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorTop' transient property
  //····················································································································

  private final var mObserversOf_boardInteriorTop = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardInteriorTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorTop.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorTop_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorTop.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorTop_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardInteriorTop_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardInteriorTop.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorTop_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardInteriorTop_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardInteriorTop.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorTop_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorBottom' transient property
  //····················································································································

  private final var mObserversOf_boardInteriorBottom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardInteriorBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorBottom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorBottom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorBottom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorBottom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardInteriorBottom_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardInteriorBottom.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorBottom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardInteriorBottom_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardInteriorBottom.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorBottom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorLeft' transient property
  //····················································································································

  private final var mObserversOf_boardInteriorLeft = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardInteriorLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorLeft.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorLeft_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorLeft.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorLeft_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardInteriorLeft_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardInteriorLeft.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorLeft_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardInteriorLeft_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardInteriorLeft.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorLeft_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorRight' transient property
  //····················································································································

  private final var mObserversOf_boardInteriorRight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardInteriorRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorRight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorRight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorRight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorRight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardInteriorRight_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardInteriorRight.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorRight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardInteriorRight_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardInteriorRight.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorRight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderTop' transient property
  //····················································································································

  private final var mObserversOf_boardLimitBorderTop = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderTop_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderTop_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderTop_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitBorderTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderTop_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderTop_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitBorderTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderTop_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderBottom' transient property
  //····················································································································

  private final var mObserversOf_boardLimitBorderBottom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderBottom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderBottom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderBottom_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitBorderBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderBottom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderBottom_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitBorderBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderBottom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderLeft' transient property
  //····················································································································

  private final var mObserversOf_boardLimitBorderLeft = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderLeft_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderLeft_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderLeft_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitBorderLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderLeft_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderLeft_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitBorderLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderLeft_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderRight' transient property
  //····················································································································

  private final var mObserversOf_boardLimitBorderRight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderRight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderRight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderRight_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitBorderRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderRight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderRight_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_boardLimitBorderRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderRight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'borderElementCountString' transient property
  //····················································································································

  private final var mObserversOf_borderElementCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderElementCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderElementCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_borderElementCountString_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_borderElementCountString.apply { (_ observer : EBEvent) in
        managedObject.borderElementCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_borderElementCountString_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_borderElementCountString.apply { (_ observer : EBEvent) in
        managedObject.borderElementCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'borderOutlineBackground' transient property
  //····················································································································

  private final var mObserversOf_borderOutlineBackground = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_borderOutlineBackground (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderOutlineBackground.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderOutlineBackground_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderOutlineBackground (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderOutlineBackground.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderOutlineBackground_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_borderOutlineBackground_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_borderOutlineBackground.apply { (_ observer : EBEvent) in
        managedObject.borderOutlineBackground_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_borderOutlineBackground_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_borderOutlineBackground.apply { (_ observer : EBEvent) in
        managedObject.borderOutlineBackground_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'borderViewBackground' transient property
  //····················································································································

  private final var mObserversOf_borderViewBackground = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_borderViewBackground (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderViewBackground.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderViewBackground_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderViewBackground (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderViewBackground.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderViewBackground_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_borderViewBackground_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_borderViewBackground.apply { (_ observer : EBEvent) in
        managedObject.borderViewBackground_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_borderViewBackground_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_borderViewBackground.apply { (_ observer : EBEvent) in
        managedObject.borderViewBackground_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceNames' transient property
  //····················································································································

  private final var mObserversOf_deviceNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceNames_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceNames_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'allClassNames' transient property
  //····················································································································

  private final var mObserversOf_allClassNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_allClassNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allClassNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allClassNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_allClassNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allClassNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.allClassNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_allClassNames_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_allClassNames.apply { (_ observer : EBEvent) in
        managedObject.allClassNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_allClassNames_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_allClassNames.apply { (_ observer : EBEvent) in
        managedObject.allClassNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  private final var mObserversOf_netWarningCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWarningCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWarningCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netWarningCount_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netWarningCount_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netNamesArray' transient property
  //····················································································································

  private final var mObserversOf_netNamesArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netNamesArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netNamesArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNamesArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netNamesArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netNamesArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netNamesArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netNamesArray_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_netNamesArray.apply { (_ observer : EBEvent) in
        managedObject.netNamesArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netNamesArray_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_netNamesArray.apply { (_ observer : EBEvent) in
        managedObject.netNamesArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private final var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedPackages' transient property
  //····················································································································

  private final var mObserversOf_unplacedPackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedPackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedPackages.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedPackages_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedPackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedPackages.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedPackages_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedPackages_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_unplacedPackages.apply { (_ observer : EBEvent) in
        managedObject.unplacedPackages_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedPackages_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_unplacedPackages.apply { (_ observer : EBEvent) in
        managedObject.unplacedPackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentsPlacedInBoard' transient property
  //····················································································································

  private final var mObserversOf_componentsPlacedInBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentsPlacedInBoard (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentsPlacedInBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentsPlacedInBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentsPlacedInBoard (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentsPlacedInBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentsPlacedInBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentsPlacedInBoard_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_componentsPlacedInBoard.apply { (_ observer : EBEvent) in
        managedObject.componentsPlacedInBoard_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentsPlacedInBoard_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_componentsPlacedInBoard.apply { (_ observer : EBEvent) in
        managedObject.componentsPlacedInBoard_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'placedComponentNameArray' transient property
  //····················································································································

  private final var mObserversOf_placedComponentNameArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_placedComponentNameArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_placedComponentNameArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placedComponentNameArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_placedComponentNameArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_placedComponentNameArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placedComponentNameArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_placedComponentNameArray_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_placedComponentNameArray.apply { (_ observer : EBEvent) in
        managedObject.placedComponentNameArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_placedComponentNameArray_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_placedComponentNameArray.apply { (_ observer : EBEvent) in
        managedObject.placedComponentNameArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicHasErrorOrWarning' transient property
  //····················································································································

  private final var mObserversOf_schematicHasErrorOrWarning = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicHasErrorOrWarning (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicHasErrorOrWarning.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicHasErrorOrWarning_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicHasErrorOrWarning (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicHasErrorOrWarning.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicHasErrorOrWarning_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicHasErrorOrWarning_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_schematicHasErrorOrWarning.apply { (_ observer : EBEvent) in
        managedObject.schematicHasErrorOrWarning_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicHasErrorOrWarning_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_schematicHasErrorOrWarning.apply { (_ observer : EBEvent) in
        managedObject.schematicHasErrorOrWarning_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusMessage' transient property
  //····················································································································

  private final var mObserversOf_schematicStatusMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicStatusMessage_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_schematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicStatusMessage_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_schematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusImage' transient property
  //····················································································································

  private final var mObserversOf_schematicStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicStatusImage_toElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_schematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicStatusImage_fromElementsOfSet (_ inSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inSet.values {
      self.mObserversOf_schematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ProjectRoot, _ right : ProjectRoot) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_ProjectRoot? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ProjectRoot,
                        sortCallback inSortCallBack : Optional < (_ left : ProjectRoot, _ right : ProjectRoot) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <ProjectRoot>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ProjectRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ProjectRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_ProjectRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <ProjectRoot> ()
      for superObject in newModelArray.values {
        if let object = superObject as? ProjectRoot {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [ProjectRoot] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ProjectRoot> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <ProjectRoot>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_ProjectRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ProjectRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <ProjectRoot>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <ProjectRoot> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <ProjectRoot>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [ProjectRoot] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <ProjectRoot> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSPopUpButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
          }
        }
      }
    }
  #endif

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <ProjectRoot>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue.values, popUpButton: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <ProjectRoot>,
                                 addedSet inAddedSet : EBReferenceSet <ProjectRoot>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [ProjectRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ProjectRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <ProjectRoot> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : ProjectRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : ProjectRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot {

  //····················································································································

  override var selection : EBSelection < [ProjectRoot] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <ProjectRoot>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <ProjectRoot> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : ProjectRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : ProjectRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_ProjectRoot : StoredArrayOf_ProjectRoot {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <ProjectRoot> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ProjectRoot") as? ProjectRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mSchematicSheetOrientation (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRastnetDisplay (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRastnetDisplayedNetName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRastnetDisplayedComponentName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mArtworkName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mArtworkVersion (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mPDFBoardBackgroundColor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mCheckClearanceBetweenPadsOfSameNet (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLastERCCheckingIsSuccess (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLastERCCheckingSignature (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLayerConfiguration (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardSideForNewTrack (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDirectionForNewTrack (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLayerForNewText (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLayerForNewLine (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardSideForNewRestrictRectangle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAutoRouterPreferredDirections (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAutorouterSnapAngle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRouteDirection (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRouteOrigin (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAutorouterInterfaceMode (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mExportExistingTracksAndVias (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mTrackLengthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLayoutClearance (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLayoutClearanceUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardSelectedInspector (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardHorizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardVerticalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardGridStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardGridDisplayFactor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardZoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardGridStep (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardGridStepUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mErrorOrWarningIssueSize (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mControlKeyHiliteDiameter (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDSNFileProposedName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardClearance (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardClearanceUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsSelectedInspector (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsHorizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsVerticalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsGridStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsGridDisplayFactor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsZoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsGridStep (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsGridStepUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsBoundingBoxUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardPointsBoundingBoxUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitControlPointsDisplayUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardShape (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRectangularBoardWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRectangularBoardWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRectangularBoardHeight (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRectangularBoardHeightUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDefaultNetClassName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSelectedPageIndex (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSelectedSchematicInspector (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicTitle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicVersion (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicDate (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicHorizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicVerticalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicZoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicGridStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicGridDisplayFactor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicCustomWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicCustomWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicCustomHeight (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicCustomHeightUnit (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

