//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_ProjectRoot : EBReadOnlyAbstractObjectProperty <ProjectRoot> {

  //································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mArtworkName_property.stopsBeingObserved (by: self.mArtworkName_property) // Stored property
      oldValue.mArtworkVersion_property.stopsBeingObserved (by: self.mArtworkVersion_property) // Stored property
      oldValue.mPDFBoardBackgroundColor_property.stopsBeingObserved (by: self.mPDFBoardBackgroundColor_property) // Stored property
      oldValue.mCheckClearanceBetweenPadsOfSameNet_property.stopsBeingObserved (by: self.mCheckClearanceBetweenPadsOfSameNet_property) // Stored property
      oldValue.mLastERCCheckingIsSuccess_property.stopsBeingObserved (by: self.mLastERCCheckingIsSuccess_property) // Stored property
      oldValue.mLastERCCheckingSignature_property.stopsBeingObserved (by: self.mLastERCCheckingSignature_property) // Stored property
      oldValue.mLayerConfiguration_property.stopsBeingObserved (by: self.mLayerConfiguration_property) // Stored property
      oldValue.mBoardSideForNewTrack_property.stopsBeingObserved (by: self.mBoardSideForNewTrack_property) // Stored property
      oldValue.mDirectionForNewTrack_property.stopsBeingObserved (by: self.mDirectionForNewTrack_property) // Stored property
      oldValue.mBoardLayerForNewText_property.stopsBeingObserved (by: self.mBoardLayerForNewText_property) // Stored property
      oldValue.mBoardLayerForNewQRCode_property.stopsBeingObserved (by: self.mBoardLayerForNewQRCode_property) // Stored property
      oldValue.mBoardLayerForNewImage_property.stopsBeingObserved (by: self.mBoardLayerForNewImage_property) // Stored property
      oldValue.mBoardLayerForNewLine_property.stopsBeingObserved (by: self.mBoardLayerForNewLine_property) // Stored property
      oldValue.mBoardSideForNewRestrictRectangle_property.stopsBeingObserved (by: self.mBoardSideForNewRestrictRectangle_property) // Stored property
      oldValue.mNewRestrictRectangleLayers_property.stopsBeingObserved (by: self.mNewRestrictRectangleLayers_property) // Stored property
      oldValue.mAutoRouterPreferredDirections_property.stopsBeingObserved (by: self.mAutoRouterPreferredDirections_property) // Stored property
      oldValue.mAutorouterSnapAngle_property.stopsBeingObserved (by: self.mAutorouterSnapAngle_property) // Stored property
      oldValue.mRouteDirection_property.stopsBeingObserved (by: self.mRouteDirection_property) // Stored property
      oldValue.mRouteOrigin_property.stopsBeingObserved (by: self.mRouteOrigin_property) // Stored property
      oldValue.mAutorouterInterfaceMode_property.stopsBeingObserved (by: self.mAutorouterInterfaceMode_property) // Stored property
      oldValue.mExportExistingTracksAndVias_property.stopsBeingObserved (by: self.mExportExistingTracksAndVias_property) // Stored property
      oldValue.mExportExistingTracksAndVias2_property.stopsBeingObserved (by: self.mExportExistingTracksAndVias2_property) // Stored property
      oldValue.mTrackLengthUnit_property.stopsBeingObserved (by: self.mTrackLengthUnit_property) // Stored property
      oldValue.mLayoutClearance_property.stopsBeingObserved (by: self.mLayoutClearance_property) // Stored property
      oldValue.mLayoutClearanceUnit_property.stopsBeingObserved (by: self.mLayoutClearanceUnit_property) // Stored property
      oldValue.mBoardSelectedInspector_property.stopsBeingObserved (by: self.mBoardSelectedInspector_property) // Stored property
      oldValue.mBoardHorizontalFlip_property.stopsBeingObserved (by: self.mBoardHorizontalFlip_property) // Stored property
      oldValue.mBoardVerticalFlip_property.stopsBeingObserved (by: self.mBoardVerticalFlip_property) // Stored property
      oldValue.mBoardGridStyle_property.stopsBeingObserved (by: self.mBoardGridStyle_property) // Stored property
      oldValue.mBoardGridDisplayFactor_property.stopsBeingObserved (by: self.mBoardGridDisplayFactor_property) // Stored property
      oldValue.mBoardZoom_property.stopsBeingObserved (by: self.mBoardZoom_property) // Stored property
      oldValue.mBoardGridStep_property.stopsBeingObserved (by: self.mBoardGridStep_property) // Stored property
      oldValue.mBoardGridStepUnit_property.stopsBeingObserved (by: self.mBoardGridStepUnit_property) // Stored property
      oldValue.mErrorOrWarningIssueSize_property.stopsBeingObserved (by: self.mErrorOrWarningIssueSize_property) // Stored property
      oldValue.mControlKeyHiliteDiameter_property.stopsBeingObserved (by: self.mControlKeyHiliteDiameter_property) // Stored property
      oldValue.mDSNFileProposedName_property.stopsBeingObserved (by: self.mDSNFileProposedName_property) // Stored property
      oldValue.mBoardLimitsWidth_property.stopsBeingObserved (by: self.mBoardLimitsWidth_property) // Stored property
      oldValue.mBoardLimitsWidthUnit_property.stopsBeingObserved (by: self.mBoardLimitsWidthUnit_property) // Stored property
      oldValue.mBoardClearance_property.stopsBeingObserved (by: self.mBoardClearance_property) // Stored property
      oldValue.mBoardClearanceUnit_property.stopsBeingObserved (by: self.mBoardClearanceUnit_property) // Stored property
      oldValue.mBoardLimitsSelectedInspector_property.stopsBeingObserved (by: self.mBoardLimitsSelectedInspector_property) // Stored property
      oldValue.mBoardLimitsHorizontalFlip_property.stopsBeingObserved (by: self.mBoardLimitsHorizontalFlip_property) // Stored property
      oldValue.mBoardLimitsVerticalFlip_property.stopsBeingObserved (by: self.mBoardLimitsVerticalFlip_property) // Stored property
      oldValue.mBoardLimitsGridStyle_property.stopsBeingObserved (by: self.mBoardLimitsGridStyle_property) // Stored property
      oldValue.mBoardLimitsGridDisplayFactor_property.stopsBeingObserved (by: self.mBoardLimitsGridDisplayFactor_property) // Stored property
      oldValue.mBoardLimitsZoom_property.stopsBeingObserved (by: self.mBoardLimitsZoom_property) // Stored property
      oldValue.mBoardLimitsGridStep_property.stopsBeingObserved (by: self.mBoardLimitsGridStep_property) // Stored property
      oldValue.mBoardLimitsGridStepUnit_property.stopsBeingObserved (by: self.mBoardLimitsGridStepUnit_property) // Stored property
      oldValue.mBoardLimitsBoundingBoxUnit_property.stopsBeingObserved (by: self.mBoardLimitsBoundingBoxUnit_property) // Stored property
      oldValue.mBoardPointsBoundingBoxUnit_property.stopsBeingObserved (by: self.mBoardPointsBoundingBoxUnit_property) // Stored property
      oldValue.mBoardSelectedCurveDisplayUnit_property.stopsBeingObserved (by: self.mBoardSelectedCurveDisplayUnit_property) // Stored property
      oldValue.mBoardLimitControlPointsDisplayUnit_property.stopsBeingObserved (by: self.mBoardLimitControlPointsDisplayUnit_property) // Stored property
      oldValue.mBoardShape_property.stopsBeingObserved (by: self.mBoardShape_property) // Stored property
      oldValue.mContentOpacityInBoardOutline_property.stopsBeingObserved (by: self.mContentOpacityInBoardOutline_property) // Stored property
      oldValue.mRectangularBoardWidth_property.stopsBeingObserved (by: self.mRectangularBoardWidth_property) // Stored property
      oldValue.mRectangularBoardWidthUnit_property.stopsBeingObserved (by: self.mRectangularBoardWidthUnit_property) // Stored property
      oldValue.mRectangularBoardHeight_property.stopsBeingObserved (by: self.mRectangularBoardHeight_property) // Stored property
      oldValue.mRectangularBoardHeightUnit_property.stopsBeingObserved (by: self.mRectangularBoardHeightUnit_property) // Stored property
      oldValue.mDefaultNetClassName_property.stopsBeingObserved (by: self.mDefaultNetClassName_property) // Stored property
      oldValue.mSchematicHilitedColumnIndex_property.stopsBeingObserved (by: self.mSchematicHilitedColumnIndex_property) // Stored property
      oldValue.mSchematicHilitedRowIndex_property.stopsBeingObserved (by: self.mSchematicHilitedRowIndex_property) // Stored property
      oldValue.mSchematicEnableHiliteColumnAndRow_property.stopsBeingObserved (by: self.mSchematicEnableHiliteColumnAndRow_property) // Stored property
      oldValue.mSelectedPageIndex_property.stopsBeingObserved (by: self.mSelectedPageIndex_property) // Stored property
      oldValue.mSelectedSchematicInspector_property.stopsBeingObserved (by: self.mSelectedSchematicInspector_property) // Stored property
      oldValue.mSchematicTitle_property.stopsBeingObserved (by: self.mSchematicTitle_property) // Stored property
      oldValue.mSchematicVersion_property.stopsBeingObserved (by: self.mSchematicVersion_property) // Stored property
      oldValue.mSchematicDate_property.stopsBeingObserved (by: self.mSchematicDate_property) // Stored property
      oldValue.mSchematicHorizontalFlip_property.stopsBeingObserved (by: self.mSchematicHorizontalFlip_property) // Stored property
      oldValue.mSchematicVerticalFlip_property.stopsBeingObserved (by: self.mSchematicVerticalFlip_property) // Stored property
      oldValue.mSchematicZoom_property.stopsBeingObserved (by: self.mSchematicZoom_property) // Stored property
      oldValue.mSchematicGridStyle_property.stopsBeingObserved (by: self.mSchematicGridStyle_property) // Stored property
      oldValue.mSchematicGridDisplayFactor_property.stopsBeingObserved (by: self.mSchematicGridDisplayFactor_property) // Stored property
      oldValue.mSchematicCustomWidth_property.stopsBeingObserved (by: self.mSchematicCustomWidth_property) // Stored property
      oldValue.mSchematicCustomWidthUnit_property.stopsBeingObserved (by: self.mSchematicCustomWidthUnit_property) // Stored property
      oldValue.mSchematicCustomHeight_property.stopsBeingObserved (by: self.mSchematicCustomHeight_property) // Stored property
      oldValue.mSchematicCustomHeightUnit_property.stopsBeingObserved (by: self.mSchematicCustomHeightUnit_property) // Stored property
      oldValue.drawErrorBackgroundForBoard_property.stopsBeingObserved (by: self.drawErrorBackgroundForBoard_property) // Stored property
      oldValue.displayFrontRestrictRectangles_property.stopsBeingObserved (by: self.displayFrontRestrictRectangles_property) // Stored property
      oldValue.displayBackRestrictRectangles_property.stopsBeingObserved (by: self.displayBackRestrictRectangles_property) // Stored property
      oldValue.displayInner1RestrictRectangles_property.stopsBeingObserved (by: self.displayInner1RestrictRectangles_property) // Stored property
      oldValue.displayInner2RestrictRectangles_property.stopsBeingObserved (by: self.displayInner2RestrictRectangles_property) // Stored property
      oldValue.displayInner3RestrictRectangles_property.stopsBeingObserved (by: self.displayInner3RestrictRectangles_property) // Stored property
      oldValue.displayInner4RestrictRectangles_property.stopsBeingObserved (by: self.displayInner4RestrictRectangles_property) // Stored property
      oldValue.displayFrontLegendForBoard_property.stopsBeingObserved (by: self.displayFrontLegendForBoard_property) // Stored property
      oldValue.displayFrontLayoutForBoard_property.stopsBeingObserved (by: self.displayFrontLayoutForBoard_property) // Stored property
      oldValue.displayBackLayoutForBoard_property.stopsBeingObserved (by: self.displayBackLayoutForBoard_property) // Stored property
      oldValue.displayInner1LayoutForBoard_property.stopsBeingObserved (by: self.displayInner1LayoutForBoard_property) // Stored property
      oldValue.displayInner2LayoutForBoard_property.stopsBeingObserved (by: self.displayInner2LayoutForBoard_property) // Stored property
      oldValue.displayInner3LayoutForBoard_property.stopsBeingObserved (by: self.displayInner3LayoutForBoard_property) // Stored property
      oldValue.displayInner4LayoutForBoard_property.stopsBeingObserved (by: self.displayInner4LayoutForBoard_property) // Stored property
      oldValue.displayBackLegendForBoard_property.stopsBeingObserved (by: self.displayBackLegendForBoard_property) // Stored property
      oldValue.displayFrontPadsForBoard_property.stopsBeingObserved (by: self.displayFrontPadsForBoard_property) // Stored property
      oldValue.displayBackPadsForBoard_property.stopsBeingObserved (by: self.displayBackPadsForBoard_property) // Stored property
      oldValue.displayPadNumbersForBoard_property.stopsBeingObserved (by: self.displayPadNumbersForBoard_property) // Stored property
      oldValue.packageDrawingWidthMultpliedByTenForBoard_property.stopsBeingObserved (by: self.packageDrawingWidthMultpliedByTenForBoard_property) // Stored property
      oldValue.mSchematicSheetOrientation_property.stopsBeingObserved (by: self.mSchematicSheetOrientation_property) // Stored property
      oldValue.mRastnetDisplay_property.stopsBeingObserved (by: self.mRastnetDisplay_property) // Stored property
      oldValue.mRastnetDisplayedNetName_property.stopsBeingObserved (by: self.mRastnetDisplayedNetName_property) // Stored property
      oldValue.mRastnetDisplayedComponentName_property.stopsBeingObserved (by: self.mRastnetDisplayedComponentName_property) // Stored property
      oldValue.hasInnerElements_property.stopsBeingObserved (by: self.hasInnerElements_property) // Transient property
      oldValue.layerConfigurationString_property.stopsBeingObserved (by: self.layerConfigurationString_property) // Transient property
      oldValue.boardGridStepMultipliedByDisplayFactor_property.stopsBeingObserved (by: self.boardGridStepMultipliedByDisplayFactor_property) // Transient property
      oldValue.boardLimitsGridStepMultipliedByDisplayFactor_property.stopsBeingObserved (by: self.boardLimitsGridStepMultipliedByDisplayFactor_property) // Transient property
      oldValue.boardShapeIsRectangular_property.stopsBeingObserved (by: self.boardShapeIsRectangular_property) // Transient property
      oldValue.selectedSheetIssues_property.stopsBeingObserved (by: self.selectedSheetIssues_property) // Transient property
      oldValue.schematicOverDisplay_property.stopsBeingObserved (by: self.schematicOverDisplay_property) // Transient property
      oldValue.schematicTooltips_property.stopsBeingObserved (by: self.schematicTooltips_property) // Transient property
      oldValue.segmentedControlSheetIssueImage_property.stopsBeingObserved (by: self.segmentedControlSheetIssueImage_property) // Transient property
      oldValue.schematicErrorCount_property.stopsBeingObserved (by: self.schematicErrorCount_property) // Transient property
      oldValue.sheetIndexes_property.stopsBeingObserved (by: self.sheetIndexes_property) // Transient property
      oldValue.netsDescription_property.stopsBeingObserved (by: self.netsDescription_property) // Transient property
      oldValue.boardIssues_property.stopsBeingObserved (by: self.boardIssues_property) // Transient property
      oldValue.hasSixLayers_property.stopsBeingObserved (by: self.hasSixLayers_property) // Transient property
      oldValue.signatureForERCChecking_property.stopsBeingObserved (by: self.signatureForERCChecking_property) // Transient property
      oldValue.ercStatusImage_property.stopsBeingObserved (by: self.ercStatusImage_property) // Transient property
      oldValue.ercStatusImageOrNoneOnSuccess_property.stopsBeingObserved (by: self.ercStatusImageOrNoneOnSuccess_property) // Transient property
      oldValue.ercStatusMessage_property.stopsBeingObserved (by: self.ercStatusMessage_property) // Transient property
      oldValue.viaCountString_property.stopsBeingObserved (by: self.viaCountString_property) // Transient property
      oldValue.topSideTrackCountString_property.stopsBeingObserved (by: self.topSideTrackCountString_property) // Transient property
      oldValue.backSideTrackCountString_property.stopsBeingObserved (by: self.backSideTrackCountString_property) // Transient property
      oldValue.inner1LayerTrackCountString_property.stopsBeingObserved (by: self.inner1LayerTrackCountString_property) // Transient property
      oldValue.inner2LayerTrackCountString_property.stopsBeingObserved (by: self.inner2LayerTrackCountString_property) // Transient property
      oldValue.inner3LayerTrackCountString_property.stopsBeingObserved (by: self.inner3LayerTrackCountString_property) // Transient property
      oldValue.inner4LayerTrackCountString_property.stopsBeingObserved (by: self.inner4LayerTrackCountString_property) // Transient property
      oldValue.trackCountString_property.stopsBeingObserved (by: self.trackCountString_property) // Transient property
      oldValue.trackLengthString_property.stopsBeingObserved (by: self.trackLengthString_property) // Transient property
      oldValue.boardStatusErrorCount_property.stopsBeingObserved (by: self.boardStatusErrorCount_property) // Transient property
      oldValue.interiorBoundBox_property.stopsBeingObserved (by: self.interiorBoundBox_property) // Transient property
      oldValue.boardBoundBox_property.stopsBeingObserved (by: self.boardBoundBox_property) // Transient property
      oldValue.boardInteriorTop_property.stopsBeingObserved (by: self.boardInteriorTop_property) // Transient property
      oldValue.boardInteriorBottom_property.stopsBeingObserved (by: self.boardInteriorBottom_property) // Transient property
      oldValue.boardInteriorLeft_property.stopsBeingObserved (by: self.boardInteriorLeft_property) // Transient property
      oldValue.boardInteriorRight_property.stopsBeingObserved (by: self.boardInteriorRight_property) // Transient property
      oldValue.boardLimitBorderTop_property.stopsBeingObserved (by: self.boardLimitBorderTop_property) // Transient property
      oldValue.boardLimitBorderBottom_property.stopsBeingObserved (by: self.boardLimitBorderBottom_property) // Transient property
      oldValue.boardLimitBorderLeft_property.stopsBeingObserved (by: self.boardLimitBorderLeft_property) // Transient property
      oldValue.boardLimitBorderRight_property.stopsBeingObserved (by: self.boardLimitBorderRight_property) // Transient property
      oldValue.borderElementCountString_property.stopsBeingObserved (by: self.borderElementCountString_property) // Transient property
      oldValue.borderOutlineBackground_property.stopsBeingObserved (by: self.borderOutlineBackground_property) // Transient property
      oldValue.borderViewBackground_property.stopsBeingObserved (by: self.borderViewBackground_property) // Transient property
      oldValue.fontNameArray_property.stopsBeingObserved (by: self.fontNameArray_property) // Transient property
      oldValue.deviceNames_property.stopsBeingObserved (by: self.deviceNames_property) // Transient property
      oldValue.allClassNames_property.stopsBeingObserved (by: self.allClassNames_property) // Transient property
      oldValue.sheetGeometry_property.stopsBeingObserved (by: self.sheetGeometry_property) // Transient property
      oldValue.schematicBackgroundDisplay_property.stopsBeingObserved (by: self.schematicBackgroundDisplay_property) // Transient property
      oldValue.netWarningCount_property.stopsBeingObserved (by: self.netWarningCount_property) // Transient property
      oldValue.segmentedControlNetListIssueImage_property.stopsBeingObserved (by: self.segmentedControlNetListIssueImage_property) // Transient property
      oldValue.netNamesArray_property.stopsBeingObserved (by: self.netNamesArray_property) // Transient property
      oldValue.unplacedSymbols_property.stopsBeingObserved (by: self.unplacedSymbols_property) // Transient property
      oldValue.unplacedPackages_property.stopsBeingObserved (by: self.unplacedPackages_property) // Transient property
      oldValue.componentsPlacedInBoard_property.stopsBeingObserved (by: self.componentsPlacedInBoard_property) // Transient property
      oldValue.boardStatusMessage_property.stopsBeingObserved (by: self.boardStatusMessage_property) // Transient property
      oldValue.boardStatusWarningCount_property.stopsBeingObserved (by: self.boardStatusWarningCount_property) // Transient property
      oldValue.placedComponentNameArray_property.stopsBeingObserved (by: self.placedComponentNameArray_property) // Transient property
      oldValue.schematicHasErrorOrWarning_property.stopsBeingObserved (by: self.schematicHasErrorOrWarning_property) // Transient property
      oldValue.schematicStatusMessage_property.stopsBeingObserved (by: self.schematicStatusMessage_property) // Transient property
      oldValue.segmentedControlSchematicIssueImage_property.stopsBeingObserved (by: self.segmentedControlSchematicIssueImage_property) // Transient property
      oldValue.schematicWarningCount_property.stopsBeingObserved (by: self.schematicWarningCount_property) // Transient property
      oldValue.hasSchematicIssue_property.stopsBeingObserved (by: self.hasSchematicIssue_property) // Transient property
      oldValue.segmentedControlBoardIssueImage_property.stopsBeingObserved (by: self.segmentedControlBoardIssueImage_property) // Transient property
      if let relay = self.mObserversOf_mSheets { // to Many
        oldValue.mSheets_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mFonts { // to Many
        oldValue.mFonts_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDevices { // to Many
        oldValue.mDevices_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNetClasses { // to Many
        oldValue.mNetClasses_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mBorderCurves { // to Many
        oldValue.mBorderCurves_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mBoardObjects { // to Many
        oldValue.mBoardObjects_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponents { // to Many
        oldValue.mComponents_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    if let newValue = self.mWeakInternalValue {
      newValue.mArtworkName_property.startsBeingObserved (by: self.mArtworkName_property) // Stored property
      newValue.mArtworkVersion_property.startsBeingObserved (by: self.mArtworkVersion_property) // Stored property
      newValue.mPDFBoardBackgroundColor_property.startsBeingObserved (by: self.mPDFBoardBackgroundColor_property) // Stored property
      newValue.mCheckClearanceBetweenPadsOfSameNet_property.startsBeingObserved (by: self.mCheckClearanceBetweenPadsOfSameNet_property) // Stored property
      newValue.mLastERCCheckingIsSuccess_property.startsBeingObserved (by: self.mLastERCCheckingIsSuccess_property) // Stored property
      newValue.mLastERCCheckingSignature_property.startsBeingObserved (by: self.mLastERCCheckingSignature_property) // Stored property
      newValue.mLayerConfiguration_property.startsBeingObserved (by: self.mLayerConfiguration_property) // Stored property
      newValue.mBoardSideForNewTrack_property.startsBeingObserved (by: self.mBoardSideForNewTrack_property) // Stored property
      newValue.mDirectionForNewTrack_property.startsBeingObserved (by: self.mDirectionForNewTrack_property) // Stored property
      newValue.mBoardLayerForNewText_property.startsBeingObserved (by: self.mBoardLayerForNewText_property) // Stored property
      newValue.mBoardLayerForNewQRCode_property.startsBeingObserved (by: self.mBoardLayerForNewQRCode_property) // Stored property
      newValue.mBoardLayerForNewImage_property.startsBeingObserved (by: self.mBoardLayerForNewImage_property) // Stored property
      newValue.mBoardLayerForNewLine_property.startsBeingObserved (by: self.mBoardLayerForNewLine_property) // Stored property
      newValue.mBoardSideForNewRestrictRectangle_property.startsBeingObserved (by: self.mBoardSideForNewRestrictRectangle_property) // Stored property
      newValue.mNewRestrictRectangleLayers_property.startsBeingObserved (by: self.mNewRestrictRectangleLayers_property) // Stored property
      newValue.mAutoRouterPreferredDirections_property.startsBeingObserved (by: self.mAutoRouterPreferredDirections_property) // Stored property
      newValue.mAutorouterSnapAngle_property.startsBeingObserved (by: self.mAutorouterSnapAngle_property) // Stored property
      newValue.mRouteDirection_property.startsBeingObserved (by: self.mRouteDirection_property) // Stored property
      newValue.mRouteOrigin_property.startsBeingObserved (by: self.mRouteOrigin_property) // Stored property
      newValue.mAutorouterInterfaceMode_property.startsBeingObserved (by: self.mAutorouterInterfaceMode_property) // Stored property
      newValue.mExportExistingTracksAndVias_property.startsBeingObserved (by: self.mExportExistingTracksAndVias_property) // Stored property
      newValue.mExportExistingTracksAndVias2_property.startsBeingObserved (by: self.mExportExistingTracksAndVias2_property) // Stored property
      newValue.mTrackLengthUnit_property.startsBeingObserved (by: self.mTrackLengthUnit_property) // Stored property
      newValue.mLayoutClearance_property.startsBeingObserved (by: self.mLayoutClearance_property) // Stored property
      newValue.mLayoutClearanceUnit_property.startsBeingObserved (by: self.mLayoutClearanceUnit_property) // Stored property
      newValue.mBoardSelectedInspector_property.startsBeingObserved (by: self.mBoardSelectedInspector_property) // Stored property
      newValue.mBoardHorizontalFlip_property.startsBeingObserved (by: self.mBoardHorizontalFlip_property) // Stored property
      newValue.mBoardVerticalFlip_property.startsBeingObserved (by: self.mBoardVerticalFlip_property) // Stored property
      newValue.mBoardGridStyle_property.startsBeingObserved (by: self.mBoardGridStyle_property) // Stored property
      newValue.mBoardGridDisplayFactor_property.startsBeingObserved (by: self.mBoardGridDisplayFactor_property) // Stored property
      newValue.mBoardZoom_property.startsBeingObserved (by: self.mBoardZoom_property) // Stored property
      newValue.mBoardGridStep_property.startsBeingObserved (by: self.mBoardGridStep_property) // Stored property
      newValue.mBoardGridStepUnit_property.startsBeingObserved (by: self.mBoardGridStepUnit_property) // Stored property
      newValue.mErrorOrWarningIssueSize_property.startsBeingObserved (by: self.mErrorOrWarningIssueSize_property) // Stored property
      newValue.mControlKeyHiliteDiameter_property.startsBeingObserved (by: self.mControlKeyHiliteDiameter_property) // Stored property
      newValue.mDSNFileProposedName_property.startsBeingObserved (by: self.mDSNFileProposedName_property) // Stored property
      newValue.mBoardLimitsWidth_property.startsBeingObserved (by: self.mBoardLimitsWidth_property) // Stored property
      newValue.mBoardLimitsWidthUnit_property.startsBeingObserved (by: self.mBoardLimitsWidthUnit_property) // Stored property
      newValue.mBoardClearance_property.startsBeingObserved (by: self.mBoardClearance_property) // Stored property
      newValue.mBoardClearanceUnit_property.startsBeingObserved (by: self.mBoardClearanceUnit_property) // Stored property
      newValue.mBoardLimitsSelectedInspector_property.startsBeingObserved (by: self.mBoardLimitsSelectedInspector_property) // Stored property
      newValue.mBoardLimitsHorizontalFlip_property.startsBeingObserved (by: self.mBoardLimitsHorizontalFlip_property) // Stored property
      newValue.mBoardLimitsVerticalFlip_property.startsBeingObserved (by: self.mBoardLimitsVerticalFlip_property) // Stored property
      newValue.mBoardLimitsGridStyle_property.startsBeingObserved (by: self.mBoardLimitsGridStyle_property) // Stored property
      newValue.mBoardLimitsGridDisplayFactor_property.startsBeingObserved (by: self.mBoardLimitsGridDisplayFactor_property) // Stored property
      newValue.mBoardLimitsZoom_property.startsBeingObserved (by: self.mBoardLimitsZoom_property) // Stored property
      newValue.mBoardLimitsGridStep_property.startsBeingObserved (by: self.mBoardLimitsGridStep_property) // Stored property
      newValue.mBoardLimitsGridStepUnit_property.startsBeingObserved (by: self.mBoardLimitsGridStepUnit_property) // Stored property
      newValue.mBoardLimitsBoundingBoxUnit_property.startsBeingObserved (by: self.mBoardLimitsBoundingBoxUnit_property) // Stored property
      newValue.mBoardPointsBoundingBoxUnit_property.startsBeingObserved (by: self.mBoardPointsBoundingBoxUnit_property) // Stored property
      newValue.mBoardSelectedCurveDisplayUnit_property.startsBeingObserved (by: self.mBoardSelectedCurveDisplayUnit_property) // Stored property
      newValue.mBoardLimitControlPointsDisplayUnit_property.startsBeingObserved (by: self.mBoardLimitControlPointsDisplayUnit_property) // Stored property
      newValue.mBoardShape_property.startsBeingObserved (by: self.mBoardShape_property) // Stored property
      newValue.mContentOpacityInBoardOutline_property.startsBeingObserved (by: self.mContentOpacityInBoardOutline_property) // Stored property
      newValue.mRectangularBoardWidth_property.startsBeingObserved (by: self.mRectangularBoardWidth_property) // Stored property
      newValue.mRectangularBoardWidthUnit_property.startsBeingObserved (by: self.mRectangularBoardWidthUnit_property) // Stored property
      newValue.mRectangularBoardHeight_property.startsBeingObserved (by: self.mRectangularBoardHeight_property) // Stored property
      newValue.mRectangularBoardHeightUnit_property.startsBeingObserved (by: self.mRectangularBoardHeightUnit_property) // Stored property
      newValue.mDefaultNetClassName_property.startsBeingObserved (by: self.mDefaultNetClassName_property) // Stored property
      newValue.mSchematicHilitedColumnIndex_property.startsBeingObserved (by: self.mSchematicHilitedColumnIndex_property) // Stored property
      newValue.mSchematicHilitedRowIndex_property.startsBeingObserved (by: self.mSchematicHilitedRowIndex_property) // Stored property
      newValue.mSchematicEnableHiliteColumnAndRow_property.startsBeingObserved (by: self.mSchematicEnableHiliteColumnAndRow_property) // Stored property
      newValue.mSelectedPageIndex_property.startsBeingObserved (by: self.mSelectedPageIndex_property) // Stored property
      newValue.mSelectedSchematicInspector_property.startsBeingObserved (by: self.mSelectedSchematicInspector_property) // Stored property
      newValue.mSchematicTitle_property.startsBeingObserved (by: self.mSchematicTitle_property) // Stored property
      newValue.mSchematicVersion_property.startsBeingObserved (by: self.mSchematicVersion_property) // Stored property
      newValue.mSchematicDate_property.startsBeingObserved (by: self.mSchematicDate_property) // Stored property
      newValue.mSchematicHorizontalFlip_property.startsBeingObserved (by: self.mSchematicHorizontalFlip_property) // Stored property
      newValue.mSchematicVerticalFlip_property.startsBeingObserved (by: self.mSchematicVerticalFlip_property) // Stored property
      newValue.mSchematicZoom_property.startsBeingObserved (by: self.mSchematicZoom_property) // Stored property
      newValue.mSchematicGridStyle_property.startsBeingObserved (by: self.mSchematicGridStyle_property) // Stored property
      newValue.mSchematicGridDisplayFactor_property.startsBeingObserved (by: self.mSchematicGridDisplayFactor_property) // Stored property
      newValue.mSchematicCustomWidth_property.startsBeingObserved (by: self.mSchematicCustomWidth_property) // Stored property
      newValue.mSchematicCustomWidthUnit_property.startsBeingObserved (by: self.mSchematicCustomWidthUnit_property) // Stored property
      newValue.mSchematicCustomHeight_property.startsBeingObserved (by: self.mSchematicCustomHeight_property) // Stored property
      newValue.mSchematicCustomHeightUnit_property.startsBeingObserved (by: self.mSchematicCustomHeightUnit_property) // Stored property
      newValue.drawErrorBackgroundForBoard_property.startsBeingObserved (by: self.drawErrorBackgroundForBoard_property) // Stored property
      newValue.displayFrontRestrictRectangles_property.startsBeingObserved (by: self.displayFrontRestrictRectangles_property) // Stored property
      newValue.displayBackRestrictRectangles_property.startsBeingObserved (by: self.displayBackRestrictRectangles_property) // Stored property
      newValue.displayInner1RestrictRectangles_property.startsBeingObserved (by: self.displayInner1RestrictRectangles_property) // Stored property
      newValue.displayInner2RestrictRectangles_property.startsBeingObserved (by: self.displayInner2RestrictRectangles_property) // Stored property
      newValue.displayInner3RestrictRectangles_property.startsBeingObserved (by: self.displayInner3RestrictRectangles_property) // Stored property
      newValue.displayInner4RestrictRectangles_property.startsBeingObserved (by: self.displayInner4RestrictRectangles_property) // Stored property
      newValue.displayFrontLegendForBoard_property.startsBeingObserved (by: self.displayFrontLegendForBoard_property) // Stored property
      newValue.displayFrontLayoutForBoard_property.startsBeingObserved (by: self.displayFrontLayoutForBoard_property) // Stored property
      newValue.displayBackLayoutForBoard_property.startsBeingObserved (by: self.displayBackLayoutForBoard_property) // Stored property
      newValue.displayInner1LayoutForBoard_property.startsBeingObserved (by: self.displayInner1LayoutForBoard_property) // Stored property
      newValue.displayInner2LayoutForBoard_property.startsBeingObserved (by: self.displayInner2LayoutForBoard_property) // Stored property
      newValue.displayInner3LayoutForBoard_property.startsBeingObserved (by: self.displayInner3LayoutForBoard_property) // Stored property
      newValue.displayInner4LayoutForBoard_property.startsBeingObserved (by: self.displayInner4LayoutForBoard_property) // Stored property
      newValue.displayBackLegendForBoard_property.startsBeingObserved (by: self.displayBackLegendForBoard_property) // Stored property
      newValue.displayFrontPadsForBoard_property.startsBeingObserved (by: self.displayFrontPadsForBoard_property) // Stored property
      newValue.displayBackPadsForBoard_property.startsBeingObserved (by: self.displayBackPadsForBoard_property) // Stored property
      newValue.displayPadNumbersForBoard_property.startsBeingObserved (by: self.displayPadNumbersForBoard_property) // Stored property
      newValue.packageDrawingWidthMultpliedByTenForBoard_property.startsBeingObserved (by: self.packageDrawingWidthMultpliedByTenForBoard_property) // Stored property
      newValue.mSchematicSheetOrientation_property.startsBeingObserved (by: self.mSchematicSheetOrientation_property) // Stored property
      newValue.mRastnetDisplay_property.startsBeingObserved (by: self.mRastnetDisplay_property) // Stored property
      newValue.mRastnetDisplayedNetName_property.startsBeingObserved (by: self.mRastnetDisplayedNetName_property) // Stored property
      newValue.mRastnetDisplayedComponentName_property.startsBeingObserved (by: self.mRastnetDisplayedComponentName_property) // Stored property
      newValue.hasInnerElements_property.startsBeingObserved (by: self.hasInnerElements_property) // Transient property
      newValue.layerConfigurationString_property.startsBeingObserved (by: self.layerConfigurationString_property) // Transient property
      newValue.boardGridStepMultipliedByDisplayFactor_property.startsBeingObserved (by: self.boardGridStepMultipliedByDisplayFactor_property) // Transient property
      newValue.boardLimitsGridStepMultipliedByDisplayFactor_property.startsBeingObserved (by: self.boardLimitsGridStepMultipliedByDisplayFactor_property) // Transient property
      newValue.boardShapeIsRectangular_property.startsBeingObserved (by: self.boardShapeIsRectangular_property) // Transient property
      newValue.selectedSheetIssues_property.startsBeingObserved (by: self.selectedSheetIssues_property) // Transient property
      newValue.schematicOverDisplay_property.startsBeingObserved (by: self.schematicOverDisplay_property) // Transient property
      newValue.schematicTooltips_property.startsBeingObserved (by: self.schematicTooltips_property) // Transient property
      newValue.segmentedControlSheetIssueImage_property.startsBeingObserved (by: self.segmentedControlSheetIssueImage_property) // Transient property
      newValue.schematicErrorCount_property.startsBeingObserved (by: self.schematicErrorCount_property) // Transient property
      newValue.sheetIndexes_property.startsBeingObserved (by: self.sheetIndexes_property) // Transient property
      newValue.netsDescription_property.startsBeingObserved (by: self.netsDescription_property) // Transient property
      newValue.boardIssues_property.startsBeingObserved (by: self.boardIssues_property) // Transient property
      newValue.hasSixLayers_property.startsBeingObserved (by: self.hasSixLayers_property) // Transient property
      newValue.signatureForERCChecking_property.startsBeingObserved (by: self.signatureForERCChecking_property) // Transient property
      newValue.ercStatusImage_property.startsBeingObserved (by: self.ercStatusImage_property) // Transient property
      newValue.ercStatusImageOrNoneOnSuccess_property.startsBeingObserved (by: self.ercStatusImageOrNoneOnSuccess_property) // Transient property
      newValue.ercStatusMessage_property.startsBeingObserved (by: self.ercStatusMessage_property) // Transient property
      newValue.viaCountString_property.startsBeingObserved (by: self.viaCountString_property) // Transient property
      newValue.topSideTrackCountString_property.startsBeingObserved (by: self.topSideTrackCountString_property) // Transient property
      newValue.backSideTrackCountString_property.startsBeingObserved (by: self.backSideTrackCountString_property) // Transient property
      newValue.inner1LayerTrackCountString_property.startsBeingObserved (by: self.inner1LayerTrackCountString_property) // Transient property
      newValue.inner2LayerTrackCountString_property.startsBeingObserved (by: self.inner2LayerTrackCountString_property) // Transient property
      newValue.inner3LayerTrackCountString_property.startsBeingObserved (by: self.inner3LayerTrackCountString_property) // Transient property
      newValue.inner4LayerTrackCountString_property.startsBeingObserved (by: self.inner4LayerTrackCountString_property) // Transient property
      newValue.trackCountString_property.startsBeingObserved (by: self.trackCountString_property) // Transient property
      newValue.trackLengthString_property.startsBeingObserved (by: self.trackLengthString_property) // Transient property
      newValue.boardStatusErrorCount_property.startsBeingObserved (by: self.boardStatusErrorCount_property) // Transient property
      newValue.interiorBoundBox_property.startsBeingObserved (by: self.interiorBoundBox_property) // Transient property
      newValue.boardBoundBox_property.startsBeingObserved (by: self.boardBoundBox_property) // Transient property
      newValue.boardInteriorTop_property.startsBeingObserved (by: self.boardInteriorTop_property) // Transient property
      newValue.boardInteriorBottom_property.startsBeingObserved (by: self.boardInteriorBottom_property) // Transient property
      newValue.boardInteriorLeft_property.startsBeingObserved (by: self.boardInteriorLeft_property) // Transient property
      newValue.boardInteriorRight_property.startsBeingObserved (by: self.boardInteriorRight_property) // Transient property
      newValue.boardLimitBorderTop_property.startsBeingObserved (by: self.boardLimitBorderTop_property) // Transient property
      newValue.boardLimitBorderBottom_property.startsBeingObserved (by: self.boardLimitBorderBottom_property) // Transient property
      newValue.boardLimitBorderLeft_property.startsBeingObserved (by: self.boardLimitBorderLeft_property) // Transient property
      newValue.boardLimitBorderRight_property.startsBeingObserved (by: self.boardLimitBorderRight_property) // Transient property
      newValue.borderElementCountString_property.startsBeingObserved (by: self.borderElementCountString_property) // Transient property
      newValue.borderOutlineBackground_property.startsBeingObserved (by: self.borderOutlineBackground_property) // Transient property
      newValue.borderViewBackground_property.startsBeingObserved (by: self.borderViewBackground_property) // Transient property
      newValue.fontNameArray_property.startsBeingObserved (by: self.fontNameArray_property) // Transient property
      newValue.deviceNames_property.startsBeingObserved (by: self.deviceNames_property) // Transient property
      newValue.allClassNames_property.startsBeingObserved (by: self.allClassNames_property) // Transient property
      newValue.sheetGeometry_property.startsBeingObserved (by: self.sheetGeometry_property) // Transient property
      newValue.schematicBackgroundDisplay_property.startsBeingObserved (by: self.schematicBackgroundDisplay_property) // Transient property
      newValue.netWarningCount_property.startsBeingObserved (by: self.netWarningCount_property) // Transient property
      newValue.segmentedControlNetListIssueImage_property.startsBeingObserved (by: self.segmentedControlNetListIssueImage_property) // Transient property
      newValue.netNamesArray_property.startsBeingObserved (by: self.netNamesArray_property) // Transient property
      newValue.unplacedSymbols_property.startsBeingObserved (by: self.unplacedSymbols_property) // Transient property
      newValue.unplacedPackages_property.startsBeingObserved (by: self.unplacedPackages_property) // Transient property
      newValue.componentsPlacedInBoard_property.startsBeingObserved (by: self.componentsPlacedInBoard_property) // Transient property
      newValue.boardStatusMessage_property.startsBeingObserved (by: self.boardStatusMessage_property) // Transient property
      newValue.boardStatusWarningCount_property.startsBeingObserved (by: self.boardStatusWarningCount_property) // Transient property
      newValue.placedComponentNameArray_property.startsBeingObserved (by: self.placedComponentNameArray_property) // Transient property
      newValue.schematicHasErrorOrWarning_property.startsBeingObserved (by: self.schematicHasErrorOrWarning_property) // Transient property
      newValue.schematicStatusMessage_property.startsBeingObserved (by: self.schematicStatusMessage_property) // Transient property
      newValue.segmentedControlSchematicIssueImage_property.startsBeingObserved (by: self.segmentedControlSchematicIssueImage_property) // Transient property
      newValue.schematicWarningCount_property.startsBeingObserved (by: self.schematicWarningCount_property) // Transient property
      newValue.hasSchematicIssue_property.startsBeingObserved (by: self.hasSchematicIssue_property) // Transient property
      newValue.segmentedControlBoardIssueImage_property.startsBeingObserved (by: self.segmentedControlBoardIssueImage_property) // Transient property
      if let relay = self.mObserversOf_mSheets { // to Many
        newValue.mSheets_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mFonts { // to Many
        newValue.mFonts_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mDevices { // to Many
        newValue.mDevices_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mNetClasses { // to Many
        newValue.mNetClasses_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mBorderCurves { // to Many
        newValue.mBorderCurves_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mBoardObjects { // to Many
        newValue.mBoardObjects_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_mComponents { // to Many
        newValue.mComponents_property.startsBeingObserved (by: relay)
      }
    }
  }

  //································································································
  //   Observers of 'mArtworkName' stored property
  //································································································

  final let mArtworkName_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'mArtworkVersion' stored property
  //································································································

  final let mArtworkVersion_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mPDFBoardBackgroundColor' stored property
  //································································································

  final let mPDFBoardBackgroundColor_property = EBTransientProperty <NSColor?> ()

  //································································································
  //   Observers of 'mCheckClearanceBetweenPadsOfSameNet' stored property
  //································································································

  final let mCheckClearanceBetweenPadsOfSameNet_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mLastERCCheckingIsSuccess' stored property
  //································································································

  final let mLastERCCheckingIsSuccess_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mLastERCCheckingSignature' stored property
  //································································································

  final let mLastERCCheckingSignature_property = EBTransientProperty <UInt32?> ()

  //································································································
  //   Observers of 'mLayerConfiguration' stored property
  //································································································

  final let mLayerConfiguration_property = EBTransientProperty <LayerConfiguration?> ()

  //································································································
  //   Observers of 'mBoardSideForNewTrack' stored property
  //································································································

  final let mBoardSideForNewTrack_property = EBTransientProperty <TrackSide?> ()

  //································································································
  //   Observers of 'mDirectionForNewTrack' stored property
  //································································································

  final let mDirectionForNewTrack_property = EBTransientProperty <TrackCreationDirection?> ()

  //································································································
  //   Observers of 'mBoardLayerForNewText' stored property
  //································································································

  final let mBoardLayerForNewText_property = EBTransientProperty <BoardTextLayer?> ()

  //································································································
  //   Observers of 'mBoardLayerForNewQRCode' stored property
  //································································································

  final let mBoardLayerForNewQRCode_property = EBTransientProperty <BoardQRCodeLayer?> ()

  //································································································
  //   Observers of 'mBoardLayerForNewImage' stored property
  //································································································

  final let mBoardLayerForNewImage_property = EBTransientProperty <BoardQRCodeLayer?> ()

  //································································································
  //   Observers of 'mBoardLayerForNewLine' stored property
  //································································································

  final let mBoardLayerForNewLine_property = EBTransientProperty <BoardLineLayer?> ()

  //································································································
  //   Observers of 'mBoardSideForNewRestrictRectangle' stored property
  //································································································

  final let mBoardSideForNewRestrictRectangle_property = EBTransientProperty <RestrictRectangleLayer?> ()

  //································································································
  //   Observers of 'mNewRestrictRectangleLayers' stored property
  //································································································

  final let mNewRestrictRectangleLayers_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mAutoRouterPreferredDirections' stored property
  //································································································

  final let mAutoRouterPreferredDirections_property = EBTransientProperty <AutorouterPreferredDirections?> ()

  //································································································
  //   Observers of 'mAutorouterSnapAngle' stored property
  //································································································

  final let mAutorouterSnapAngle_property = EBTransientProperty <AutorouterSnapAngle?> ()

  //································································································
  //   Observers of 'mRouteDirection' stored property
  //································································································

  final let mRouteDirection_property = EBTransientProperty <RouteDirection?> ()

  //································································································
  //   Observers of 'mRouteOrigin' stored property
  //································································································

  final let mRouteOrigin_property = EBTransientProperty <RouteOrigin?> ()

  //································································································
  //   Observers of 'mAutorouterInterfaceMode' stored property
  //································································································

  final let mAutorouterInterfaceMode_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mExportExistingTracksAndVias' stored property
  //································································································

  final let mExportExistingTracksAndVias_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mExportExistingTracksAndVias2' stored property
  //································································································

  final let mExportExistingTracksAndVias2_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mTrackLengthUnit' stored property
  //································································································

  final let mTrackLengthUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mLayoutClearance' stored property
  //································································································

  final let mLayoutClearance_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mLayoutClearanceUnit' stored property
  //································································································

  final let mLayoutClearanceUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardSelectedInspector' stored property
  //································································································

  final let mBoardSelectedInspector_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardHorizontalFlip' stored property
  //································································································

  final let mBoardHorizontalFlip_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mBoardVerticalFlip' stored property
  //································································································

  final let mBoardVerticalFlip_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mBoardGridStyle' stored property
  //································································································

  final let mBoardGridStyle_property = EBTransientProperty <GridStyle?> ()

  //································································································
  //   Observers of 'mBoardGridDisplayFactor' stored property
  //································································································

  final let mBoardGridDisplayFactor_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardZoom' stored property
  //································································································

  final let mBoardZoom_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardGridStep' stored property
  //································································································

  final let mBoardGridStep_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardGridStepUnit' stored property
  //································································································

  final let mBoardGridStepUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mErrorOrWarningIssueSize' stored property
  //································································································

  final let mErrorOrWarningIssueSize_property = EBTransientProperty <Double?> ()

  //································································································
  //   Observers of 'mControlKeyHiliteDiameter' stored property
  //································································································

  final let mControlKeyHiliteDiameter_property = EBTransientProperty <Double?> ()

  //································································································
  //   Observers of 'mDSNFileProposedName' stored property
  //································································································

  final let mDSNFileProposedName_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'mBoardLimitsWidth' stored property
  //································································································

  final let mBoardLimitsWidth_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardLimitsWidthUnit' stored property
  //································································································

  final let mBoardLimitsWidthUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardClearance' stored property
  //································································································

  final let mBoardClearance_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardClearanceUnit' stored property
  //································································································

  final let mBoardClearanceUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardLimitsSelectedInspector' stored property
  //································································································

  final let mBoardLimitsSelectedInspector_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardLimitsHorizontalFlip' stored property
  //································································································

  final let mBoardLimitsHorizontalFlip_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mBoardLimitsVerticalFlip' stored property
  //································································································

  final let mBoardLimitsVerticalFlip_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mBoardLimitsGridStyle' stored property
  //································································································

  final let mBoardLimitsGridStyle_property = EBTransientProperty <GridStyle?> ()

  //································································································
  //   Observers of 'mBoardLimitsGridDisplayFactor' stored property
  //································································································

  final let mBoardLimitsGridDisplayFactor_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardLimitsZoom' stored property
  //································································································

  final let mBoardLimitsZoom_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardLimitsGridStep' stored property
  //································································································

  final let mBoardLimitsGridStep_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardLimitsGridStepUnit' stored property
  //································································································

  final let mBoardLimitsGridStepUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardLimitsBoundingBoxUnit' stored property
  //································································································

  final let mBoardLimitsBoundingBoxUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardPointsBoundingBoxUnit' stored property
  //································································································

  final let mBoardPointsBoundingBoxUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardSelectedCurveDisplayUnit' stored property
  //································································································

  final let mBoardSelectedCurveDisplayUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardLimitControlPointsDisplayUnit' stored property
  //································································································

  final let mBoardLimitControlPointsDisplayUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mBoardShape' stored property
  //································································································

  final let mBoardShape_property = EBTransientProperty <BoardShape?> ()

  //································································································
  //   Observers of 'mContentOpacityInBoardOutline' stored property
  //································································································

  final let mContentOpacityInBoardOutline_property = EBTransientProperty <Double?> ()

  //································································································
  //   Observers of 'mRectangularBoardWidth' stored property
  //································································································

  final let mRectangularBoardWidth_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mRectangularBoardWidthUnit' stored property
  //································································································

  final let mRectangularBoardWidthUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mRectangularBoardHeight' stored property
  //································································································

  final let mRectangularBoardHeight_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mRectangularBoardHeightUnit' stored property
  //································································································

  final let mRectangularBoardHeightUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mDefaultNetClassName' stored property
  //································································································

  final let mDefaultNetClassName_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'mSchematicHilitedColumnIndex' stored property
  //································································································

  final let mSchematicHilitedColumnIndex_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSchematicHilitedRowIndex' stored property
  //································································································

  final let mSchematicHilitedRowIndex_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSchematicEnableHiliteColumnAndRow' stored property
  //································································································

  final let mSchematicEnableHiliteColumnAndRow_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //································································································

  final let mSelectedPageIndex_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSelectedSchematicInspector' stored property
  //································································································

  final let mSelectedSchematicInspector_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSchematicTitle' stored property
  //································································································

  final let mSchematicTitle_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'mSchematicVersion' stored property
  //································································································

  final let mSchematicVersion_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'mSchematicDate' stored property
  //································································································

  final let mSchematicDate_property = EBTransientProperty <Date?> ()

  //································································································
  //   Observers of 'mSchematicHorizontalFlip' stored property
  //································································································

  final let mSchematicHorizontalFlip_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mSchematicVerticalFlip' stored property
  //································································································

  final let mSchematicVerticalFlip_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'mSchematicZoom' stored property
  //································································································

  final let mSchematicZoom_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSchematicGridStyle' stored property
  //································································································

  final let mSchematicGridStyle_property = EBTransientProperty <GridStyle?> ()

  //································································································
  //   Observers of 'mSchematicGridDisplayFactor' stored property
  //································································································

  final let mSchematicGridDisplayFactor_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSchematicCustomWidth' stored property
  //································································································

  final let mSchematicCustomWidth_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSchematicCustomWidthUnit' stored property
  //································································································

  final let mSchematicCustomWidthUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSchematicCustomHeight' stored property
  //································································································

  final let mSchematicCustomHeight_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSchematicCustomHeightUnit' stored property
  //································································································

  final let mSchematicCustomHeightUnit_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'drawErrorBackgroundForBoard' stored property
  //································································································

  final let drawErrorBackgroundForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayFrontRestrictRectangles' stored property
  //································································································

  final let displayFrontRestrictRectangles_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayBackRestrictRectangles' stored property
  //································································································

  final let displayBackRestrictRectangles_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayInner1RestrictRectangles' stored property
  //································································································

  final let displayInner1RestrictRectangles_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayInner2RestrictRectangles' stored property
  //································································································

  final let displayInner2RestrictRectangles_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayInner3RestrictRectangles' stored property
  //································································································

  final let displayInner3RestrictRectangles_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayInner4RestrictRectangles' stored property
  //································································································

  final let displayInner4RestrictRectangles_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayFrontLegendForBoard' stored property
  //································································································

  final let displayFrontLegendForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayFrontLayoutForBoard' stored property
  //································································································

  final let displayFrontLayoutForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayBackLayoutForBoard' stored property
  //································································································

  final let displayBackLayoutForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayInner1LayoutForBoard' stored property
  //································································································

  final let displayInner1LayoutForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayInner2LayoutForBoard' stored property
  //································································································

  final let displayInner2LayoutForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayInner3LayoutForBoard' stored property
  //································································································

  final let displayInner3LayoutForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayInner4LayoutForBoard' stored property
  //································································································

  final let displayInner4LayoutForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayBackLegendForBoard' stored property
  //································································································

  final let displayBackLegendForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayFrontPadsForBoard' stored property
  //································································································

  final let displayFrontPadsForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayBackPadsForBoard' stored property
  //································································································

  final let displayBackPadsForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'displayPadNumbersForBoard' stored property
  //································································································

  final let displayPadNumbersForBoard_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'packageDrawingWidthMultpliedByTenForBoard' stored property
  //································································································

  final let packageDrawingWidthMultpliedByTenForBoard_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'mSchematicSheetOrientation' stored property
  //································································································

  final let mSchematicSheetOrientation_property = EBTransientProperty <SchematicSheetOrientation?> ()

  //································································································
  //   Observers of 'mRastnetDisplay' stored property
  //································································································

  final let mRastnetDisplay_property = EBTransientProperty <RastnetDisplay?> ()

  //································································································
  //   Observers of 'mRastnetDisplayedNetName' stored property
  //································································································

  final let mRastnetDisplayedNetName_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'mRastnetDisplayedComponentName' stored property
  //································································································

  final let mRastnetDisplayedComponentName_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'hasInnerElements' transient property
  //································································································

  final let hasInnerElements_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'layerConfigurationString' transient property
  //································································································

  final let layerConfigurationString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardGridStepMultipliedByDisplayFactor' transient property
  //································································································

  final let boardGridStepMultipliedByDisplayFactor_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'boardLimitsGridStepMultipliedByDisplayFactor' transient property
  //································································································

  final let boardLimitsGridStepMultipliedByDisplayFactor_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'boardShapeIsRectangular' transient property
  //································································································

  final let boardShapeIsRectangular_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'selectedSheetIssues' transient property
  //································································································

  final let selectedSheetIssues_property = EBTransientProperty <CanariIssueArray?> ()

  //································································································
  //   Observers of 'schematicOverDisplay' transient property
  //································································································

  final let schematicOverDisplay_property = EBTransientProperty <EBShape?> ()

  //································································································
  //   Observers of 'schematicTooltips' transient property
  //································································································

  final let schematicTooltips_property = EBTransientProperty <GraphicViewTooltipArray?> ()

  //································································································
  //   Observers of 'segmentedControlSheetIssueImage' transient property
  //································································································

  final let segmentedControlSheetIssueImage_property = EBTransientProperty <NSImage?> ()

  //································································································
  //   Observers of 'schematicErrorCount' transient property
  //································································································

  final let schematicErrorCount_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'sheetIndexes' transient property
  //································································································

  final let sheetIndexes_property = EBTransientProperty <IntArray?> ()

  //································································································
  //   Observers of 'netsDescription' transient property
  //································································································

  final let netsDescription_property = EBTransientProperty <NetInfoArray?> ()

  //································································································
  //   Observers of 'boardIssues' transient property
  //································································································

  final let boardIssues_property = EBTransientProperty <CanariIssueArray?> ()

  //································································································
  //   Observers of 'hasSixLayers' transient property
  //································································································

  final let hasSixLayers_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'signatureForERCChecking' transient property
  //································································································

  final let signatureForERCChecking_property = EBTransientProperty <UInt32?> ()

  //································································································
  //   Observers of 'ercStatusImage' transient property
  //································································································

  final let ercStatusImage_property = EBTransientProperty <NSImage?> ()

  //································································································
  //   Observers of 'ercStatusImageOrNoneOnSuccess' transient property
  //································································································

  final let ercStatusImageOrNoneOnSuccess_property = EBTransientProperty <NSImage?> ()

  //································································································
  //   Observers of 'ercStatusMessage' transient property
  //································································································

  final let ercStatusMessage_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'viaCountString' transient property
  //································································································

  final let viaCountString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'topSideTrackCountString' transient property
  //································································································

  final let topSideTrackCountString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'backSideTrackCountString' transient property
  //································································································

  final let backSideTrackCountString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'inner1LayerTrackCountString' transient property
  //································································································

  final let inner1LayerTrackCountString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'inner2LayerTrackCountString' transient property
  //································································································

  final let inner2LayerTrackCountString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'inner3LayerTrackCountString' transient property
  //································································································

  final let inner3LayerTrackCountString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'inner4LayerTrackCountString' transient property
  //································································································

  final let inner4LayerTrackCountString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'trackCountString' transient property
  //································································································

  final let trackCountString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'trackLengthString' transient property
  //································································································

  final let trackLengthString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardStatusErrorCount' transient property
  //································································································

  final let boardStatusErrorCount_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'interiorBoundBox' transient property
  //································································································

  final let interiorBoundBox_property = EBTransientProperty <CanariRect?> ()

  //································································································
  //   Observers of 'boardBoundBox' transient property
  //································································································

  final let boardBoundBox_property = EBTransientProperty <CanariRect?> ()

  //································································································
  //   Observers of 'boardInteriorTop' transient property
  //································································································

  final let boardInteriorTop_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardInteriorBottom' transient property
  //································································································

  final let boardInteriorBottom_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardInteriorLeft' transient property
  //································································································

  final let boardInteriorLeft_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardInteriorRight' transient property
  //································································································

  final let boardInteriorRight_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardLimitBorderTop' transient property
  //································································································

  final let boardLimitBorderTop_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardLimitBorderBottom' transient property
  //································································································

  final let boardLimitBorderBottom_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardLimitBorderLeft' transient property
  //································································································

  final let boardLimitBorderLeft_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardLimitBorderRight' transient property
  //································································································

  final let boardLimitBorderRight_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'borderElementCountString' transient property
  //································································································

  final let borderElementCountString_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'borderOutlineBackground' transient property
  //································································································

  final let borderOutlineBackground_property = EBTransientProperty <EBShape?> ()

  //································································································
  //   Observers of 'borderViewBackground' transient property
  //································································································

  final let borderViewBackground_property = EBTransientProperty <EBShape?> ()

  //································································································
  //   Observers of 'fontNameArray' transient property
  //································································································

  final let fontNameArray_property = EBTransientProperty <StringArray?> ()

  //································································································
  //   Observers of 'deviceNames' transient property
  //································································································

  final let deviceNames_property = EBTransientProperty <StringArray?> ()

  //································································································
  //   Observers of 'allClassNames' transient property
  //································································································

  final let allClassNames_property = EBTransientProperty <StringArray?> ()

  //································································································
  //   Observers of 'sheetGeometry' transient property
  //································································································

  final let sheetGeometry_property = EBTransientProperty <SchematicSheetGeometry?> ()

  //································································································
  //   Observers of 'schematicBackgroundDisplay' transient property
  //································································································

  final let schematicBackgroundDisplay_property = EBTransientProperty <EBShape?> ()

  //································································································
  //   Observers of 'netWarningCount' transient property
  //································································································

  final let netWarningCount_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'segmentedControlNetListIssueImage' transient property
  //································································································

  final let segmentedControlNetListIssueImage_property = EBTransientProperty <NSImage?> ()

  //································································································
  //   Observers of 'netNamesArray' transient property
  //································································································

  final let netNamesArray_property = EBTransientProperty <StringArray?> ()

  //································································································
  //   Observers of 'unplacedSymbols' transient property
  //································································································

  final let unplacedSymbols_property = EBTransientProperty <StringTagArray?> ()

  //································································································
  //   Observers of 'unplacedPackages' transient property
  //································································································

  final let unplacedPackages_property = EBTransientProperty <StringTagArray?> ()

  //································································································
  //   Observers of 'componentsPlacedInBoard' transient property
  //································································································

  final let componentsPlacedInBoard_property = EBTransientProperty <StringTagArray?> ()

  //································································································
  //   Observers of 'boardStatusMessage' transient property
  //································································································

  final let boardStatusMessage_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'boardStatusWarningCount' transient property
  //································································································

  final let boardStatusWarningCount_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'placedComponentNameArray' transient property
  //································································································

  final let placedComponentNameArray_property = EBTransientProperty <StringArray?> ()

  //································································································
  //   Observers of 'schematicHasErrorOrWarning' transient property
  //································································································

  final let schematicHasErrorOrWarning_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'schematicStatusMessage' transient property
  //································································································

  final let schematicStatusMessage_property = EBTransientProperty <String?> ()

  //································································································
  //   Observers of 'segmentedControlSchematicIssueImage' transient property
  //································································································

  final let segmentedControlSchematicIssueImage_property = EBTransientProperty <NSImage?> ()

  //································································································
  //   Observers of 'schematicWarningCount' transient property
  //································································································

  final let schematicWarningCount_property = EBTransientProperty <Int?> ()

  //································································································
  //   Observers of 'hasSchematicIssue' transient property
  //································································································

  final let hasSchematicIssue_property = EBTransientProperty <Bool?> ()

  //································································································
  //   Observers of 'segmentedControlBoardIssueImage' transient property
  //································································································

  final let segmentedControlBoardIssueImage_property = EBTransientProperty <NSImage?> ()

  //································································································
  //   Observable toMany property: mSheets
  //································································································

  private final var mObserversOf_mSheets : EBObservedObserver? = nil

  //································································································

  final func toMany_mSheets_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSheets {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mSheets_property.startsBeingObserved (by: relay)
      self.mObserversOf_mSheets = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mSheets_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mSheets?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observable toMany property: mFonts
  //································································································

  private final var mObserversOf_mFonts : EBObservedObserver? = nil

  //································································································

  final func toMany_mFonts_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mFonts {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mFonts_property.startsBeingObserved (by: relay)
      self.mObserversOf_mFonts = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mFonts_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mFonts?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observable toMany property: mDevices
  //································································································

  private final var mObserversOf_mDevices : EBObservedObserver? = nil

  //································································································

  final func toMany_mDevices_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mDevices {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mDevices_property.startsBeingObserved (by: relay)
      self.mObserversOf_mDevices = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mDevices_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mDevices?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observable toMany property: mNetClasses
  //································································································

  private final var mObserversOf_mNetClasses : EBObservedObserver? = nil

  //································································································

  final func toMany_mNetClasses_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mNetClasses {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mNetClasses_property.startsBeingObserved (by: relay)
      self.mObserversOf_mNetClasses = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mNetClasses_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mNetClasses?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observable toMany property: mBorderCurves
  //································································································

  private final var mObserversOf_mBorderCurves : EBObservedObserver? = nil

  //································································································

  final func toMany_mBorderCurves_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mBorderCurves {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mBorderCurves_property.startsBeingObserved (by: relay)
      self.mObserversOf_mBorderCurves = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mBorderCurves_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mBorderCurves?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observable toMany property: mBoardObjects
  //································································································

  private final var mObserversOf_mBoardObjects : EBObservedObserver? = nil

  //································································································

  final func toMany_mBoardObjects_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mBoardObjects {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mBoardObjects_property.startsBeingObserved (by: relay)
      self.mObserversOf_mBoardObjects = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mBoardObjects_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mBoardObjects?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observable toMany property: mComponents
  //································································································

  private final var mObserversOf_mComponents : EBObservedObserver? = nil

  //································································································

  final func toMany_mComponents_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mComponents {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.mWeakInternalValue?.mComponents_property.startsBeingObserved (by: relay)
      self.mObserversOf_mComponents = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mComponents_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mComponents?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   INIT
  //································································································

  override init () {
    super.init ()
  //--- Configure mArtworkName simple stored property
    self.mArtworkName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mArtworkName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mArtworkVersion simple stored property
    self.mArtworkVersion_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mArtworkVersion_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mPDFBoardBackgroundColor simple stored property
    self.mPDFBoardBackgroundColor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mPDFBoardBackgroundColor_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mCheckClearanceBetweenPadsOfSameNet simple stored property
    self.mCheckClearanceBetweenPadsOfSameNet_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mCheckClearanceBetweenPadsOfSameNet_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mLastERCCheckingIsSuccess simple stored property
    self.mLastERCCheckingIsSuccess_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mLastERCCheckingIsSuccess_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mLastERCCheckingSignature simple stored property
    self.mLastERCCheckingSignature_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mLastERCCheckingSignature_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mLayerConfiguration simple stored property
    self.mLayerConfiguration_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mLayerConfiguration_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardSideForNewTrack simple stored property
    self.mBoardSideForNewTrack_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardSideForNewTrack_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mDirectionForNewTrack simple stored property
    self.mDirectionForNewTrack_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDirectionForNewTrack_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLayerForNewText simple stored property
    self.mBoardLayerForNewText_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLayerForNewText_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLayerForNewQRCode simple stored property
    self.mBoardLayerForNewQRCode_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLayerForNewQRCode_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLayerForNewImage simple stored property
    self.mBoardLayerForNewImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLayerForNewImage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLayerForNewLine simple stored property
    self.mBoardLayerForNewLine_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLayerForNewLine_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardSideForNewRestrictRectangle simple stored property
    self.mBoardSideForNewRestrictRectangle_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardSideForNewRestrictRectangle_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mNewRestrictRectangleLayers simple stored property
    self.mNewRestrictRectangleLayers_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mNewRestrictRectangleLayers_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mAutoRouterPreferredDirections simple stored property
    self.mAutoRouterPreferredDirections_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mAutoRouterPreferredDirections_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mAutorouterSnapAngle simple stored property
    self.mAutorouterSnapAngle_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mAutorouterSnapAngle_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRouteDirection simple stored property
    self.mRouteDirection_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRouteDirection_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRouteOrigin simple stored property
    self.mRouteOrigin_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRouteOrigin_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mAutorouterInterfaceMode simple stored property
    self.mAutorouterInterfaceMode_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mAutorouterInterfaceMode_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mExportExistingTracksAndVias simple stored property
    self.mExportExistingTracksAndVias_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mExportExistingTracksAndVias_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mExportExistingTracksAndVias2 simple stored property
    self.mExportExistingTracksAndVias2_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mExportExistingTracksAndVias2_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mTrackLengthUnit simple stored property
    self.mTrackLengthUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mTrackLengthUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mLayoutClearance simple stored property
    self.mLayoutClearance_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mLayoutClearance_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mLayoutClearanceUnit simple stored property
    self.mLayoutClearanceUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mLayoutClearanceUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardSelectedInspector simple stored property
    self.mBoardSelectedInspector_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardSelectedInspector_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardHorizontalFlip simple stored property
    self.mBoardHorizontalFlip_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardHorizontalFlip_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardVerticalFlip simple stored property
    self.mBoardVerticalFlip_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardVerticalFlip_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardGridStyle simple stored property
    self.mBoardGridStyle_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardGridStyle_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardGridDisplayFactor simple stored property
    self.mBoardGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardGridDisplayFactor_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardZoom simple stored property
    self.mBoardZoom_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardZoom_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardGridStep simple stored property
    self.mBoardGridStep_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardGridStep_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardGridStepUnit simple stored property
    self.mBoardGridStepUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardGridStepUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mErrorOrWarningIssueSize simple stored property
    self.mErrorOrWarningIssueSize_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mErrorOrWarningIssueSize_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mControlKeyHiliteDiameter simple stored property
    self.mControlKeyHiliteDiameter_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mControlKeyHiliteDiameter_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mDSNFileProposedName simple stored property
    self.mDSNFileProposedName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDSNFileProposedName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsWidth simple stored property
    self.mBoardLimitsWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsWidth_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsWidthUnit simple stored property
    self.mBoardLimitsWidthUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsWidthUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardClearance simple stored property
    self.mBoardClearance_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardClearance_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardClearanceUnit simple stored property
    self.mBoardClearanceUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardClearanceUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsSelectedInspector simple stored property
    self.mBoardLimitsSelectedInspector_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsSelectedInspector_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsHorizontalFlip simple stored property
    self.mBoardLimitsHorizontalFlip_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsHorizontalFlip_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsVerticalFlip simple stored property
    self.mBoardLimitsVerticalFlip_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsVerticalFlip_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsGridStyle simple stored property
    self.mBoardLimitsGridStyle_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsGridStyle_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsGridDisplayFactor simple stored property
    self.mBoardLimitsGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsGridDisplayFactor_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsZoom simple stored property
    self.mBoardLimitsZoom_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsZoom_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsGridStep simple stored property
    self.mBoardLimitsGridStep_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsGridStep_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsGridStepUnit simple stored property
    self.mBoardLimitsGridStepUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsGridStepUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitsBoundingBoxUnit simple stored property
    self.mBoardLimitsBoundingBoxUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitsBoundingBoxUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardPointsBoundingBoxUnit simple stored property
    self.mBoardPointsBoundingBoxUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardPointsBoundingBoxUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardSelectedCurveDisplayUnit simple stored property
    self.mBoardSelectedCurveDisplayUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardSelectedCurveDisplayUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardLimitControlPointsDisplayUnit simple stored property
    self.mBoardLimitControlPointsDisplayUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardLimitControlPointsDisplayUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mBoardShape simple stored property
    self.mBoardShape_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mBoardShape_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mContentOpacityInBoardOutline simple stored property
    self.mContentOpacityInBoardOutline_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mContentOpacityInBoardOutline_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRectangularBoardWidth simple stored property
    self.mRectangularBoardWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRectangularBoardWidth_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRectangularBoardWidthUnit simple stored property
    self.mRectangularBoardWidthUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRectangularBoardWidthUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRectangularBoardHeight simple stored property
    self.mRectangularBoardHeight_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRectangularBoardHeight_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRectangularBoardHeightUnit simple stored property
    self.mRectangularBoardHeightUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRectangularBoardHeightUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mDefaultNetClassName simple stored property
    self.mDefaultNetClassName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mDefaultNetClassName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicHilitedColumnIndex simple stored property
    self.mSchematicHilitedColumnIndex_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicHilitedColumnIndex_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicHilitedRowIndex simple stored property
    self.mSchematicHilitedRowIndex_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicHilitedRowIndex_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicEnableHiliteColumnAndRow simple stored property
    self.mSchematicEnableHiliteColumnAndRow_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicEnableHiliteColumnAndRow_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSelectedPageIndex simple stored property
    self.mSelectedPageIndex_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSelectedPageIndex_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSelectedSchematicInspector simple stored property
    self.mSelectedSchematicInspector_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSelectedSchematicInspector_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicTitle simple stored property
    self.mSchematicTitle_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicTitle_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicVersion simple stored property
    self.mSchematicVersion_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicVersion_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicDate simple stored property
    self.mSchematicDate_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicDate_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicHorizontalFlip simple stored property
    self.mSchematicHorizontalFlip_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicHorizontalFlip_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicVerticalFlip simple stored property
    self.mSchematicVerticalFlip_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicVerticalFlip_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicZoom simple stored property
    self.mSchematicZoom_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicZoom_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicGridStyle simple stored property
    self.mSchematicGridStyle_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicGridStyle_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicGridDisplayFactor simple stored property
    self.mSchematicGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicGridDisplayFactor_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicCustomWidth simple stored property
    self.mSchematicCustomWidth_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicCustomWidth_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicCustomWidthUnit simple stored property
    self.mSchematicCustomWidthUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicCustomWidthUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicCustomHeight simple stored property
    self.mSchematicCustomHeight_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicCustomHeight_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicCustomHeightUnit simple stored property
    self.mSchematicCustomHeightUnit_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicCustomHeightUnit_property.optionalSelection ?? .single (nil)
    }
  //--- Configure drawErrorBackgroundForBoard simple stored property
    self.drawErrorBackgroundForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.drawErrorBackgroundForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayFrontRestrictRectangles simple stored property
    self.displayFrontRestrictRectangles_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayFrontRestrictRectangles_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayBackRestrictRectangles simple stored property
    self.displayBackRestrictRectangles_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayBackRestrictRectangles_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayInner1RestrictRectangles simple stored property
    self.displayInner1RestrictRectangles_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayInner1RestrictRectangles_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayInner2RestrictRectangles simple stored property
    self.displayInner2RestrictRectangles_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayInner2RestrictRectangles_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayInner3RestrictRectangles simple stored property
    self.displayInner3RestrictRectangles_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayInner3RestrictRectangles_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayInner4RestrictRectangles simple stored property
    self.displayInner4RestrictRectangles_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayInner4RestrictRectangles_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayFrontLegendForBoard simple stored property
    self.displayFrontLegendForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayFrontLegendForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayFrontLayoutForBoard simple stored property
    self.displayFrontLayoutForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayFrontLayoutForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayBackLayoutForBoard simple stored property
    self.displayBackLayoutForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayBackLayoutForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayInner1LayoutForBoard simple stored property
    self.displayInner1LayoutForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayInner1LayoutForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayInner2LayoutForBoard simple stored property
    self.displayInner2LayoutForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayInner2LayoutForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayInner3LayoutForBoard simple stored property
    self.displayInner3LayoutForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayInner3LayoutForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayInner4LayoutForBoard simple stored property
    self.displayInner4LayoutForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayInner4LayoutForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayBackLegendForBoard simple stored property
    self.displayBackLegendForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayBackLegendForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayFrontPadsForBoard simple stored property
    self.displayFrontPadsForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayFrontPadsForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayBackPadsForBoard simple stored property
    self.displayBackPadsForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayBackPadsForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure displayPadNumbersForBoard simple stored property
    self.displayPadNumbersForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.displayPadNumbersForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure packageDrawingWidthMultpliedByTenForBoard simple stored property
    self.packageDrawingWidthMultpliedByTenForBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.packageDrawingWidthMultpliedByTenForBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mSchematicSheetOrientation simple stored property
    self.mSchematicSheetOrientation_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mSchematicSheetOrientation_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRastnetDisplay simple stored property
    self.mRastnetDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRastnetDisplay_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRastnetDisplayedNetName simple stored property
    self.mRastnetDisplayedNetName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRastnetDisplayedNetName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure mRastnetDisplayedComponentName simple stored property
    self.mRastnetDisplayedComponentName_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.mRastnetDisplayedComponentName_property.optionalSelection ?? .single (nil)
    }
  //--- Configure hasInnerElements transient property
    self.hasInnerElements_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasInnerElements_property.optionalSelection ?? .single (nil)
    }
  //--- Configure layerConfigurationString transient property
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.layerConfigurationString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardGridStepMultipliedByDisplayFactor transient property
    self.boardGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardGridStepMultipliedByDisplayFactor_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardLimitsGridStepMultipliedByDisplayFactor transient property
    self.boardLimitsGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitsGridStepMultipliedByDisplayFactor_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardShapeIsRectangular transient property
    self.boardShapeIsRectangular_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardShapeIsRectangular_property.optionalSelection ?? .single (nil)
    }
  //--- Configure selectedSheetIssues transient property
    self.selectedSheetIssues_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.selectedSheetIssues_property.optionalSelection ?? .single (nil)
    }
  //--- Configure schematicOverDisplay transient property
    self.schematicOverDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.schematicOverDisplay_property.optionalSelection ?? .single (nil)
    }
  //--- Configure schematicTooltips transient property
    self.schematicTooltips_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.schematicTooltips_property.optionalSelection ?? .single (nil)
    }
  //--- Configure segmentedControlSheetIssueImage transient property
    self.segmentedControlSheetIssueImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.segmentedControlSheetIssueImage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure schematicErrorCount transient property
    self.schematicErrorCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.schematicErrorCount_property.optionalSelection ?? .single (nil)
    }
  //--- Configure sheetIndexes transient property
    self.sheetIndexes_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.sheetIndexes_property.optionalSelection ?? .single (nil)
    }
  //--- Configure netsDescription transient property
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netsDescription_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardIssues transient property
    self.boardIssues_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardIssues_property.optionalSelection ?? .single (nil)
    }
  //--- Configure hasSixLayers transient property
    self.hasSixLayers_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasSixLayers_property.optionalSelection ?? .single (nil)
    }
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.signatureForERCChecking_property.optionalSelection ?? .single (nil)
    }
  //--- Configure ercStatusImage transient property
    self.ercStatusImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.ercStatusImage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure ercStatusImageOrNoneOnSuccess transient property
    self.ercStatusImageOrNoneOnSuccess_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.ercStatusImageOrNoneOnSuccess_property.optionalSelection ?? .single (nil)
    }
  //--- Configure ercStatusMessage transient property
    self.ercStatusMessage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.ercStatusMessage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure viaCountString transient property
    self.viaCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.viaCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure topSideTrackCountString transient property
    self.topSideTrackCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.topSideTrackCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure backSideTrackCountString transient property
    self.backSideTrackCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.backSideTrackCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure inner1LayerTrackCountString transient property
    self.inner1LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.inner1LayerTrackCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure inner2LayerTrackCountString transient property
    self.inner2LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.inner2LayerTrackCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure inner3LayerTrackCountString transient property
    self.inner3LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.inner3LayerTrackCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure inner4LayerTrackCountString transient property
    self.inner4LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.inner4LayerTrackCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure trackCountString transient property
    self.trackCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.trackCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure trackLengthString transient property
    self.trackLengthString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.trackLengthString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardStatusErrorCount transient property
    self.boardStatusErrorCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardStatusErrorCount_property.optionalSelection ?? .single (nil)
    }
  //--- Configure interiorBoundBox transient property
    self.interiorBoundBox_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.interiorBoundBox_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardBoundBox transient property
    self.boardBoundBox_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardBoundBox_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardInteriorTop transient property
    self.boardInteriorTop_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardInteriorTop_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardInteriorBottom transient property
    self.boardInteriorBottom_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardInteriorBottom_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardInteriorLeft transient property
    self.boardInteriorLeft_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardInteriorLeft_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardInteriorRight transient property
    self.boardInteriorRight_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardInteriorRight_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardLimitBorderTop transient property
    self.boardLimitBorderTop_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitBorderTop_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardLimitBorderBottom transient property
    self.boardLimitBorderBottom_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitBorderBottom_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardLimitBorderLeft transient property
    self.boardLimitBorderLeft_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitBorderLeft_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardLimitBorderRight transient property
    self.boardLimitBorderRight_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardLimitBorderRight_property.optionalSelection ?? .single (nil)
    }
  //--- Configure borderElementCountString transient property
    self.borderElementCountString_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.borderElementCountString_property.optionalSelection ?? .single (nil)
    }
  //--- Configure borderOutlineBackground transient property
    self.borderOutlineBackground_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.borderOutlineBackground_property.optionalSelection ?? .single (nil)
    }
  //--- Configure borderViewBackground transient property
    self.borderViewBackground_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.borderViewBackground_property.optionalSelection ?? .single (nil)
    }
  //--- Configure fontNameArray transient property
    self.fontNameArray_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.fontNameArray_property.optionalSelection ?? .single (nil)
    }
  //--- Configure deviceNames transient property
    self.deviceNames_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.deviceNames_property.optionalSelection ?? .single (nil)
    }
  //--- Configure allClassNames transient property
    self.allClassNames_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.allClassNames_property.optionalSelection ?? .single (nil)
    }
  //--- Configure sheetGeometry transient property
    self.sheetGeometry_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.sheetGeometry_property.optionalSelection ?? .single (nil)
    }
  //--- Configure schematicBackgroundDisplay transient property
    self.schematicBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.schematicBackgroundDisplay_property.optionalSelection ?? .single (nil)
    }
  //--- Configure netWarningCount transient property
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netWarningCount_property.optionalSelection ?? .single (nil)
    }
  //--- Configure segmentedControlNetListIssueImage transient property
    self.segmentedControlNetListIssueImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.segmentedControlNetListIssueImage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure netNamesArray transient property
    self.netNamesArray_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.netNamesArray_property.optionalSelection ?? .single (nil)
    }
  //--- Configure unplacedSymbols transient property
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.unplacedSymbols_property.optionalSelection ?? .single (nil)
    }
  //--- Configure unplacedPackages transient property
    self.unplacedPackages_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.unplacedPackages_property.optionalSelection ?? .single (nil)
    }
  //--- Configure componentsPlacedInBoard transient property
    self.componentsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.componentsPlacedInBoard_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardStatusMessage transient property
    self.boardStatusMessage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardStatusMessage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure boardStatusWarningCount transient property
    self.boardStatusWarningCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.boardStatusWarningCount_property.optionalSelection ?? .single (nil)
    }
  //--- Configure placedComponentNameArray transient property
    self.placedComponentNameArray_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.placedComponentNameArray_property.optionalSelection ?? .single (nil)
    }
  //--- Configure schematicHasErrorOrWarning transient property
    self.schematicHasErrorOrWarning_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.schematicHasErrorOrWarning_property.optionalSelection ?? .single (nil)
    }
  //--- Configure schematicStatusMessage transient property
    self.schematicStatusMessage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.schematicStatusMessage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure segmentedControlSchematicIssueImage transient property
    self.segmentedControlSchematicIssueImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.segmentedControlSchematicIssueImage_property.optionalSelection ?? .single (nil)
    }
  //--- Configure schematicWarningCount transient property
    self.schematicWarningCount_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.schematicWarningCount_property.optionalSelection ?? .single (nil)
    }
  //--- Configure hasSchematicIssue transient property
    self.hasSchematicIssue_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.hasSchematicIssue_property.optionalSelection ?? .single (nil)
    }
  //--- Configure segmentedControlBoardIssueImage transient property
    self.segmentedControlBoardIssueImage_property.mReadModelFunction = { [weak self] in
      return self?.mWeakInternalValue?.segmentedControlBoardIssueImage_property.optionalSelection ?? .single (nil)
    }
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_ProjectRoot : ReadOnlyObject_ProjectRoot, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  //································································································

  private let mKey : String?
  var key : String? { return self.mKey }
  
  //································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! ProjectRoot
      self.setProp (object)
    }
  }

  //································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! ProjectRoot
      self.setProp (object)
    }
  }

  //································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  //································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  //································································································

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  //································································································
  //   Signature ?
  //································································································

  private let mUsedForSignature : Bool

  //································································································
  //   Undo manager
  //································································································

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

  //································································································
  //   Opposite relationship management
  //································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //································································································
  // Model will change
  //································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mWeakInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //································································································
  // Model did change
  //································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //································································································

  override var selection : EBSelection < ProjectRoot? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //································································································

  var propval : ProjectRoot? { return self.mWeakInternalValue }

  //································································································
  //   setProp
  //································································································

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  //································································································

  func setProp (_ inValue : ProjectRoot?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  //································································································
  //   signature
  //································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //································································································

  private var mSignatureCache : UInt32? = nil

  //································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //································································································

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //································································································

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————

