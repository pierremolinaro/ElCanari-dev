//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_ProjectRoot : ReadOnlyAbstractObjectProperty <ProjectRoot> {

  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mArtworkName_property.removeEBObserver (self.mArtworkName_property) // Stored property
      oldValue.mArtworkVersion_property.removeEBObserver (self.mArtworkVersion_property) // Stored property
      oldValue.mPDFBoardBackgroundColor_property.removeEBObserver (self.mPDFBoardBackgroundColor_property) // Stored property
      oldValue.mCheckClearanceBetweenPadsOfSameNet_property.removeEBObserver (self.mCheckClearanceBetweenPadsOfSameNet_property) // Stored property
      oldValue.mLastERCCheckingIsSuccess_property.removeEBObserver (self.mLastERCCheckingIsSuccess_property) // Stored property
      oldValue.mLastERCCheckingSignature_property.removeEBObserver (self.mLastERCCheckingSignature_property) // Stored property
      oldValue.mLayerConfiguration_property.removeEBObserver (self.mLayerConfiguration_property) // Stored property
      oldValue.mBoardSideForNewTrack_property.removeEBObserver (self.mBoardSideForNewTrack_property) // Stored property
      oldValue.mDirectionForNewTrack_property.removeEBObserver (self.mDirectionForNewTrack_property) // Stored property
      oldValue.mBoardLayerForNewText_property.removeEBObserver (self.mBoardLayerForNewText_property) // Stored property
      oldValue.mBoardLayerForNewLine_property.removeEBObserver (self.mBoardLayerForNewLine_property) // Stored property
      oldValue.mBoardSideForNewRestrictRectangle_property.removeEBObserver (self.mBoardSideForNewRestrictRectangle_property) // Stored property
      oldValue.mNewRestrictRectangleLayers_property.removeEBObserver (self.mNewRestrictRectangleLayers_property) // Stored property
      oldValue.mAutoRouterPreferredDirections_property.removeEBObserver (self.mAutoRouterPreferredDirections_property) // Stored property
      oldValue.mAutorouterSnapAngle_property.removeEBObserver (self.mAutorouterSnapAngle_property) // Stored property
      oldValue.mRouteDirection_property.removeEBObserver (self.mRouteDirection_property) // Stored property
      oldValue.mRouteOrigin_property.removeEBObserver (self.mRouteOrigin_property) // Stored property
      oldValue.mAutorouterInterfaceMode_property.removeEBObserver (self.mAutorouterInterfaceMode_property) // Stored property
      oldValue.mExportExistingTracksAndVias_property.removeEBObserver (self.mExportExistingTracksAndVias_property) // Stored property
      oldValue.mExportExistingTracksAndVias2_property.removeEBObserver (self.mExportExistingTracksAndVias2_property) // Stored property
      oldValue.mTrackLengthUnit_property.removeEBObserver (self.mTrackLengthUnit_property) // Stored property
      oldValue.mLayoutClearance_property.removeEBObserver (self.mLayoutClearance_property) // Stored property
      oldValue.mLayoutClearanceUnit_property.removeEBObserver (self.mLayoutClearanceUnit_property) // Stored property
      oldValue.mBoardSelectedInspector_property.removeEBObserver (self.mBoardSelectedInspector_property) // Stored property
      oldValue.mBoardHorizontalFlip_property.removeEBObserver (self.mBoardHorizontalFlip_property) // Stored property
      oldValue.mBoardVerticalFlip_property.removeEBObserver (self.mBoardVerticalFlip_property) // Stored property
      oldValue.mBoardGridStyle_property.removeEBObserver (self.mBoardGridStyle_property) // Stored property
      oldValue.mBoardGridDisplayFactor_property.removeEBObserver (self.mBoardGridDisplayFactor_property) // Stored property
      oldValue.mBoardZoom_property.removeEBObserver (self.mBoardZoom_property) // Stored property
      oldValue.mBoardGridStep_property.removeEBObserver (self.mBoardGridStep_property) // Stored property
      oldValue.mBoardGridStepUnit_property.removeEBObserver (self.mBoardGridStepUnit_property) // Stored property
      oldValue.mErrorOrWarningIssueSize_property.removeEBObserver (self.mErrorOrWarningIssueSize_property) // Stored property
      oldValue.mControlKeyHiliteDiameter_property.removeEBObserver (self.mControlKeyHiliteDiameter_property) // Stored property
      oldValue.mDSNFileProposedName_property.removeEBObserver (self.mDSNFileProposedName_property) // Stored property
      oldValue.mBoardLimitsWidth_property.removeEBObserver (self.mBoardLimitsWidth_property) // Stored property
      oldValue.mBoardLimitsWidthUnit_property.removeEBObserver (self.mBoardLimitsWidthUnit_property) // Stored property
      oldValue.mBoardClearance_property.removeEBObserver (self.mBoardClearance_property) // Stored property
      oldValue.mBoardClearanceUnit_property.removeEBObserver (self.mBoardClearanceUnit_property) // Stored property
      oldValue.mBoardLimitsSelectedInspector_property.removeEBObserver (self.mBoardLimitsSelectedInspector_property) // Stored property
      oldValue.mBoardLimitsHorizontalFlip_property.removeEBObserver (self.mBoardLimitsHorizontalFlip_property) // Stored property
      oldValue.mBoardLimitsVerticalFlip_property.removeEBObserver (self.mBoardLimitsVerticalFlip_property) // Stored property
      oldValue.mBoardLimitsGridStyle_property.removeEBObserver (self.mBoardLimitsGridStyle_property) // Stored property
      oldValue.mBoardLimitsGridDisplayFactor_property.removeEBObserver (self.mBoardLimitsGridDisplayFactor_property) // Stored property
      oldValue.mBoardLimitsZoom_property.removeEBObserver (self.mBoardLimitsZoom_property) // Stored property
      oldValue.mBoardLimitsGridStep_property.removeEBObserver (self.mBoardLimitsGridStep_property) // Stored property
      oldValue.mBoardLimitsGridStepUnit_property.removeEBObserver (self.mBoardLimitsGridStepUnit_property) // Stored property
      oldValue.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (self.mBoardLimitsBoundingBoxUnit_property) // Stored property
      oldValue.mBoardPointsBoundingBoxUnit_property.removeEBObserver (self.mBoardPointsBoundingBoxUnit_property) // Stored property
      oldValue.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (self.mBoardSelectedCurveDisplayUnit_property) // Stored property
      oldValue.mBoardLimitControlPointsDisplayUnit_property.removeEBObserver (self.mBoardLimitControlPointsDisplayUnit_property) // Stored property
      oldValue.mBoardShape_property.removeEBObserver (self.mBoardShape_property) // Stored property
      oldValue.mRectangularBoardWidth_property.removeEBObserver (self.mRectangularBoardWidth_property) // Stored property
      oldValue.mRectangularBoardWidthUnit_property.removeEBObserver (self.mRectangularBoardWidthUnit_property) // Stored property
      oldValue.mRectangularBoardHeight_property.removeEBObserver (self.mRectangularBoardHeight_property) // Stored property
      oldValue.mRectangularBoardHeightUnit_property.removeEBObserver (self.mRectangularBoardHeightUnit_property) // Stored property
      oldValue.mDefaultNetClassName_property.removeEBObserver (self.mDefaultNetClassName_property) // Stored property
      oldValue.mSelectedPageIndex_property.removeEBObserver (self.mSelectedPageIndex_property) // Stored property
      oldValue.mSelectedSchematicInspector_property.removeEBObserver (self.mSelectedSchematicInspector_property) // Stored property
      oldValue.mSchematicTitle_property.removeEBObserver (self.mSchematicTitle_property) // Stored property
      oldValue.mSchematicVersion_property.removeEBObserver (self.mSchematicVersion_property) // Stored property
      oldValue.mSchematicDate_property.removeEBObserver (self.mSchematicDate_property) // Stored property
      oldValue.mSchematicHorizontalFlip_property.removeEBObserver (self.mSchematicHorizontalFlip_property) // Stored property
      oldValue.mSchematicVerticalFlip_property.removeEBObserver (self.mSchematicVerticalFlip_property) // Stored property
      oldValue.mSchematicZoom_property.removeEBObserver (self.mSchematicZoom_property) // Stored property
      oldValue.mSchematicGridStyle_property.removeEBObserver (self.mSchematicGridStyle_property) // Stored property
      oldValue.mSchematicGridDisplayFactor_property.removeEBObserver (self.mSchematicGridDisplayFactor_property) // Stored property
      oldValue.mSchematicCustomWidth_property.removeEBObserver (self.mSchematicCustomWidth_property) // Stored property
      oldValue.mSchematicCustomWidthUnit_property.removeEBObserver (self.mSchematicCustomWidthUnit_property) // Stored property
      oldValue.mSchematicCustomHeight_property.removeEBObserver (self.mSchematicCustomHeight_property) // Stored property
      oldValue.mSchematicCustomHeightUnit_property.removeEBObserver (self.mSchematicCustomHeightUnit_property) // Stored property
      oldValue.drawErrorBackgroundForBoard_property.removeEBObserver (self.drawErrorBackgroundForBoard_property) // Stored property
      oldValue.displayFrontRestrictRectangles_property.removeEBObserver (self.displayFrontRestrictRectangles_property) // Stored property
      oldValue.displayBackRestrictRectangles_property.removeEBObserver (self.displayBackRestrictRectangles_property) // Stored property
      oldValue.displayInner1RestrictRectangles_property.removeEBObserver (self.displayInner1RestrictRectangles_property) // Stored property
      oldValue.displayInner2RestrictRectangles_property.removeEBObserver (self.displayInner2RestrictRectangles_property) // Stored property
      oldValue.displayInner3RestrictRectangles_property.removeEBObserver (self.displayInner3RestrictRectangles_property) // Stored property
      oldValue.displayInner4RestrictRectangles_property.removeEBObserver (self.displayInner4RestrictRectangles_property) // Stored property
      oldValue.displayFrontLegendForBoard_property.removeEBObserver (self.displayFrontLegendForBoard_property) // Stored property
      oldValue.displayFrontLayoutForBoard_property.removeEBObserver (self.displayFrontLayoutForBoard_property) // Stored property
      oldValue.displayBackLayoutForBoard_property.removeEBObserver (self.displayBackLayoutForBoard_property) // Stored property
      oldValue.displayInner1LayoutForBoard_property.removeEBObserver (self.displayInner1LayoutForBoard_property) // Stored property
      oldValue.displayInner2LayoutForBoard_property.removeEBObserver (self.displayInner2LayoutForBoard_property) // Stored property
      oldValue.displayInner3LayoutForBoard_property.removeEBObserver (self.displayInner3LayoutForBoard_property) // Stored property
      oldValue.displayInner4LayoutForBoard_property.removeEBObserver (self.displayInner4LayoutForBoard_property) // Stored property
      oldValue.displayBackLegendForBoard_property.removeEBObserver (self.displayBackLegendForBoard_property) // Stored property
      oldValue.displayFrontPadsForBoard_property.removeEBObserver (self.displayFrontPadsForBoard_property) // Stored property
      oldValue.displayBackPadsForBoard_property.removeEBObserver (self.displayBackPadsForBoard_property) // Stored property
      oldValue.displayPadNumbersForBoard_property.removeEBObserver (self.displayPadNumbersForBoard_property) // Stored property
      oldValue.packageDrawingWidthMultpliedByTenForBoard_property.removeEBObserver (self.packageDrawingWidthMultpliedByTenForBoard_property) // Stored property
      oldValue.mSchematicSheetOrientation_property.removeEBObserver (self.mSchematicSheetOrientation_property) // Stored property
      oldValue.mRastnetDisplay_property.removeEBObserver (self.mRastnetDisplay_property) // Stored property
      oldValue.mRastnetDisplayedNetName_property.removeEBObserver (self.mRastnetDisplayedNetName_property) // Stored property
      oldValue.mRastnetDisplayedComponentName_property.removeEBObserver (self.mRastnetDisplayedComponentName_property) // Stored property
      oldValue.hasInnerElements_property.removeEBObserver (self.hasInnerElements_property) // Transient property
      oldValue.layerConfigurationString_property.removeEBObserver (self.layerConfigurationString_property) // Transient property
      oldValue.boardGridStepMultipliedByDisplayFactor_property.removeEBObserver (self.boardGridStepMultipliedByDisplayFactor_property) // Transient property
      oldValue.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (self.boardLimitsGridStepMultipliedByDisplayFactor_property) // Transient property
      oldValue.boardShapeIsRectangular_property.removeEBObserver (self.boardShapeIsRectangular_property) // Transient property
      oldValue.selectedSheetIssues_property.removeEBObserver (self.selectedSheetIssues_property) // Transient property
      oldValue.schematicOverDisplay_property.removeEBObserver (self.schematicOverDisplay_property) // Transient property
      oldValue.connexionWarningString_property.removeEBObserver (self.connexionWarningString_property) // Transient property
      oldValue.connexionErrorString_property.removeEBObserver (self.connexionErrorString_property) // Transient property
      oldValue.sheetIndexes_property.removeEBObserver (self.sheetIndexes_property) // Transient property
      oldValue.netsDescription_property.removeEBObserver (self.netsDescription_property) // Transient property
      oldValue.boardIssues_property.removeEBObserver (self.boardIssues_property) // Transient property
      oldValue.hasSixLayers_property.removeEBObserver (self.hasSixLayers_property) // Transient property
      oldValue.signatureForERCChecking_property.removeEBObserver (self.signatureForERCChecking_property) // Transient property
      oldValue.ercStatusImage_property.removeEBObserver (self.ercStatusImage_property) // Transient property
      oldValue.ercStatusMessage_property.removeEBObserver (self.ercStatusMessage_property) // Transient property
      oldValue.viaCountString_property.removeEBObserver (self.viaCountString_property) // Transient property
      oldValue.topSideTrackCountString_property.removeEBObserver (self.topSideTrackCountString_property) // Transient property
      oldValue.backSideTrackCountString_property.removeEBObserver (self.backSideTrackCountString_property) // Transient property
      oldValue.inner1LayerTrackCountString_property.removeEBObserver (self.inner1LayerTrackCountString_property) // Transient property
      oldValue.inner2LayerTrackCountString_property.removeEBObserver (self.inner2LayerTrackCountString_property) // Transient property
      oldValue.inner3LayerTrackCountString_property.removeEBObserver (self.inner3LayerTrackCountString_property) // Transient property
      oldValue.inner4LayerTrackCountString_property.removeEBObserver (self.inner4LayerTrackCountString_property) // Transient property
      oldValue.trackCountString_property.removeEBObserver (self.trackCountString_property) // Transient property
      oldValue.trackLengthString_property.removeEBObserver (self.trackLengthString_property) // Transient property
      oldValue.interiorBoundBox_property.removeEBObserver (self.interiorBoundBox_property) // Transient property
      oldValue.boardBoundBox_property.removeEBObserver (self.boardBoundBox_property) // Transient property
      oldValue.boardInteriorTop_property.removeEBObserver (self.boardInteriorTop_property) // Transient property
      oldValue.boardInteriorBottom_property.removeEBObserver (self.boardInteriorBottom_property) // Transient property
      oldValue.boardInteriorLeft_property.removeEBObserver (self.boardInteriorLeft_property) // Transient property
      oldValue.boardInteriorRight_property.removeEBObserver (self.boardInteriorRight_property) // Transient property
      oldValue.boardLimitBorderTop_property.removeEBObserver (self.boardLimitBorderTop_property) // Transient property
      oldValue.boardLimitBorderBottom_property.removeEBObserver (self.boardLimitBorderBottom_property) // Transient property
      oldValue.boardLimitBorderLeft_property.removeEBObserver (self.boardLimitBorderLeft_property) // Transient property
      oldValue.boardLimitBorderRight_property.removeEBObserver (self.boardLimitBorderRight_property) // Transient property
      oldValue.borderElementCountString_property.removeEBObserver (self.borderElementCountString_property) // Transient property
      oldValue.borderOutlineBackground_property.removeEBObserver (self.borderOutlineBackground_property) // Transient property
      oldValue.borderViewBackground_property.removeEBObserver (self.borderViewBackground_property) // Transient property
      oldValue.fontNameArray_property.removeEBObserver (self.fontNameArray_property) // Transient property
      oldValue.deviceNames_property.removeEBObserver (self.deviceNames_property) // Transient property
      oldValue.allClassNames_property.removeEBObserver (self.allClassNames_property) // Transient property
      oldValue.sheetGeometry_property.removeEBObserver (self.sheetGeometry_property) // Transient property
      oldValue.schematicBackgroundDisplay_property.removeEBObserver (self.schematicBackgroundDisplay_property) // Transient property
      oldValue.netWarningCount_property.removeEBObserver (self.netWarningCount_property) // Transient property
      oldValue.netNamesArray_property.removeEBObserver (self.netNamesArray_property) // Transient property
      oldValue.unplacedSymbols_property.removeEBObserver (self.unplacedSymbols_property) // Transient property
      oldValue.unplacedPackages_property.removeEBObserver (self.unplacedPackages_property) // Transient property
      oldValue.componentsPlacedInBoard_property.removeEBObserver (self.componentsPlacedInBoard_property) // Transient property
      oldValue.boardStatusImage_property.removeEBObserver (self.boardStatusImage_property) // Transient property
      oldValue.boardStatusMessage_property.removeEBObserver (self.boardStatusMessage_property) // Transient property
      oldValue.placedComponentNameArray_property.removeEBObserver (self.placedComponentNameArray_property) // Transient property
      oldValue.schematicHasErrorOrWarning_property.removeEBObserver (self.schematicHasErrorOrWarning_property) // Transient property
      oldValue.schematicStatusMessage_property.removeEBObserver (self.schematicStatusMessage_property) // Transient property
      oldValue.schematicStatusImage_property.removeEBObserver (self.schematicStatusImage_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.mArtworkName_property.addEBObserver (self.mArtworkName_property) // Stored property
      newValue.mArtworkVersion_property.addEBObserver (self.mArtworkVersion_property) // Stored property
      newValue.mPDFBoardBackgroundColor_property.addEBObserver (self.mPDFBoardBackgroundColor_property) // Stored property
      newValue.mCheckClearanceBetweenPadsOfSameNet_property.addEBObserver (self.mCheckClearanceBetweenPadsOfSameNet_property) // Stored property
      newValue.mLastERCCheckingIsSuccess_property.addEBObserver (self.mLastERCCheckingIsSuccess_property) // Stored property
      newValue.mLastERCCheckingSignature_property.addEBObserver (self.mLastERCCheckingSignature_property) // Stored property
      newValue.mLayerConfiguration_property.addEBObserver (self.mLayerConfiguration_property) // Stored property
      newValue.mBoardSideForNewTrack_property.addEBObserver (self.mBoardSideForNewTrack_property) // Stored property
      newValue.mDirectionForNewTrack_property.addEBObserver (self.mDirectionForNewTrack_property) // Stored property
      newValue.mBoardLayerForNewText_property.addEBObserver (self.mBoardLayerForNewText_property) // Stored property
      newValue.mBoardLayerForNewLine_property.addEBObserver (self.mBoardLayerForNewLine_property) // Stored property
      newValue.mBoardSideForNewRestrictRectangle_property.addEBObserver (self.mBoardSideForNewRestrictRectangle_property) // Stored property
      newValue.mNewRestrictRectangleLayers_property.addEBObserver (self.mNewRestrictRectangleLayers_property) // Stored property
      newValue.mAutoRouterPreferredDirections_property.addEBObserver (self.mAutoRouterPreferredDirections_property) // Stored property
      newValue.mAutorouterSnapAngle_property.addEBObserver (self.mAutorouterSnapAngle_property) // Stored property
      newValue.mRouteDirection_property.addEBObserver (self.mRouteDirection_property) // Stored property
      newValue.mRouteOrigin_property.addEBObserver (self.mRouteOrigin_property) // Stored property
      newValue.mAutorouterInterfaceMode_property.addEBObserver (self.mAutorouterInterfaceMode_property) // Stored property
      newValue.mExportExistingTracksAndVias_property.addEBObserver (self.mExportExistingTracksAndVias_property) // Stored property
      newValue.mExportExistingTracksAndVias2_property.addEBObserver (self.mExportExistingTracksAndVias2_property) // Stored property
      newValue.mTrackLengthUnit_property.addEBObserver (self.mTrackLengthUnit_property) // Stored property
      newValue.mLayoutClearance_property.addEBObserver (self.mLayoutClearance_property) // Stored property
      newValue.mLayoutClearanceUnit_property.addEBObserver (self.mLayoutClearanceUnit_property) // Stored property
      newValue.mBoardSelectedInspector_property.addEBObserver (self.mBoardSelectedInspector_property) // Stored property
      newValue.mBoardHorizontalFlip_property.addEBObserver (self.mBoardHorizontalFlip_property) // Stored property
      newValue.mBoardVerticalFlip_property.addEBObserver (self.mBoardVerticalFlip_property) // Stored property
      newValue.mBoardGridStyle_property.addEBObserver (self.mBoardGridStyle_property) // Stored property
      newValue.mBoardGridDisplayFactor_property.addEBObserver (self.mBoardGridDisplayFactor_property) // Stored property
      newValue.mBoardZoom_property.addEBObserver (self.mBoardZoom_property) // Stored property
      newValue.mBoardGridStep_property.addEBObserver (self.mBoardGridStep_property) // Stored property
      newValue.mBoardGridStepUnit_property.addEBObserver (self.mBoardGridStepUnit_property) // Stored property
      newValue.mErrorOrWarningIssueSize_property.addEBObserver (self.mErrorOrWarningIssueSize_property) // Stored property
      newValue.mControlKeyHiliteDiameter_property.addEBObserver (self.mControlKeyHiliteDiameter_property) // Stored property
      newValue.mDSNFileProposedName_property.addEBObserver (self.mDSNFileProposedName_property) // Stored property
      newValue.mBoardLimitsWidth_property.addEBObserver (self.mBoardLimitsWidth_property) // Stored property
      newValue.mBoardLimitsWidthUnit_property.addEBObserver (self.mBoardLimitsWidthUnit_property) // Stored property
      newValue.mBoardClearance_property.addEBObserver (self.mBoardClearance_property) // Stored property
      newValue.mBoardClearanceUnit_property.addEBObserver (self.mBoardClearanceUnit_property) // Stored property
      newValue.mBoardLimitsSelectedInspector_property.addEBObserver (self.mBoardLimitsSelectedInspector_property) // Stored property
      newValue.mBoardLimitsHorizontalFlip_property.addEBObserver (self.mBoardLimitsHorizontalFlip_property) // Stored property
      newValue.mBoardLimitsVerticalFlip_property.addEBObserver (self.mBoardLimitsVerticalFlip_property) // Stored property
      newValue.mBoardLimitsGridStyle_property.addEBObserver (self.mBoardLimitsGridStyle_property) // Stored property
      newValue.mBoardLimitsGridDisplayFactor_property.addEBObserver (self.mBoardLimitsGridDisplayFactor_property) // Stored property
      newValue.mBoardLimitsZoom_property.addEBObserver (self.mBoardLimitsZoom_property) // Stored property
      newValue.mBoardLimitsGridStep_property.addEBObserver (self.mBoardLimitsGridStep_property) // Stored property
      newValue.mBoardLimitsGridStepUnit_property.addEBObserver (self.mBoardLimitsGridStepUnit_property) // Stored property
      newValue.mBoardLimitsBoundingBoxUnit_property.addEBObserver (self.mBoardLimitsBoundingBoxUnit_property) // Stored property
      newValue.mBoardPointsBoundingBoxUnit_property.addEBObserver (self.mBoardPointsBoundingBoxUnit_property) // Stored property
      newValue.mBoardSelectedCurveDisplayUnit_property.addEBObserver (self.mBoardSelectedCurveDisplayUnit_property) // Stored property
      newValue.mBoardLimitControlPointsDisplayUnit_property.addEBObserver (self.mBoardLimitControlPointsDisplayUnit_property) // Stored property
      newValue.mBoardShape_property.addEBObserver (self.mBoardShape_property) // Stored property
      newValue.mRectangularBoardWidth_property.addEBObserver (self.mRectangularBoardWidth_property) // Stored property
      newValue.mRectangularBoardWidthUnit_property.addEBObserver (self.mRectangularBoardWidthUnit_property) // Stored property
      newValue.mRectangularBoardHeight_property.addEBObserver (self.mRectangularBoardHeight_property) // Stored property
      newValue.mRectangularBoardHeightUnit_property.addEBObserver (self.mRectangularBoardHeightUnit_property) // Stored property
      newValue.mDefaultNetClassName_property.addEBObserver (self.mDefaultNetClassName_property) // Stored property
      newValue.mSelectedPageIndex_property.addEBObserver (self.mSelectedPageIndex_property) // Stored property
      newValue.mSelectedSchematicInspector_property.addEBObserver (self.mSelectedSchematicInspector_property) // Stored property
      newValue.mSchematicTitle_property.addEBObserver (self.mSchematicTitle_property) // Stored property
      newValue.mSchematicVersion_property.addEBObserver (self.mSchematicVersion_property) // Stored property
      newValue.mSchematicDate_property.addEBObserver (self.mSchematicDate_property) // Stored property
      newValue.mSchematicHorizontalFlip_property.addEBObserver (self.mSchematicHorizontalFlip_property) // Stored property
      newValue.mSchematicVerticalFlip_property.addEBObserver (self.mSchematicVerticalFlip_property) // Stored property
      newValue.mSchematicZoom_property.addEBObserver (self.mSchematicZoom_property) // Stored property
      newValue.mSchematicGridStyle_property.addEBObserver (self.mSchematicGridStyle_property) // Stored property
      newValue.mSchematicGridDisplayFactor_property.addEBObserver (self.mSchematicGridDisplayFactor_property) // Stored property
      newValue.mSchematicCustomWidth_property.addEBObserver (self.mSchematicCustomWidth_property) // Stored property
      newValue.mSchematicCustomWidthUnit_property.addEBObserver (self.mSchematicCustomWidthUnit_property) // Stored property
      newValue.mSchematicCustomHeight_property.addEBObserver (self.mSchematicCustomHeight_property) // Stored property
      newValue.mSchematicCustomHeightUnit_property.addEBObserver (self.mSchematicCustomHeightUnit_property) // Stored property
      newValue.drawErrorBackgroundForBoard_property.addEBObserver (self.drawErrorBackgroundForBoard_property) // Stored property
      newValue.displayFrontRestrictRectangles_property.addEBObserver (self.displayFrontRestrictRectangles_property) // Stored property
      newValue.displayBackRestrictRectangles_property.addEBObserver (self.displayBackRestrictRectangles_property) // Stored property
      newValue.displayInner1RestrictRectangles_property.addEBObserver (self.displayInner1RestrictRectangles_property) // Stored property
      newValue.displayInner2RestrictRectangles_property.addEBObserver (self.displayInner2RestrictRectangles_property) // Stored property
      newValue.displayInner3RestrictRectangles_property.addEBObserver (self.displayInner3RestrictRectangles_property) // Stored property
      newValue.displayInner4RestrictRectangles_property.addEBObserver (self.displayInner4RestrictRectangles_property) // Stored property
      newValue.displayFrontLegendForBoard_property.addEBObserver (self.displayFrontLegendForBoard_property) // Stored property
      newValue.displayFrontLayoutForBoard_property.addEBObserver (self.displayFrontLayoutForBoard_property) // Stored property
      newValue.displayBackLayoutForBoard_property.addEBObserver (self.displayBackLayoutForBoard_property) // Stored property
      newValue.displayInner1LayoutForBoard_property.addEBObserver (self.displayInner1LayoutForBoard_property) // Stored property
      newValue.displayInner2LayoutForBoard_property.addEBObserver (self.displayInner2LayoutForBoard_property) // Stored property
      newValue.displayInner3LayoutForBoard_property.addEBObserver (self.displayInner3LayoutForBoard_property) // Stored property
      newValue.displayInner4LayoutForBoard_property.addEBObserver (self.displayInner4LayoutForBoard_property) // Stored property
      newValue.displayBackLegendForBoard_property.addEBObserver (self.displayBackLegendForBoard_property) // Stored property
      newValue.displayFrontPadsForBoard_property.addEBObserver (self.displayFrontPadsForBoard_property) // Stored property
      newValue.displayBackPadsForBoard_property.addEBObserver (self.displayBackPadsForBoard_property) // Stored property
      newValue.displayPadNumbersForBoard_property.addEBObserver (self.displayPadNumbersForBoard_property) // Stored property
      newValue.packageDrawingWidthMultpliedByTenForBoard_property.addEBObserver (self.packageDrawingWidthMultpliedByTenForBoard_property) // Stored property
      newValue.mSchematicSheetOrientation_property.addEBObserver (self.mSchematicSheetOrientation_property) // Stored property
      newValue.mRastnetDisplay_property.addEBObserver (self.mRastnetDisplay_property) // Stored property
      newValue.mRastnetDisplayedNetName_property.addEBObserver (self.mRastnetDisplayedNetName_property) // Stored property
      newValue.mRastnetDisplayedComponentName_property.addEBObserver (self.mRastnetDisplayedComponentName_property) // Stored property
      newValue.hasInnerElements_property.addEBObserver (self.hasInnerElements_property) // Transient property
      newValue.layerConfigurationString_property.addEBObserver (self.layerConfigurationString_property) // Transient property
      newValue.boardGridStepMultipliedByDisplayFactor_property.addEBObserver (self.boardGridStepMultipliedByDisplayFactor_property) // Transient property
      newValue.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (self.boardLimitsGridStepMultipliedByDisplayFactor_property) // Transient property
      newValue.boardShapeIsRectangular_property.addEBObserver (self.boardShapeIsRectangular_property) // Transient property
      newValue.selectedSheetIssues_property.addEBObserver (self.selectedSheetIssues_property) // Transient property
      newValue.schematicOverDisplay_property.addEBObserver (self.schematicOverDisplay_property) // Transient property
      newValue.connexionWarningString_property.addEBObserver (self.connexionWarningString_property) // Transient property
      newValue.connexionErrorString_property.addEBObserver (self.connexionErrorString_property) // Transient property
      newValue.sheetIndexes_property.addEBObserver (self.sheetIndexes_property) // Transient property
      newValue.netsDescription_property.addEBObserver (self.netsDescription_property) // Transient property
      newValue.boardIssues_property.addEBObserver (self.boardIssues_property) // Transient property
      newValue.hasSixLayers_property.addEBObserver (self.hasSixLayers_property) // Transient property
      newValue.signatureForERCChecking_property.addEBObserver (self.signatureForERCChecking_property) // Transient property
      newValue.ercStatusImage_property.addEBObserver (self.ercStatusImage_property) // Transient property
      newValue.ercStatusMessage_property.addEBObserver (self.ercStatusMessage_property) // Transient property
      newValue.viaCountString_property.addEBObserver (self.viaCountString_property) // Transient property
      newValue.topSideTrackCountString_property.addEBObserver (self.topSideTrackCountString_property) // Transient property
      newValue.backSideTrackCountString_property.addEBObserver (self.backSideTrackCountString_property) // Transient property
      newValue.inner1LayerTrackCountString_property.addEBObserver (self.inner1LayerTrackCountString_property) // Transient property
      newValue.inner2LayerTrackCountString_property.addEBObserver (self.inner2LayerTrackCountString_property) // Transient property
      newValue.inner3LayerTrackCountString_property.addEBObserver (self.inner3LayerTrackCountString_property) // Transient property
      newValue.inner4LayerTrackCountString_property.addEBObserver (self.inner4LayerTrackCountString_property) // Transient property
      newValue.trackCountString_property.addEBObserver (self.trackCountString_property) // Transient property
      newValue.trackLengthString_property.addEBObserver (self.trackLengthString_property) // Transient property
      newValue.interiorBoundBox_property.addEBObserver (self.interiorBoundBox_property) // Transient property
      newValue.boardBoundBox_property.addEBObserver (self.boardBoundBox_property) // Transient property
      newValue.boardInteriorTop_property.addEBObserver (self.boardInteriorTop_property) // Transient property
      newValue.boardInteriorBottom_property.addEBObserver (self.boardInteriorBottom_property) // Transient property
      newValue.boardInteriorLeft_property.addEBObserver (self.boardInteriorLeft_property) // Transient property
      newValue.boardInteriorRight_property.addEBObserver (self.boardInteriorRight_property) // Transient property
      newValue.boardLimitBorderTop_property.addEBObserver (self.boardLimitBorderTop_property) // Transient property
      newValue.boardLimitBorderBottom_property.addEBObserver (self.boardLimitBorderBottom_property) // Transient property
      newValue.boardLimitBorderLeft_property.addEBObserver (self.boardLimitBorderLeft_property) // Transient property
      newValue.boardLimitBorderRight_property.addEBObserver (self.boardLimitBorderRight_property) // Transient property
      newValue.borderElementCountString_property.addEBObserver (self.borderElementCountString_property) // Transient property
      newValue.borderOutlineBackground_property.addEBObserver (self.borderOutlineBackground_property) // Transient property
      newValue.borderViewBackground_property.addEBObserver (self.borderViewBackground_property) // Transient property
      newValue.fontNameArray_property.addEBObserver (self.fontNameArray_property) // Transient property
      newValue.deviceNames_property.addEBObserver (self.deviceNames_property) // Transient property
      newValue.allClassNames_property.addEBObserver (self.allClassNames_property) // Transient property
      newValue.sheetGeometry_property.addEBObserver (self.sheetGeometry_property) // Transient property
      newValue.schematicBackgroundDisplay_property.addEBObserver (self.schematicBackgroundDisplay_property) // Transient property
      newValue.netWarningCount_property.addEBObserver (self.netWarningCount_property) // Transient property
      newValue.netNamesArray_property.addEBObserver (self.netNamesArray_property) // Transient property
      newValue.unplacedSymbols_property.addEBObserver (self.unplacedSymbols_property) // Transient property
      newValue.unplacedPackages_property.addEBObserver (self.unplacedPackages_property) // Transient property
      newValue.componentsPlacedInBoard_property.addEBObserver (self.componentsPlacedInBoard_property) // Transient property
      newValue.boardStatusImage_property.addEBObserver (self.boardStatusImage_property) // Transient property
      newValue.boardStatusMessage_property.addEBObserver (self.boardStatusMessage_property) // Transient property
      newValue.placedComponentNameArray_property.addEBObserver (self.placedComponentNameArray_property) // Transient property
      newValue.schematicHasErrorOrWarning_property.addEBObserver (self.schematicHasErrorOrWarning_property) // Transient property
      newValue.schematicStatusMessage_property.addEBObserver (self.schematicStatusMessage_property) // Transient property
      newValue.schematicStatusImage_property.addEBObserver (self.schematicStatusImage_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mArtworkName' stored property
  //····················································································································

  final let mArtworkName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mArtworkVersion' stored property
  //····················································································································

  final let mArtworkVersion_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mPDFBoardBackgroundColor' stored property
  //····················································································································

  final let mPDFBoardBackgroundColor_property = EBGenericTransientProperty <NSColor?> ()

  //····················································································································
  //   Observers of 'mCheckClearanceBetweenPadsOfSameNet' stored property
  //····················································································································

  final let mCheckClearanceBetweenPadsOfSameNet_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mLastERCCheckingIsSuccess' stored property
  //····················································································································

  final let mLastERCCheckingIsSuccess_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mLastERCCheckingSignature' stored property
  //····················································································································

  final let mLastERCCheckingSignature_property = EBGenericTransientProperty <UInt32?> ()

  //····················································································································
  //   Observers of 'mLayerConfiguration' stored property
  //····················································································································

  final let mLayerConfiguration_property = EBGenericTransientProperty <LayerConfiguration?> ()

  //····················································································································
  //   Observers of 'mBoardSideForNewTrack' stored property
  //····················································································································

  final let mBoardSideForNewTrack_property = EBGenericTransientProperty <TrackSide?> ()

  //····················································································································
  //   Observers of 'mDirectionForNewTrack' stored property
  //····················································································································

  final let mDirectionForNewTrack_property = EBGenericTransientProperty <TrackCreationDirection?> ()

  //····················································································································
  //   Observers of 'mBoardLayerForNewText' stored property
  //····················································································································

  final let mBoardLayerForNewText_property = EBGenericTransientProperty <BoardTextLayer?> ()

  //····················································································································
  //   Observers of 'mBoardLayerForNewLine' stored property
  //····················································································································

  final let mBoardLayerForNewLine_property = EBGenericTransientProperty <BoardLineLayer?> ()

  //····················································································································
  //   Observers of 'mBoardSideForNewRestrictRectangle' stored property
  //····················································································································

  final let mBoardSideForNewRestrictRectangle_property = EBGenericTransientProperty <RestrictRectangleLayer?> ()

  //····················································································································
  //   Observers of 'mNewRestrictRectangleLayers' stored property
  //····················································································································

  final let mNewRestrictRectangleLayers_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mAutoRouterPreferredDirections' stored property
  //····················································································································

  final let mAutoRouterPreferredDirections_property = EBGenericTransientProperty <AutorouterPreferredDirections?> ()

  //····················································································································
  //   Observers of 'mAutorouterSnapAngle' stored property
  //····················································································································

  final let mAutorouterSnapAngle_property = EBGenericTransientProperty <AutorouterSnapAngle?> ()

  //····················································································································
  //   Observers of 'mRouteDirection' stored property
  //····················································································································

  final let mRouteDirection_property = EBGenericTransientProperty <RouteDirection?> ()

  //····················································································································
  //   Observers of 'mRouteOrigin' stored property
  //····················································································································

  final let mRouteOrigin_property = EBGenericTransientProperty <RouteOrigin?> ()

  //····················································································································
  //   Observers of 'mAutorouterInterfaceMode' stored property
  //····················································································································

  final let mAutorouterInterfaceMode_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mExportExistingTracksAndVias' stored property
  //····················································································································

  final let mExportExistingTracksAndVias_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mExportExistingTracksAndVias2' stored property
  //····················································································································

  final let mExportExistingTracksAndVias2_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mTrackLengthUnit' stored property
  //····················································································································

  final let mTrackLengthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mLayoutClearance' stored property
  //····················································································································

  final let mLayoutClearance_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mLayoutClearanceUnit' stored property
  //····················································································································

  final let mLayoutClearanceUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardSelectedInspector' stored property
  //····················································································································

  final let mBoardSelectedInspector_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardHorizontalFlip' stored property
  //····················································································································

  final let mBoardHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mBoardVerticalFlip' stored property
  //····················································································································

  final let mBoardVerticalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mBoardGridStyle' stored property
  //····················································································································

  final let mBoardGridStyle_property = EBGenericTransientProperty <GridStyle?> ()

  //····················································································································
  //   Observers of 'mBoardGridDisplayFactor' stored property
  //····················································································································

  final let mBoardGridDisplayFactor_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardZoom' stored property
  //····················································································································

  final let mBoardZoom_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardGridStep' stored property
  //····················································································································

  final let mBoardGridStep_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardGridStepUnit' stored property
  //····················································································································

  final let mBoardGridStepUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mErrorOrWarningIssueSize' stored property
  //····················································································································

  final let mErrorOrWarningIssueSize_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'mControlKeyHiliteDiameter' stored property
  //····················································································································

  final let mControlKeyHiliteDiameter_property = EBGenericTransientProperty <Double?> ()

  //····················································································································
  //   Observers of 'mDSNFileProposedName' stored property
  //····················································································································

  final let mDSNFileProposedName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsWidth' stored property
  //····················································································································

  final let mBoardLimitsWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsWidthUnit' stored property
  //····················································································································

  final let mBoardLimitsWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardClearance' stored property
  //····················································································································

  final let mBoardClearance_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardClearanceUnit' stored property
  //····················································································································

  final let mBoardClearanceUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsSelectedInspector' stored property
  //····················································································································

  final let mBoardLimitsSelectedInspector_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsHorizontalFlip' stored property
  //····················································································································

  final let mBoardLimitsHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsVerticalFlip' stored property
  //····················································································································

  final let mBoardLimitsVerticalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsGridStyle' stored property
  //····················································································································

  final let mBoardLimitsGridStyle_property = EBGenericTransientProperty <GridStyle?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsGridDisplayFactor' stored property
  //····················································································································

  final let mBoardLimitsGridDisplayFactor_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsZoom' stored property
  //····················································································································

  final let mBoardLimitsZoom_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsGridStep' stored property
  //····················································································································

  final let mBoardLimitsGridStep_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsGridStepUnit' stored property
  //····················································································································

  final let mBoardLimitsGridStepUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardLimitsBoundingBoxUnit' stored property
  //····················································································································

  final let mBoardLimitsBoundingBoxUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardPointsBoundingBoxUnit' stored property
  //····················································································································

  final let mBoardPointsBoundingBoxUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardSelectedCurveDisplayUnit' stored property
  //····················································································································

  final let mBoardSelectedCurveDisplayUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardLimitControlPointsDisplayUnit' stored property
  //····················································································································

  final let mBoardLimitControlPointsDisplayUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mBoardShape' stored property
  //····················································································································

  final let mBoardShape_property = EBGenericTransientProperty <BoardShape?> ()

  //····················································································································
  //   Observers of 'mRectangularBoardWidth' stored property
  //····················································································································

  final let mRectangularBoardWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mRectangularBoardWidthUnit' stored property
  //····················································································································

  final let mRectangularBoardWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mRectangularBoardHeight' stored property
  //····················································································································

  final let mRectangularBoardHeight_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mRectangularBoardHeightUnit' stored property
  //····················································································································

  final let mRectangularBoardHeightUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mDefaultNetClassName' stored property
  //····················································································································

  final let mDefaultNetClassName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  final let mSelectedPageIndex_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSelectedSchematicInspector' stored property
  //····················································································································

  final let mSelectedSchematicInspector_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSchematicTitle' stored property
  //····················································································································

  final let mSchematicTitle_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mSchematicVersion' stored property
  //····················································································································

  final let mSchematicVersion_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mSchematicDate' stored property
  //····················································································································

  final let mSchematicDate_property = EBGenericTransientProperty <Date?> ()

  //····················································································································
  //   Observers of 'mSchematicHorizontalFlip' stored property
  //····················································································································

  final let mSchematicHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mSchematicVerticalFlip' stored property
  //····················································································································

  final let mSchematicVerticalFlip_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'mSchematicZoom' stored property
  //····················································································································

  final let mSchematicZoom_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSchematicGridStyle' stored property
  //····················································································································

  final let mSchematicGridStyle_property = EBGenericTransientProperty <GridStyle?> ()

  //····················································································································
  //   Observers of 'mSchematicGridDisplayFactor' stored property
  //····················································································································

  final let mSchematicGridDisplayFactor_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSchematicCustomWidth' stored property
  //····················································································································

  final let mSchematicCustomWidth_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSchematicCustomWidthUnit' stored property
  //····················································································································

  final let mSchematicCustomWidthUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSchematicCustomHeight' stored property
  //····················································································································

  final let mSchematicCustomHeight_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSchematicCustomHeightUnit' stored property
  //····················································································································

  final let mSchematicCustomHeightUnit_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'drawErrorBackgroundForBoard' stored property
  //····················································································································

  final let drawErrorBackgroundForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayFrontRestrictRectangles' stored property
  //····················································································································

  final let displayFrontRestrictRectangles_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayBackRestrictRectangles' stored property
  //····················································································································

  final let displayBackRestrictRectangles_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayInner1RestrictRectangles' stored property
  //····················································································································

  final let displayInner1RestrictRectangles_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayInner2RestrictRectangles' stored property
  //····················································································································

  final let displayInner2RestrictRectangles_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayInner3RestrictRectangles' stored property
  //····················································································································

  final let displayInner3RestrictRectangles_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayInner4RestrictRectangles' stored property
  //····················································································································

  final let displayInner4RestrictRectangles_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayFrontLegendForBoard' stored property
  //····················································································································

  final let displayFrontLegendForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayFrontLayoutForBoard' stored property
  //····················································································································

  final let displayFrontLayoutForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayBackLayoutForBoard' stored property
  //····················································································································

  final let displayBackLayoutForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayInner1LayoutForBoard' stored property
  //····················································································································

  final let displayInner1LayoutForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayInner2LayoutForBoard' stored property
  //····················································································································

  final let displayInner2LayoutForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayInner3LayoutForBoard' stored property
  //····················································································································

  final let displayInner3LayoutForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayInner4LayoutForBoard' stored property
  //····················································································································

  final let displayInner4LayoutForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayBackLegendForBoard' stored property
  //····················································································································

  final let displayBackLegendForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayFrontPadsForBoard' stored property
  //····················································································································

  final let displayFrontPadsForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayBackPadsForBoard' stored property
  //····················································································································

  final let displayBackPadsForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'displayPadNumbersForBoard' stored property
  //····················································································································

  final let displayPadNumbersForBoard_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'packageDrawingWidthMultpliedByTenForBoard' stored property
  //····················································································································

  final let packageDrawingWidthMultpliedByTenForBoard_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'mSchematicSheetOrientation' stored property
  //····················································································································

  final let mSchematicSheetOrientation_property = EBGenericTransientProperty <SchematicSheetOrientation?> ()

  //····················································································································
  //   Observers of 'mRastnetDisplay' stored property
  //····················································································································

  final let mRastnetDisplay_property = EBGenericTransientProperty <RastnetDisplay?> ()

  //····················································································································
  //   Observers of 'mRastnetDisplayedNetName' stored property
  //····················································································································

  final let mRastnetDisplayedNetName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'mRastnetDisplayedComponentName' stored property
  //····················································································································

  final let mRastnetDisplayedComponentName_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'hasInnerElements' transient property
  //····················································································································

  final let hasInnerElements_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'layerConfigurationString' transient property
  //····················································································································

  final let layerConfigurationString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'boardGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  final let boardGridStepMultipliedByDisplayFactor_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'boardLimitsGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  final let boardLimitsGridStepMultipliedByDisplayFactor_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'boardShapeIsRectangular' transient property
  //····················································································································

  final let boardShapeIsRectangular_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'selectedSheetIssues' transient property
  //····················································································································

  final let selectedSheetIssues_property = EBGenericTransientProperty <CanariIssueArray?> ()

  //····················································································································
  //   Observers of 'schematicOverDisplay' transient property
  //····················································································································

  final let schematicOverDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'connexionWarningString' transient property
  //····················································································································

  final let connexionWarningString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'connexionErrorString' transient property
  //····················································································································

  final let connexionErrorString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'sheetIndexes' transient property
  //····················································································································

  final let sheetIndexes_property = EBGenericTransientProperty <IntArray?> ()

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  final let netsDescription_property = EBGenericTransientProperty <NetInfoArray?> ()

  //····················································································································
  //   Observers of 'boardIssues' transient property
  //····················································································································

  final let boardIssues_property = EBGenericTransientProperty <CanariIssueArray?> ()

  //····················································································································
  //   Observers of 'hasSixLayers' transient property
  //····················································································································

  final let hasSixLayers_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  final let signatureForERCChecking_property = EBGenericTransientProperty <UInt32?> ()

  //····················································································································
  //   Observers of 'ercStatusImage' transient property
  //····················································································································

  final let ercStatusImage_property = EBGenericTransientProperty <NSImage?> ()

  //····················································································································
  //   Observers of 'ercStatusMessage' transient property
  //····················································································································

  final let ercStatusMessage_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'viaCountString' transient property
  //····················································································································

  final let viaCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'topSideTrackCountString' transient property
  //····················································································································

  final let topSideTrackCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'backSideTrackCountString' transient property
  //····················································································································

  final let backSideTrackCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'inner1LayerTrackCountString' transient property
  //····················································································································

  final let inner1LayerTrackCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'inner2LayerTrackCountString' transient property
  //····················································································································

  final let inner2LayerTrackCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'inner3LayerTrackCountString' transient property
  //····················································································································

  final let inner3LayerTrackCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'inner4LayerTrackCountString' transient property
  //····················································································································

  final let inner4LayerTrackCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'trackCountString' transient property
  //····················································································································

  final let trackCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'trackLengthString' transient property
  //····················································································································

  final let trackLengthString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'interiorBoundBox' transient property
  //····················································································································

  final let interiorBoundBox_property = EBGenericTransientProperty <CanariRect?> ()

  //····················································································································
  //   Observers of 'boardBoundBox' transient property
  //····················································································································

  final let boardBoundBox_property = EBGenericTransientProperty <CanariRect?> ()

  //····················································································································
  //   Observers of 'boardInteriorTop' transient property
  //····················································································································

  final let boardInteriorTop_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'boardInteriorBottom' transient property
  //····················································································································

  final let boardInteriorBottom_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'boardInteriorLeft' transient property
  //····················································································································

  final let boardInteriorLeft_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'boardInteriorRight' transient property
  //····················································································································

  final let boardInteriorRight_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'boardLimitBorderTop' transient property
  //····················································································································

  final let boardLimitBorderTop_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'boardLimitBorderBottom' transient property
  //····················································································································

  final let boardLimitBorderBottom_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'boardLimitBorderLeft' transient property
  //····················································································································

  final let boardLimitBorderLeft_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'boardLimitBorderRight' transient property
  //····················································································································

  final let boardLimitBorderRight_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'borderElementCountString' transient property
  //····················································································································

  final let borderElementCountString_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'borderOutlineBackground' transient property
  //····················································································································

  final let borderOutlineBackground_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'borderViewBackground' transient property
  //····················································································································

  final let borderViewBackground_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'fontNameArray' transient property
  //····················································································································

  final let fontNameArray_property = EBGenericTransientProperty <StringArray?> ()

  //····················································································································
  //   Observers of 'deviceNames' transient property
  //····················································································································

  final let deviceNames_property = EBGenericTransientProperty <StringArray?> ()

  //····················································································································
  //   Observers of 'allClassNames' transient property
  //····················································································································

  final let allClassNames_property = EBGenericTransientProperty <StringArray?> ()

  //····················································································································
  //   Observers of 'sheetGeometry' transient property
  //····················································································································

  final let sheetGeometry_property = EBGenericTransientProperty <SchematicSheetGeometry?> ()

  //····················································································································
  //   Observers of 'schematicBackgroundDisplay' transient property
  //····················································································································

  final let schematicBackgroundDisplay_property = EBGenericTransientProperty <EBShape?> ()

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  final let netWarningCount_property = EBGenericTransientProperty <Int?> ()

  //····················································································································
  //   Observers of 'netNamesArray' transient property
  //····················································································································

  final let netNamesArray_property = EBGenericTransientProperty <StringArray?> ()

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  final let unplacedSymbols_property = EBGenericTransientProperty <StringTagArray?> ()

  //····················································································································
  //   Observers of 'unplacedPackages' transient property
  //····················································································································

  final let unplacedPackages_property = EBGenericTransientProperty <StringTagArray?> ()

  //····················································································································
  //   Observers of 'componentsPlacedInBoard' transient property
  //····················································································································

  final let componentsPlacedInBoard_property = EBGenericTransientProperty <StringTagArray?> ()

  //····················································································································
  //   Observers of 'boardStatusImage' transient property
  //····················································································································

  final let boardStatusImage_property = EBGenericTransientProperty <NSImage?> ()

  //····················································································································
  //   Observers of 'boardStatusMessage' transient property
  //····················································································································

  final let boardStatusMessage_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'placedComponentNameArray' transient property
  //····················································································································

  final let placedComponentNameArray_property = EBGenericTransientProperty <StringArray?> ()

  //····················································································································
  //   Observers of 'schematicHasErrorOrWarning' transient property
  //····················································································································

  final let schematicHasErrorOrWarning_property = EBGenericTransientProperty <Bool?> ()

  //····················································································································
  //   Observers of 'schematicStatusMessage' transient property
  //····················································································································

  final let schematicStatusMessage_property = EBGenericTransientProperty <String?> ()

  //····················································································································
  //   Observers of 'schematicStatusImage' transient property
  //····················································································································

  final let schematicStatusImage_property = EBGenericTransientProperty <NSImage?> ()

  //····················································································································
  //   Observable toMany property: mSheets
  //····················································································································

  private final var mObserversOf_mSheets = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSheets (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSheets.insert (inObserver)
    if let object = self.propval {
      object.mSheets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSheets (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mSheets.remove (inObserver)
    if let object = self.propval {
      object.mSheets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mFonts
  //····················································································································

  private final var mObserversOf_mFonts = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFonts (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mFonts.insert (inObserver)
    if let object = self.propval {
      object.mFonts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFonts (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mFonts.remove (inObserver)
    if let object = self.propval {
      object.mFonts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mDevices
  //····················································································································

  private final var mObserversOf_mDevices = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDevices (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mDevices.insert (inObserver)
    if let object = self.propval {
      object.mDevices_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDevices (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mDevices.remove (inObserver)
    if let object = self.propval {
      object.mDevices_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mNetClasses
  //····················································································································

  private final var mObserversOf_mNetClasses = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetClasses (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mNetClasses.insert (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClasses (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mNetClasses.remove (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mBorderCurves
  //····················································································································

  private final var mObserversOf_mBorderCurves = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBorderCurves (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mBorderCurves.insert (inObserver)
    if let object = self.propval {
      object.mBorderCurves_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBorderCurves (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mBorderCurves.remove (inObserver)
    if let object = self.propval {
      object.mBorderCurves_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mBoardObjects
  //····················································································································

  private final var mObserversOf_mBoardObjects = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardObjects (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mBoardObjects.insert (inObserver)
    if let object = self.propval {
      object.mBoardObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardObjects (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mBoardObjects.remove (inObserver)
    if let object = self.propval {
      object.mBoardObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponents
  //····················································································································

  private final var mObserversOf_mComponents = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComponents (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mComponents.insert (inObserver)
    if let object = self.propval {
      object.mComponents_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponents (_ inObserver : EBObserverProtocol) {
    self.mObserversOf_mComponents.remove (inObserver)
    if let object = self.propval {
      object.mComponents_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mArtworkName simple stored property
    self.mArtworkName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mArtworkName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mArtworkVersion simple stored property
    self.mArtworkVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mArtworkVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPDFBoardBackgroundColor simple stored property
    self.mPDFBoardBackgroundColor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mPDFBoardBackgroundColor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCheckClearanceBetweenPadsOfSameNet simple stored property
    self.mCheckClearanceBetweenPadsOfSameNet_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCheckClearanceBetweenPadsOfSameNet_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mLastERCCheckingIsSuccess simple stored property
    self.mLastERCCheckingIsSuccess_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLastERCCheckingIsSuccess_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mLastERCCheckingSignature simple stored property
    self.mLastERCCheckingSignature_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLastERCCheckingSignature_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mLayerConfiguration simple stored property
    self.mLayerConfiguration_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLayerConfiguration_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardSideForNewTrack simple stored property
    self.mBoardSideForNewTrack_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardSideForNewTrack_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDirectionForNewTrack simple stored property
    self.mDirectionForNewTrack_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDirectionForNewTrack_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLayerForNewText simple stored property
    self.mBoardLayerForNewText_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLayerForNewText_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLayerForNewLine simple stored property
    self.mBoardLayerForNewLine_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLayerForNewLine_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardSideForNewRestrictRectangle simple stored property
    self.mBoardSideForNewRestrictRectangle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardSideForNewRestrictRectangle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mNewRestrictRectangleLayers simple stored property
    self.mNewRestrictRectangleLayers_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mNewRestrictRectangleLayers_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAutoRouterPreferredDirections simple stored property
    self.mAutoRouterPreferredDirections_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mAutoRouterPreferredDirections_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAutorouterSnapAngle simple stored property
    self.mAutorouterSnapAngle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mAutorouterSnapAngle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRouteDirection simple stored property
    self.mRouteDirection_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRouteDirection_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRouteOrigin simple stored property
    self.mRouteOrigin_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRouteOrigin_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAutorouterInterfaceMode simple stored property
    self.mAutorouterInterfaceMode_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mAutorouterInterfaceMode_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mExportExistingTracksAndVias simple stored property
    self.mExportExistingTracksAndVias_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mExportExistingTracksAndVias_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mExportExistingTracksAndVias2 simple stored property
    self.mExportExistingTracksAndVias2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mExportExistingTracksAndVias2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mTrackLengthUnit simple stored property
    self.mTrackLengthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mTrackLengthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mLayoutClearance simple stored property
    self.mLayoutClearance_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLayoutClearance_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mLayoutClearanceUnit simple stored property
    self.mLayoutClearanceUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLayoutClearanceUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardSelectedInspector simple stored property
    self.mBoardSelectedInspector_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardSelectedInspector_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardHorizontalFlip simple stored property
    self.mBoardHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardVerticalFlip simple stored property
    self.mBoardVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardGridStyle simple stored property
    self.mBoardGridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardGridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardGridDisplayFactor simple stored property
    self.mBoardGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardGridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardZoom simple stored property
    self.mBoardZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardGridStep simple stored property
    self.mBoardGridStep_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardGridStep_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardGridStepUnit simple stored property
    self.mBoardGridStepUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardGridStepUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mErrorOrWarningIssueSize simple stored property
    self.mErrorOrWarningIssueSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mErrorOrWarningIssueSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mControlKeyHiliteDiameter simple stored property
    self.mControlKeyHiliteDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mControlKeyHiliteDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDSNFileProposedName simple stored property
    self.mDSNFileProposedName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDSNFileProposedName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsWidth simple stored property
    self.mBoardLimitsWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsWidthUnit simple stored property
    self.mBoardLimitsWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardClearance simple stored property
    self.mBoardClearance_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardClearance_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardClearanceUnit simple stored property
    self.mBoardClearanceUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardClearanceUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsSelectedInspector simple stored property
    self.mBoardLimitsSelectedInspector_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsSelectedInspector_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsHorizontalFlip simple stored property
    self.mBoardLimitsHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsVerticalFlip simple stored property
    self.mBoardLimitsVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsGridStyle simple stored property
    self.mBoardLimitsGridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsGridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsGridDisplayFactor simple stored property
    self.mBoardLimitsGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsGridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsZoom simple stored property
    self.mBoardLimitsZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsGridStep simple stored property
    self.mBoardLimitsGridStep_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsGridStep_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsGridStepUnit simple stored property
    self.mBoardLimitsGridStepUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsGridStepUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitsBoundingBoxUnit simple stored property
    self.mBoardLimitsBoundingBoxUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsBoundingBoxUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardPointsBoundingBoxUnit simple stored property
    self.mBoardPointsBoundingBoxUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardPointsBoundingBoxUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardSelectedCurveDisplayUnit simple stored property
    self.mBoardSelectedCurveDisplayUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardSelectedCurveDisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardLimitControlPointsDisplayUnit simple stored property
    self.mBoardLimitControlPointsDisplayUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitControlPointsDisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mBoardShape simple stored property
    self.mBoardShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardShape_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRectangularBoardWidth simple stored property
    self.mRectangularBoardWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRectangularBoardWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRectangularBoardWidthUnit simple stored property
    self.mRectangularBoardWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRectangularBoardWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRectangularBoardHeight simple stored property
    self.mRectangularBoardHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRectangularBoardHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRectangularBoardHeightUnit simple stored property
    self.mRectangularBoardHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRectangularBoardHeightUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDefaultNetClassName simple stored property
    self.mDefaultNetClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDefaultNetClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSelectedPageIndex simple stored property
    self.mSelectedPageIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSelectedPageIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSelectedSchematicInspector simple stored property
    self.mSelectedSchematicInspector_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSelectedSchematicInspector_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicTitle simple stored property
    self.mSchematicTitle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicTitle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicVersion simple stored property
    self.mSchematicVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicDate simple stored property
    self.mSchematicDate_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicDate_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicHorizontalFlip simple stored property
    self.mSchematicHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicVerticalFlip simple stored property
    self.mSchematicVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicZoom simple stored property
    self.mSchematicZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicGridStyle simple stored property
    self.mSchematicGridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicGridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicGridDisplayFactor simple stored property
    self.mSchematicGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicGridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicCustomWidth simple stored property
    self.mSchematicCustomWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicCustomWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicCustomWidthUnit simple stored property
    self.mSchematicCustomWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicCustomWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicCustomHeight simple stored property
    self.mSchematicCustomHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicCustomHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicCustomHeightUnit simple stored property
    self.mSchematicCustomHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicCustomHeightUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawErrorBackgroundForBoard simple stored property
    self.drawErrorBackgroundForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawErrorBackgroundForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayFrontRestrictRectangles simple stored property
    self.displayFrontRestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayFrontRestrictRectangles_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayBackRestrictRectangles simple stored property
    self.displayBackRestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayBackRestrictRectangles_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayInner1RestrictRectangles simple stored property
    self.displayInner1RestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayInner1RestrictRectangles_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayInner2RestrictRectangles simple stored property
    self.displayInner2RestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayInner2RestrictRectangles_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayInner3RestrictRectangles simple stored property
    self.displayInner3RestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayInner3RestrictRectangles_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayInner4RestrictRectangles simple stored property
    self.displayInner4RestrictRectangles_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayInner4RestrictRectangles_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayFrontLegendForBoard simple stored property
    self.displayFrontLegendForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayFrontLegendForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayFrontLayoutForBoard simple stored property
    self.displayFrontLayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayFrontLayoutForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayBackLayoutForBoard simple stored property
    self.displayBackLayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayBackLayoutForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayInner1LayoutForBoard simple stored property
    self.displayInner1LayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayInner1LayoutForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayInner2LayoutForBoard simple stored property
    self.displayInner2LayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayInner2LayoutForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayInner3LayoutForBoard simple stored property
    self.displayInner3LayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayInner3LayoutForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayInner4LayoutForBoard simple stored property
    self.displayInner4LayoutForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayInner4LayoutForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayBackLegendForBoard simple stored property
    self.displayBackLegendForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayBackLegendForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayFrontPadsForBoard simple stored property
    self.displayFrontPadsForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayFrontPadsForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayBackPadsForBoard simple stored property
    self.displayBackPadsForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayBackPadsForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure displayPadNumbersForBoard simple stored property
    self.displayPadNumbersForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.displayPadNumbersForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure packageDrawingWidthMultpliedByTenForBoard simple stored property
    self.packageDrawingWidthMultpliedByTenForBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.packageDrawingWidthMultpliedByTenForBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSchematicSheetOrientation simple stored property
    self.mSchematicSheetOrientation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicSheetOrientation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRastnetDisplay simple stored property
    self.mRastnetDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRastnetDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRastnetDisplayedNetName simple stored property
    self.mRastnetDisplayedNetName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRastnetDisplayedNetName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mRastnetDisplayedComponentName simple stored property
    self.mRastnetDisplayedComponentName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRastnetDisplayedComponentName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure hasInnerElements transient property
    self.hasInnerElements_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.hasInnerElements_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure layerConfigurationString transient property
    self.layerConfigurationString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.layerConfigurationString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardGridStepMultipliedByDisplayFactor transient property
    self.boardGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardGridStepMultipliedByDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardLimitsGridStepMultipliedByDisplayFactor transient property
    self.boardLimitsGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardLimitsGridStepMultipliedByDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardShapeIsRectangular transient property
    self.boardShapeIsRectangular_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardShapeIsRectangular_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure selectedSheetIssues transient property
    self.selectedSheetIssues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectedSheetIssues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure schematicOverDisplay transient property
    self.schematicOverDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.schematicOverDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure connexionWarningString transient property
    self.connexionWarningString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.connexionWarningString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure connexionErrorString transient property
    self.connexionErrorString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.connexionErrorString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure sheetIndexes transient property
    self.sheetIndexes_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.sheetIndexes_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netsDescription transient property
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netsDescription_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardIssues transient property
    self.boardIssues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardIssues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure hasSixLayers transient property
    self.hasSixLayers_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.hasSixLayers_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.signatureForERCChecking_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure ercStatusImage transient property
    self.ercStatusImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.ercStatusImage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure ercStatusMessage transient property
    self.ercStatusMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.ercStatusMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure viaCountString transient property
    self.viaCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.viaCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure topSideTrackCountString transient property
    self.topSideTrackCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.topSideTrackCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure backSideTrackCountString transient property
    self.backSideTrackCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backSideTrackCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner1LayerTrackCountString transient property
    self.inner1LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.inner1LayerTrackCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner2LayerTrackCountString transient property
    self.inner2LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.inner2LayerTrackCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner3LayerTrackCountString transient property
    self.inner3LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.inner3LayerTrackCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inner4LayerTrackCountString transient property
    self.inner4LayerTrackCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.inner4LayerTrackCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackCountString transient property
    self.trackCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackLengthString transient property
    self.trackLengthString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackLengthString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure interiorBoundBox transient property
    self.interiorBoundBox_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.interiorBoundBox_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardBoundBox transient property
    self.boardBoundBox_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardBoundBox_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardInteriorTop transient property
    self.boardInteriorTop_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardInteriorTop_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardInteriorBottom transient property
    self.boardInteriorBottom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardInteriorBottom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardInteriorLeft transient property
    self.boardInteriorLeft_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardInteriorLeft_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardInteriorRight transient property
    self.boardInteriorRight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardInteriorRight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardLimitBorderTop transient property
    self.boardLimitBorderTop_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardLimitBorderTop_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardLimitBorderBottom transient property
    self.boardLimitBorderBottom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardLimitBorderBottom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardLimitBorderLeft transient property
    self.boardLimitBorderLeft_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardLimitBorderLeft_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardLimitBorderRight transient property
    self.boardLimitBorderRight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardLimitBorderRight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure borderElementCountString transient property
    self.borderElementCountString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.borderElementCountString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure borderOutlineBackground transient property
    self.borderOutlineBackground_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.borderOutlineBackground_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure borderViewBackground transient property
    self.borderViewBackground_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.borderViewBackground_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure fontNameArray transient property
    self.fontNameArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.fontNameArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure deviceNames transient property
    self.deviceNames_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.deviceNames_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure allClassNames transient property
    self.allClassNames_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.allClassNames_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure sheetGeometry transient property
    self.sheetGeometry_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.sheetGeometry_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure schematicBackgroundDisplay transient property
    self.schematicBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.schematicBackgroundDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netWarningCount transient property
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netWarningCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netNamesArray transient property
    self.netNamesArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netNamesArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure unplacedSymbols transient property
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.unplacedSymbols_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure unplacedPackages transient property
    self.unplacedPackages_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.unplacedPackages_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure componentsPlacedInBoard transient property
    self.componentsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.componentsPlacedInBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardStatusImage transient property
    self.boardStatusImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardStatusImage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure boardStatusMessage transient property
    self.boardStatusMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardStatusMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure placedComponentNameArray transient property
    self.placedComponentNameArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.placedComponentNameArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure schematicHasErrorOrWarning transient property
    self.schematicHasErrorOrWarning_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.schematicHasErrorOrWarning_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure schematicStatusMessage transient property
    self.schematicStatusMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.schematicStatusMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure schematicStatusImage transient property
    self.schematicStatusImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.schematicStatusImage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TransientObject ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ProjectRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ProjectRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ProjectRoot?
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ProjectRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································

  func setProp (_ inValue : ProjectRoot?) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_ProjectRoot : ReadWriteObject_ProjectRoot {

  //····················································································································

  private var mModel : ReadWriteObject_ProjectRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ProjectRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ProjectRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < ProjectRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ProjectRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_ProjectRoot : ReadWriteObject_ProjectRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mValueExplorer : NSButton? {
      didSet {
        if let unwrappedExplorer = self.mValueExplorer {
          switch self.selection {
          case .empty, .multiple :
            break ;
          case .single (let v) :
            updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
          }
        }
      }
    }
  #endif
  
  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    #if BUILD_OBJECT_EXPLORER
      if let valueExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
      }
    #endif
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ProjectRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

