//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SchematicObject_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SchematicObject_connectedPoints : AnyObject {
  var connectedPoints : CanariPointArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SchematicObject_sheetDescriptor : AnyObject {
  var sheetDescriptor : SchematicSheetDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SchematicObject_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SchematicObject_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SchematicObject_isPlacedInSchematic : AnyObject {
  var isPlacedInSchematic : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SchematicObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SchematicObject : EBGraphicManagedObject,
         SchematicObject_issues,
         SchematicObject_connectedPoints,
         SchematicObject_sheetDescriptor,
         SchematicObject_selectionDisplay,
         SchematicObject_objectDisplay,
         SchematicObject_isPlacedInSchematic {

  //····················································································································
  //   To one property: mSheet
  //····················································································································

  final let mSheet_property = StoredObject_SheetInProject (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mSheet : SheetInProject? {
    get {
      return self.mSheet_property.propval
    }
    set {
      if self.mSheet_property.propval !== newValue {
        if self.mSheet_property.propval != nil {
          self.mSheet_property.setProp (nil)
        }
        if newValue != nil {
          self.mSheet_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mSheet_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  final let connectedPoints_property = EBTransientProperty_CanariPointArray ()

  //····················································································································

  final var connectedPoints : CanariPointArray? {
    switch self.connectedPoints_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sheetDescriptor
  //····················································································································

  final let sheetDescriptor_property = EBTransientProperty_SchematicSheetDescriptor ()

  //····················································································································

  final var sheetDescriptor : SchematicSheetDescriptor? {
    switch self.sheetDescriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: isPlacedInSchematic
  //····················································································································

  final let isPlacedInSchematic_property = EBTransientProperty_Bool ()

  //····················································································································

  final var isPlacedInSchematic : Bool? {
    switch self.isPlacedInSchematic_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    super.init (inUndoManager)
    self.mSheet_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mSheet_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mSheet_property.addEBObserver (self.mSheet_none)
    gInitSemaphore.wait ()
  //--- To one property: mSheet (has opposite to many relationship: mObjects)
    self.mSheet_property.undoManager = inUndoManager
    self.mSheet_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mObjects_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mObjects_property.remove (me) } }
    )
  //--- Atomic property: sheetDescriptor
    self.sheetDescriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSheet_property.sheetDescriptor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SchematicObject_sheetDescriptor (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSheet_property.sheetDescriptor_property.addEBObserver (self.sheetDescriptor_property)
  //--- Atomic property: isPlacedInSchematic
    self.isPlacedInSchematic_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mSheet_none.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SchematicObject_isPlacedInSchematic (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mSheet_property.addEBObserver (self.isPlacedInSchematic_property)
    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To one property: mSheet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSheet",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? SheetInProject {
        self.mSheet_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
  //--- To one relationships
    ioString += "mSheet\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
  //--- To one relationships
    if let object = self.mSheet {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mSheet"], let objectIndex = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [objectIndex].object as! SheetInProject
      self.mSheet = object
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To one property: mSheet
    if let object = self.mSheet {
      ioObjectArray.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

