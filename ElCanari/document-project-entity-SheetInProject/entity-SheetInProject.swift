//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_mSheetTitle : AnyObject {
  var mSheetTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_connectedPoints : AnyObject {
  var connectedPoints : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_connexionWarnings : AnyObject {
  var connexionWarnings : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_connexionErrors : AnyObject {
  var connexionErrors : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_sheetDescriptor : AnyObject {
  var sheetDescriptor : SchematicSheetDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SheetInProject : EBManagedObject,
         SheetInProject_mSheetTitle,
         SheetInProject_issues,
         SheetInProject_connectedPoints,
         SheetInProject_connexionWarnings,
         SheetInProject_connexionErrors,
         SheetInProject_sheetDescriptor {

  //····················································································································
  //   To many property: mObjects
  //····················································································································

  final let mObjects_property = StoredArrayOf_SchematicObject (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mObjects : EBReferenceArray <SchematicObject> {
    get { return self.mObjects_property.propval }
    set { self.mObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPoints
  //····················································································································

  final let mPoints_property = StoredArrayOf_PointInSchematic (usedForSignature: false)

  //····················································································································

  //····················································································································

  final var mPoints : EBReferenceArray <PointInSchematic> {
    get { return self.mPoints_property.propval }
    set { self.mPoints_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSheetTitle
  //····················································································································

  final let mSheetTitle_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSheetTitle_toDefaultValue () {
    self.mSheetTitle = ""
  }

  //····················································································································

  final var mSheetTitle : String {
    get { return self.mSheetTitle_property.propval }
    set { self.mSheetTitle_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  final let mRoot_property = StoredObject_ProjectRoot (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mRoot : ProjectRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval !== newValue {
        if self.mRoot_property.propval != nil {
          self.mRoot_property.setProp (nil)
        }
        if newValue != nil {
          self.mRoot_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mRoot_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  final let connectedPoints_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var connectedPoints : EBShape? {
    switch self.connectedPoints_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connexionWarnings
  //····················································································································

  final let connexionWarnings_property = EBTransientProperty_Int ()

  //····················································································································

  final var connexionWarnings : Int? {
    switch self.connexionWarnings_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connexionErrors
  //····················································································································

  final let connexionErrors_property = EBTransientProperty_Int ()

  //····················································································································

  final var connexionErrors : Int? {
    switch self.connexionErrors_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sheetDescriptor
  //····················································································································

  final let sheetDescriptor_property = EBTransientProperty_SchematicSheetDescriptor ()

  //····················································································································

  final var sheetDescriptor : SchematicSheetDescriptor? {
    switch self.sheetDescriptor_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mSheetTitle_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    super.init (inUndoManager)
    self.mRoot_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserver (self.mRoot_none)
//    gInitSemaphore.wait ()
  //--- To many property: mObjects (has opposite relationship)
    self.mObjects_property.undoManager = inUndoManager
    self.mObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheet_property.setProp (me) } },
      resetter: { inObject in inObject.mSheet_property.setProp (nil) }
    )
  //--- To many property: mPoints (has opposite relationship)
    self.mPoints_property.undoManager = inUndoManager
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheet_property.setProp (me) } },
      resetter: { inObject in inObject.mSheet_property.setProp (nil) }
    )
  //--- To one property: mRoot (has opposite to many relationship: mSheets)
    self.mRoot_property.undoManager = inUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheets_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mSheets_property.remove (me) } }
    )
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPoints_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SheetInProject_issues (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPoints_property.addEBObserverOf_status (self.issues_property)
  //--- Atomic property: connectedPoints
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_connectionColorForSchematic_property.selection
        let s1 = unwSelf.mPoints_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_SheetInProject_connectedPoints (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_connectionColorForSchematic_property.addEBObserver (self.connectedPoints_property)
    self.mPoints_property.addEBObserverOf_connectedPoints (self.connectedPoints_property)
  //--- Atomic property: connexionWarnings
    self.connexionWarnings_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SheetInProject_connexionWarnings (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.connexionWarnings_property)
  //--- Atomic property: connexionErrors
    self.connexionErrors_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SheetInProject_connexionErrors (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.connexionErrors_property)
  //--- Atomic property: sheetDescriptor
    self.sheetDescriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.sheetGeometry_property.selection
        let s1 = unwSelf.mRoot_property.sheetIndexes_property.selection
        let s2 = unwSelf.objectIndex.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_SheetInProject_sheetDescriptor (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.sheetGeometry_property.addEBObserver (self.sheetDescriptor_property)
    self.mRoot_property.sheetIndexes_property.addEBObserver (self.sheetDescriptor_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.mObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheet_property.setProp (me) } },
      resetter: { inObject in inObject.mSheet_property.setProp (nil) }
    )
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheet_property.setProp (me) } },
      resetter: { inObject in inObject.mSheet_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: mObjects
    self.store (
      managedObjectArray: self.mObjects_property.propval.values,
      relationshipName: "mObjects",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPoints
    self.store (
      managedObjectArray: self.mPoints_property.propval.values,
      relationshipName: "mPoints",
      intoDictionary: ioDictionary
    )
    //--- Atomic property: mSheetTitle
      self.mSheetTitle_property.storeIn (dictionary: ioDictionary, forKey: "mSheetTitle")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: mObjects
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mObjects",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [SchematicObject]
      self.mObjects_property.setProp (EBReferenceArray (array))
    }
  //--- To many property: mPoints
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "mPoints",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [PointInSchematic]
      self.mPoints_property.setProp (EBReferenceArray (array))
    }
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? ProjectRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSheetTitle
    self.mSheetTitle_property.readFrom (dictionary: inDictionary, forKey: "mSheetTitle")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mSheetTitle\n"
  //--- To one relationships
    ioString += "mRoot\n"
  //--- To many relationships
    ioString += "mObjects\n"
    ioString += "mPoints\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mSheetTitle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mRoot {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.mObjects.values, into: &ioData)
    /* do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mObjects.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    } */
    enterToManyRelationshipObjectIndexes (from: self.mPoints.values, into: &ioData)
    /* do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mPoints.values {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    } */
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["mSheetTitle"], let value = String.unarchiveFromDataRange (inData, range) {
      self.mSheetTitle = value
    }
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mRoot"], let idx = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [idx].object as! ProjectRoot
      self.mRoot = object
    }
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
      if let range = inDictionary ["mObjects"], range.length > 0 {
        var relationshipArray = EBReferenceArray <SchematicObject> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inRawObjectArray [idx].object as! SchematicObject)
        }
        self.mObjects = relationshipArray
      }
      if let range = inDictionary ["mPoints"], range.length > 0 {
        var relationshipArray = EBReferenceArray <PointInSchematic> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inRawObjectArray [idx].object as! PointInSchematic)
        }
        self.mPoints = relationshipArray
      }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: mObjects
    for managedObject in self.mObjects.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: mPoints
    for managedObject in self.mPoints.values {
      ioObjectArray.append (managedObject)
    }
  //--- To one property: mRoot
    if let object = self.mRoot {
      ioObjectArray.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

