//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_mSheetTitle : AnyObject {
  var mSheetTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_schematicIssues : AnyObject {
  var schematicIssues : GraphicViewTooltipArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_connectedPoints : AnyObject {
  var connectedPoints : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_schematicConnexionWarnings : AnyObject {
  var schematicConnexionWarnings : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_schematicConnexionErrors : AnyObject {
  var schematicConnexionErrors : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SheetInProject_sheetDescriptor : AnyObject {
  var sheetDescriptor : SchematicSheetDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SheetInProject : EBManagedObject,
         SheetInProject_mSheetTitle,
         SheetInProject_schematicIssues,
         SheetInProject_issues,
         SheetInProject_connectedPoints,
         SheetInProject_schematicConnexionWarnings,
         SheetInProject_schematicConnexionErrors,
         SheetInProject_sheetDescriptor {

  //····················································································································
  //   To many property: mObjects
  //····················································································································

  final let mObjects_property = StoredArrayOf_SchematicObject (usedForSignature: false, key: "mObjects")

  //····················································································································

  final var mObjects : EBReferenceArray <SchematicObject> {
    get { return self.mObjects_property.propval }
    set { self.mObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPoints
  //····················································································································

  final let mPoints_property = StoredArrayOf_PointInSchematic (usedForSignature: false, key: "mPoints")

  //····················································································································

  final var mPoints : EBReferenceArray <PointInSchematic> {
    get { return self.mPoints_property.propval }
    set { self.mPoints_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSheetTitle
  //····················································································································

  final let mSheetTitle_property : EBStoredProperty_String

  //····················································································································

  final var mSheetTitle : String {
    get { return self.mSheetTitle_property.propval }
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  final let mRoot_property = StoredObject_ProjectRoot (usedForSignature: false, strongRef: false, key: "mRoot")

  //····················································································································

  final var mRoot : ProjectRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval !== newValue {
        if self.mRoot_property.propval != nil {
          self.mRoot_property.setProp (nil)
        }
        if newValue != nil {
          self.mRoot_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mRoot_none = EBTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: schematicIssues
  //····················································································································

  final let schematicIssues_property = EBTransientProperty <GraphicViewTooltipArray> ()

  //····················································································································

  final var schematicIssues : GraphicViewTooltipArray? {
    return self.schematicIssues_property.optionalValue
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //····················································································································

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  final let connectedPoints_property = EBTransientProperty <EBShape> ()

  //····················································································································

  final var connectedPoints : EBShape? {
    return self.connectedPoints_property.optionalValue
  }

  //····················································································································
  //   Transient property: schematicConnexionWarnings
  //····················································································································

  final let schematicConnexionWarnings_property = EBTransientProperty <Int> ()

  //····················································································································

  final var schematicConnexionWarnings : Int? {
    return self.schematicConnexionWarnings_property.optionalValue
  }

  //····················································································································
  //   Transient property: schematicConnexionErrors
  //····················································································································

  final let schematicConnexionErrors_property = EBTransientProperty <Int> ()

  //····················································································································

  final var schematicConnexionErrors : Int? {
    return self.schematicConnexionErrors_property.optionalValue
  }

  //····················································································································
  //   Transient property: sheetDescriptor
  //····················································································································

  final let sheetDescriptor_property = EBTransientProperty <SchematicSheetDescriptor> ()

  //····················································································································

  final var sheetDescriptor : SchematicSheetDescriptor? {
    return self.sheetDescriptor_property.optionalValue
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mSheetTitle_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "mSheetTitle")
    super.init (inUndoManager)
    self.mRoot_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mRoot_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mRoot_property.startsToBeObserved (by: self.mRoot_none)
  //--- To many property: mObjects (has opposite relationship)
    self.mObjects_property.undoManager = inUndoManager
    self.mObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheet_property.setProp (me) } },
      resetter: { inObject in inObject.mSheet_property.setProp (nil) }
    )
  //--- To many property: mPoints (has opposite relationship)
    self.mPoints_property.undoManager = inUndoManager
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheet_property.setProp (me) } },
      resetter: { inObject in inObject.mSheet_property.setProp (nil) }
    )
  //--- To one property: mRoot (has opposite to many relationship: mSheets)
    self.mRoot_property.undoManager = inUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheets_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mSheets_property.remove (me) } }
    )
  //--- Atomic property: schematicIssues
    self.schematicIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mPoints_property.selection
        let s1 = unwSelf.mObjects_property.selection
        let s2 = preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_SheetInProject_schematicIssues (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mPoints_property.toMany_status_StartsToBeObserved (by: self.schematicIssues_property)
    self.mObjects_property.toMany_wires_StartsToBeObserved (by: self.schematicIssues_property)
    preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.startsToBeObserved (by: self.schematicIssues_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.schematicIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SheetInProject_issues (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.schematicIssues_property.startsToBeObserved (by: self.issues_property)
  //--- Atomic property: connectedPoints
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = preferences_connectionColorForSchematic_property.selection
        let s1 = unwSelf.mPoints_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_SheetInProject_connectedPoints (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    preferences_connectionColorForSchematic_property.startsToBeObserved (by: self.connectedPoints_property)
    self.mPoints_property.toMany_connectedPoints_StartsToBeObserved (by: self.connectedPoints_property)
  //--- Atomic property: schematicConnexionWarnings
    self.schematicConnexionWarnings_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SheetInProject_schematicConnexionWarnings (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsToBeObserved (by: self.schematicConnexionWarnings_property)
  //--- Atomic property: schematicConnexionErrors
    self.schematicConnexionErrors_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.issues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_SheetInProject_schematicConnexionErrors (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.startsToBeObserved (by: self.schematicConnexionErrors_property)
  //--- Atomic property: sheetDescriptor
    self.sheetDescriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mRoot_property.sheetGeometry_property.selection
        let s1 = unwSelf.mRoot_property.sheetIndexes_property.selection
        let s2 = unwSelf.objectIndex.selection
        switch (s0, s1, s2) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2)) :
          return .single (transient_SheetInProject_sheetDescriptor (v0, v1, v2))
        case (.multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.sheetGeometry_property.startsToBeObserved (by: self.sheetDescriptor_property)
    self.mRoot_property.sheetIndexes_property.startsToBeObserved (by: self.sheetDescriptor_property)
  //--- Install undoers and opposite setter for relationships
    self.mObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheet_property.setProp (me) } },
      resetter: { inObject in inObject.mSheet_property.setProp (nil) }
    )
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSheet_property.setProp (me) } },
      resetter: { inObject in inObject.mSheet_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

