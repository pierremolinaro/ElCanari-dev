//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SheetInProject : EBReadOnlyAbstractArrayProperty <SheetInProject> {

  //································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SheetInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <SheetInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_mSheetTitle { // Stored property
        managedObject.mSheetTitle_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_schematicIssues { // Transient property
        managedObject.schematicIssues_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_connectedPoints { // Transient property
        managedObject.connectedPoints_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_schematicConnexionWarnings { // Transient property
        managedObject.schematicConnexionWarnings_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_schematicConnexionErrors { // Transient property
        managedObject.schematicConnexionErrors_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_sheetDescriptor { // Transient property
        managedObject.sheetDescriptor_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_mSheetTitle { // Stored property
        managedObject.mSheetTitle_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_schematicIssues { // Transient property
        managedObject.schematicIssues_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_connectedPoints { // Transient property
        managedObject.connectedPoints_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_schematicConnexionWarnings { // Transient property
        managedObject.schematicConnexionWarnings_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_schematicConnexionErrors { // Transient property
        managedObject.schematicConnexionErrors_property.startsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_sheetDescriptor { // Transient property
        managedObject.sheetDescriptor_property.startsBeingObserved (by: relay)
      }
    }
  }

  //································································································
  //   Observers of 'mSheetTitle' stored property
  //································································································

  private final var mObserversOf_mSheetTitle : EBObservedObserver? = nil

  //································································································

  final func toMany_mSheetTitle_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_mSheetTitle {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.mSheetTitle_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_mSheetTitle = relay
    }
    relay.startsBeingObserved (by: inObserver)
  }

  //································································································

  final func toMany_mSheetTitle_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_mSheetTitle?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'schematicIssues' transient property
  //································································································

  private final var mObserversOf_schematicIssues : EBObservedObserver? = nil

  //································································································

  final func toMany_schematicIssues_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_schematicIssues {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.schematicIssues_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_schematicIssues = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_schematicIssues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_schematicIssues?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'issues' transient property
  //································································································

  private final var mObserversOf_issues : EBObservedObserver? = nil

  //································································································

  final func toMany_issues_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'connectedPoints' transient property
  //································································································

  private final var mObserversOf_connectedPoints : EBObservedObserver? = nil

  //································································································

  final func toMany_connectedPoints_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_connectedPoints {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.connectedPoints_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_connectedPoints = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_connectedPoints_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_connectedPoints?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'schematicConnexionWarnings' transient property
  //································································································

  private final var mObserversOf_schematicConnexionWarnings : EBObservedObserver? = nil

  //································································································

  final func toMany_schematicConnexionWarnings_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_schematicConnexionWarnings {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.schematicConnexionWarnings_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_schematicConnexionWarnings = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_schematicConnexionWarnings_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_schematicConnexionWarnings?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'schematicConnexionErrors' transient property
  //································································································

  private final var mObserversOf_schematicConnexionErrors : EBObservedObserver? = nil

  //································································································

  final func toMany_schematicConnexionErrors_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_schematicConnexionErrors {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.schematicConnexionErrors_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_schematicConnexionErrors = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_schematicConnexionErrors_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_schematicConnexionErrors?.stopsBeingObserved (by: inObserver)
  }

  //································································································
  //   Observers of 'sheetDescriptor' transient property
  //································································································

  private final var mObserversOf_sheetDescriptor : EBObservedObserver? = nil

  //································································································

  final func toMany_sheetDescriptor_StartsBeingObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_sheetDescriptor {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsBeingObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.sheetDescriptor_property.startsBeingObserved (by: relay)
      }
      self.mObserversOf_sheetDescriptor = relay
    }
    relay.startsBeingObserved (by:  inObserver)
  }

  //································································································

  final func toMany_sheetDescriptor_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_sheetDescriptor?.stopsBeingObserved (by: inObserver)
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_SheetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_SheetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SheetInProject : ReadOnlyArrayOf_SheetInProject {

  //································································································

  func setProp (_ value :  EBReferenceArray <SheetInProject>) { } // Abstract method

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_SheetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_SheetInProject : ReadWriteArrayOf_SheetInProject, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol, Sendable {

  //································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <SheetInProject> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! SheetInProject)
      }
      self.setProp (objectArray)
    }
  }

  //································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <SheetInProject> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! SheetInProject)
    }
    self.setProp (objectArray)
  }

  //································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //································································································
  //   Signature ?
  //································································································

  final private let mUsedForSignature : Bool

  //································································································
  //   Undo manager
  //································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //································································································
  //   Opposite relationship management
  //································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : SheetInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : SheetInProject) -> Void > = nil

  //································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SheetInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : SheetInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //································································································
  // Model will change
  //································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <SheetInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
//    self.undoManager?.registerUndo < EBReferenceArray <SheetInProject> > (withTarget: self) {
//      DispatchQueue.main.async {
//        $0.mInternalArrayValue = inOldValue
//      }
//    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //································································································
  // Model did change
  //································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //································································································
  // Update observers
  //································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SheetInProject>,
                                 addedSet inAddedSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //································································································

  override final var selection : EBSelection < [SheetInProject] > { return .single (self.mInternalArrayValue.values) }

  //································································································

  override func setProp (_ inValue : EBReferenceArray <SheetInProject>) { self.mInternalArrayValue = inValue }

  //································································································

  final override var propval : EBReferenceArray <SheetInProject> { return self.mInternalArrayValue }

  //································································································

  final func remove (_ object : SheetInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //································································································

  final func add (_ object : SheetInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //································································································
  //   signature
  //································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //································································································

  private final var mSignatureCache : UInt32? = nil

  //································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_SheetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————

