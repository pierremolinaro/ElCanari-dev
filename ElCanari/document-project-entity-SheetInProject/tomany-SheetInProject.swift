//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SheetInProject : ReadOnlyAbstractArrayProperty <SheetInProject> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SheetInProject>,                            
                                 addedSet inAddedSet : EBReferenceSet <SheetInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_mSheetTitle_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_connectedPoints_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_connexionWarnings_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_connexionErrors_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_sheetDescriptor_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_mSheetTitle_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_connectedPoints_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_connexionWarnings_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_connexionErrors_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_sheetDescriptor_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'mSheetTitle' stored property
  //····················································································································

  private final var mObserversOf_mSheetTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSheetTitle (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSheetTitle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSheetTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSheetTitle (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSheetTitle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSheetTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSheetTitle_toElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    if !self.mObserversOf_mSheetTitle.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_mSheetTitle.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.mSheetTitle_property.addEBObserver (observer)
          }else{
            self.mObserversOf_mSheetTitle.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSheetTitle_fromElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for (_, entry) in self.mObserversOf_mSheetTitle.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.mSheetTitle_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_mSheetTitle.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.addEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.issues_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private final var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connectedPoints.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connectedPoints_property.addEBObserver (observer)
        }else{
          self.mObserversOf_connectedPoints.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connectedPoints.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connectedPoints_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_connectedPoints.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionWarnings' transient property
  //····················································································································

  private final var mObserversOf_connexionWarnings = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionWarnings (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionWarnings.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarnings_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionWarnings (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionWarnings.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarnings_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionWarnings_toElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connexionWarnings.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connexionWarnings_property.addEBObserver (observer)
        }else{
          self.mObserversOf_connexionWarnings.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionWarnings_fromElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connexionWarnings.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connexionWarnings_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_connexionWarnings.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionErrors' transient property
  //····················································································································

  private final var mObserversOf_connexionErrors = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionErrors (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionErrors.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrors_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionErrors (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionErrors.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrors_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionErrors_toElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connexionErrors.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connexionErrors_property.addEBObserver (observer)
        }else{
          self.mObserversOf_connexionErrors.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionErrors_fromElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_connexionErrors.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.connexionErrors_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_connexionErrors.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'sheetDescriptor' transient property
  //····················································································································

  private final var mObserversOf_sheetDescriptor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sheetDescriptor (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sheetDescriptor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetDescriptor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sheetDescriptor (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sheetDescriptor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetDescriptor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sheetDescriptor_toElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_sheetDescriptor.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.sheetDescriptor_property.addEBObserver (observer)
        }else{
          self.mObserversOf_sheetDescriptor.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sheetDescriptor_fromElementsOfSet (_ inSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_sheetDescriptor.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.sheetDescriptor_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_sheetDescriptor.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_SheetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOfSuperOf_SheetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SheetInProject : ReadOnlyArrayOf_SheetInProject {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <SheetInProject>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_SheetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_SheetInProject : ReadWriteArrayOf_SheetInProject, EBSignatureObserverProtocol, DocumentStorableProperty {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  final func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : SheetInProject) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : SheetInProject) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SheetInProject) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : SheetInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <SheetInProject>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SheetInProject>,
                                 addedSet inAddedSet : EBReferenceSet <SheetInProject>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [SheetInProject] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <SheetInProject>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <SheetInProject> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : SheetInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : SheetInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StandAloneArrayOf_SheetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SheetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_SheetInProject is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

