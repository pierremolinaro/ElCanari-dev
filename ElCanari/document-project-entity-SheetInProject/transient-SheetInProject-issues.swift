//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func transient_SheetInProject_issues (
       _ self_mPoints_status : [PointInSchematic_status],
       _ self_mObjects_wires : [SchematicObject_wires],
       _ prefs_symbolDrawingWidthMultipliedByTenForSchematic : Int
) -> CanariIssueArray {
//--- START OF USER ZONE 2
      //--- Point dictionary
        var pointDictionary = [CanariPoint : [SchematicPointStatus]] ()
        for object in self_mPoints_status {
          if let status = object.status {
            if let array = pointDictionary [status.location] {
              pointDictionary [status.location] = array + [status]
            }else{
              pointDictionary [status.location] = [status]
            }
          }
        }
      //--- Issues, several points at same location
        var issues = CanariIssueArray ()
        for (location, pointArray) in pointDictionary {
          if pointArray.count > 1 {
            let r = NSRect (
              x: canariUnitToCocoa (location.x) - SCHEMATIC_GRID_IN_COCOA_UNIT,
              y: canariUnitToCocoa (location.y) - SCHEMATIC_GRID_IN_COCOA_UNIT,
              width: SCHEMATIC_GRID_IN_COCOA_UNIT * 2.0,
              height: SCHEMATIC_GRID_IN_COCOA_UNIT * 2.0
            )
            let path = EBBezierPath (ovalIn: r)
            issues.append (CanariIssue (kind: .error, message: "\(pointArray.count) points at the same location", pathes: [path]))
          }else if !pointArray [0].connected {
            let r = NSRect (
              x: canariUnitToCocoa (location.x) - SCHEMATIC_GRID_IN_COCOA_UNIT,
              y: canariUnitToCocoa (location.y) - SCHEMATIC_GRID_IN_COCOA_UNIT,
              width: SCHEMATIC_GRID_IN_COCOA_UNIT * 2.0,
              height: SCHEMATIC_GRID_IN_COCOA_UNIT * 2.0
            )
            let path = EBBezierPath (ovalIn: r)
            issues.append (CanariIssue (kind: .warning, message: "Unconnected pin", pathes: [path]))
          }
        }
      //--- Check if a point is over a wire
        for wire in self_mObjects_wires {
          for wireDescriptor : CanariWireDescription in wire.wires ?? [] {
            let segment = CanariSegment (
              x1: wireDescriptor.p1.x,
              y1: wireDescriptor.p1.y,
              x2: wireDescriptor.p2.x,
              y2: wireDescriptor.p2.y,
              width: CANARI_UNITS_PER_PIXEL * prefs_symbolDrawingWidthMultipliedByTenForSchematic / 10
            )
            for (point, _) in pointDictionary {
              if segment.strictlyContains (point: point) {
                let r = NSRect (
                  x: canariUnitToCocoa (point.x) - SCHEMATIC_GRID_IN_COCOA_UNIT,
                  y: canariUnitToCocoa (point.y) - SCHEMATIC_GRID_IN_COCOA_UNIT,
                  width: SCHEMATIC_GRID_IN_COCOA_UNIT * 2.0,
                  height: SCHEMATIC_GRID_IN_COCOA_UNIT * 2.0
                )
                let path = EBBezierPath (ovalIn: r)
                issues.append (CanariIssue (kind: .error, message: "Point not connected to Wire", pathes: [path]))
              }
            }
          }
        }
      //---
        return issues
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
