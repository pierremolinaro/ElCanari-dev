//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol WireInSchematic_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol WireInSchematic_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol WireInSchematic_netName : AnyObject {
  var netName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol WireInSchematic_netClassName : AnyObject {
  var netClassName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol WireInSchematic_hasNet : AnyObject {
  var hasNet : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: WireInSchematic
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class WireInSchematic : SchematicObject,
         WireInSchematic_objectDisplay,
         WireInSchematic_selectionDisplay,
         WireInSchematic_netName,
         WireInSchematic_netClassName,
         WireInSchematic_hasNet {

  //····················································································································
  //   To one property: mP1
  //····················································································································

  final let mP1_property = StoredObject_PointInSchematic (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mP1 : PointInSchematic? {
    get {
      return self.mP1_property.propval
    }
    set {
      if self.mP1_property.propval !== newValue {
        if self.mP1_property.propval != nil {
          self.mP1_property.setProp (nil)
        }
        if newValue != nil {
          self.mP1_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mP1_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   To one property: mP2
  //····················································································································

  final let mP2_property = StoredObject_PointInSchematic (usedForSignature: false, strongRef: false)

  //····················································································································

  final var mP2 : PointInSchematic? {
    get {
      return self.mP2_property.propval
    }
    set {
      if self.mP2_property.propval !== newValue {
        if self.mP2_property.propval != nil {
          self.mP2_property.setProp (nil)
        }
        if newValue != nil {
          self.mP2_property.setProp (newValue)
        }
      }
    }
  }

  //····················································································································

  final let mP2_none = EBGenericTransientProperty <Bool> ()

  //····················································································································
  //   Transient property: netName
  //····················································································································

  final let netName_property = EBTransientProperty_String ()

  //····················································································································

  final var netName : String? {
    switch self.netName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassName
  //····················································································································

  final let netClassName_property = EBTransientProperty_String ()

  //····················································································································

  final var netClassName : String? {
    switch self.netClassName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasNet
  //····················································································································

  final let hasNet_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasNet : Bool? {
    switch self.hasNet_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    super.init (inUndoManager)
    self.mP1_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mP1_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mP1_property.addEBObserver (self.mP1_none)
    self.mP2_none.mReadModelFunction = { [weak self] in
      if let uwSelf = self {
        return .single (uwSelf.mP2_property.propval == nil)
      }else{
        return .empty
      }
    }
    self.mP2_property.addEBObserver (self.mP2_none)
    gInitSemaphore.wait ()
  //--- To one property: mP1 (has opposite to many relationship: mWiresP1s)
    self.mP1_property.undoManager = inUndoManager
    self.mP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mWiresP1s_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mWiresP1s_property.remove (me) } }
    )
  //--- To one property: mP2 (has opposite to many relationship: mWiresP2s)
    self.mP2_property.undoManager = inUndoManager
    self.mP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mWiresP2s_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mWiresP2s_property.remove (me) } }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mP1_property.wireColor_property.selection
        let s1 = preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.selection
        let s2 = preferences_schematicBackColor_property.selection
        let s3 = unwSelf.mP1_property.location_property.selection
        let s4 = unwSelf.mP2_property.location_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_WireInSchematic_objectDisplay (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mP1_property.wireColor_property.addEBObserver (self.objectDisplay_property)
    preferences_symbolDrawingWidthMultipliedByTenForSchematic_property.addEBObserver (self.objectDisplay_property)
    preferences_schematicBackColor_property.addEBObserver (self.objectDisplay_property)
    self.mP1_property.location_property.addEBObserver (self.objectDisplay_property)
    self.mP2_property.location_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mP1_property.location_property.selection
        let s1 = unwSelf.mP1_property.canMove_property.selection
        let s2 = unwSelf.mP2_property.location_property.selection
        let s3 = unwSelf.mP2_property.canMove_property.selection
        switch (s0, s1, s2, s3) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3)) :
          return .single (transient_WireInSchematic_selectionDisplay (v0, v1, v2, v3))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mP1_property.location_property.addEBObserver (self.selectionDisplay_property)
    self.mP1_property.canMove_property.addEBObserver (self.selectionDisplay_property)
    self.mP2_property.location_property.addEBObserver (self.selectionDisplay_property)
    self.mP2_property.canMove_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: netName
    self.netName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mP1_property.netName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_WireInSchematic_netName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mP1_property.netName_property.addEBObserver (self.netName_property)
  //--- Atomic property: netClassName
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mP1_property.netClassName_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_WireInSchematic_netClassName (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mP1_property.netClassName_property.addEBObserver (self.netClassName_property)
  //--- Atomic property: hasNet
    self.hasNet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.mP1_property.hasNet_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_WireInSchematic_hasNet (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mP1_property.hasNet_property.addEBObserver (self.hasNet_property)
    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To one property: mP1
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mP1",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? PointInSchematic {
        self.mP1_property.setProp (entity)
      }
    }
  //--- To one property: mP2
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mP2",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      )
      if let entity = possibleEntity as? PointInSchematic {
        self.mP2_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
  //--- To one relationships
    ioString += "mP1\n"
    ioString += "mP2\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
  //--- To one relationships
    if let object = self.mP1 {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mP2 {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
    if let range = inDictionary ["mP1"], let objectIndex = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [objectIndex].object as! PointInSchematic
      self.mP1 = object
    }
    if let range = inDictionary ["mP2"], let objectIndex = inData.base62EncodedInt (range: range) {
      let object = inRawObjectArray [objectIndex].object as! PointInSchematic
      self.mP2 = object
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To one property: mP1
    if let object = self.mP1 {
      ioObjectArray.append (object)
    }
  //--- To one property: mP2
    if let object = self.mP2 {
      ioObjectArray.append (object)
    }
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_WireInSchematic (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return acceptedTranslation_WireInSchematic (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_WireInSchematic (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    translate_WireInSchematic (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return canMove_WireInSchematic (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_WireInSchematic (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_WireInSchematic (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_WireInSchematic (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    flipHorizontally_WireInSchematic ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_WireInSchematic ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    flipVertically_WireInSchematic ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return canFlipVertically_WireInSchematic ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return canRotate90_WireInSchematic (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    rotate90Clockwise_WireInSchematic (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    rotate90CounterClockwise_WireInSchematic (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_WireInSchematic (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return operationAfterPasting_WireInSchematic (additionalDictionary: inDictionary,
                                                 optionalDocument: inOptionalDocument,
                                                 objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return alignmentPoints_WireInSchematic ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    operationBeforeRemoving_WireInSchematic ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

