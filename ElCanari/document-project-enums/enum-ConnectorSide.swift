//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum ConnectorSide : Int, EnumPropertyProtocol, Hashable, CaseIterable {
  case front = 0
  case back = 1
  case inner1 = 2
  case inner2 = 3
  case inner3 = 4
  case inner4 = 5
  case traversing = 6


  //····················································································································

/*  init? (string : String) {
    switch string {
      case "front" : self = .front // 0
      case "back" : self = .back // 1
      case "inner1" : self = .inner1 // 2
      case "inner2" : self = .inner2 // 3
      case "inner3" : self = .inner3 // 4
      case "inner4" : self = .inner4 // 5
      case "traversing" : self = .traversing // 6
      case _ : return nil
    }
  } */

  //····················································································································

  func descriptionForExplorer () -> String {
    switch self {
      case .front : return "front" // 0
      case .back : return "back" // 1
      case .inner1 : return "inner1" // 2
      case .inner2 : return "inner2" // 3
      case .inner3 : return "inner3" // 4
      case .inner4 : return "inner4" // 5
      case .traversing : return "traversing" // 6
    }
  }

  //····················································································································
  //  Enum generic bindings utility functions
  //····················································································································

  static func buildfromRawValue (rawValue : Int) -> ConnectorSide? {
    if let v = ConnectorSide (rawValue:rawValue) {
      return v
    }else{
      return nil
    }
  }

  //····················································································································

  func enumfromRawValue (rawValue : Int) -> ConnectorSide {
    var result = self
    let v : ConnectorSide? = ConnectorSide (rawValue:rawValue) ;
    if let unwrappedV = v {
      result = unwrappedV
    }
    return result
  }

  //····················································································································
  //  EBStoredPropertyProtocol
  //····················································································································

  func ebHashValue () -> UInt32 {
    return UInt32 (self.rawValue)
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self.rawValue)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> ConnectorSide {
    var result = ConnectorSide.front
    if let number = object as? NSNumber, let v = ConnectorSide (rawValue: number.intValue) {
      result = v
    }
    return result
  }

  //····················································································································

  static func unarchiveFromDataRange (_ inData : Data, _ inRange : NSRange) -> ConnectorSide? {
    if let rawValue = inData.base62EncodedInt (range: inRange), let enumValue = ConnectorSide (rawValue: rawValue) {
      return enumValue
    }else{
      return nil
    }
  }

  //····················································································································

  func appendPropertyValueTo (_ ioData : inout Data) {
    ioData.append (base62Encoded: self.rawValue)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_ConnectorSide = EBReadOnlyEnumProperty <ConnectorSide>
typealias EBTransientProperty_ConnectorSide = EBTransientEnumProperty <ConnectorSide>
typealias EBReadWriteProperty_ConnectorSide = EBReadWriteEnumProperty <ConnectorSide>
typealias EBStoredProperty_ConnectorSide = EBStoredEnumProperty <ConnectorSide>
typealias EBPropertyProxy_ConnectorSide = EBPropertyEnumProxy <ConnectorSide>
typealias EBPreferencesProperty_ConnectorSide = EBStoredEnumProperty <ConnectorSide>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
