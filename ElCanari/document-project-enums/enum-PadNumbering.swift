//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum PadNumbering : Int, EBEnumPropertyProtocol, Hashable {
  case noNumbering = 0
  case counterClock = 1
  case upRight = 2
  case upLeft = 3
  case downRight = 4
  case downLeft = 5
  case rightUp = 6
  case rightDown = 7
  case leftUp = 8
  case leftDown = 9

  //····················································································································
  // Function popupTitles
  //····················································································································

  static func popupTitles () -> [String] {
    return ["No", "Counterclock", "Up, Right", "Up, Left", "Down, Right", "Down, Left", "Right, Up", "Right, Down", "Left, Up", "Left, Down"]
  }

  //····················································································································
  //  Enum generic bindings utility functions
  //····················································································································

  static func buildfromRawValue (rawValue : Int) -> PadNumbering? {
    if let v = PadNumbering (rawValue:rawValue) {
      return v
    }else{
      return nil
    }
  }

  //····················································································································

  func enumfromRawValue (rawValue : Int) -> PadNumbering {
    var result = self
    let v : PadNumbering? = PadNumbering (rawValue:rawValue) ;
    if let unwrappedV = v {
      result = unwrappedV
    }
    return result
  }

  //····················································································································
  //  EBStoredPropertyProtocol
  //····················································································································

  func ebHashValue () -> UInt32 {
    return UInt32 (self.rawValue)
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self.rawValue)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> PadNumbering {
    var result = PadNumbering.noNumbering
    if let number = object as? NSNumber, let v = PadNumbering (rawValue: number.intValue) {
      result = v
    }
    return result
  }

  //····················································································································

  static func unarchiveFromDataRange (_ inData : Data, _ inRange : NSRange) -> PadNumbering? {
    if let rawValue = inData.base62EncodedInt (range: inRange), let enumValue = PadNumbering (rawValue: rawValue) {
      return enumValue
    }else{
      return nil
    }
  }

  //····················································································································

  func appendPropertyValueTo (_ ioData : inout Data) {
    ioData.append (base62Encoded: self.rawValue)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadWriteProperty_PadNumbering = EBEnumReadWriteProperty <PadNumbering> // EBObservableMutableProperty <PadNumbering>
typealias EBStoredProperty_PadNumbering = EBEnumStoredProperty <PadNumbering>
typealias EBComputedProperty_PadNumbering = EBEnumGenericComputedProperty <PadNumbering>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
