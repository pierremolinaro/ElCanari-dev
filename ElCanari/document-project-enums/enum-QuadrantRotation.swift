//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum QuadrantRotation : Int, EnumPropertyProtocol, Hashable, CaseIterable {
  case rotation0 = 0
  case rotation90 = 1
  case rotation180 = 2
  case rotation270 = 3

  //····················································································································
  // Function degreesTitles
  //····················································································································

  static func degreesTitles () -> [String] {
    return ["0°", "90°", "180°", "270°"]
  }

  //····················································································································
  // Function directionTitles
  //····················································································································

  static func directionTitles () -> [String] {
    return ["Right", "Above", "Left", "Below"]
  }

  //····················································································································
  //  Enum generic bindings utility functions
  //····················································································································

  static func buildfromRawValue (rawValue : Int) -> QuadrantRotation? {
    if let v = QuadrantRotation (rawValue:rawValue) {
      return v
    }else{
      return nil
    }
  }

  //····················································································································

  func enumfromRawValue (rawValue : Int) -> QuadrantRotation {
    var result = self
    let v : QuadrantRotation? = QuadrantRotation (rawValue:rawValue) ;
    if let unwrappedV = v {
      result = unwrappedV
    }
    return result
  }

  //····················································································································
  //  EBStoredPropertyProtocol
  //····················································································································

  func ebHashValue () -> UInt32 {
    return UInt32 (self.rawValue)
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self.rawValue)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> QuadrantRotation {
    var result = QuadrantRotation.rotation0
    if let number = object as? NSNumber, let v = QuadrantRotation (rawValue: number.intValue) {
      result = v
    }
    return result
  }

  //····················································································································

  static func unarchiveFromDataRange (_ inData : Data, _ inRange : NSRange) -> QuadrantRotation? {
    if let rawValue = inData.base62EncodedInt (range: inRange), let enumValue = QuadrantRotation (rawValue: rawValue) {
      return enumValue
    }else{
      return nil
    }
  }

  //····················································································································

  func appendPropertyValueTo (_ ioData : inout Data) {
    ioData.append (base62Encoded: self.rawValue)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_QuadrantRotation = EBReadOnlyEnumProperty <QuadrantRotation>
typealias EBTransientProperty_QuadrantRotation = EBTransientEnumProperty <QuadrantRotation>
typealias EBReadWriteProperty_QuadrantRotation = EBReadWriteEnumProperty <QuadrantRotation>
typealias EBStoredProperty_QuadrantRotation = EBStoredEnumProperty <QuadrantRotation>
typealias EBComputedProperty_QuadrantRotation = EBGenericEnumProperty <QuadrantRotation>
typealias EBPreferencesProperty_QuadrantRotation = EBStoredEnumProperty <QuadrantRotation>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
