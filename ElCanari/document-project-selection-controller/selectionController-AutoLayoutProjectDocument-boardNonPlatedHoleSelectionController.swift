//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    Derived selection controller AutoLayoutProjectDocument boardNonPlatedHoleSelectionController
//--------------------------------------------------------------------------------------------------

@MainActor final class SelectionController_AutoLayoutProjectDocument_boardNonPlatedHoleSelectionController {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init () {
    noteObjectAllocation (self)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  deinit {
    noteObjectDeallocation (self)
  }

  //································································································
  //   Selection observable property: mXUnit
  //································································································

  final let mXUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mY
  //································································································

  final let mY_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mYUnit
  //································································································

  final let mYUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mWidth
  //································································································

  final let mWidth_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mWidthUnit
  //································································································

  final let mWidthUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mHeight
  //································································································

  final let mHeight_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mHeightUnit
  //································································································

  final let mHeightUnit_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mRotation
  //································································································

  final let mRotation_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mShowTextRotationKnobInBoard
  //································································································

  final let mShowTextRotationKnobInBoard_property = EBComputedProperty_Bool ()

  //································································································
  //   Selection observable property: mX
  //································································································

  final let mX_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: objectDisplay
  //································································································

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //································································································
  //   Selection observable property: selectionDisplay
  //································································································

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //································································································
  //   Selection observable property: signatureForERCChecking
  //································································································

  final let signatureForERCChecking_property = EBTransientProperty <UInt32> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Selected array (not observable)
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var selectedArray : EBReferenceArray <NonPlatedHole> { return self.selectedArray_property.propval }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   BIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

   let selectedArray_property = TransientArrayOfSuperOf_NonPlatedHole <BoardObject> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_selection (model : ReadOnlyArrayOf_BoardObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mXUnit ()
    self.bind_property_mY ()
    self.bind_property_mYUnit ()
    self.bind_property_mWidth ()
    self.bind_property_mWidthUnit ()
    self.bind_property_mHeight ()
    self.bind_property_mHeightUnit ()
    self.bind_property_mRotation ()
    self.bind_property_mShowTextRotationKnobInBoard ()
    self.bind_property_mX ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_signatureForERCChecking ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   UNBIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mXUnit
    self.mXUnit_property.mReadModelFunction = nil 
    self.mXUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mXUnit_StopsBeingObserved (by: self.mXUnit_property)
  //--- mY
    self.mY_property.mReadModelFunction = nil 
    self.mY_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mY_StopsBeingObserved (by: self.mY_property)
  //--- mYUnit
    self.mYUnit_property.mReadModelFunction = nil 
    self.mYUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mYUnit_StopsBeingObserved (by: self.mYUnit_property)
  //--- mWidth
    self.mWidth_property.mReadModelFunction = nil 
    self.mWidth_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mWidth_StopsBeingObserved (by: self.mWidth_property)
  //--- mWidthUnit
    self.mWidthUnit_property.mReadModelFunction = nil 
    self.mWidthUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mWidthUnit_StopsBeingObserved (by: self.mWidthUnit_property)
  //--- mHeight
    self.mHeight_property.mReadModelFunction = nil 
    self.mHeight_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mHeight_StopsBeingObserved (by: self.mHeight_property)
  //--- mHeightUnit
    self.mHeightUnit_property.mReadModelFunction = nil 
    self.mHeightUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mHeightUnit_StopsBeingObserved (by: self.mHeightUnit_property)
  //--- mRotation
    self.mRotation_property.mReadModelFunction = nil 
    self.mRotation_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mRotation_StopsBeingObserved (by: self.mRotation_property)
  //--- mShowTextRotationKnobInBoard
    self.mShowTextRotationKnobInBoard_property.mReadModelFunction = nil 
    self.mShowTextRotationKnobInBoard_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mShowTextRotationKnobInBoard_StopsBeingObserved (by: self.mShowTextRotationKnobInBoard_property)
  //--- mX
    self.mX_property.mReadModelFunction = nil 
    self.mX_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mX_StopsBeingObserved (by: self.mX_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_signatureForERCChecking_StopsBeingObserved (by: self.signatureForERCChecking_property)
  } */

  //································································································

  private final func bind_property_mXUnit () {
    self.selectedArray_property.toMany_mXUnit_StartsBeingObserved (by: self.mXUnit_property)
    self.mXUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mXUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mXUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mXUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mY () {
    self.selectedArray_property.toMany_mY_StartsBeingObserved (by: self.mY_property)
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mYUnit () {
    self.selectedArray_property.toMany_mYUnit_StartsBeingObserved (by: self.mYUnit_property)
    self.mYUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mYUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mYUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mYUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mWidth () {
    self.selectedArray_property.toMany_mWidth_StartsBeingObserved (by: self.mWidth_property)
    self.mWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mWidth_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mWidth_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mWidthUnit () {
    self.selectedArray_property.toMany_mWidthUnit_StartsBeingObserved (by: self.mWidthUnit_property)
    self.mWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mWidthUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mHeight () {
    self.selectedArray_property.toMany_mHeight_StartsBeingObserved (by: self.mHeight_property)
    self.mHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mHeight_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mHeight_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mHeightUnit () {
    self.selectedArray_property.toMany_mHeightUnit_StartsBeingObserved (by: self.mHeightUnit_property)
    self.mHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mHeightUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mHeightUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mRotation () {
    self.selectedArray_property.toMany_mRotation_StartsBeingObserved (by: self.mRotation_property)
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mRotation_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mShowTextRotationKnobInBoard () {
    self.selectedArray_property.toMany_mShowTextRotationKnobInBoard_StartsBeingObserved (by: self.mShowTextRotationKnobInBoard_property)
    self.mShowTextRotationKnobInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mShowTextRotationKnobInBoard_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mShowTextRotationKnobInBoard_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mShowTextRotationKnobInBoard_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mX () {
    self.selectedArray_property.toMany_mX_StartsBeingObserved (by: self.mX_property)
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsBeingObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsBeingObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_signatureForERCChecking () {
    self.selectedArray_property.toMany_signatureForERCChecking_StartsBeingObserved (by: self.signatureForERCChecking_property)
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <UInt32> ()
          var isMultipleSelection = false
          for object in v {
            switch object.signatureForERCChecking_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

