//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    Derived selection controller AutoLayoutProjectDocument commentInSchematicSelectionController
//--------------------------------------------------------------------------------------------------

@MainActor final class SelectionController_AutoLayoutProjectDocument_commentInSchematicSelectionController {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init () {
    noteObjectAllocation (self)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  deinit {
    noteObjectDeallocation (self)
  }

  //································································································
  //   Selection observable property: mColor
  //································································································

  final let mColor_property = EBComputedProperty_NSColor ()

  //································································································
  //   Selection observable property: mSize
  //································································································

  final let mSize_property = EBComputedProperty_Double ()

  //································································································
  //   Selection observable property: mHorizontalAlignment
  //································································································

  final let mHorizontalAlignment_property = EBComputedProperty_HorizontalAlignment ()

  //································································································
  //   Selection observable property: mVerticalAlignment
  //································································································

  final let mVerticalAlignment_property = EBComputedProperty_VerticalAlignment ()

  //································································································
  //   Selection observable property: mRotation
  //································································································

  final let mRotation_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mBold
  //································································································

  final let mBold_property = EBComputedProperty_Bool ()

  //································································································
  //   Selection observable property: mX
  //································································································

  final let mX_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mY
  //································································································

  final let mY_property = EBComputedProperty_Int ()

  //································································································
  //   Selection observable property: mComment
  //································································································

  final let mComment_property = EBComputedProperty_String ()

  //································································································
  //   Selection observable property: objectDisplay
  //································································································

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //································································································
  //   Selection observable property: selectionDisplay
  //································································································

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Selected array (not observable)
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var selectedArray : EBReferenceArray <CommentInSchematic> { return self.selectedArray_property.propval }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   BIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

   let selectedArray_property = TransientArrayOfSuperOf_CommentInSchematic <SchematicObject> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_selection (model : ReadOnlyArrayOf_SchematicObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mColor ()
    self.bind_property_mSize ()
    self.bind_property_mHorizontalAlignment ()
    self.bind_property_mVerticalAlignment ()
    self.bind_property_mRotation ()
    self.bind_property_mBold ()
    self.bind_property_mX ()
    self.bind_property_mY ()
    self.bind_property_mComment ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   UNBIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mColor
    self.mColor_property.mReadModelFunction = nil 
    self.mColor_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mColor_StopsBeingObserved (by: self.mColor_property)
  //--- mSize
    self.mSize_property.mReadModelFunction = nil 
    self.mSize_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mSize_StopsBeingObserved (by: self.mSize_property)
  //--- mHorizontalAlignment
    self.mHorizontalAlignment_property.mReadModelFunction = nil 
    self.mHorizontalAlignment_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mHorizontalAlignment_StopsBeingObserved (by: self.mHorizontalAlignment_property)
  //--- mVerticalAlignment
    self.mVerticalAlignment_property.mReadModelFunction = nil 
    self.mVerticalAlignment_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mVerticalAlignment_StopsBeingObserved (by: self.mVerticalAlignment_property)
  //--- mRotation
    self.mRotation_property.mReadModelFunction = nil 
    self.mRotation_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mRotation_StopsBeingObserved (by: self.mRotation_property)
  //--- mBold
    self.mBold_property.mReadModelFunction = nil 
    self.mBold_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mBold_StopsBeingObserved (by: self.mBold_property)
  //--- mX
    self.mX_property.mReadModelFunction = nil 
    self.mX_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mX_StopsBeingObserved (by: self.mX_property)
  //--- mY
    self.mY_property.mReadModelFunction = nil 
    self.mY_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mY_StopsBeingObserved (by: self.mY_property)
  //--- mComment
    self.mComment_property.mReadModelFunction = nil 
    self.mComment_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mComment_StopsBeingObserved (by: self.mComment_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  } */

  //································································································

  private final func bind_property_mColor () {
    self.selectedArray_property.toMany_mColor_StartsBeingObserved (by: self.mColor_property)
    self.mColor_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSColor> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mColor_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mColor_property.mWriteModelFunction = { [weak self] (inValue : NSColor) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mColor_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mSize () {
    self.selectedArray_property.toMany_mSize_StartsBeingObserved (by: self.mSize_property)
    self.mSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Double> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mSize_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mSize_property.mWriteModelFunction = { [weak self] (inValue : Double) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mSize_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mHorizontalAlignment () {
    self.selectedArray_property.toMany_mHorizontalAlignment_StartsBeingObserved (by: self.mHorizontalAlignment_property)
    self.mHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <HorizontalAlignment> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mHorizontalAlignment_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mHorizontalAlignment_property.mWriteModelFunction = { [weak self] (inValue : HorizontalAlignment) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mHorizontalAlignment_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mVerticalAlignment () {
    self.selectedArray_property.toMany_mVerticalAlignment_StartsBeingObserved (by: self.mVerticalAlignment_property)
    self.mVerticalAlignment_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <VerticalAlignment> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mVerticalAlignment_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mVerticalAlignment_property.mWriteModelFunction = { [weak self] (inValue : VerticalAlignment) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mVerticalAlignment_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mRotation () {
    self.selectedArray_property.toMany_mRotation_StartsBeingObserved (by: self.mRotation_property)
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mRotation_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mBold () {
    self.selectedArray_property.toMany_mBold_StartsBeingObserved (by: self.mBold_property)
    self.mBold_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mBold_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mBold_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mBold_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mX () {
    self.selectedArray_property.toMany_mX_StartsBeingObserved (by: self.mX_property)
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mY () {
    self.selectedArray_property.toMany_mY_StartsBeingObserved (by: self.mY_property)
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_mComment () {
    self.selectedArray_property.toMany_mComment_StartsBeingObserved (by: self.mComment_property)
    self.mComment_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mComment_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mComment_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mComment_property.setProp (inValue)
          }
        }
      }
    }
  }
  //································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsBeingObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsBeingObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

