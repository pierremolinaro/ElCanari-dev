//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    Derived selection controller AutoLayoutProjectDocument componentInBoardSelectionController
//--------------------------------------------------------------------------------------------------

@MainActor final class SelectionController_AutoLayoutProjectDocument_componentInBoardSelectionController {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init () {
    noteObjectAllocation (self)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  deinit {
    noteObjectDeallocation (self)
  }

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mSlavePadsShouldBeRouted
  //------------------------------------------------------------------------------------------------

  final let mSlavePadsShouldBeRouted_property = EBComputedProperty_Bool ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mX
  //------------------------------------------------------------------------------------------------

  final let mX_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mY
  //------------------------------------------------------------------------------------------------

  final let mY_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mRotation
  //------------------------------------------------------------------------------------------------

  final let mRotation_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mSide
  //------------------------------------------------------------------------------------------------

  final let mSide_property = EBComputedProperty_ComponentSide ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mDisplayLegend
  //------------------------------------------------------------------------------------------------

  final let mDisplayLegend_property = EBComputedProperty_Bool ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mNameIsVisibleInBoard
  //------------------------------------------------------------------------------------------------

  final let mNameIsVisibleInBoard_property = EBComputedProperty_Bool ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mXName
  //------------------------------------------------------------------------------------------------

  final let mXName_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mYName
  //------------------------------------------------------------------------------------------------

  final let mYName_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mNameFontSize
  //------------------------------------------------------------------------------------------------

  final let mNameFontSize_property = EBComputedProperty_Double ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mNameRotation
  //------------------------------------------------------------------------------------------------

  final let mNameRotation_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mValueIsVisibleInBoard
  //------------------------------------------------------------------------------------------------

  final let mValueIsVisibleInBoard_property = EBComputedProperty_Bool ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mXValue
  //------------------------------------------------------------------------------------------------

  final let mXValue_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mYValue
  //------------------------------------------------------------------------------------------------

  final let mYValue_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mValueFontSize
  //------------------------------------------------------------------------------------------------

  final let mValueFontSize_property = EBComputedProperty_Double ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mValueRotation
  //------------------------------------------------------------------------------------------------

  final let mValueRotation_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mComponentValue
  //------------------------------------------------------------------------------------------------

  final let mComponentValue_property = EBComputedProperty_String ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mNamePrefix
  //------------------------------------------------------------------------------------------------

  final let mNamePrefix_property = EBComputedProperty_String ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mNameIndex
  //------------------------------------------------------------------------------------------------

  final let mNameIndex_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mXUnit
  //------------------------------------------------------------------------------------------------

  final let mXUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mYUnit
  //------------------------------------------------------------------------------------------------

  final let mYUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mXNameUnit
  //------------------------------------------------------------------------------------------------

  final let mXNameUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mYNameUnit
  //------------------------------------------------------------------------------------------------

  final let mYNameUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mXValueUnit
  //------------------------------------------------------------------------------------------------

  final let mXValueUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mYValueUnit
  //------------------------------------------------------------------------------------------------

  final let mYValueUnit_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   ToMany proxy: mPackages
  //------------------------------------------------------------------------------------------------

  final let mPackages_property = ProxyArrayOf_DevicePackageInProject ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: deviceName
  //------------------------------------------------------------------------------------------------

  final let deviceName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: signatureForERCChecking
  //------------------------------------------------------------------------------------------------

  final let signatureForERCChecking_property = EBTransientProperty <UInt32> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: packagePadDictionary
  //------------------------------------------------------------------------------------------------

  final let packagePadDictionary_property = EBTransientProperty <PackageMasterPadDictionary> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: selectedPackageName
  //------------------------------------------------------------------------------------------------

  final let selectedPackageName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: availablePackages
  //------------------------------------------------------------------------------------------------

  final let availablePackages_property = EBTransientProperty <StringArray> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: issues
  //------------------------------------------------------------------------------------------------

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: componentIsPlacedInBoard
  //------------------------------------------------------------------------------------------------

  final let componentIsPlacedInBoard_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: componentIsPlacedInBoardString
  //------------------------------------------------------------------------------------------------

  final let componentIsPlacedInBoardString_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: strokeBezierPath
  //------------------------------------------------------------------------------------------------

  final let strokeBezierPath_property = EBTransientProperty <BezierPath> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: pinPadAssignments
  //------------------------------------------------------------------------------------------------

  final let pinPadAssignments_property = EBTransientProperty <ThreeStringArray> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: hasSlavePads
  //------------------------------------------------------------------------------------------------

  final let hasSlavePads_property = EBTransientProperty <Bool> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: placementInSchematic
  //------------------------------------------------------------------------------------------------

  final let placementInSchematic_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: deviceSymbolDictionary
  //------------------------------------------------------------------------------------------------

  final let deviceSymbolDictionary_property = EBTransientProperty <DeviceSymbolDictionary> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: componentNameFontName
  //------------------------------------------------------------------------------------------------

  final let componentNameFontName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: componentValueFontName
  //------------------------------------------------------------------------------------------------

  final let componentValueFontName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: componentPadDictionary
  //------------------------------------------------------------------------------------------------

  final let componentPadDictionary_property = EBTransientProperty <ComponentPadDescriptorDictionary> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: padNetDictionary
  //------------------------------------------------------------------------------------------------

  final let padNetDictionary_property = EBTransientProperty <PadNetDictionary> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: componentName
  //------------------------------------------------------------------------------------------------

  final let componentName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: selectionDisplay
  //------------------------------------------------------------------------------------------------

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: unplacedSymbols
  //------------------------------------------------------------------------------------------------

  final let unplacedSymbols_property = EBTransientProperty <StringTagArray> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: objectDisplay
  //------------------------------------------------------------------------------------------------

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Selected array (not observable)
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var selectedArray : EBReferenceArray <ComponentInProject> { return self.selectedArray_property.propval }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   BIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

   let selectedArray_property = TransientArrayOfSuperOf_ComponentInProject <BoardObject> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_selection (model : ReadOnlyArrayOf_BoardObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mSlavePadsShouldBeRouted ()
    self.bind_property_mX ()
    self.bind_property_mY ()
    self.bind_property_mRotation ()
    self.bind_property_mSide ()
    self.bind_property_mDisplayLegend ()
    self.bind_property_mNameIsVisibleInBoard ()
    self.bind_property_mXName ()
    self.bind_property_mYName ()
    self.bind_property_mNameFontSize ()
    self.bind_property_mNameRotation ()
    self.bind_property_mValueIsVisibleInBoard ()
    self.bind_property_mXValue ()
    self.bind_property_mYValue ()
    self.bind_property_mValueFontSize ()
    self.bind_property_mValueRotation ()
    self.bind_property_mComponentValue ()
    self.bind_property_mNamePrefix ()
    self.bind_property_mNameIndex ()
    self.bind_property_mXUnit ()
    self.bind_property_mYUnit ()
    self.bind_property_mXNameUnit ()
    self.bind_property_mYNameUnit ()
    self.bind_property_mXValueUnit ()
    self.bind_property_mYValueUnit ()
    self.bind_property_deviceName ()
    self.bind_property_signatureForERCChecking ()
    self.bind_property_packagePadDictionary ()
    self.bind_property_selectedPackageName ()
    self.bind_property_availablePackages ()
    self.bind_property_issues ()
    self.bind_property_componentIsPlacedInBoard ()
    self.bind_property_componentIsPlacedInBoardString ()
    self.bind_property_strokeBezierPath ()
    self.bind_property_pinPadAssignments ()
    self.bind_property_hasSlavePads ()
    self.bind_property_placementInSchematic ()
    self.bind_property_deviceSymbolDictionary ()
    self.bind_property_componentNameFontName ()
    self.bind_property_componentValueFontName ()
    self.bind_property_componentPadDictionary ()
    self.bind_property_padNetDictionary ()
    self.bind_property_componentName ()
    self.bind_property_selectionDisplay ()
    self.bind_property_unplacedSymbols ()
    self.bind_property_objectDisplay ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   UNBIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mSlavePadsShouldBeRouted
    self.mSlavePadsShouldBeRouted_property.mReadModelFunction = nil 
    self.mSlavePadsShouldBeRouted_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mSlavePadsShouldBeRouted_StopsBeingObserved (by: self.mSlavePadsShouldBeRouted_property)
  //--- mX
    self.mX_property.mReadModelFunction = nil 
    self.mX_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mX_StopsBeingObserved (by: self.mX_property)
  //--- mY
    self.mY_property.mReadModelFunction = nil 
    self.mY_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mY_StopsBeingObserved (by: self.mY_property)
  //--- mRotation
    self.mRotation_property.mReadModelFunction = nil 
    self.mRotation_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mRotation_StopsBeingObserved (by: self.mRotation_property)
  //--- mSide
    self.mSide_property.mReadModelFunction = nil 
    self.mSide_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mSide_StopsBeingObserved (by: self.mSide_property)
  //--- mDisplayLegend
    self.mDisplayLegend_property.mReadModelFunction = nil 
    self.mDisplayLegend_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mDisplayLegend_StopsBeingObserved (by: self.mDisplayLegend_property)
  //--- mNameIsVisibleInBoard
    self.mNameIsVisibleInBoard_property.mReadModelFunction = nil 
    self.mNameIsVisibleInBoard_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mNameIsVisibleInBoard_StopsBeingObserved (by: self.mNameIsVisibleInBoard_property)
  //--- mXName
    self.mXName_property.mReadModelFunction = nil 
    self.mXName_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mXName_StopsBeingObserved (by: self.mXName_property)
  //--- mYName
    self.mYName_property.mReadModelFunction = nil 
    self.mYName_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mYName_StopsBeingObserved (by: self.mYName_property)
  //--- mNameFontSize
    self.mNameFontSize_property.mReadModelFunction = nil 
    self.mNameFontSize_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mNameFontSize_StopsBeingObserved (by: self.mNameFontSize_property)
  //--- mNameRotation
    self.mNameRotation_property.mReadModelFunction = nil 
    self.mNameRotation_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mNameRotation_StopsBeingObserved (by: self.mNameRotation_property)
  //--- mValueIsVisibleInBoard
    self.mValueIsVisibleInBoard_property.mReadModelFunction = nil 
    self.mValueIsVisibleInBoard_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mValueIsVisibleInBoard_StopsBeingObserved (by: self.mValueIsVisibleInBoard_property)
  //--- mXValue
    self.mXValue_property.mReadModelFunction = nil 
    self.mXValue_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mXValue_StopsBeingObserved (by: self.mXValue_property)
  //--- mYValue
    self.mYValue_property.mReadModelFunction = nil 
    self.mYValue_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mYValue_StopsBeingObserved (by: self.mYValue_property)
  //--- mValueFontSize
    self.mValueFontSize_property.mReadModelFunction = nil 
    self.mValueFontSize_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mValueFontSize_StopsBeingObserved (by: self.mValueFontSize_property)
  //--- mValueRotation
    self.mValueRotation_property.mReadModelFunction = nil 
    self.mValueRotation_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mValueRotation_StopsBeingObserved (by: self.mValueRotation_property)
  //--- mComponentValue
    self.mComponentValue_property.mReadModelFunction = nil 
    self.mComponentValue_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mComponentValue_StopsBeingObserved (by: self.mComponentValue_property)
  //--- mNamePrefix
    self.mNamePrefix_property.mReadModelFunction = nil 
    self.mNamePrefix_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mNamePrefix_StopsBeingObserved (by: self.mNamePrefix_property)
  //--- mNameIndex
    self.mNameIndex_property.mReadModelFunction = nil 
    self.mNameIndex_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mNameIndex_StopsBeingObserved (by: self.mNameIndex_property)
  //--- mXUnit
    self.mXUnit_property.mReadModelFunction = nil 
    self.mXUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mXUnit_StopsBeingObserved (by: self.mXUnit_property)
  //--- mYUnit
    self.mYUnit_property.mReadModelFunction = nil 
    self.mYUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mYUnit_StopsBeingObserved (by: self.mYUnit_property)
  //--- mXNameUnit
    self.mXNameUnit_property.mReadModelFunction = nil 
    self.mXNameUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mXNameUnit_StopsBeingObserved (by: self.mXNameUnit_property)
  //--- mYNameUnit
    self.mYNameUnit_property.mReadModelFunction = nil 
    self.mYNameUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mYNameUnit_StopsBeingObserved (by: self.mYNameUnit_property)
  //--- mXValueUnit
    self.mXValueUnit_property.mReadModelFunction = nil 
    self.mXValueUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mXValueUnit_StopsBeingObserved (by: self.mXValueUnit_property)
  //--- mYValueUnit
    self.mYValueUnit_property.mReadModelFunction = nil 
    self.mYValueUnit_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mYValueUnit_StopsBeingObserved (by: self.mYValueUnit_property)
  //--- deviceName
    self.deviceName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_deviceName_StopsBeingObserved (by: self.deviceName_property)
  //--- signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_signatureForERCChecking_StopsBeingObserved (by: self.signatureForERCChecking_property)
  //--- packagePadDictionary
    self.packagePadDictionary_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_packagePadDictionary_StopsBeingObserved (by: self.packagePadDictionary_property)
  //--- selectedPackageName
    self.selectedPackageName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectedPackageName_StopsBeingObserved (by: self.selectedPackageName_property)
  //--- availablePackages
    self.availablePackages_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_availablePackages_StopsBeingObserved (by: self.availablePackages_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_issues_StopsBeingObserved (by: self.issues_property)
  //--- componentIsPlacedInBoard
    self.componentIsPlacedInBoard_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_componentIsPlacedInBoard_StopsBeingObserved (by: self.componentIsPlacedInBoard_property)
  //--- componentIsPlacedInBoardString
    self.componentIsPlacedInBoardString_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_componentIsPlacedInBoardString_StopsBeingObserved (by: self.componentIsPlacedInBoardString_property)
  //--- strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_strokeBezierPath_StopsBeingObserved (by: self.strokeBezierPath_property)
  //--- pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_pinPadAssignments_StopsBeingObserved (by: self.pinPadAssignments_property)
  //--- hasSlavePads
    self.hasSlavePads_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_hasSlavePads_StopsBeingObserved (by: self.hasSlavePads_property)
  //--- placementInSchematic
    self.placementInSchematic_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_placementInSchematic_StopsBeingObserved (by: self.placementInSchematic_property)
  //--- deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_deviceSymbolDictionary_StopsBeingObserved (by: self.deviceSymbolDictionary_property)
  //--- componentNameFontName
    self.componentNameFontName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_componentNameFontName_StopsBeingObserved (by: self.componentNameFontName_property)
  //--- componentValueFontName
    self.componentValueFontName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_componentValueFontName_StopsBeingObserved (by: self.componentValueFontName_property)
  //--- componentPadDictionary
    self.componentPadDictionary_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_componentPadDictionary_StopsBeingObserved (by: self.componentPadDictionary_property)
  //--- padNetDictionary
    self.padNetDictionary_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_padNetDictionary_StopsBeingObserved (by: self.padNetDictionary_property)
  //--- componentName
    self.componentName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_componentName_StopsBeingObserved (by: self.componentName_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_unplacedSymbols_StopsBeingObserved (by: self.unplacedSymbols_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  } */

  //------------------------------------------------------------------------------------------------

  private final func bind_property_mSlavePadsShouldBeRouted () {
    self.selectedArray_property.toMany_mSlavePadsShouldBeRouted_StartsBeingObserved (by: self.mSlavePadsShouldBeRouted_property)
    self.mSlavePadsShouldBeRouted_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mSlavePadsShouldBeRouted_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mSlavePadsShouldBeRouted_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mSlavePadsShouldBeRouted_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mX () {
    self.selectedArray_property.toMany_mX_StartsBeingObserved (by: self.mX_property)
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mY () {
    self.selectedArray_property.toMany_mY_StartsBeingObserved (by: self.mY_property)
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mRotation () {
    self.selectedArray_property.toMany_mRotation_StartsBeingObserved (by: self.mRotation_property)
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mRotation_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mSide () {
    self.selectedArray_property.toMany_mSide_StartsBeingObserved (by: self.mSide_property)
    self.mSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <ComponentSide> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mSide_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mSide_property.mWriteModelFunction = { [weak self] (inValue : ComponentSide) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mSide_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mDisplayLegend () {
    self.selectedArray_property.toMany_mDisplayLegend_StartsBeingObserved (by: self.mDisplayLegend_property)
    self.mDisplayLegend_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayLegend_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayLegend_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayLegend_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mNameIsVisibleInBoard () {
    self.selectedArray_property.toMany_mNameIsVisibleInBoard_StartsBeingObserved (by: self.mNameIsVisibleInBoard_property)
    self.mNameIsVisibleInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mNameIsVisibleInBoard_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mNameIsVisibleInBoard_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mNameIsVisibleInBoard_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mXName () {
    self.selectedArray_property.toMany_mXName_StartsBeingObserved (by: self.mXName_property)
    self.mXName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mXName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mXName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mXName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mYName () {
    self.selectedArray_property.toMany_mYName_StartsBeingObserved (by: self.mYName_property)
    self.mYName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mYName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mYName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mYName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mNameFontSize () {
    self.selectedArray_property.toMany_mNameFontSize_StartsBeingObserved (by: self.mNameFontSize_property)
    self.mNameFontSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Double> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mNameFontSize_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mNameFontSize_property.mWriteModelFunction = { [weak self] (inValue : Double) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mNameFontSize_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mNameRotation () {
    self.selectedArray_property.toMany_mNameRotation_StartsBeingObserved (by: self.mNameRotation_property)
    self.mNameRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mNameRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mNameRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mNameRotation_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mValueIsVisibleInBoard () {
    self.selectedArray_property.toMany_mValueIsVisibleInBoard_StartsBeingObserved (by: self.mValueIsVisibleInBoard_property)
    self.mValueIsVisibleInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mValueIsVisibleInBoard_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mValueIsVisibleInBoard_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mValueIsVisibleInBoard_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mXValue () {
    self.selectedArray_property.toMany_mXValue_StartsBeingObserved (by: self.mXValue_property)
    self.mXValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mXValue_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mXValue_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mXValue_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mYValue () {
    self.selectedArray_property.toMany_mYValue_StartsBeingObserved (by: self.mYValue_property)
    self.mYValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mYValue_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mYValue_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mYValue_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mValueFontSize () {
    self.selectedArray_property.toMany_mValueFontSize_StartsBeingObserved (by: self.mValueFontSize_property)
    self.mValueFontSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Double> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mValueFontSize_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mValueFontSize_property.mWriteModelFunction = { [weak self] (inValue : Double) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mValueFontSize_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mValueRotation () {
    self.selectedArray_property.toMany_mValueRotation_StartsBeingObserved (by: self.mValueRotation_property)
    self.mValueRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mValueRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mValueRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mValueRotation_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mComponentValue () {
    self.selectedArray_property.toMany_mComponentValue_StartsBeingObserved (by: self.mComponentValue_property)
    self.mComponentValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mComponentValue_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponentValue_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mComponentValue_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mNamePrefix () {
    self.selectedArray_property.toMany_mNamePrefix_StartsBeingObserved (by: self.mNamePrefix_property)
    self.mNamePrefix_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mNamePrefix_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mNamePrefix_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mNamePrefix_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mNameIndex () {
    self.selectedArray_property.toMany_mNameIndex_StartsBeingObserved (by: self.mNameIndex_property)
    self.mNameIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mNameIndex_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mNameIndex_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mNameIndex_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mXUnit () {
    self.selectedArray_property.toMany_mXUnit_StartsBeingObserved (by: self.mXUnit_property)
    self.mXUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mXUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mXUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mXUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mYUnit () {
    self.selectedArray_property.toMany_mYUnit_StartsBeingObserved (by: self.mYUnit_property)
    self.mYUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mYUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mYUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mYUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mXNameUnit () {
    self.selectedArray_property.toMany_mXNameUnit_StartsBeingObserved (by: self.mXNameUnit_property)
    self.mXNameUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mXNameUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mXNameUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mXNameUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mYNameUnit () {
    self.selectedArray_property.toMany_mYNameUnit_StartsBeingObserved (by: self.mYNameUnit_property)
    self.mYNameUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mYNameUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mYNameUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mYNameUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mXValueUnit () {
    self.selectedArray_property.toMany_mXValueUnit_StartsBeingObserved (by: self.mXValueUnit_property)
    self.mXValueUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mXValueUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mXValueUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mXValueUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mYValueUnit () {
    self.selectedArray_property.toMany_mYValueUnit_StartsBeingObserved (by: self.mYValueUnit_property)
    self.mYValueUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mYValueUnit_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mYValueUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mYValueUnit_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_deviceName () {
    self.selectedArray_property.toMany_deviceName_StartsBeingObserved (by: self.deviceName_property)
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.deviceName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_signatureForERCChecking () {
    self.selectedArray_property.toMany_signatureForERCChecking_StartsBeingObserved (by: self.signatureForERCChecking_property)
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <UInt32> ()
          var isMultipleSelection = false
          for object in v {
            switch object.signatureForERCChecking_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_packagePadDictionary () {
    self.selectedArray_property.toMany_packagePadDictionary_StartsBeingObserved (by: self.packagePadDictionary_property)
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <PackageMasterPadDictionary> ()
          var isMultipleSelection = false
          for object in v {
            switch object.packagePadDictionary_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_selectedPackageName () {
    self.selectedArray_property.toMany_selectedPackageName_StartsBeingObserved (by: self.selectedPackageName_property)
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectedPackageName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_availablePackages () {
    self.selectedArray_property.toMany_availablePackages_StartsBeingObserved (by: self.availablePackages_property)
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <StringArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.availablePackages_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_issues () {
    self.selectedArray_property.toMany_issues_StartsBeingObserved (by: self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_componentIsPlacedInBoard () {
    self.selectedArray_property.toMany_componentIsPlacedInBoard_StartsBeingObserved (by: self.componentIsPlacedInBoard_property)
    self.componentIsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentIsPlacedInBoard_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_componentIsPlacedInBoardString () {
    self.selectedArray_property.toMany_componentIsPlacedInBoardString_StartsBeingObserved (by: self.componentIsPlacedInBoardString_property)
    self.componentIsPlacedInBoardString_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentIsPlacedInBoardString_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_strokeBezierPath () {
    self.selectedArray_property.toMany_strokeBezierPath_StartsBeingObserved (by: self.strokeBezierPath_property)
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <BezierPath> ()
          var isMultipleSelection = false
          for object in v {
            switch object.strokeBezierPath_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_pinPadAssignments () {
    self.selectedArray_property.toMany_pinPadAssignments_StartsBeingObserved (by: self.pinPadAssignments_property)
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <ThreeStringArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pinPadAssignments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_hasSlavePads () {
    self.selectedArray_property.toMany_hasSlavePads_StartsBeingObserved (by: self.hasSlavePads_property)
    self.hasSlavePads_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.hasSlavePads_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_placementInSchematic () {
    self.selectedArray_property.toMany_placementInSchematic_StartsBeingObserved (by: self.placementInSchematic_property)
    self.placementInSchematic_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.placementInSchematic_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_deviceSymbolDictionary () {
    self.selectedArray_property.toMany_deviceSymbolDictionary_StartsBeingObserved (by: self.deviceSymbolDictionary_property)
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <DeviceSymbolDictionary> ()
          var isMultipleSelection = false
          for object in v {
            switch object.deviceSymbolDictionary_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_componentNameFontName () {
    self.selectedArray_property.toMany_componentNameFontName_StartsBeingObserved (by: self.componentNameFontName_property)
    self.componentNameFontName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentNameFontName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_componentValueFontName () {
    self.selectedArray_property.toMany_componentValueFontName_StartsBeingObserved (by: self.componentValueFontName_property)
    self.componentValueFontName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentValueFontName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_componentPadDictionary () {
    self.selectedArray_property.toMany_componentPadDictionary_StartsBeingObserved (by: self.componentPadDictionary_property)
    self.componentPadDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <ComponentPadDescriptorDictionary> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentPadDictionary_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_padNetDictionary () {
    self.selectedArray_property.toMany_padNetDictionary_StartsBeingObserved (by: self.padNetDictionary_property)
    self.padNetDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <PadNetDictionary> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNetDictionary_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_componentName () {
    self.selectedArray_property.toMany_componentName_StartsBeingObserved (by: self.componentName_property)
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsBeingObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_unplacedSymbols () {
    self.selectedArray_property.toMany_unplacedSymbols_StartsBeingObserved (by: self.unplacedSymbols_property)
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <StringTagArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.unplacedSymbols_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsBeingObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

