//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    Derived selection controller AutoLayoutProjectDocument componentSymbolSelectionController
//--------------------------------------------------------------------------------------------------

@MainActor final class SelectionController_AutoLayoutProjectDocument_componentSymbolSelectionController {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init () {
    noteObjectAllocation (self)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  deinit {
    noteObjectDeallocation (self)
  }

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mCenterX
  //------------------------------------------------------------------------------------------------

  final let mCenterX_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mCenterY
  //------------------------------------------------------------------------------------------------

  final let mCenterY_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mRotation
  //------------------------------------------------------------------------------------------------

  final let mRotation_property = EBComputedProperty_QuadrantRotation ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mMirror
  //------------------------------------------------------------------------------------------------

  final let mMirror_property = EBComputedProperty_Bool ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mSymbolInstanceName
  //------------------------------------------------------------------------------------------------

  final let mSymbolInstanceName_property = EBComputedProperty_String ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mSymbolTypeName
  //------------------------------------------------------------------------------------------------

  final let mSymbolTypeName_property = EBComputedProperty_String ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mDisplayComponentNameOffsetX
  //------------------------------------------------------------------------------------------------

  final let mDisplayComponentNameOffsetX_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mDisplayComponentNameOffsetY
  //------------------------------------------------------------------------------------------------

  final let mDisplayComponentNameOffsetY_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mDisplayComponentValue
  //------------------------------------------------------------------------------------------------

  final let mDisplayComponentValue_property = EBComputedProperty_Bool ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mDisplayComponentValueOffsetX
  //------------------------------------------------------------------------------------------------

  final let mDisplayComponentValueOffsetX_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: mDisplayComponentValueOffsetY
  //------------------------------------------------------------------------------------------------

  final let mDisplayComponentValueOffsetY_property = EBComputedProperty_Int ()

  //------------------------------------------------------------------------------------------------
  //   Atomic proxy property: componentValueProxy
  //------------------------------------------------------------------------------------------------

  final let componentValueProxy_property = EBComputedProperty_String ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: componentName
  //------------------------------------------------------------------------------------------------

  final let componentName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: deviceName
  //------------------------------------------------------------------------------------------------

  final let deviceName_property = EBTransientProperty <String> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: symbolInfo
  //------------------------------------------------------------------------------------------------

  final let symbolInfo_property = EBTransientProperty <ComponentSymbolInfo> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: pinPadAssignments
  //------------------------------------------------------------------------------------------------

  final let pinPadAssignments_property = EBTransientProperty <ThreeStringArray> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: objectDisplay
  //------------------------------------------------------------------------------------------------

  final let objectDisplay_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: selectionDisplay
  //------------------------------------------------------------------------------------------------

  final let selectionDisplay_property = EBTransientProperty <EBShape> ()

  //------------------------------------------------------------------------------------------------
  //   Selection observable property: symbolInSchematic
  //------------------------------------------------------------------------------------------------

  final let symbolInSchematic_property = EBTransientProperty <Bool> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Selected array (not observable)
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var selectedArray : EBReferenceArray <ComponentSymbolInProject> { return self.selectedArray_property.propval }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   BIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

   let selectedArray_property = TransientArrayOfSuperOf_ComponentSymbolInProject <SchematicObject> ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_selection (model : ReadOnlyArrayOf_SchematicObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mCenterX ()
    self.bind_property_mCenterY ()
    self.bind_property_mRotation ()
    self.bind_property_mMirror ()
    self.bind_property_mSymbolInstanceName ()
    self.bind_property_mSymbolTypeName ()
    self.bind_property_mDisplayComponentNameOffsetX ()
    self.bind_property_mDisplayComponentNameOffsetY ()
    self.bind_property_mDisplayComponentValue ()
    self.bind_property_mDisplayComponentValueOffsetX ()
    self.bind_property_mDisplayComponentValueOffsetY ()
    self.bind_property_componentValueProxy ()
    self.bind_property_componentName ()
    self.bind_property_deviceName ()
    self.bind_property_symbolInfo ()
    self.bind_property_pinPadAssignments ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_symbolInSchematic ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   UNBIND SELECTION
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mCenterX
    self.mCenterX_property.mReadModelFunction = nil 
    self.mCenterX_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mCenterX_StopsBeingObserved (by: self.mCenterX_property)
  //--- mCenterY
    self.mCenterY_property.mReadModelFunction = nil 
    self.mCenterY_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mCenterY_StopsBeingObserved (by: self.mCenterY_property)
  //--- mRotation
    self.mRotation_property.mReadModelFunction = nil 
    self.mRotation_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mRotation_StopsBeingObserved (by: self.mRotation_property)
  //--- mMirror
    self.mMirror_property.mReadModelFunction = nil 
    self.mMirror_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mMirror_StopsBeingObserved (by: self.mMirror_property)
  //--- mSymbolInstanceName
    self.mSymbolInstanceName_property.mReadModelFunction = nil 
    self.mSymbolInstanceName_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mSymbolInstanceName_StopsBeingObserved (by: self.mSymbolInstanceName_property)
  //--- mSymbolTypeName
    self.mSymbolTypeName_property.mReadModelFunction = nil 
    self.mSymbolTypeName_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mSymbolTypeName_StopsBeingObserved (by: self.mSymbolTypeName_property)
  //--- mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.mReadModelFunction = nil 
    self.mDisplayComponentNameOffsetX_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mDisplayComponentNameOffsetX_StopsBeingObserved (by: self.mDisplayComponentNameOffsetX_property)
  //--- mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.mReadModelFunction = nil 
    self.mDisplayComponentNameOffsetY_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mDisplayComponentNameOffsetY_StopsBeingObserved (by: self.mDisplayComponentNameOffsetY_property)
  //--- mDisplayComponentValue
    self.mDisplayComponentValue_property.mReadModelFunction = nil 
    self.mDisplayComponentValue_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mDisplayComponentValue_StopsBeingObserved (by: self.mDisplayComponentValue_property)
  //--- mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.mReadModelFunction = nil 
    self.mDisplayComponentValueOffsetX_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mDisplayComponentValueOffsetX_StopsBeingObserved (by: self.mDisplayComponentValueOffsetX_property)
  //--- mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.mReadModelFunction = nil 
    self.mDisplayComponentValueOffsetY_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_mDisplayComponentValueOffsetY_StopsBeingObserved (by: self.mDisplayComponentValueOffsetY_property)
  //--- componentName
    self.componentName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_componentName_StopsBeingObserved (by: self.componentName_property)
  //--- deviceName
    self.deviceName_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_deviceName_StopsBeingObserved (by: self.deviceName_property)
  //--- symbolInfo
    self.symbolInfo_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_symbolInfo_StopsBeingObserved (by: self.symbolInfo_property)
  //--- pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_pinPadAssignments_StopsBeingObserved (by: self.pinPadAssignments_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- symbolInSchematic
    self.symbolInSchematic_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_symbolInSchematic_StopsBeingObserved (by: self.symbolInSchematic_property)
  } */

  //------------------------------------------------------------------------------------------------

  private final func bind_property_mCenterX () {
    self.selectedArray_property.toMany_mCenterX_StartsBeingObserved (by: self.mCenterX_property)
    self.mCenterX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCenterX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCenterX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCenterX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mCenterY () {
    self.selectedArray_property.toMany_mCenterY_StartsBeingObserved (by: self.mCenterY_property)
    self.mCenterY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCenterY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCenterY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCenterY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mRotation () {
    self.selectedArray_property.toMany_mRotation_StartsBeingObserved (by: self.mRotation_property)
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <QuadrantRotation> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mRotation_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.mWriteModelFunction = { [weak self] (inValue : QuadrantRotation) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mRotation_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mMirror () {
    self.selectedArray_property.toMany_mMirror_StartsBeingObserved (by: self.mMirror_property)
    self.mMirror_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mMirror_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mMirror_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mMirror_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mSymbolInstanceName () {
    self.selectedArray_property.toMany_mSymbolInstanceName_StartsBeingObserved (by: self.mSymbolInstanceName_property)
    self.mSymbolInstanceName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mSymbolInstanceName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstanceName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mSymbolInstanceName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mSymbolTypeName () {
    self.selectedArray_property.toMany_mSymbolTypeName_StartsBeingObserved (by: self.mSymbolTypeName_property)
    self.mSymbolTypeName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mSymbolTypeName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolTypeName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mSymbolTypeName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mDisplayComponentNameOffsetX () {
    self.selectedArray_property.toMany_mDisplayComponentNameOffsetX_StartsBeingObserved (by: self.mDisplayComponentNameOffsetX_property)
    self.mDisplayComponentNameOffsetX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentNameOffsetX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentNameOffsetX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentNameOffsetX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mDisplayComponentNameOffsetY () {
    self.selectedArray_property.toMany_mDisplayComponentNameOffsetY_StartsBeingObserved (by: self.mDisplayComponentNameOffsetY_property)
    self.mDisplayComponentNameOffsetY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentNameOffsetY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentNameOffsetY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentNameOffsetY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mDisplayComponentValue () {
    self.selectedArray_property.toMany_mDisplayComponentValue_StartsBeingObserved (by: self.mDisplayComponentValue_property)
    self.mDisplayComponentValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentValue_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentValue_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentValue_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mDisplayComponentValueOffsetX () {
    self.selectedArray_property.toMany_mDisplayComponentValueOffsetX_StartsBeingObserved (by: self.mDisplayComponentValueOffsetX_property)
    self.mDisplayComponentValueOffsetX_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentValueOffsetX_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentValueOffsetX_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentValueOffsetX_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_mDisplayComponentValueOffsetY () {
    self.selectedArray_property.toMany_mDisplayComponentValueOffsetY_StartsBeingObserved (by: self.mDisplayComponentValueOffsetY_property)
    self.mDisplayComponentValueOffsetY_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDisplayComponentValueOffsetY_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDisplayComponentValueOffsetY_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDisplayComponentValueOffsetY_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_componentValueProxy () {
    self.selectedArray_property.toMany_componentValueProxy_StartsBeingObserved (by: self.componentValueProxy_property)
    self.componentValueProxy_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentValueProxy_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.componentValueProxy_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.componentValueProxy_property.setProp (inValue)
          }
        }
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_componentName () {
    self.selectedArray_property.toMany_componentName_StartsBeingObserved (by: self.componentName_property)
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_deviceName () {
    self.selectedArray_property.toMany_deviceName_StartsBeingObserved (by: self.deviceName_property)
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.deviceName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_symbolInfo () {
    self.selectedArray_property.toMany_symbolInfo_StartsBeingObserved (by: self.symbolInfo_property)
    self.symbolInfo_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <ComponentSymbolInfo> ()
          var isMultipleSelection = false
          for object in v {
            switch object.symbolInfo_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_pinPadAssignments () {
    self.selectedArray_property.toMany_pinPadAssignments_StartsBeingObserved (by: self.pinPadAssignments_property)
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <ThreeStringArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pinPadAssignments_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsBeingObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsBeingObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //------------------------------------------------------------------------------------------------

  private final func bind_property_symbolInSchematic () {
    self.selectedArray_property.toMany_symbolInSchematic_StartsBeingObserved (by: self.symbolInSchematic_property)
    self.symbolInSchematic_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.symbolInSchematic_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

