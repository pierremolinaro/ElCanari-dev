//--------------------------------------------------------------------------------------------------
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

//--- START OF USER ZONE 1

@MainActor private func computeRasnet (_ inPointArray : [CanariPoint], _ ioBezierPath : inout BezierPath) {
  if inPointArray.count >= 2 {
    var points = inPointArray
  //------------------------------- Find the two nearest points
    var firstPointIndex = 0
    var secondPointIndex = 1
    var d = CanariPoint.squareOfCanariDistance (points [0], points [1])
    for j in 0 ..< points.count {
      for k in j+1 ..< points.count {
       let dd = CanariPoint.squareOfCanariDistance (points [j], points [k])
        if dd < d {
          d = dd
          firstPointIndex = j
          secondPointIndex = k
        }
      }
    }
  //------------------------------- Enter first segment
    ioBezierPath.move (to: points [firstPointIndex].cocoaPoint)
    ioBezierPath.line (to: points [secondPointIndex].cocoaPoint)
  //------------------------------- Transfer handled points in dedicaced array
    var handledPoints = [points [firstPointIndex], points [secondPointIndex]]
    points.remove (at: secondPointIndex) // SecondPoint first, its index is > than first point index
    points.remove (at: firstPointIndex)
  //------------------------------- Loop on remaining points
    while points.count > 0 {
      firstPointIndex = 0
      secondPointIndex = 0
      d = CanariPoint.squareOfCanariDistance (handledPoints [0], points [0])
      for i in 0 ..< handledPoints.count {
        let p1 = handledPoints [i]
        for j in 0 ..< points.count {
          let p2 = points [j]
          let dd = CanariPoint.squareOfCanariDistance (p1, p2)
          if dd < d {
            d = dd
            firstPointIndex = i
            secondPointIndex = j
          }
        }
      }
    //--- Enter segment
      ioBezierPath.move (to: handledPoints [firstPointIndex].cocoaPoint)
      ioBezierPath.line (to: points [secondPointIndex].cocoaPoint)
    //--- Transfer found point in handled point array
      handledPoints.append (points [secondPointIndex])
      points.remove (at: secondPointIndex)
    }
  }
}

//--- END OF USER ZONE 1

//--------------------------------------------------------------------------------------------------

@MainActor func transient_AutoLayoutProjectDocument_rastnetShape (
       _ root_mRastnetDisplay : RastnetDisplay,                   
       _ root_mRastnetDisplayedNetName : String,                  
       _ root_mRastnetDisplayedComponentName : String,            
       _ root_mBoardObjects_netNameAndPadLocation : [any BoardObject_netNameAndPadLocation],
       _ prefs_rastnetColorForBoard : NSColor,                    
       _ self_boardObjectsController_selectedArray_all_componentName : [any BoardObject_componentName]
) -> EBShape {
//--- START OF USER ZONE 2
      switch root_mRastnetDisplay {
      case .hidden :
        return EBShape ()
      case .allNets :
      //--- Build net dictionary
        var dictionary = [String : [CanariPoint]] ()
        for optionalArray in root_mBoardObjects_netNameAndPadLocation {
          if let array = optionalArray.netNameAndPadLocation {
            for p in array {
              let netName = p.netName
              let location = p.location
              dictionary [netName] = dictionary [netName, default: []] + [location]
            }
          }
        }
        var bp = BezierPath ()
        bp.lineWidth = 0.5
        bp.lineJoinStyle = .round
        bp.lineCapStyle = .round
        for (_, locationArray) in dictionary {
          computeRasnet (locationArray, &bp)
        }
        return EBShape (stroke: [bp], prefs_rastnetColorForBoard)
      case .oneNet :
        var locationArray = [CanariPoint] ()
        for optionalArray in root_mBoardObjects_netNameAndPadLocation {
          if let array = optionalArray.netNameAndPadLocation {
            for p in array {
              if root_mRastnetDisplayedNetName == p.netName {
                locationArray.append (p.location)
              }
            }
          }
        }
        var bp = BezierPath ()
        bp.lineWidth = 0.5
        bp.lineJoinStyle = .round
        bp.lineCapStyle = .round
        computeRasnet (locationArray, &bp)
        return EBShape (stroke: [bp], prefs_rastnetColorForBoard)
      case .selectedComponents :
      //--- Build selected component name set
        var selectedComponentNameSet = Set <String> ()
        for object in self_boardObjectsController_selectedArray_all_componentName {
          if let componentName = object.componentName {
            selectedComponentNameSet.insert (componentName)
          }
        }
      //--- Build net set
         var netNameSet = Set <String> ()
         for optionalArray in root_mBoardObjects_netNameAndPadLocation {
          if let array = optionalArray.netNameAndPadLocation {
            for p in array {
              if selectedComponentNameSet.contains (p.componentName) {
                netNameSet.insert (p.netName)
              }
            }
          }
        }
     //--- Build net dictionary
        var dictionary = [String : [CanariPoint]] ()
        for optionalArray in root_mBoardObjects_netNameAndPadLocation {
          if let array = optionalArray.netNameAndPadLocation {
            for p in array {
              let netName = p.netName
              if netNameSet.contains (netName) {
                let location = p.location
                dictionary [netName] = dictionary [netName, default: []] + [location]
              }
            }
          }
        }
        var bp = BezierPath ()
        bp.lineWidth = 0.5
        bp.lineJoinStyle = .round
        bp.lineCapStyle = .round
        for (_, locationArray) in dictionary {
          computeRasnet (locationArray, &bp)
        }
        return EBShape (stroke: [bp], prefs_rastnetColorForBoard)
      case .componentNets :
      //--- Build net set
         var netNameSet = Set <String> ()
         for optionalArray in root_mBoardObjects_netNameAndPadLocation {
          if let array = optionalArray.netNameAndPadLocation {
            for p in array {
              if p.componentName == root_mRastnetDisplayedComponentName {
                netNameSet.insert (p.netName)
              }
            }
          }
        }
     //--- Build net dictionary
        var dictionary = [String : [CanariPoint]] ()
        for optionalArray in root_mBoardObjects_netNameAndPadLocation {
          if let array = optionalArray.netNameAndPadLocation {
            for p in array {
              let netName = p.netName
              if netNameSet.contains (netName) {
                let location = p.location
                dictionary [netName] = dictionary [netName, default: []] + [location]
              }
            }
          }
        }
        var bp = BezierPath ()
        bp.lineWidth = 0.5
        bp.lineJoinStyle = .round
        bp.lineCapStyle = .round
        for (_, locationArray) in dictionary {
          computeRasnet (locationArray, &bp)
        }
        return EBShape (stroke: [bp], prefs_rastnetColorForBoard)
      }
//--- END OF USER ZONE 2
}

//--------------------------------------------------------------------------------------------------
