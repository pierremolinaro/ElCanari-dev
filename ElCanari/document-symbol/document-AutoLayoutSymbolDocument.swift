//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

@objc(AutoLayoutSymbolDocument) class AutoLayoutSymbolDocument : EBAutoLayoutManagedDocument {
  
  //································································································
  //   Array controller: mSymbolObjectsController
  //································································································

  final var mSymbolObjectsController = Controller_AutoLayoutSymbolDocument_mSymbolObjectsController ()

  //································································································
  //   Selection controller: mSymbolTextSelectionController
  //································································································

  final var mSymbolTextSelectionController = SelectionController_AutoLayoutSymbolDocument_mSymbolTextSelectionController ()

  //································································································
  //   Selection controller: mSymbolPinSelectionController
  //································································································

  final var mSymbolPinSelectionController = SelectionController_AutoLayoutSymbolDocument_mSymbolPinSelectionController ()

  //································································································
  //   Transient property: documentFileName
  //································································································

  final let documentFileName_property = EBTransientProperty <String> ()

  //································································································

  final var documentFileName : String? {
    return self.documentFileName_property.optionalValue
  }

  //································································································
  //   Transient property: addSegmentButtonImage
  //································································································

  final let addSegmentButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addSegmentButtonImage : NSImage? {
    return self.addSegmentButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addBezierButtonImage
  //································································································

  final let addBezierButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addBezierButtonImage : NSImage? {
    return self.addBezierButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addOvalButtonImage
  //································································································

  final let addOvalButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addOvalButtonImage : NSImage? {
    return self.addOvalButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addSolidOvalButtonImage
  //································································································

  final let addSolidOvalButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addSolidOvalButtonImage : NSImage? {
    return self.addSolidOvalButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addSolidRectButtonImage
  //································································································

  final let addSolidRectButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addSolidRectButtonImage : NSImage? {
    return self.addSolidRectButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addTextButtonImage
  //································································································

  final let addTextButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addTextButtonImage : NSImage? {
    return self.addTextButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: addPinButtonImage
  //································································································

  final let addPinButtonImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var addPinButtonImage : NSImage? {
    return self.addPinButtonImage_property.optionalValue
  }

  //································································································
  //   Transient property: symbolIssues
  //································································································

  final let symbolIssues_property = EBTransientProperty <CanariIssueArray> ()

  //································································································

  final var symbolIssues : CanariIssueArray? {
    return self.symbolIssues_property.optionalValue
  }

  //································································································
  //   Transient property: statusMessage
  //································································································

  final let statusMessage_property = EBTransientProperty <String> ()

  //································································································

  final var statusMessage : String? {
    return self.statusMessage_property.optionalValue
  }

  //································································································
  //   Transient property: statusErrorCount
  //································································································

  final let statusErrorCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusErrorCount : Int? {
    return self.statusErrorCount_property.optionalValue
  }

  //································································································
  //   Transient property: statusWarningCount
  //································································································

  final let statusWarningCount_property = EBTransientProperty <Int> ()

  //································································································

  final var statusWarningCount : Int? {
    return self.statusWarningCount_property.optionalValue
  }

  //································································································
  //   Transient property: metadataStatus
  //································································································

  final let metadataStatus_property = EBTransientProperty <MetadataStatus> ()

  //································································································

  final var metadataStatus : MetadataStatus? {
    return self.metadataStatus_property.optionalValue
  }

  //································································································
  //   Transient property: noSymbolIssue
  //································································································

  final let noSymbolIssue_property = EBTransientProperty <Bool> ()

  //································································································

  final var noSymbolIssue : Bool? {
    return self.noSymbolIssue_property.optionalValue
  }

  //································································································
  //   Transient property: segmentedControlSegmentIssueImage
  //································································································

  final let segmentedControlSegmentIssueImage_property = EBTransientProperty <NSImage> ()

  //································································································

  final var segmentedControlSegmentIssueImage : NSImage? {
    return self.segmentedControlSegmentIssueImage_property.optionalValue
  }

  //································································································
  //   Transient property: segmentedControlSegmentIssueString
  //································································································

  final let segmentedControlSegmentIssueString_property = EBTransientProperty <String> ()

  //································································································

  final var segmentedControlSegmentIssueString : String? {
    return self.segmentedControlSegmentIssueString_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak final var mSymbolGraphicView : AutoLayoutGraphicView? = nil
  weak final var mSymbolInspectorSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil
  weak final var mSymbolIssueTableView : AutoLayoutCanariIssueTableView? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Outlets
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Multiple bindings controllers
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    displayName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootEntityClassName
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override final func rootEntityClassName () -> String {
    return "SymbolRoot"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    rootObject
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var rootObject : SymbolRoot { return self.mRootObject as! SymbolRoot }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW PageMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func PageMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DocumentMainView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DocumentMainView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let pageMasterView = self.PageMasterView ()
    let symbolPage = self.SymbolPage ()
    let infosPage = self.InfosPage ()
    let view_0 = AutoLayoutToolBar ()
      .add (title: "Page", item: { () -> NSView in let item = AutoLayoutSegmentedControlWithPages (documentView: pageMasterView, equalWidth: false, size: .regular)
  .addPage (title: "Symbol", tooltip: "Symbol Editor", pageView: symbolPage)
  .addPage (title: "Infos", tooltip: "Symbol Informations", pageView: infosPage)
  .bind_selectedPage (self.rootObject.selectedPageIndex_property)
 ; return item } ())
      .add (title: "Signature", item: { () -> NSView in let item = AutoLayoutSignatureField (size: .regular)
  .bind_signature (self.signatureObserver_property)
 ; return item } ())
      .add (title: "Version", item: { () -> NSView in let item = AutoLayoutVersionField (size: .regular)
  .bind_version (self.versionObserver_property)
  .bind_versionShouldChange (self.versionShouldChangeObserver_property)
 ; return item } ())
      .addFlexibleSpace ()
      .add (title: "Status", item: { () -> NSView in let item = AutoLayoutStatusBadgeView ()
  .bind_tooltip (self.statusMessage_property)
  .bind_errorCount (self.statusErrorCount_property)
  .bind_warningCount (self.statusWarningCount_property)
 ; return item } ())
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    _ = vStackView.appendView (view_1)
    let view_2 = pageMasterView
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolPageInspectorMasterView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolPageInspectorMasterView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolPage () -> AutoLayoutHorizontalStackView {
    let hStackView = AutoLayoutHorizontalStackView ()
    let symbolPageInspectorMasterView = self.SymbolPageInspectorMasterView ()
    let selectedObjectsInspectorView = self.SelectedObjectsInspectorView ()
    let gridZoomInspectorView = self.GridZoomInspectorView ()
    let displayInspectorView = self.DisplayInspectorView ()
    let issuesInspectorView = self.IssuesInspectorView ()
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .set (topMargin: .regular)
        .set (spacing: .large)
      do{
        let view_0_0_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_0_0 = AutoLayoutDragSourceButton (tooltip: "Add Segment")
            .bind_image (self.addSegmentButtonImage_property)
          self.configure_addSymbolSegment (view_0_0_0_0) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_0)
          let view_0_0_0_1 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_1)
          let view_0_0_0_2 = AutoLayoutDragSourceButton (tooltip: "Add Bezier")
            .bind_image (self.addBezierButtonImage_property)
          self.configure_addSymbolBezier (view_0_0_0_2) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_2)
          let view_0_0_0_3 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_3)
          let view_0_0_0_4 = AutoLayoutDragSourceButton (tooltip: "Add Solid Oval")
            .bind_image (self.addSolidOvalButtonImage_property)
          self.configure_addSymbolSolidOval (view_0_0_0_4) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_4)
          let view_0_0_0_5 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_5)
          let view_0_0_0_6 = AutoLayoutDragSourceButton (tooltip: "Add Oval")
            .bind_image (self.addOvalButtonImage_property)
          self.configure_addSymbolOval (view_0_0_0_6) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_6)
          let view_0_0_0_7 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_7)
          let view_0_0_0_8 = AutoLayoutDragSourceButton (tooltip: "Add Solid Rect")
            .bind_image (self.addSolidRectButtonImage_property)
          self.configure_addSymbolSolidRect (view_0_0_0_8) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_8)
          let view_0_0_0_9 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_9)
          let view_0_0_0_10 = AutoLayoutDragSourceButton (tooltip: "Add Text")
            .bind_image (self.addTextButtonImage_property)
          self.configure_addSymbolText (view_0_0_0_10) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_10)
          let view_0_0_0_11 = AutoLayoutFlexibleSpace ()
          _ = view_0_0_0.appendView (view_0_0_0_11)
          let view_0_0_0_12 = AutoLayoutDragSourceButton (tooltip: "Add Pin")
            .bind_image (self.addPinButtonImage_property)
          self.configure_addSymbolPin (view_0_0_0_12) // Configurator
          _ = view_0_0_0.appendView (view_0_0_0_12)
        }
        _ = view_0_0.appendView (view_0_0_0)
      }
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
      do{
        let view_0_2_0 = AutoLayoutSegmentedControlWithPages (documentView: symbolPageInspectorMasterView, equalWidth: true, size: .small)
          .expandableWidth ()
          .addPage (title: "🛠", tooltip: "Selected Object Inspector", pageView: selectedObjectsInspectorView)
          .addPage (title: "🔍", tooltip: "Grid / Zoom Inspector", pageView: gridZoomInspectorView)
          .addPage (title: "🔍P", tooltip: "Display Inspector (values stored in Application Preferences)", pageView: displayInspectorView)
          .addPage (title: "", tooltip: "Issue Inspector", pageView: issuesInspectorView)
          .bind_selectedPage (self.rootObject.selectedInspector_property)
          .bind_segmentImage (self.segmentedControlSegmentIssueImage_property, segmentIndex:3)
          .bind_segmentTitle (self.segmentedControlSegmentIssueString_property, segmentIndex:3)
        self.mSymbolInspectorSegmentedControl = view_0_2_0 // Outlet
        self.configure_symbolPageSegmentedControl (view_0_2_0) // Configurator
        _ = view_0_2.appendView (view_0_2_0)
      }
      _ = view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView ()
        .set (leftMargin: .large)
        .set (rightMargin: .large)
        .set (bottomMargin: .large)
        .set (spacing: .large)
      do{
        let view_0_3_0 = symbolPageInspectorMasterView
        _ = view_0_3.appendView (view_0_3_0)
      }
      _ = view_0.appendView (view_0_3)
    }
    _ = hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    _ = hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_horizontalFlip (self.rootObject.horizontalFlip_property)
      .bind_verticalFlip (self.rootObject.verticalFlip_property)
      .bind_gridStyle (self.rootObject.gridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.gridDisplay_property)
      .bind_gridLineColor (preferences_lineColorOfSymbolGrid_property)
      .bind_gridCrossColor (preferences_crossColorOfSymbolGrid_property)
      .bind_zoom (self.rootObject.zoom_property)
      .bind_backColor (preferences_symbolBackgroundColor_property)
      .bind_xPlacardUnit (self.rootObject.xPlacardUnit_property)
      .bind_yPlacardUnit (self.rootObject.yPlacardUnit_property)
      .bind_graphic_controller (self.mSymbolObjectsController)
    self.mSymbolGraphicView = view_2 // Outlet
    self.configure_symbolGraphicView (view_2) // Configurator
    _ = hStackView.appendView (view_2)
    return hStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SelectedObjectsInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SelectedObjectsInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let symbolTextInspectorView = self.SymbolTextInspectorView ()
    let symbolPinInspectorView = self.SymbolPinInspectorView ()
    let view_0 = AutoLayoutObjectInspectorView ()
      .addObjectInspector (forEntity: SymbolText.self, inspectorView: symbolTextInspectorView)
      .addObjectInspector (forEntity: SymbolPin.self, inspectorView: symbolPinInspectorView)
      .bind_graphic_controller (self.mSymbolObjectsController)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolTextInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolTextInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Text Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Pin Name", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutTextField (minWidth: 56, size: .small)
  .expandableWidth ()
  .bind_value (self.mSymbolTextSelectionController.text_property, sendContinously:true)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Alignment", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariHorizontalAlignmentSegmentedControl (size: .small)
  .expandableWidth ()
  .bind_alignment (self.mSymbolTextSelectionController.horizontalAlignment_property)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW SymbolPinInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func SymbolPinInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "Pin Inspector", bold: true, size: .small, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Value", bold: false, size: .small, alignment: .right)
  .expandableHeight ()
 ; return left } (), right: { () -> NSView in let right = AutoLayoutTextField (minWidth: 56, size: .small)
  .automaticallyAdjustHeight (maxWidth: 100)
  .bind_value (self.mSymbolPinSelectionController.name_property, sendContinously:true)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Name Alignment", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariHorizontalAlignmentSegmentedControl (size: .small)
  .expandableWidth ()
  .bind_alignment (self.mSymbolPinSelectionController.nameHorizontalAlignment_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Number Alignment", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariHorizontalAlignmentSegmentedControl (size: .small)
  .expandableWidth ()
  .bind_alignment (self.mSymbolPinSelectionController.numberHorizontalAlignment_property)
 ; return right } ())
      .add (single: { () -> NSView in let single = AutoLayoutHorizontalStackView ()
do{
  let single_0 = AutoLayoutCheckbox (title: "Pin is visible in schematics", size: .small)
    .bind_value (self.mSymbolPinSelectionController.pinNameIsDisplayedInSchematics_property)
  _ = single.appendView (single_0)
  let single_1 = AutoLayoutFlexibleSpace ()
  _ = single.appendView (single_1)
}
 ; return single } ())
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW GridZoomInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func GridZoomInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "(Stored in Document Preferences)", bold: false, size: .mini, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Grid Style", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
  .bind_selectedIndex (self.rootObject.gridStyle_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Grid Display", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutTaggedPopUpButton (size: .small)
  .add (title: "1 Step", withTag: 1)
  .add (title: "2 Steps", withTag: 2)
  .add (title: "4 Steps", withTag: 4)
  .add (title: "5 Steps", withTag: 5)
  .add (title: "8 Steps", withTag: 8)
  .add (title: "10 Steps", withTag: 10)
  .bind_selectedTag (self.rootObject.gridDisplay_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutStaticLabel (title: "25 mils", bold: true, size: .small, alignment: .left)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Horizontal", size: .small)
  .bind_value (self.rootObject.horizontalFlip_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutFlexibleSpace ()
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCheckbox (title: "Vertical", size: .small)
  .bind_value (self.rootObject.verticalFlip_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabels (left: "Placard", right: "X", bold: false, size: .small)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariUnitPopUpButton (size: .small)
  .bind_unit (self.rootObject.xPlacardUnit_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small, alignment: .right)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutCanariUnitPopUpButton (size: .small)
  .bind_unit (self.rootObject.yPlacardUnit_property)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW DisplayInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func DisplayInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutStaticLabel (title: "(Stored in Application Preferences)", bold: false, size: .mini, alignment: .center)
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutGridView2 ()
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Symbol", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_symbolColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_symbolBackgroundColor_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Cross Grid", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_crossColorOfSymbolGrid_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Line Grid", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutHorizontalStackView ()
do{
  let right_0 = AutoLayoutColorWell ()
    .set (toolTip: "Stored in Preferences")
    .bind_color (preferences_lineColorOfSymbolGrid_property)
  _ = right.appendView (right_0)
  let right_1 = AutoLayoutFlexibleSpace ()
  _ = right.appendView (right_1)
}
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Line Width", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutTaggedPopUpButton (size: .small)
  .add (title: "0.5 Point", withTag: 5)
  .add (title: "1.0 Point", withTag: 10)
  .add (title: "1.5 Point", withTag: 15)
  .add (title: "2.0 Points", withTag: 20)
  .add (title: "2.5 Points", withTag: 25)
  .bind_selectedTag (preferences_symbolDrawingWidthMultipliedByTen_property)
 ; return right } ())
      .add (left: { () -> NSView in let left = AutoLayoutStaticLabel (title: "Pin Font", bold: false, size: .small, alignment: .center)
 ; return left } (), right: { () -> NSView in let right = AutoLayoutFontButton (width: 125, size: .small)
  .bind_fontValue (preferences_pinNameFont_property)
 ; return right } ())
    _ = vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    _ = vStackView.appendView (view_2)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW IssuesInspectorView
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func IssuesInspectorView () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutLabel (bold: false, size: .small)
        .bind_title (self.statusMessage_property)
      _ = view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_2)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariIssueTableView (hasHideIssueButton: true)
      .bind_issues (self.symbolIssues_property)
    self.mSymbolIssueTableView = view_1 // Outlet
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    VIEW InfosPage
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func InfosPage () -> AutoLayoutVerticalStackView {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: .large)
      .set (rightMargin: .large)
      .set (bottomMargin: .large)
      .set (topMargin: .regular)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutSymbolDocument.resetVersionAction (_:))
        )
      _ = view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      _ = view_0.appendView (view_0_1)
    }
    _ = vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
      do{
        let view_1_0_0 = AutoLayoutStaticLabel (title: "Comments", bold: false, size: .regular, alignment: .center)
        _ = view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutFlexibleSpace ()
        _ = view_1_0.appendView (view_1_0_1)
      }
      _ = view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutTextView ()
        .bind_value (self.rootObject.comments_property)
      _ = view_1.appendView (view_1_1)
    }
    _ = vStackView.appendView (view_1)
    return vStackView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Build User Interface
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.DocumentMainView ()
  //--- Call outlet linkers
    self.linker_issueTableViewToGraphicView (self.mSymbolIssueTableView, self.mSymbolGraphicView)
  //--- Assign main view to window
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    configureProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func configureProperties () {
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.bind_model (self.rootObject.symbolObjects_property, self.undoManager)

  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property)

  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property)


  //--- Atomic property: addSegmentButtonImage
    self.addSegmentButtonImage_property.mReadModelFunction = {
        let s0 = preferences_symbolColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addSegmentButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.startsBeingObserved (by: self.addSegmentButtonImage_property)

  //--- Atomic property: addBezierButtonImage
    self.addBezierButtonImage_property.mReadModelFunction = {
        let s0 = preferences_symbolColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addBezierButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.startsBeingObserved (by: self.addBezierButtonImage_property)

  //--- Atomic property: addOvalButtonImage
    self.addOvalButtonImage_property.mReadModelFunction = {
        let s0 = preferences_symbolColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addOvalButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.startsBeingObserved (by: self.addOvalButtonImage_property)

  //--- Atomic property: addSolidOvalButtonImage
    self.addSolidOvalButtonImage_property.mReadModelFunction = {
        let s0 = preferences_symbolColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addSolidOvalButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.startsBeingObserved (by: self.addSolidOvalButtonImage_property)

  //--- Atomic property: addSolidRectButtonImage
    self.addSolidRectButtonImage_property.mReadModelFunction = {
        let s0 = preferences_symbolColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addSolidRectButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.startsBeingObserved (by: self.addSolidRectButtonImage_property)

  //--- Atomic property: addTextButtonImage
    self.addTextButtonImage_property.mReadModelFunction = {
        let s0 = preferences_symbolColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addTextButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.startsBeingObserved (by: self.addTextButtonImage_property)

  //--- Atomic property: addPinButtonImage
    self.addPinButtonImage_property.mReadModelFunction = {
        let s0 = preferences_symbolColor_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addPinButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.startsBeingObserved (by: self.addPinButtonImage_property)

  //--- Atomic property: symbolIssues
    self.symbolIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.rootObject.issues_property.selection
        let s1 = unwSelf.documentFileName_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_AutoLayoutSymbolDocument_symbolIssues (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.startsBeingObserved (by: self.symbolIssues_property)
    self.documentFileName_property.startsBeingObserved (by: self.symbolIssues_property)

  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_statusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolIssues_property.startsBeingObserved (by: self.statusMessage_property)

  //--- Atomic property: statusErrorCount
    self.statusErrorCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_statusErrorCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolIssues_property.startsBeingObserved (by: self.statusErrorCount_property)

  //--- Atomic property: statusWarningCount
    self.statusWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_statusWarningCount (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolIssues_property.startsBeingObserved (by: self.statusWarningCount_property)

  //--- Atomic property: metadataStatus
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_metadataStatus (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolIssues_property.startsBeingObserved (by: self.metadataStatus_property)

  //--- Atomic property: noSymbolIssue
    self.noSymbolIssue_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_noSymbolIssue (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolIssues_property.startsBeingObserved (by: self.noSymbolIssue_property)

  //--- Atomic property: segmentedControlSegmentIssueImage
    self.segmentedControlSegmentIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_segmentedControlSegmentIssueImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolIssues_property.startsBeingObserved (by: self.segmentedControlSegmentIssueImage_property)

  //--- Atomic property: segmentedControlSegmentIssueString
    self.segmentedControlSegmentIssueString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolIssues_property.selection
        switch (s0) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_segmentedControlSegmentIssueString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolIssues_property.startsBeingObserved (by: self.segmentedControlSegmentIssueString_property)

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

