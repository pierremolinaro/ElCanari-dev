//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutSymbolDocument) class AutoLayoutSymbolDocument : EBAutoLayoutManagedDocument, NSToolbarDelegate {

  //····················································································································
  //   Array controller: mSymbolObjectsController
  //····················································································································

  var mSymbolObjectsController = Controller_AutoLayoutSymbolDocument_mSymbolObjectsController ()

  //····················································································································
  //   Selection controller: mSymbolTextSelectionController
  //····················································································································

  var mSymbolTextSelectionController = SelectionController_AutoLayoutSymbolDocument_mSymbolTextSelectionController ()

  //····················································································································
  //   Selection controller: mSymbolPinSelectionController
  //····················································································································

  var mSymbolPinSelectionController = SelectionController_AutoLayoutSymbolDocument_mSymbolPinSelectionController ()

  //····················································································································
  //   Transient property: documentFileName
  //····················································································································

  final let documentFileName_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFileName : String? {
    switch self.documentFileName_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addSegmentButtonImage
  //····················································································································

  final let addSegmentButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addSegmentButtonImage : NSImage? {
    switch self.addSegmentButtonImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addBezierButtonImage
  //····················································································································

  final let addBezierButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addBezierButtonImage : NSImage? {
    switch self.addBezierButtonImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addOvalButtonImage
  //····················································································································

  final let addOvalButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addOvalButtonImage : NSImage? {
    switch self.addOvalButtonImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addSolidOvalButtonImage
  //····················································································································

  final let addSolidOvalButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addSolidOvalButtonImage : NSImage? {
    switch self.addSolidOvalButtonImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addSolidRectButtonImage
  //····················································································································

  final let addSolidRectButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addSolidRectButtonImage : NSImage? {
    switch self.addSolidRectButtonImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addTextButtonImage
  //····················································································································

  final let addTextButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addTextButtonImage : NSImage? {
    switch self.addTextButtonImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addPinButtonImage
  //····················································································································

  final let addPinButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addPinButtonImage : NSImage? {
    switch self.addPinButtonImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusImage
  //····················································································································

  final let statusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var statusImage : NSImage? {
    switch self.statusImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusMessage
  //····················································································································

  final let statusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var statusMessage : String? {
    switch self.statusMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: metadataStatus
  //····················································································································

  final let metadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  final var metadataStatus : MetadataStatus? {
    switch self.metadataStatus_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: noIssue
  //····················································································································

  final let noIssue_property = EBTransientProperty_Bool ()

  //····················································································································

  final var noIssue : Bool? {
    switch self.noIssue_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: segmentedControlSegmentIssueImage
  //····················································································································

  final let segmentedControlSegmentIssueImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var segmentedControlSegmentIssueImage : NSImage? {
    switch self.segmentedControlSegmentIssueImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: segmentedControlSegmentIssueString
  //····················································································································

  final let segmentedControlSegmentIssueString_property = EBTransientProperty_String ()

  //····················································································································

  final var segmentedControlSegmentIssueString : String? {
    switch self.segmentedControlSegmentIssueString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mSymbolGraphicView : AutoLayoutGraphicView? = nil
  weak final var mSymbolInspectorSegmentedControl : AutoLayoutSegmentedControlWithPages? = nil
  weak final var mSymbolIssueTableView : AutoLayoutCanariIssueTableView? = nil

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get { return super.displayName }
    set {
      super.displayName = newValue
      self.documentFileName_property.postEvent ()
    }
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    //--- Array controller property: mSymbolObjectsController
      self.mSymbolObjectsController.addExplorer (name: "mSymbolObjectsController", y:&y, view:view)
    //--- Selection controller property: mSymbolTextSelectionController
      self.mSymbolTextSelectionController.addExplorer (name: "mSymbolTextSelectionController", y:&y, view:view)
    //--- Selection controller property: mSymbolPinSelectionController
      self.mSymbolPinSelectionController.addExplorer (name: "mSymbolPinSelectionController", y:&y, view:view)
   //---
      super.populateExplorerWindow (&y, view:view)
    }
  #endif

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "SymbolRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : SymbolRoot { return self.mRootObject as! SymbolRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, size: .regular)
          .addPage (title: "Symbol", tooltip: "Symbol Editor", pageView: self.mSymbolPage)
          .addPage (title: "Infos", tooltip: "Symbol Informations", pageView: self.mInfosPage)
          .bind_selectedPage (self.rootObject.selectedPageIndex_property)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_1_0 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_0)
          let view_0_0_1_1 = AutoLayoutStaticLabel (title: "Page", bold: false, size: .small)
          view_0_0_1.appendView (view_0_0_1_1)
          let view_0_0_1_2 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_2)
        }
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutSignatureField (size: .regular)
          .bind_signature (self.signatureObserver_property)
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "Signature", bold: false, size: .small)
          .set (alignment: .center)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_1)
      }
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutVersionField (size: .regular)
          .bind_version (self.versionObserver_property)
          .bind_versionShouldChange (self.versionShouldChangeObserver_property)
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Version", bold: false, size: .small)
          .set (alignment: .center)
          .expandableWidth ()
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (size: .regular)
            .bind_image (self.statusImage_property)
            .bind_tooltip (self.statusMessage_property)
          view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_2)
        }
        view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "Status", bold: false, size: .small)
          .set (alignment: .center)
        view_0_4.appendView (view_0_4_1)
      }
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSymbolPageInspectorMasterView
  //····················································································································

  let mSymbolPageInspectorMasterView : AutoLayoutAbstractStackView = AutoLayoutVerticalStackView ()

  //····················································································································
  //    VIEW mSymbolPage
  //····················································································································

  lazy var mSymbolPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: 0)
      .set (spacing: 0)
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (topMargin: 8)
        .set (spacing: 12)
      do{
        let view_0_0_0 = AutoLayoutHorizontalStackView ()
          .set (spacing: 0)
        do{
          let view_0_0_0_0 = AutoLayoutDragSourceButton (tooltip: "Add Segment")
            .bind_image (self.addSegmentButtonImage_property)
          self.configure_addSymbolSegment (view_0_0_0_0) // Configurator
          view_0_0_0.appendView (view_0_0_0_0)
          let view_0_0_0_1 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_1)
          let view_0_0_0_2 = AutoLayoutDragSourceButton (tooltip: "Add Bezier")
            .bind_image (self.addBezierButtonImage_property)
          self.configure_addSymbolBezier (view_0_0_0_2) // Configurator
          view_0_0_0.appendView (view_0_0_0_2)
          let view_0_0_0_3 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_3)
          let view_0_0_0_4 = AutoLayoutDragSourceButton (tooltip: "Add Solid Oval")
            .bind_image (self.addSolidOvalButtonImage_property)
          self.configure_addSymbolSolidOval (view_0_0_0_4) // Configurator
          view_0_0_0.appendView (view_0_0_0_4)
          let view_0_0_0_5 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_5)
          let view_0_0_0_6 = AutoLayoutDragSourceButton (tooltip: "Add Oval")
            .bind_image (self.addOvalButtonImage_property)
          self.configure_addSymbolOval (view_0_0_0_6) // Configurator
          view_0_0_0.appendView (view_0_0_0_6)
          let view_0_0_0_7 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_7)
          let view_0_0_0_8 = AutoLayoutDragSourceButton (tooltip: "Add Solid Rect")
            .bind_image (self.addSolidRectButtonImage_property)
          self.configure_addSymbolSolidRect (view_0_0_0_8) // Configurator
          view_0_0_0.appendView (view_0_0_0_8)
          let view_0_0_0_9 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_9)
          let view_0_0_0_10 = AutoLayoutDragSourceButton (tooltip: "Add Text")
            .bind_image (self.addTextButtonImage_property)
          self.configure_addSymbolText (view_0_0_0_10) // Configurator
          view_0_0_0.appendView (view_0_0_0_10)
          let view_0_0_0_11 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_11)
          let view_0_0_0_12 = AutoLayoutDragSourceButton (tooltip: "Add Pin")
            .bind_image (self.addPinButtonImage_property)
          self.configure_addSymbolPin (view_0_0_0_12) // Configurator
          view_0_0_0.appendView (view_0_0_0_12)
        }
        view_0_0.appendView (view_0_0_0)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
      do{
        let view_0_2_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mSymbolPageInspectorMasterView, equalWidth: true, size: .small)
          .expandableWidth ()
          .addPage (title: "", tooltip: "Selected Object Inspector", pageView: self.mSelectedObjectsInspectorView)
          .addPage (title: "", tooltip: "Grid / Zoom Inspector", pageView: self.mGridZoomInspectorView)
          .addPage (title: "", tooltip: "Display Inspector (values stored in Application Preferences)", pageView: self.mDisplayInspectorView)
          .addPage (title: "", tooltip: "Issue Inspector", pageView: self.mIssuesInspectorView)
          .bind_selectedPage (self.rootObject.selectedInspector_property)
          .bind_segmentImage (self.segmentedControlSegmentIssueImage_property, segmentIndex:3)
          .bind_segmentTitle (self.segmentedControlSegmentIssueString_property, segmentIndex:3)
        self.mSymbolInspectorSegmentedControl = view_0_2_0 // Outlet
        self.configure_symbolPageSegmentedControl (view_0_2_0) // Configurator
        view_0_2.appendView (view_0_2_0)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutVerticalStackView ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (bottomMargin: 20)
        .set (spacing: 12)
      do{
        let view_0_3_0 = self.mSymbolPageInspectorMasterView
        view_0_3.appendView (view_0_3_0)
      }
      view_0.appendView (view_0_3)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_horizontalFlip (self.rootObject.horizontalFlip_property)
      .bind_verticalFlip (self.rootObject.verticalFlip_property)
      .bind_gridStyle (self.rootObject.gridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.gridDisplay_property)
      .bind_gridLineColor (preferences_lineColorOfSymbolGrid_property)
      .bind_gridCrossColor (preferences_crossColorOfSymbolGrid_property)
      .bind_zoom (self.rootObject.zoom_property)
      .bind_backColor (preferences_symbolBackgroundColor_property)
      .bind_xPlacardUnit (self.rootObject.xPlacardUnit_property)
      .bind_yPlacardUnit (self.rootObject.yPlacardUnit_property)
      .bind_graphic_controller (self.mSymbolObjectsController)
    self.mSymbolGraphicView = view_2 // Outlet
    self.configure_symbolGraphicView (view_2) // Configurator
    hStackView.appendView (view_2)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mSelectedObjectsInspectorView
  //····················································································································

  lazy var mSelectedObjectsInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutObjectInspectorView ()
      .addObjectInspector (forEntity: SymbolText.self, inspectorView: self.mSymbolTextInspectorView)
      .addObjectInspector (forEntity: SymbolPin.self, inspectorView: self.mSymbolPinInspectorView)
      .bind_graphic_controller (self.mSymbolObjectsController)
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSymbolTextInspectorView
  //····················································································································

  lazy var mSymbolTextInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Text Inspector", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSymbolPinInspectorView
  //····················································································································

  lazy var mSymbolPinInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Pin Inspector", bold: true, size: .small)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_8 (), right: self.computeImplicitView_9 ())
      .add (single: self.computeImplicitView_10 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mGridZoomInspectorView
  //····················································································································

  lazy var mGridZoomInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "(Stored in Document Preferences)", bold: false, size: .mini)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .addFirstBaseLineAligned (left: self.computeImplicitView_11 (), right: self.computeImplicitView_12 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_13 (), right: self.computeImplicitView_14 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_15 (), right: self.computeImplicitView_16 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_17 (), right: self.computeImplicitView_18 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_19 (), right: self.computeImplicitView_20 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_21 (), right: self.computeImplicitView_22 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_23 (), right: self.computeImplicitView_24 ())
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDisplayInspectorView
  //····················································································································

  lazy var mDisplayInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "(Stored in Application Preferences)", bold: false, size: .mini)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .addCenterYAligned (left: self.computeImplicitView_25 (), right: self.computeImplicitView_26 ())
      .addCenterYAligned (left: self.computeImplicitView_27 (), right: self.computeImplicitView_28 ())
      .addCenterYAligned (left: self.computeImplicitView_29 (), right: self.computeImplicitView_30 ())
      .addCenterYAligned (left: self.computeImplicitView_31 (), right: self.computeImplicitView_32 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_33 (), right: self.computeImplicitView_34 ())
      .addFirstBaseLineAligned (left: self.computeImplicitView_35 (), right: self.computeImplicitView_36 ())
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mIssuesInspectorView
  //····················································································································

  lazy var mIssuesInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutLabel (bold: false, size: .small)
        .bind_title (self.statusMessage_property)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariIssueTableView (hasHideIssueButton: true)
      .bind_issues (self.issues_property)
    self.mSymbolIssueTableView = view_1 // Outlet
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mInfosPage
  //····················································································································

  lazy var mInfosPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: 20)
      .set (rightMargin: 20)
      .set (bottomMargin: 20)
      .set (topMargin: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Reset Version and Signature", size: .small)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutSymbolDocument.resetVersionAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_1)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
      do{
        let view_1_0_0 = AutoLayoutStaticLabel (title: "Comments", bold: false, size: .regular)
        view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutFlexibleSpace ()
        view_1_0.appendView (view_1_0_1)
      }
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutTextView ()
        .bind_value (self.rootObject.comments_property)
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  fileprivate final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pin Name", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  fileprivate final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutTextField (width: 56, size: .small)
      .expandableWidth ()
      .bind_value (self.mSymbolTextSelectionController.text_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  fileprivate final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Alignment", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  fileprivate final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutCanariHorizontalAlignmentSegmentedControl (size: .small)
      .expandableWidth ()
      .bind_alignment (self.mSymbolTextSelectionController.horizontalAlignment_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  fileprivate final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Value", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  fileprivate final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutTextField (width: 56, size: .small)
      .expandableWidth ()
      .bind_value (self.mSymbolPinSelectionController.name_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  fileprivate final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Name Alignment", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  fileprivate final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutCanariHorizontalAlignmentSegmentedControl (size: .small)
      .expandableWidth ()
      .bind_alignment (self.mSymbolPinSelectionController.nameHorizontalAlignment_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 8
  //····················································································································

  fileprivate final func computeImplicitView_8 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Number Alignment", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 9
  //····················································································································

  fileprivate final func computeImplicitView_9 () -> NSView {
    let view = AutoLayoutCanariHorizontalAlignmentSegmentedControl (size: .small)
      .expandableWidth ()
      .bind_alignment (self.mSymbolPinSelectionController.numberHorizontalAlignment_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 10
  //····················································································································

  fileprivate final func computeImplicitView_10 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutCheckbox (title: "Pin is visible in schematics", size: .small)
        .bind_value (self.mSymbolPinSelectionController.pinNameIsDisplayedInSchematics_property)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 11
  //····················································································································

  fileprivate final func computeImplicitView_11 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Style", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 12
  //····················································································································

  fileprivate final func computeImplicitView_12 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles (), size: .small)
      .bind_selectedIndex (self.rootObject.gridStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 13
  //····················································································································

  fileprivate final func computeImplicitView_13 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Display", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 14
  //····················································································································

  fileprivate final func computeImplicitView_14 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton ()
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "4 Steps", withTag: 4)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .bind_selectedTag (self.rootObject.gridDisplay_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 15
  //····················································································································

  fileprivate final func computeImplicitView_15 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 16
  //····················································································································

  fileprivate final func computeImplicitView_16 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "25 mils", bold: true, size: .small)
      .set (alignment: .left)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 17
  //····················································································································

  fileprivate final func computeImplicitView_17 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 18
  //····················································································································

  fileprivate final func computeImplicitView_18 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Horizontal", size: .small)
      .bind_value (self.rootObject.horizontalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 19
  //····················································································································

  fileprivate final func computeImplicitView_19 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 20
  //····················································································································

  fileprivate final func computeImplicitView_20 () -> NSView {
    let view = AutoLayoutCheckbox (title: "Vertical", size: .small)
      .bind_value (self.rootObject.verticalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 21
  //····················································································································

  fileprivate final func computeImplicitView_21 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "Placard", right: "X", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 22
  //····················································································································

  fileprivate final func computeImplicitView_22 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton (size: .small)
      .bind_unit (self.rootObject.xPlacardUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 23
  //····················································································································

  fileprivate final func computeImplicitView_23 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 24
  //····················································································································

  fileprivate final func computeImplicitView_24 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton (size: .small)
      .bind_unit (self.rootObject.yPlacardUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 25
  //····················································································································

  fileprivate final func computeImplicitView_25 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Symbol", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 26
  //····················································································································

  fileprivate final func computeImplicitView_26 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_symbolColor_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 27
  //····················································································································

  fileprivate final func computeImplicitView_27 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Background", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 28
  //····················································································································

  fileprivate final func computeImplicitView_28 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_symbolBackgroundColor_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 29
  //····················································································································

  fileprivate final func computeImplicitView_29 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Cross Grid", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 30
  //····················································································································

  fileprivate final func computeImplicitView_30 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_crossColorOfSymbolGrid_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 31
  //····················································································································

  fileprivate final func computeImplicitView_31 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Line Grid", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 32
  //····················································································································

  fileprivate final func computeImplicitView_32 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_lineColorOfSymbolGrid_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 33
  //····················································································································

  fileprivate final func computeImplicitView_33 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Line Width", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 34
  //····················································································································

  fileprivate final func computeImplicitView_34 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton ()
      .add (title: "0.5 Point", withTag: 5)
      .add (title: "1.0 Point", withTag: 10)
      .add (title: "1.5 Point", withTag: 15)
      .add (title: "2.0 Points", withTag: 20)
      .add (title: "2.5 Points", withTag: 25)
      .bind_selectedTag (preferences_symbolDrawingWidthMultipliedByTen_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 35
  //····················································································································

  fileprivate final func computeImplicitView_35 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pin Font", bold: false, size: .small)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 36
  //····················································································································

  fileprivate final func computeImplicitView_36 () -> NSView {
    let view = AutoLayoutFontButton (size: .small)
      .bind_fontValue (preferences_pinNameFont_property)
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
    //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
    self.linker_issueTableViewToGraphicView (self.mSymbolIssueTableView, self.mSymbolGraphicView)
  //--- Assign main view to window
    if let windowSize = self.windowForSheet?.frame.size {
      mainView.frame.size = windowSize
    }
    self.windowForSheet?.contentViewController = EBViewController (mainView)
//    self.windowForSheet?.contentView = mainView
  }

  //····················································································································
  //    Toolbar
  //····················································································································

  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return []
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    default :
      return nil
    }
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.bind_model (self.rootObject.symbolObjects_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addSegmentButtonImage
    self.addSegmentButtonImage_property.mReadModelFunction = {
        switch (preferences_symbolColor_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addSegmentButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addSegmentButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addBezierButtonImage
    self.addBezierButtonImage_property.mReadModelFunction = {
        switch (preferences_symbolColor_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addBezierButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addBezierButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addOvalButtonImage
    self.addOvalButtonImage_property.mReadModelFunction = {
        switch (preferences_symbolColor_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addOvalButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addOvalButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addSolidOvalButtonImage
    self.addSolidOvalButtonImage_property.mReadModelFunction = {
        switch (preferences_symbolColor_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addSolidOvalButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addSolidOvalButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addSolidRectButtonImage
    self.addSolidRectButtonImage_property.mReadModelFunction = {
        switch (preferences_symbolColor_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addSolidRectButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addSolidRectButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addTextButtonImage
    self.addTextButtonImage_property.mReadModelFunction = {
        switch (preferences_symbolColor_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addTextButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addTextButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addPinButtonImage
    self.addPinButtonImage_property.mReadModelFunction = {
        switch (preferences_symbolColor_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_addPinButtonImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addPinButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.issues_property.selection, unwSelf.documentFileName_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_AutoLayoutSymbolDocument_issues (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.issues_property)
    self.documentFileName_property.addEBObserver (self.issues_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusImage
    self.statusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_statusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.statusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_statusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.statusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: metadataStatus
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_metadataStatus (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.metadataStatus_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: noIssue
    self.noIssue_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_noIssue (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.noIssue_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: segmentedControlSegmentIssueImage
    self.segmentedControlSegmentIssueImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_segmentedControlSegmentIssueImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.segmentedControlSegmentIssueImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: segmentedControlSegmentIssueString
    self.segmentedControlSegmentIssueString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutSymbolDocument_segmentedControlSegmentIssueString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.segmentedControlSegmentIssueString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································

/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
  //--------------------------- Install regular bindings
  //--------------------------- Install multiple bindings
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································

/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mDocumentMainView.ebCleanUp ()
    self.mSymbolPageInspectorMasterView.ebCleanUp ()
    self.mSymbolPage.ebCleanUp ()
    self.mSelectedObjectsInspectorView.ebCleanUp ()
    self.mSymbolTextInspectorView.ebCleanUp ()
    self.mSymbolPinInspectorView.ebCleanUp ()
    self.mGridZoomInspectorView.ebCleanUp ()
    self.mDisplayInspectorView.ebCleanUp ()
    self.mIssuesInspectorView.ebCleanUp ()
    self.mInfosPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.unbind_model ()
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.unbind_selection ()
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.unbind_selection ()
    // preferences_symbolColor_property.removeEBObserver (self.addSegmentButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addBezierButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addOvalButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addSolidOvalButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addSolidRectButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addTextButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addPinButtonImage_property)
    // self.rootObject.issues_property.removeEBObserver (self.issues_property)
    // self.documentFileName_property.removeEBObserver (self.issues_property)
    // self.issues_property.removeEBObserver (self.statusImage_property)
    // self.issues_property.removeEBObserver (self.statusMessage_property)
    // self.issues_property.removeEBObserver (self.metadataStatus_property)
    // self.issues_property.removeEBObserver (self.noIssue_property)
    // self.issues_property.removeEBObserver (self.segmentedControlSegmentIssueImage_property)
    // self.issues_property.removeEBObserver (self.segmentedControlSegmentIssueString_property)
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
  //--------------------------- Detach outlets
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

