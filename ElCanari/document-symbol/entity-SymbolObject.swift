//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolObject_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolObject_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolObject_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolObject : EBGraphicManagedObject,
         SymbolObject_selectionDisplay,
         SymbolObject_objectDisplay,
         SymbolObject_issues {

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "selectionDisplay",
        object: self.selectionDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
        valueExplorer: &self.selectionDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "objectDisplay",
        object: self.objectDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.objectDisplay_property.mObserverExplorer,
        valueExplorer: &self.objectDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "issues",
        object: self.issues_property,
        y: &y,
        view: view,
        observerExplorer: &self.issues_property.mObserverExplorer,
        valueExplorer: &self.issues_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //  Cursor
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_SymbolObject ((knob: inKnobIndex)
  } */

  //····················································································································
  //  Translation
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> ObjcCanariPoint {
    return acceptedTranslation_SymbolObject (xBy: inDx, yBy: inDy)
  } */

  //····················································································································

/*  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_SymbolObject (xBy: inDx, yBy: inDy)
  } */

  //····················································································································

/*  override func translate (xBy inDx: Int, yBy inDy: Int, userSet ioSet : ObjcObjectSet) {
    translate_SymbolObject (xBy: inDx, yBy: inDy, userSet: ioSet)
  } */

  //····················································································································
  //  Knob
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : ObjcCanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : ObjcCanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : ObjcCanariPoint,
                         shift inShift : Bool) -> ObjcCanariPoint {
    return canMove_SymbolObject (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  } */

  //····················································································································

/*  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_SymbolObject (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  } */

  //····················································································································
  //  Snap to grid
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_SymbolObject (inGrid)
  } */

  //····················································································································

/*  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_SymbolObject (inGrid)
  } */

  //····················································································································
  //  HORIZONTAL FLIP
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func flipHorizontally () {
    flipHorizontally_SymbolObject ()
  } */

  //····················································································································

/*  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_SymbolObject ()
  } */

  //····················································································································
  //  VERTICAL FLIP
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func flipVertically () {
    flipVertically_SymbolObject ()
  } */

  //····················································································································

/*  override func canFlipVertically () -> Bool {
    return canFlipVertically_SymbolObject ()
  } */

  //····················································································································
  //  ROTATE 90
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func canRotate90 (accumulatedPoints : ObjcCanariPointSet) -> Bool {
    return canRotate90_SymbolObject (accumulatedPoints: accumulatedPoints)
  } */

  //····················································································································

/*  override func rotate90Clockwise (from inRotationCenter : ObjcCanariPoint, userSet ioSet : ObjcObjectSet) {
    rotate90Clockwise_SymbolObject (from: inRotationCenter, userSet: ioSet)
  } */

  //····················································································································

/*  override func rotate90CounterClockwise (from inRotationCenter : ObjcCanariPoint, userSet ioSet : ObjcObjectSet) {
    rotate90CounterClockwise_SymbolObject (from: inRotationCenter, userSet: ioSet)
  } */

  //····················································································································
  //  Save into additional dictionary
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_SymbolObject (ioDictionary)
  } */

  //····················································································································
  //  COPY AND PASTE
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

 /* override func canCopyAndPaste () -> Bool {
    return canCopyAndPaste_SymbolObject ()
  } */

  //····················································································································

/*  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return operationAfterPasting_SymbolObject (additionalDictionary: inDictionary, objectArray: inObjectArray)
  } */

  //····················································································································
  //  Alignment Points
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func alignmentPoints () -> ObjcCanariPointSet {
    return alignmentPoints_SymbolObject ()
  } */

  //····················································································································
  //  Can be deleted
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

/*  override func canBeDeleted () -> Bool {
    return canBeDeleted_SymbolObject ()
  } */

  //····················································································································

/*  override func operationBeforeRemoving () {
    operationBeforeRemoving_SymbolObject ()
  } */

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

