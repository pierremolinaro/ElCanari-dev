//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_yPin : AnyObject {
  var yPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_xName : AnyObject {
  var xName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_yName : AnyObject {
  var yName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_xNumber : AnyObject {
  var xNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_yNumber : AnyObject {
  var yNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_name : AnyObject {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_nameHorizontalAlignment : AnyObject {
  var nameHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_numberHorizontalAlignment : AnyObject {
  var numberHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_pinNameIsDisplayedInSchematics : AnyObject {
  var pinNameIsDisplayedInSchematics : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_xPin : AnyObject {
  var xPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_filledBezierPath : AnyObject {
  var filledBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolPin_nameRect : AnyObject {
  var nameRect : NSRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SymbolPin : SymbolObject,
         SymbolPin_yPin,
         SymbolPin_xName,
         SymbolPin_yName,
         SymbolPin_xNumber,
         SymbolPin_yNumber,
         SymbolPin_name,
         SymbolPin_nameHorizontalAlignment,
         SymbolPin_numberHorizontalAlignment,
         SymbolPin_pinNameIsDisplayedInSchematics,
         SymbolPin_xPin,
         SymbolPin_filledBezierPath,
         SymbolPin_objectDisplay,
         SymbolPin_selectionDisplay,
         SymbolPin_issues,
         SymbolPin_nameRect {

  //····················································································································
  //   Atomic property: yPin
  //····················································································································

  final let yPin_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yPin_toDefaultValue () {
    self.yPin = 0
  }

  //····················································································································

  final var yPin : Int {
    get { return self.yPin_property.propval }
    set { self.yPin_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xName
  //····················································································································

  final let xName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xName_toDefaultValue () {
    self.xName = 0
  }

  //····················································································································

  final var xName : Int {
    get { return self.xName_property.propval }
    set { self.xName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yName
  //····················································································································

  final let yName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yName_toDefaultValue () {
    self.yName = 228600
  }

  //····················································································································

  final var yName : Int {
    get { return self.yName_property.propval }
    set { self.yName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xNumber
  //····················································································································

  final let xNumber_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xNumber_toDefaultValue () {
    self.xNumber = 0
  }

  //····················································································································

  final var xNumber : Int {
    get { return self.xNumber_property.propval }
    set { self.xNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yNumber
  //····················································································································

  final let yNumber_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yNumber_toDefaultValue () {
    self.yNumber = -228600
  }

  //····················································································································

  final var yNumber : Int {
    get { return self.yNumber_property.propval }
    set { self.yNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: name
  //····················································································································

  final let name_property : EBStoredProperty_String

  //····················································································································

  final func reset_name_toDefaultValue () {
    self.name = ""
  }

  //····················································································································

  final var name : String {
    get { return self.name_property.propval }
    set { self.name_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: nameHorizontalAlignment
  //····················································································································

  final let nameHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_nameHorizontalAlignment_toDefaultValue () {
    self.nameHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var nameHorizontalAlignment : HorizontalAlignment {
    get { return self.nameHorizontalAlignment_property.propval }
    set { self.nameHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: numberHorizontalAlignment
  //····················································································································

  final let numberHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_numberHorizontalAlignment_toDefaultValue () {
    self.numberHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var numberHorizontalAlignment : HorizontalAlignment {
    get { return self.numberHorizontalAlignment_property.propval }
    set { self.numberHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: pinNameIsDisplayedInSchematics
  //····················································································································

  final let pinNameIsDisplayedInSchematics_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_pinNameIsDisplayedInSchematics_toDefaultValue () {
    self.pinNameIsDisplayedInSchematics = true
  }

  //····················································································································

  final var pinNameIsDisplayedInSchematics : Bool {
    get { return self.pinNameIsDisplayedInSchematics_property.propval }
    set { self.pinNameIsDisplayedInSchematics_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xPin
  //····················································································································

  final let xPin_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xPin_toDefaultValue () {
    self.xPin = 0
  }

  //····················································································································

  final var xPin : Int {
    get { return self.xPin_property.propval }
    set { self.xPin_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: filledBezierPath
  //····················································································································

  final let filledBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  final var filledBezierPath : NSBezierPath? {
    return self.filledBezierPath_property.optionalValue
    /* switch self.filledBezierPath_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    } */
  }

  //····················································································································
  //   Transient property: nameRect
  //····················································································································

  final let nameRect_property = EBTransientProperty_NSRect ()

  //····················································································································

  final var nameRect : NSRect? {
    return self.nameRect_property.optionalValue
    /* switch self.nameRect_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    } */
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.yPin_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "yPin")
    self.xName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "xName")
    self.yName_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: inUndoManager, key: "yName")
    self.xNumber_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "xNumber")
    self.yNumber_property = EBStoredProperty_Int (defaultValue: -228600, undoManager: inUndoManager, key: "yNumber")
    self.name_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "name")
    self.nameHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: inUndoManager, key: "nameHorizontalAlignment")
    self.numberHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: inUndoManager, key: "numberHorizontalAlignment")
    self.pinNameIsDisplayedInSchematics_property = EBStoredProperty_Bool (defaultValue: true, undoManager: inUndoManager, key: "pinNameIsDisplayedInSchematics")
    self.xPin_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "xPin")
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- Atomic property: filledBezierPath
    self.filledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xPin_property.selection
        let s1 = unwSelf.yPin_property.selection
        switch (s0, s1) {
        case (.single (let v0),
              .single (let v1)) :
          return .single (transient_SymbolPin_filledBezierPath (v0, v1))
        case (.multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.startsToBeObserved (by: self.filledBezierPath_property)
    self.yPin_property.startsToBeObserved (by: self.filledBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xPin_property.selection
        let s1 = unwSelf.yPin_property.selection
        let s2 = unwSelf.xName_property.selection
        let s3 = unwSelf.yName_property.selection
        let s4 = unwSelf.xNumber_property.selection
        let s5 = unwSelf.yNumber_property.selection
        let s6 = unwSelf.name_property.selection
        let s7 = unwSelf.pinNameIsDisplayedInSchematics_property.selection
        let s8 = unwSelf.nameHorizontalAlignment_property.selection
        let s9 = unwSelf.numberHorizontalAlignment_property.selection
        let s10 = preferences_symbolColor_property.selection
        let s11 = preferences_pinNameFont_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7),
              .single (let v8),
              .single (let v9),
              .single (let v10),
              .single (let v11)) :
          return .single (transient_SymbolPin_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.startsToBeObserved (by: self.objectDisplay_property)
    self.yPin_property.startsToBeObserved (by: self.objectDisplay_property)
    self.xName_property.startsToBeObserved (by: self.objectDisplay_property)
    self.yName_property.startsToBeObserved (by: self.objectDisplay_property)
    self.xNumber_property.startsToBeObserved (by: self.objectDisplay_property)
    self.yNumber_property.startsToBeObserved (by: self.objectDisplay_property)
    self.name_property.startsToBeObserved (by: self.objectDisplay_property)
    self.pinNameIsDisplayedInSchematics_property.startsToBeObserved (by: self.objectDisplay_property)
    self.nameHorizontalAlignment_property.startsToBeObserved (by: self.objectDisplay_property)
    self.numberHorizontalAlignment_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_symbolColor_property.startsToBeObserved (by: self.objectDisplay_property)
    preferences_pinNameFont_property.startsToBeObserved (by: self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xPin_property.selection
        let s1 = unwSelf.yPin_property.selection
        let s2 = unwSelf.xName_property.selection
        let s3 = unwSelf.yName_property.selection
        let s4 = unwSelf.xNumber_property.selection
        let s5 = unwSelf.yNumber_property.selection
        let s6 = unwSelf.nameHorizontalAlignment_property.selection
        let s7 = unwSelf.numberHorizontalAlignment_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6, s7) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6),
              .single (let v7)) :
          return .single (transient_SymbolPin_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.yPin_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.xName_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.yName_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.xNumber_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.yNumber_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.nameHorizontalAlignment_property.startsToBeObserved (by: self.selectionDisplay_property)
    self.numberHorizontalAlignment_property.startsToBeObserved (by: self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xPin_property.selection
        let s1 = unwSelf.yPin_property.selection
        let s2 = unwSelf.xName_property.selection
        let s3 = unwSelf.yName_property.selection
        let s4 = unwSelf.xNumber_property.selection
        let s5 = unwSelf.yNumber_property.selection
        let s6 = unwSelf.name_property.selection
        switch (s0, s1, s2, s3, s4, s5, s6) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4),
              .single (let v5),
              .single (let v6)) :
          return .single (transient_SymbolPin_issues (v0, v1, v2, v3, v4, v5, v6))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.startsToBeObserved (by: self.issues_property)
    self.yPin_property.startsToBeObserved (by: self.issues_property)
    self.xName_property.startsToBeObserved (by: self.issues_property)
    self.yName_property.startsToBeObserved (by: self.issues_property)
    self.xNumber_property.startsToBeObserved (by: self.issues_property)
    self.yNumber_property.startsToBeObserved (by: self.issues_property)
    self.name_property.startsToBeObserved (by: self.issues_property)
  //--- Atomic property: nameRect
    self.nameRect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.xName_property.selection
        let s1 = unwSelf.yName_property.selection
        let s2 = unwSelf.name_property.selection
        let s3 = unwSelf.nameHorizontalAlignment_property.selection
        let s4 = preferences_pinNameFont_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_SymbolPin_nameRect (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xName_property.startsToBeObserved (by: self.nameRect_property)
    self.yName_property.startsToBeObserved (by: self.nameRect_property)
    self.name_property.startsToBeObserved (by: self.nameRect_property)
    self.nameHorizontalAlignment_property.startsToBeObserved (by: self.nameRect_property)
    preferences_pinNameFont_property.startsToBeObserved (by: self.nameRect_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.name_property.setSignatureObserver (observer: self)
    self.nameHorizontalAlignment_property.setSignatureObserver (observer: self)
    self.numberHorizontalAlignment_property.setSignatureObserver (observer: self)
    self.pinNameIsDisplayedInSchematics_property.setSignatureObserver (observer: self)
    self.xName_property.setSignatureObserver (observer: self)
    self.xNumber_property.setSignatureObserver (observer: self)
    self.xPin_property.setSignatureObserver (observer: self)
    self.yName_property.setSignatureObserver (observer: self)
    self.yNumber_property.setSignatureObserver (observer: self)
    self.yPin_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.name_property.signature ())
    crc.accumulate (u32: self.nameHorizontalAlignment_property.signature ())
    crc.accumulate (u32: self.numberHorizontalAlignment_property.signature ())
    crc.accumulate (u32: self.pinNameIsDisplayedInSchematics_property.signature ())
    crc.accumulate (u32: self.xName_property.signature ())
    crc.accumulate (u32: self.xNumber_property.signature ())
    crc.accumulate (u32: self.xPin_property.signature ())
    crc.accumulate (u32: self.yName_property.signature ())
    crc.accumulate (u32: self.yNumber_property.signature ())
    crc.accumulate (u32: self.yPin_property.signature ())
    return crc
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_SymbolPin (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_SymbolPin (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_SymbolPin (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_SymbolPin (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_SymbolPin (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_SymbolPin (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_SymbolPin (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_SymbolPin (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_SymbolPin ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_SymbolPin ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_SymbolPin ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_SymbolPin ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_SymbolPin (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_SymbolPin (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_SymbolPin (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_SymbolPin (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_SymbolPin (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_SymbolPin ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_SymbolPin ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

