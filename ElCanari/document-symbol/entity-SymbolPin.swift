//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yPin : AnyObject {
  var yPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xName : AnyObject {
  var xName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yName : AnyObject {
  var yName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xNumber : AnyObject {
  var xNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yNumber : AnyObject {
  var yNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_name : AnyObject {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_nameHorizontalAlignment : AnyObject {
  var nameHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_numberHorizontalAlignment : AnyObject {
  var numberHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_pinNameIsDisplayedInSchematics : AnyObject {
  var pinNameIsDisplayedInSchematics : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xPin : AnyObject {
  var xPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_filledBezierPath : AnyObject {
  var filledBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_nameRect : AnyObject {
  var nameRect : NSRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SymbolPin : SymbolObject,
         SymbolPin_yPin,
         SymbolPin_xName,
         SymbolPin_yName,
         SymbolPin_xNumber,
         SymbolPin_yNumber,
         SymbolPin_name,
         SymbolPin_nameHorizontalAlignment,
         SymbolPin_numberHorizontalAlignment,
         SymbolPin_pinNameIsDisplayedInSchematics,
         SymbolPin_xPin,
         SymbolPin_filledBezierPath,
         SymbolPin_objectDisplay,
         SymbolPin_selectionDisplay,
         SymbolPin_issues,
         SymbolPin_nameRect {

  //····················································································································
  //   Atomic property: yPin
  //····················································································································

  final let yPin_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yPin_toDefaultValue () {
    self.yPin = 0
  }

  //····················································································································

  final var yPin : Int {
    get { return self.yPin_property.propval }
    set { self.yPin_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xName
  //····················································································································

  final let xName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xName_toDefaultValue () {
    self.xName = 0
  }

  //····················································································································

  final var xName : Int {
    get { return self.xName_property.propval }
    set { self.xName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yName
  //····················································································································

  final let yName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yName_toDefaultValue () {
    self.yName = 228600
  }

  //····················································································································

  final var yName : Int {
    get { return self.yName_property.propval }
    set { self.yName_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xNumber
  //····················································································································

  final let xNumber_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xNumber_toDefaultValue () {
    self.xNumber = 0
  }

  //····················································································································

  final var xNumber : Int {
    get { return self.xNumber_property.propval }
    set { self.xNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yNumber
  //····················································································································

  final let yNumber_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yNumber_toDefaultValue () {
    self.yNumber = -228600
  }

  //····················································································································

  final var yNumber : Int {
    get { return self.yNumber_property.propval }
    set { self.yNumber_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: name
  //····················································································································

  final let name_property : EBStoredProperty_String

  //····················································································································

  final func reset_name_toDefaultValue () {
    self.name = ""
  }

  //····················································································································

  final var name : String {
    get { return self.name_property.propval }
    set { self.name_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: nameHorizontalAlignment
  //····················································································································

  final let nameHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_nameHorizontalAlignment_toDefaultValue () {
    self.nameHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var nameHorizontalAlignment : HorizontalAlignment {
    get { return self.nameHorizontalAlignment_property.propval }
    set { self.nameHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: numberHorizontalAlignment
  //····················································································································

  final let numberHorizontalAlignment_property : EBStoredProperty_HorizontalAlignment

  //····················································································································

  final func reset_numberHorizontalAlignment_toDefaultValue () {
    self.numberHorizontalAlignment = HorizontalAlignment.center
  }

  //····················································································································

  final var numberHorizontalAlignment : HorizontalAlignment {
    get { return self.numberHorizontalAlignment_property.propval }
    set { self.numberHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: pinNameIsDisplayedInSchematics
  //····················································································································

  final let pinNameIsDisplayedInSchematics_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_pinNameIsDisplayedInSchematics_toDefaultValue () {
    self.pinNameIsDisplayedInSchematics = true
  }

  //····················································································································

  final var pinNameIsDisplayedInSchematics : Bool {
    get { return self.pinNameIsDisplayedInSchematics_property.propval }
    set { self.pinNameIsDisplayedInSchematics_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xPin
  //····················································································································

  final let xPin_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xPin_toDefaultValue () {
    self.xPin = 0
  }

  //····················································································································

  final var xPin : Int {
    get { return self.xPin_property.propval }
    set { self.xPin_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: filledBezierPath
  //····················································································································

  final let filledBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  final var filledBezierPath : NSBezierPath? {
    switch self.filledBezierPath_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: nameRect
  //····················································································································

  final let nameRect_property = EBTransientProperty_NSRect ()

  //····················································································································

  final var nameRect : NSRect? {
    switch self.nameRect_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.yPin_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.xName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.yName_property = EBStoredProperty_Int (defaultValue: 228600, undoManager: ebUndoManager)
    self.xNumber_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.yNumber_property = EBStoredProperty_Int (defaultValue: -228600, undoManager: ebUndoManager)
    self.name_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.nameHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: ebUndoManager)
    self.numberHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center, undoManager: ebUndoManager)
    self.pinNameIsDisplayedInSchematics_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.xPin_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- Atomic property: filledBezierPath
    self.filledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.xPin_property.selection, unwSelf.yPin_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_SymbolPin_filledBezierPath (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.filledBezierPath_property)
    self.yPin_property.addEBObserver (self.filledBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.xPin_property.selection, unwSelf.yPin_property.selection, unwSelf.xName_property.selection, unwSelf.yName_property.selection, unwSelf.xNumber_property.selection, unwSelf.yNumber_property.selection, unwSelf.name_property.selection, unwSelf.pinNameIsDisplayedInSchematics_property.selection, unwSelf.nameHorizontalAlignment_property.selection, unwSelf.numberHorizontalAlignment_property.selection, preferences_symbolColor_property.selection, preferences_pinNameFont_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11)) :
          return .single (transient_SymbolPin_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.objectDisplay_property)
    self.yPin_property.addEBObserver (self.objectDisplay_property)
    self.xName_property.addEBObserver (self.objectDisplay_property)
    self.yName_property.addEBObserver (self.objectDisplay_property)
    self.xNumber_property.addEBObserver (self.objectDisplay_property)
    self.yNumber_property.addEBObserver (self.objectDisplay_property)
    self.name_property.addEBObserver (self.objectDisplay_property)
    self.pinNameIsDisplayedInSchematics_property.addEBObserver (self.objectDisplay_property)
    self.nameHorizontalAlignment_property.addEBObserver (self.objectDisplay_property)
    self.numberHorizontalAlignment_property.addEBObserver (self.objectDisplay_property)
    preferences_symbolColor_property.addEBObserver (self.objectDisplay_property)
    preferences_pinNameFont_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.xPin_property.selection, unwSelf.yPin_property.selection, unwSelf.xName_property.selection, unwSelf.yName_property.selection, unwSelf.xNumber_property.selection, unwSelf.yNumber_property.selection, unwSelf.nameHorizontalAlignment_property.selection, unwSelf.numberHorizontalAlignment_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
          return .single (transient_SymbolPin_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.selectionDisplay_property)
    self.yPin_property.addEBObserver (self.selectionDisplay_property)
    self.xName_property.addEBObserver (self.selectionDisplay_property)
    self.yName_property.addEBObserver (self.selectionDisplay_property)
    self.xNumber_property.addEBObserver (self.selectionDisplay_property)
    self.yNumber_property.addEBObserver (self.selectionDisplay_property)
    self.nameHorizontalAlignment_property.addEBObserver (self.selectionDisplay_property)
    self.numberHorizontalAlignment_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.xPin_property.selection, unwSelf.yPin_property.selection, unwSelf.xName_property.selection, unwSelf.yName_property.selection, unwSelf.xNumber_property.selection, unwSelf.yNumber_property.selection, unwSelf.name_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
          return .single (transient_SymbolPin_issues (v0, v1, v2, v3, v4, v5, v6))
        case (.multiple, .multiple, .multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.issues_property)
    self.yPin_property.addEBObserver (self.issues_property)
    self.xName_property.addEBObserver (self.issues_property)
    self.yName_property.addEBObserver (self.issues_property)
    self.xNumber_property.addEBObserver (self.issues_property)
    self.yNumber_property.addEBObserver (self.issues_property)
    self.name_property.addEBObserver (self.issues_property)
  //--- Atomic property: nameRect
    self.nameRect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.xName_property.selection, unwSelf.yName_property.selection, unwSelf.name_property.selection, unwSelf.nameHorizontalAlignment_property.selection, preferences_pinNameFont_property.selection) {
        case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
          return .single (transient_SymbolPin_nameRect (v0, v1, v2, v3, v4))
        case (.multiple, .multiple, .multiple, .multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.xName_property.addEBObserver (self.nameRect_property)
    self.yName_property.addEBObserver (self.nameRect_property)
    self.name_property.addEBObserver (self.nameRect_property)
    self.nameHorizontalAlignment_property.addEBObserver (self.nameRect_property)
    preferences_pinNameFont_property.addEBObserver (self.nameRect_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.name_property.setSignatureObserver (observer: self)
    self.nameHorizontalAlignment_property.setSignatureObserver (observer: self)
    self.numberHorizontalAlignment_property.setSignatureObserver (observer: self)
    self.pinNameIsDisplayedInSchematics_property.setSignatureObserver (observer: self)
    self.xName_property.setSignatureObserver (observer: self)
    self.xNumber_property.setSignatureObserver (observer: self)
    self.xPin_property.setSignatureObserver (observer: self)
    self.yName_property.setSignatureObserver (observer: self)
    self.yNumber_property.setSignatureObserver (observer: self)
    self.yPin_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.xPin_property.removeEBObserver (self.filledBezierPath_property)
    // self.yPin_property.removeEBObserver (self.filledBezierPath_property)
    // self.xPin_property.removeEBObserver (self.objectDisplay_property)
    // self.yPin_property.removeEBObserver (self.objectDisplay_property)
    // self.xName_property.removeEBObserver (self.objectDisplay_property)
    // self.yName_property.removeEBObserver (self.objectDisplay_property)
    // self.xNumber_property.removeEBObserver (self.objectDisplay_property)
    // self.yNumber_property.removeEBObserver (self.objectDisplay_property)
    // self.name_property.removeEBObserver (self.objectDisplay_property)
    // self.pinNameIsDisplayedInSchematics_property.removeEBObserver (self.objectDisplay_property)
    // self.nameHorizontalAlignment_property.removeEBObserver (self.objectDisplay_property)
    // self.numberHorizontalAlignment_property.removeEBObserver (self.objectDisplay_property)
    // preferences_symbolColor_property.removeEBObserver (self.objectDisplay_property)
    // preferences_pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    // self.xPin_property.removeEBObserver (self.selectionDisplay_property)
    // self.yPin_property.removeEBObserver (self.selectionDisplay_property)
    // self.xName_property.removeEBObserver (self.selectionDisplay_property)
    // self.yName_property.removeEBObserver (self.selectionDisplay_property)
    // self.xNumber_property.removeEBObserver (self.selectionDisplay_property)
    // self.yNumber_property.removeEBObserver (self.selectionDisplay_property)
    // self.nameHorizontalAlignment_property.removeEBObserver (self.selectionDisplay_property)
    // self.numberHorizontalAlignment_property.removeEBObserver (self.selectionDisplay_property)
    // self.xPin_property.removeEBObserver (self.issues_property)
    // self.yPin_property.removeEBObserver (self.issues_property)
    // self.xName_property.removeEBObserver (self.issues_property)
    // self.yName_property.removeEBObserver (self.issues_property)
    // self.xNumber_property.removeEBObserver (self.issues_property)
    // self.yNumber_property.removeEBObserver (self.issues_property)
    // self.name_property.removeEBObserver (self.issues_property)
    // self.xName_property.removeEBObserver (self.nameRect_property)
    // self.yName_property.removeEBObserver (self.nameRect_property)
    // self.name_property.removeEBObserver (self.nameRect_property)
    // self.nameHorizontalAlignment_property.removeEBObserver (self.nameRect_property)
    // preferences_pinNameFont_property.removeEBObserver (self.nameRect_property)
  //--- Unregister properties for handling signature
    self.name_property.setSignatureObserver (observer: nil)
    self.nameHorizontalAlignment_property.setSignatureObserver (observer: nil)
    self.numberHorizontalAlignment_property.setSignatureObserver (observer: nil)
    self.pinNameIsDisplayedInSchematics_property.setSignatureObserver (observer: nil)
    self.xName_property.setSignatureObserver (observer: nil)
    self.xNumber_property.setSignatureObserver (observer: nil)
    self.xPin_property.setSignatureObserver (observer: nil)
    self.yName_property.setSignatureObserver (observer: nil)
    self.yNumber_property.setSignatureObserver (observer: nil)
    self.yPin_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
      createEntryForPropertyNamed (
        "yPin",
        object: self.yPin_property,
        y: &y,
        view: view,
        observerExplorer: &self.yPin_property.mObserverExplorer,
        valueExplorer: &self.yPin_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "xName",
        object: self.xName_property,
        y: &y,
        view: view,
        observerExplorer: &self.xName_property.mObserverExplorer,
        valueExplorer: &self.xName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "yName",
        object: self.yName_property,
        y: &y,
        view: view,
        observerExplorer: &self.yName_property.mObserverExplorer,
        valueExplorer: &self.yName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "xNumber",
        object: self.xNumber_property,
        y: &y,
        view: view,
        observerExplorer: &self.xNumber_property.mObserverExplorer,
        valueExplorer: &self.xNumber_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "yNumber",
        object: self.yNumber_property,
        y: &y,
        view: view,
        observerExplorer: &self.yNumber_property.mObserverExplorer,
        valueExplorer: &self.yNumber_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "name",
        object: self.name_property,
        y: &y,
        view: view,
        observerExplorer: &self.name_property.mObserverExplorer,
        valueExplorer: &self.name_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "nameHorizontalAlignment",
        object: self.nameHorizontalAlignment_property,
        y: &y,
        view: view,
        observerExplorer: &self.nameHorizontalAlignment_property.mObserverExplorer,
        valueExplorer: &self.nameHorizontalAlignment_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "numberHorizontalAlignment",
        object: self.numberHorizontalAlignment_property,
        y: &y,
        view: view,
        observerExplorer: &self.numberHorizontalAlignment_property.mObserverExplorer,
        valueExplorer: &self.numberHorizontalAlignment_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "pinNameIsDisplayedInSchematics",
        object: self.pinNameIsDisplayedInSchematics_property,
        y: &y,
        view: view,
        observerExplorer: &self.pinNameIsDisplayedInSchematics_property.mObserverExplorer,
        valueExplorer: &self.pinNameIsDisplayedInSchematics_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "xPin",
        object: self.xPin_property,
        y: &y,
        view: view,
        observerExplorer: &self.xPin_property.mObserverExplorer,
        valueExplorer: &self.xPin_property.mValueExplorer
      )
      createEntryForTitle ("Properties", y: &y, view: view)
      createEntryForPropertyNamed (
        "filledBezierPath",
        object: self.filledBezierPath_property,
        y: &y,
        view: view,
        observerExplorer: &self.filledBezierPath_property.mObserverExplorer,
        valueExplorer: &self.filledBezierPath_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "objectDisplay",
        object: self.objectDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.objectDisplay_property.mObserverExplorer,
        valueExplorer: &self.objectDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "selectionDisplay",
        object: self.selectionDisplay_property,
        y: &y,
        view: view,
        observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
        valueExplorer: &self.selectionDisplay_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "issues",
        object: self.issues_property,
        y: &y,
        view: view,
        observerExplorer: &self.issues_property.mObserverExplorer,
        valueExplorer: &self.issues_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "nameRect",
        object: self.nameRect_property,
        y: &y,
        view: view,
        observerExplorer: &self.nameRect_property.mObserverExplorer,
        valueExplorer: &self.nameRect_property.mValueExplorer
      )
      createEntryForTitle ("Transients", y: &y, view: view)
      createEntryForTitle ("ToMany Relationships", y: &y, view: view)
      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
  //--- Atomic property: yPin
    self.yPin_property.mObserverExplorer = nil
    self.yPin_property.mValueExplorer = nil
  //--- Atomic property: xName
    self.xName_property.mObserverExplorer = nil
    self.xName_property.mValueExplorer = nil
  //--- Atomic property: yName
    self.yName_property.mObserverExplorer = nil
    self.yName_property.mValueExplorer = nil
  //--- Atomic property: xNumber
    self.xNumber_property.mObserverExplorer = nil
    self.xNumber_property.mValueExplorer = nil
  //--- Atomic property: yNumber
    self.yNumber_property.mObserverExplorer = nil
    self.yNumber_property.mValueExplorer = nil
  //--- Atomic property: name
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.mObserverExplorer = nil
    self.nameHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.mObserverExplorer = nil
    self.numberHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.mObserverExplorer = nil
    self.pinNameIsDisplayedInSchematics_property.mValueExplorer = nil
  //--- Atomic property: xPin
    self.xPin_property.mObserverExplorer = nil
    self.xPin_property.mValueExplorer = nil
    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: yPin
      self.yPin_property.storeIn (dictionary: ioDictionary, forKey: "yPin")
    //--- Atomic property: xName
      self.xName_property.storeIn (dictionary: ioDictionary, forKey: "xName")
    //--- Atomic property: yName
      self.yName_property.storeIn (dictionary: ioDictionary, forKey: "yName")
    //--- Atomic property: xNumber
      self.xNumber_property.storeIn (dictionary: ioDictionary, forKey: "xNumber")
    //--- Atomic property: yNumber
      self.yNumber_property.storeIn (dictionary: ioDictionary, forKey: "yNumber")
    //--- Atomic property: name
      self.name_property.storeIn (dictionary: ioDictionary, forKey: "name")
    //--- Atomic property: nameHorizontalAlignment
      self.nameHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "nameHorizontalAlignment")
    //--- Atomic property: numberHorizontalAlignment
      self.numberHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey: "numberHorizontalAlignment")
    //--- Atomic property: pinNameIsDisplayedInSchematics
      self.pinNameIsDisplayedInSchematics_property.storeIn (dictionary: ioDictionary, forKey: "pinNameIsDisplayedInSchematics")
    //--- Atomic property: xPin
      self.xPin_property.storeIn (dictionary: ioDictionary, forKey: "xPin")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: yPin
    self.yPin_property.readFrom (dictionary: inDictionary, forKey: "yPin")
  //--- Atomic property: xName
    self.xName_property.readFrom (dictionary: inDictionary, forKey: "xName")
  //--- Atomic property: yName
    self.yName_property.readFrom (dictionary: inDictionary, forKey: "yName")
  //--- Atomic property: xNumber
    self.xNumber_property.readFrom (dictionary: inDictionary, forKey: "xNumber")
  //--- Atomic property: yNumber
    self.yNumber_property.readFrom (dictionary: inDictionary, forKey: "yNumber")
  //--- Atomic property: name
    self.name_property.readFrom (dictionary: inDictionary, forKey: "name")
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey: "nameHorizontalAlignment")
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey: "numberHorizontalAlignment")
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.readFrom (dictionary: inDictionary, forKey: "pinNameIsDisplayedInSchematics")
  //--- Atomic property: xPin
    self.xPin_property.readFrom (dictionary: inDictionary, forKey: "xPin")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "yPin\n"
    ioString += "xName\n"
    ioString += "yName\n"
    ioString += "xNumber\n"
    ioString += "yNumber\n"
    ioString += "name\n"
    ioString += "nameHorizontalAlignment\n"
    ioString += "numberHorizontalAlignment\n"
    ioString += "pinNameIsDisplayedInSchematics\n"
    ioString += "xPin\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.yPin.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xNumber.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yNumber.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.name.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.nameHorizontalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.numberHorizontalAlignment.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.pinNameIsDisplayedInSchematics.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xPin.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["yPin"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yPin = value
      }
      if let range = inDictionary ["xName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xName = value
      }
      if let range = inDictionary ["yName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yName = value
      }
      if let range = inDictionary ["xNumber"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xNumber = value
      }
      if let range = inDictionary ["yNumber"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yNumber = value
      }
      if let range = inDictionary ["name"], let value = String.unarchiveFromDataRange (inData, range) {
        self.name = value
      }
      if let range = inDictionary ["nameHorizontalAlignment"], let value = HorizontalAlignment.unarchiveFromDataRange (inData, range) {
        self.nameHorizontalAlignment = value
      }
      if let range = inDictionary ["numberHorizontalAlignment"], let value = HorizontalAlignment.unarchiveFromDataRange (inData, range) {
        self.numberHorizontalAlignment = value
      }
      if let range = inDictionary ["pinNameIsDisplayedInSchematics"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.pinNameIsDisplayedInSchematics = value
      }
      if let range = inDictionary ["xPin"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xPin = value
      }
    //--- To one relationships
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.name_property.signature ())
    crc.accumulateUInt32 (self.nameHorizontalAlignment_property.signature ())
    crc.accumulateUInt32 (self.numberHorizontalAlignment_property.signature ())
    crc.accumulateUInt32 (self.pinNameIsDisplayedInSchematics_property.signature ())
    crc.accumulateUInt32 (self.xName_property.signature ())
    crc.accumulateUInt32 (self.xNumber_property.signature ())
    crc.accumulateUInt32 (self.xPin_property.signature ())
    crc.accumulateUInt32 (self.yName_property.signature ())
    crc.accumulateUInt32 (self.yNumber_property.signature ())
    crc.accumulateUInt32 (self.yPin_property.signature ())
    return crc
  }

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_SymbolPin (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return acceptedTranslation_SymbolPin (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_SymbolPin (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int, userSet ioSet : inout EBReferenceSet <AnyObject>) {
    translate_SymbolPin (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return canMove_SymbolPin (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_SymbolPin (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_SymbolPin (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_SymbolPin (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    flipHorizontally_SymbolPin ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_SymbolPin ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    flipVertically_SymbolPin ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return canFlipVertically_SymbolPin ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return canRotate90_SymbolPin (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout EBReferenceSet <AnyObject>) {
    rotate90Clockwise_SymbolPin (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout EBReferenceSet <AnyObject>) {
    rotate90CounterClockwise_SymbolPin (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_SymbolPin (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return operationAfterPasting_SymbolPin (additionalDictionary: inDictionary, objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return alignmentPoints_SymbolPin ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    operationBeforeRemoving_SymbolPin ()
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

