//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    Entity: SymbolRoot
//--------------------------------------------------------------------------------------------------

final class SymbolRoot : EBManagedObject {

  //------------------------------------------------------------------------------------------------
  //   Atomic property: selectedInspector
  //------------------------------------------------------------------------------------------------

  final let selectedInspector_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: comments
  //------------------------------------------------------------------------------------------------

  final let comments_property : EBStoredProperty_String

  //------------------------------------------------------------------------------------------------

  final var comments : String {
    get { return self.comments_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: horizontalFlip
  //------------------------------------------------------------------------------------------------

  final let horizontalFlip_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: verticalFlip
  //------------------------------------------------------------------------------------------------

  final let verticalFlip_property : EBStoredProperty_Bool

  //------------------------------------------------------------------------------------------------
  //   Atomic property: gridStyle
  //------------------------------------------------------------------------------------------------

  final let gridStyle_property : EBStoredProperty_GridStyle

  //------------------------------------------------------------------------------------------------
  //   Atomic property: gridDisplay
  //------------------------------------------------------------------------------------------------

  final let gridDisplay_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: zoom
  //------------------------------------------------------------------------------------------------

  final let zoom_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: xPlacardUnit
  //------------------------------------------------------------------------------------------------

  final let xPlacardUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Atomic property: yPlacardUnit
  //------------------------------------------------------------------------------------------------

  final let yPlacardUnit_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   To many property: symbolObjects
  //------------------------------------------------------------------------------------------------

  final let symbolObjects_property = StoredArrayOf_SymbolObject (usedForSignature: true, key: "symbolObjects")

  //------------------------------------------------------------------------------------------------

  final var symbolObjects : EBReferenceArray <SymbolObject> {
    get { return self.symbolObjects_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   To many property: symbolPins
  //------------------------------------------------------------------------------------------------

  final let symbolPins_property = TransientArrayOfSuperOf_SymbolPin <SymbolObject> ()

  //------------------------------------------------------------------------------------------------

  final var symbolPins : EBReferenceArray <SymbolPin> {
    get { return self.symbolPins_property.propval }
  }

  //------------------------------------------------------------------------------------------------
  //   Atomic property: selectedPageIndex
  //------------------------------------------------------------------------------------------------

  final let selectedPageIndex_property : EBStoredProperty_Int

  //------------------------------------------------------------------------------------------------
  //   Transient property: issues
  //------------------------------------------------------------------------------------------------

  final let issues_property = EBTransientProperty <CanariIssueArray> ()

  //------------------------------------------------------------------------------------------------

  final var issues : CanariIssueArray? {
    return self.issues_property.optionalValue
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.selectedInspector_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "selectedInspector")
    self.comments_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager, key: "comments")
    self.horizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "horizontalFlip")
    self.verticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager, key: "verticalFlip")
    self.gridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: inUndoManager, key: "gridStyle")
    self.gridDisplay_property = EBStoredProperty_Int (defaultValue: 4, undoManager: inUndoManager, key: "gridDisplay")
    self.zoom_property = EBStoredProperty_Int (defaultValue: 600, undoManager: inUndoManager, key: "zoom")
    self.xPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "xPlacardUnit")
    self.yPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager, key: "yPlacardUnit")
    self.selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager, key: "selectedPageIndex")
    super.init (inUndoManager)
  //--- To many property: symbolObjects (no option)
    self.symbolObjects_property.undoManager = inUndoManager
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolObjects_property.selection
        let s1 = unwSelf.symbolPins_property.selection
        let s2 = unwSelf.symbolPins_property.selection
        let s3 = unwSelf.symbolPins_property.selection
        let s4 = unwSelf.symbolPins_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_SymbolRoot_issues (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolObjects_property.toMany_issues_StartsBeingObserved (by: self.issues_property)
    self.symbolPins_property.toMany_name_StartsBeingObserved (by: self.issues_property)
    self.symbolPins_property.toMany_nameRect_StartsBeingObserved (by: self.issues_property)
    self.symbolPins_property.toMany_xPin_StartsBeingObserved (by: self.issues_property)
    self.symbolPins_property.toMany_yPin_StartsBeingObserved (by: self.issues_property)
  //--- Install undoers and opposite setter for relationships
    self.symbolPins_property.setDataProvider (self.symbolObjects_property)
  //--- Register properties for handling signature
    self.comments_property.setSignatureObserver (observer: self)
    self.symbolObjects_property.setSignatureObserver (observer: self)
    self.xPlacardUnit_property.setSignatureObserver (observer: self)
    self.yPlacardUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    Extern delegates
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   computeSignature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.comments_property.signature ())
    crc.accumulate (u32: self.symbolObjects_property.signature ())
    crc.accumulate (u32: self.xPlacardUnit_property.signature ())
    crc.accumulate (u32: self.yPlacardUnit_property.signature ())
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

