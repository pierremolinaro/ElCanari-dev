//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_selectedInspector : AnyObject {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_comments : AnyObject {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_horizontalFlip : AnyObject {
  var horizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_verticalFlip : AnyObject {
  var verticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_gridStyle : AnyObject {
  var gridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_gridDisplay : AnyObject {
  var gridDisplay : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_zoom : AnyObject {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_xPlacardUnit : AnyObject {
  var xPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_yPlacardUnit : AnyObject {
  var yPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_selectedPageIndex : AnyObject {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol SymbolRoot_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SymbolRoot : EBManagedObject,
         SymbolRoot_selectedInspector,
         SymbolRoot_comments,
         SymbolRoot_horizontalFlip,
         SymbolRoot_verticalFlip,
         SymbolRoot_gridStyle,
         SymbolRoot_gridDisplay,
         SymbolRoot_zoom,
         SymbolRoot_xPlacardUnit,
         SymbolRoot_yPlacardUnit,
         SymbolRoot_selectedPageIndex,
         SymbolRoot_issues {

  //····················································································································
  //   Atomic property: selectedInspector
  //····················································································································

  final let selectedInspector_property : EBStoredProperty_Int

  //····················································································································

  final func reset_selectedInspector_toDefaultValue () {
    self.selectedInspector = 0
  }

  //····················································································································

  final var selectedInspector : Int {
    get { return self.selectedInspector_property.propval }
    set { self.selectedInspector_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  final let comments_property : EBStoredProperty_String

  //····················································································································

  final func reset_comments_toDefaultValue () {
    self.comments = ""
  }

  //····················································································································

  final var comments : String {
    get { return self.comments_property.propval }
    set { self.comments_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: horizontalFlip
  //····················································································································

  final let horizontalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_horizontalFlip_toDefaultValue () {
    self.horizontalFlip = false
  }

  //····················································································································

  final var horizontalFlip : Bool {
    get { return self.horizontalFlip_property.propval }
    set { self.horizontalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: verticalFlip
  //····················································································································

  final let verticalFlip_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_verticalFlip_toDefaultValue () {
    self.verticalFlip = false
  }

  //····················································································································

  final var verticalFlip : Bool {
    get { return self.verticalFlip_property.propval }
    set { self.verticalFlip_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridStyle
  //····················································································································

  final let gridStyle_property : EBStoredProperty_GridStyle

  //····················································································································

  final func reset_gridStyle_toDefaultValue () {
    self.gridStyle = GridStyle.line
  }

  //····················································································································

  final var gridStyle : GridStyle {
    get { return self.gridStyle_property.propval }
    set { self.gridStyle_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: gridDisplay
  //····················································································································

  final let gridDisplay_property : EBStoredProperty_Int

  //····················································································································

  final func reset_gridDisplay_toDefaultValue () {
    self.gridDisplay = 4
  }

  //····················································································································

  final var gridDisplay : Int {
    get { return self.gridDisplay_property.propval }
    set { self.gridDisplay_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  final let zoom_property : EBStoredProperty_Int

  //····················································································································

  final func reset_zoom_toDefaultValue () {
    self.zoom = 600
  }

  //····················································································································

  final var zoom : Int {
    get { return self.zoom_property.propval }
    set { self.zoom_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: xPlacardUnit
  //····················································································································

  final let xPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_xPlacardUnit_toDefaultValue () {
    self.xPlacardUnit = 2286
  }

  //····················································································································

  final var xPlacardUnit : Int {
    get { return self.xPlacardUnit_property.propval }
    set { self.xPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: yPlacardUnit
  //····················································································································

  final let yPlacardUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_yPlacardUnit_toDefaultValue () {
    self.yPlacardUnit = 2286
  }

  //····················································································································

  final var yPlacardUnit : Int {
    get { return self.yPlacardUnit_property.propval }
    set { self.yPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: symbolObjects
  //····················································································································

  final let symbolObjects_property = StoredArrayOf_SymbolObject (usedForSignature: true)

  //····················································································································

  //····················································································································

  final var symbolObjects : EBReferenceArray <SymbolObject> {
    get { return self.symbolObjects_property.propval }
    set { self.symbolObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: symbolPins
  //····················································································································

  final let symbolPins_property = TransientArrayOfSuperOf_SymbolPin <SymbolObject> ()

  //····················································································································

  final var symbolPins : EBReferenceArray <SymbolPin> {
    get { return self.symbolPins_property.propval }
  }

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  final let selectedPageIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_selectedPageIndex_toDefaultValue () {
    self.selectedPageIndex = 0
  }

  //····················································································································

  final var selectedPageIndex : Int {
    get { return self.selectedPageIndex_property.propval }
    set { self.selectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  final var issues : CanariIssueArray? {
    switch self.issues_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.selectedInspector_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    self.comments_property = EBStoredProperty_String (defaultValue: "", undoManager: inUndoManager)
    self.horizontalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager)
    self.verticalFlip_property = EBStoredProperty_Bool (defaultValue: false, undoManager: inUndoManager)
    self.gridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line, undoManager: inUndoManager)
    self.gridDisplay_property = EBStoredProperty_Int (defaultValue: 4, undoManager: inUndoManager)
    self.zoom_property = EBStoredProperty_Int (defaultValue: 600, undoManager: inUndoManager)
    self.xPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.yPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: inUndoManager)
    self.selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: inUndoManager)
    super.init (inUndoManager)
//    gInitSemaphore.wait ()
  //--- To many property: symbolObjects (no option)
    self.symbolObjects_property.undoManager = inUndoManager
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let s0 = unwSelf.symbolObjects_property.selection
        let s1 = unwSelf.symbolPins_property.selection
        let s2 = unwSelf.symbolPins_property.selection
        let s3 = unwSelf.symbolPins_property.selection
        let s4 = unwSelf.symbolPins_property.selection
        switch (s0, s1, s2, s3, s4) {
        case (.single (let v0),
              .single (let v1),
              .single (let v2),
              .single (let v3),
              .single (let v4)) :
          return .single (transient_SymbolRoot_issues (v0, v1, v2, v3, v4))
        case (.multiple,
              .multiple,
              .multiple,
              .multiple,
              .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.symbolObjects_property.addEBObserverOf_issues (self.issues_property)
    self.symbolPins_property.addEBObserverOf_name (self.issues_property)
    self.symbolPins_property.addEBObserverOf_nameRect (self.issues_property)
    self.symbolPins_property.addEBObserverOf_xPin (self.issues_property)
    self.symbolPins_property.addEBObserverOf_yPin (self.issues_property)
//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
    self.symbolPins_property.setDataProvider (self.symbolObjects_property)
  //--- Register properties for handling signature
    self.comments_property.setSignatureObserver (observer: self)
    self.symbolObjects_property.setSignatureObserver (observer: self)
    self.xPlacardUnit_property.setSignatureObserver (observer: self)
    self.yPlacardUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································



  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    //--- Atomic property: selectedInspector
      self.selectedInspector_property.storeIn (dictionary: ioDictionary, forKey: "selectedInspector")
    //--- Atomic property: comments
      self.comments_property.storeIn (dictionary: ioDictionary, forKey: "comments")
    //--- Atomic property: horizontalFlip
      self.horizontalFlip_property.storeIn (dictionary: ioDictionary, forKey: "horizontalFlip")
    //--- Atomic property: verticalFlip
      self.verticalFlip_property.storeIn (dictionary: ioDictionary, forKey: "verticalFlip")
    //--- Atomic property: gridStyle
      self.gridStyle_property.storeIn (dictionary: ioDictionary, forKey: "gridStyle")
    //--- Atomic property: gridDisplay
      self.gridDisplay_property.storeIn (dictionary: ioDictionary, forKey: "gridDisplay")
    //--- Atomic property: zoom
      self.zoom_property.storeIn (dictionary: ioDictionary, forKey: "zoom")
    //--- Atomic property: xPlacardUnit
      self.xPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey: "xPlacardUnit")
    //--- Atomic property: yPlacardUnit
      self.yPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey: "yPlacardUnit")
  //--- To many property: symbolObjects
    self.store (
      managedObjectArray: self.symbolObjects_property.propval.values,
      relationshipName: "symbolObjects",
      intoDictionary: ioDictionary
    )
    //--- Atomic property: selectedPageIndex
      self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey: "selectedPageIndex")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
  //--- To many property: symbolObjects
    do{
      let array = readEntityArrayFromDictionary (
        inRelationshipName: "symbolObjects",
        inDictionary: inDictionary,
        managedObjectArray: inManagedObjectArray
      ) as! [SymbolObject]
      self.symbolObjects_property.setProp (EBReferenceArray (array))
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.readFrom (dictionary: inDictionary, forKey: "selectedInspector")
  //--- Atomic property: comments
    self.comments_property.readFrom (dictionary: inDictionary, forKey: "comments")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.readFrom (dictionary: inDictionary, forKey: "horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.readFrom (dictionary: inDictionary, forKey: "verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.readFrom (dictionary: inDictionary, forKey: "gridStyle")
  //--- Atomic property: gridDisplay
    self.gridDisplay_property.readFrom (dictionary: inDictionary, forKey: "gridDisplay")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey: "zoom")
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.readFrom (dictionary: inDictionary, forKey: "xPlacardUnit")
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.readFrom (dictionary: inDictionary, forKey: "yPlacardUnit")
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey: "selectedPageIndex")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "selectedInspector\n"
    ioString += "comments\n"
    ioString += "horizontalFlip\n"
    ioString += "verticalFlip\n"
    ioString += "gridStyle\n"
    ioString += "gridDisplay\n"
    ioString += "zoom\n"
    ioString += "xPlacardUnit\n"
    ioString += "yPlacardUnit\n"
    ioString += "selectedPageIndex\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "symbolObjects\n"
    ioString += "symbolPins\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.selectedInspector.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.comments.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.horizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.verticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridDisplay.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.zoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.selectedPageIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    enterToManyRelationshipObjectIndexes (from: self.symbolObjects.values, into: &ioData)
  }

  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
    if let range = inDictionary ["selectedInspector"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.selectedInspector = value
    }
    if let range = inDictionary ["comments"], let value = String.unarchiveFromDataRange (inData, range) {
      self.comments = value
    }
    if let range = inDictionary ["horizontalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.horizontalFlip = value
    }
    if let range = inDictionary ["verticalFlip"], let value = Bool.unarchiveFromDataRange (inData, range) {
      self.verticalFlip = value
    }
    if let range = inDictionary ["gridStyle"], let value = GridStyle.unarchiveFromDataRange (inData, range) {
      self.gridStyle = value
    }
    if let range = inDictionary ["gridDisplay"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.gridDisplay = value
    }
    if let range = inDictionary ["zoom"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.zoom = value
    }
    if let range = inDictionary ["xPlacardUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.xPlacardUnit = value
    }
    if let range = inDictionary ["yPlacardUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.yPlacardUnit = value
    }
    if let range = inDictionary ["selectedPageIndex"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.selectedPageIndex = value
    }
  }

  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
      if let range = inDictionary ["symbolObjects"], range.length > 0 {
        var relationshipArray = EBReferenceArray <SymbolObject> ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inRawObjectArray [idx].object as! SymbolObject)
        }
        self.symbolObjects = relationshipArray
      }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
  //--- To many property: symbolObjects
    for managedObject in self.symbolObjects.values {
      ioObjectArray.append (managedObject)
    }
  //--- To many property: symbolPins
    for managedObject in self.symbolPins.values {
      ioObjectArray.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulate (u32: self.comments_property.signature ())
    crc.accumulate (u32: self.symbolObjects_property.signature ())
    crc.accumulate (u32: self.xPlacardUnit_property.signature ())
    crc.accumulate (u32: self.yPlacardUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

