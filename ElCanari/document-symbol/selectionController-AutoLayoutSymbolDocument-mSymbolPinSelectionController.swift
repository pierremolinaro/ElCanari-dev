//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutSymbolDocument mSymbolPinSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutSymbolDocument_mSymbolPinSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: yPin
  //····················································································································

  let yPin_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: xName
  //····················································································································

  let xName_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: yName
  //····················································································································

  let yName_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: xNumber
  //····················································································································

  let xNumber_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: yNumber
  //····················································································································

  let yNumber_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: name
  //····················································································································

  let name_property = EBPropertyProxy_String ()
  //····················································································································
  //   Selection observable property: nameHorizontalAlignment
  //····················································································································

  let nameHorizontalAlignment_property = EBPropertyProxy_HorizontalAlignment ()
  //····················································································································
  //   Selection observable property: numberHorizontalAlignment
  //····················································································································

  let numberHorizontalAlignment_property = EBPropertyProxy_HorizontalAlignment ()
  //····················································································································
  //   Selection observable property: pinNameIsDisplayedInSchematics
  //····················································································································

  let pinNameIsDisplayedInSchematics_property = EBPropertyProxy_Bool ()
  //····················································································································
  //   Selection observable property: xPin
  //····················································································································

  let xPin_property = EBPropertyProxy_Int ()
  //····················································································································
  //   Selection observable property: filledBezierPath
  //····················································································································

  let filledBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································
  //   Selection observable property: nameRect
  //····················································································································

  let nameRect_property = EBTransientProperty_NSRect ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <SymbolPin> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_SymbolPin <SymbolObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_SymbolObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_yPin ()
    self.bind_property_xName ()
    self.bind_property_yName ()
    self.bind_property_xNumber ()
    self.bind_property_yNumber ()
    self.bind_property_name ()
    self.bind_property_nameHorizontalAlignment ()
    self.bind_property_numberHorizontalAlignment ()
    self.bind_property_pinNameIsDisplayedInSchematics ()
    self.bind_property_xPin ()
    self.bind_property_filledBezierPath ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_issues ()
    self.bind_property_nameRect ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- yPin
    self.yPin_property.mReadModelFunction = nil 
    self.yPin_property.mWriteModelFunction = nil 
    self.yPin_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yPin (self.yPin_property)
  //--- xName
    self.xName_property.mReadModelFunction = nil 
    self.xName_property.mWriteModelFunction = nil 
    self.xName_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xName (self.xName_property)
  //--- yName
    self.yName_property.mReadModelFunction = nil 
    self.yName_property.mWriteModelFunction = nil 
    self.yName_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yName (self.yName_property)
  //--- xNumber
    self.xNumber_property.mReadModelFunction = nil 
    self.xNumber_property.mWriteModelFunction = nil 
    self.xNumber_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xNumber (self.xNumber_property)
  //--- yNumber
    self.yNumber_property.mReadModelFunction = nil 
    self.yNumber_property.mWriteModelFunction = nil 
    self.yNumber_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_yNumber (self.yNumber_property)
  //--- name
    self.name_property.mReadModelFunction = nil 
    self.name_property.mWriteModelFunction = nil 
    self.name_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_name (self.name_property)
  //--- nameHorizontalAlignment
    self.nameHorizontalAlignment_property.mReadModelFunction = nil 
    self.nameHorizontalAlignment_property.mWriteModelFunction = nil 
    self.nameHorizontalAlignment_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_nameHorizontalAlignment (self.nameHorizontalAlignment_property)
  //--- numberHorizontalAlignment
    self.numberHorizontalAlignment_property.mReadModelFunction = nil 
    self.numberHorizontalAlignment_property.mWriteModelFunction = nil 
    self.numberHorizontalAlignment_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_numberHorizontalAlignment (self.numberHorizontalAlignment_property)
  //--- pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.mReadModelFunction = nil 
    self.pinNameIsDisplayedInSchematics_property.mWriteModelFunction = nil 
    self.pinNameIsDisplayedInSchematics_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_pinNameIsDisplayedInSchematics (self.pinNameIsDisplayedInSchematics_property)
  //--- xPin
    self.xPin_property.mReadModelFunction = nil 
    self.xPin_property.mWriteModelFunction = nil 
    self.xPin_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_xPin (self.xPin_property)
  //--- filledBezierPath
    self.filledBezierPath_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_filledBezierPath (self.filledBezierPath_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_issues (self.issues_property)
  //--- nameRect
    self.nameRect_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_nameRect (self.nameRect_property)
  }

  //····················································································································
  //    Explorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    private var mValueExplorer : NSButton?
    private var mExplorerWindow : NSWindow?
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
      let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
      let tf = NSTextField (frame:secondColumn (y))
      tf.isEnabled = true
      tf.isEditable = false
      tf.stringValue = name
      tf.font = font
      view.addSubview (tf)
      let valueExplorer = NSButton (frame: thirdColumn (y))
      valueExplorer.font = font
      valueExplorer.title = explorerIndexString (ebObjectIndex) + " " + String (describing: type (of: self))
      valueExplorer.target = self
      valueExplorer.action = #selector(SelectionController_AutoLayoutSymbolDocument_mSymbolPinSelectionController.showObjectWindowFromExplorerButton(_:))
      view.addSubview (valueExplorer)
      self.mValueExplorer = valueExplorer
      y += EXPLORER_ROW_HEIGHT
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func buildExplorerWindow () {
    //-------------------------------------------------- Create Window
      let r = NSRect (x: 20.0, y: 20.0, width: 10.0, height: 10.0)
      self.mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
    //-------------------------------------------------- Adding properties
      let view = NSView (frame: r)
      var y : CGFloat = 0.0
      createEntryForPropertyNamed (
        "yPin",
        idx: self.yPin_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.yPin_property.mObserverExplorer,
        valueExplorer: &self.yPin_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "xName",
        idx: self.xName_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.xName_property.mObserverExplorer,
        valueExplorer: &self.xName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "yName",
        idx: self.yName_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.yName_property.mObserverExplorer,
        valueExplorer: &self.yName_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "xNumber",
        idx: self.xNumber_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.xNumber_property.mObserverExplorer,
        valueExplorer: &self.xNumber_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "yNumber",
        idx: self.yNumber_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.yNumber_property.mObserverExplorer,
        valueExplorer: &self.yNumber_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "name",
        idx: self.name_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.name_property.mObserverExplorer,
        valueExplorer: &self.name_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "nameHorizontalAlignment",
        idx: self.nameHorizontalAlignment_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.nameHorizontalAlignment_property.mObserverExplorer,
        valueExplorer: &self.nameHorizontalAlignment_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "numberHorizontalAlignment",
        idx: self.numberHorizontalAlignment_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.numberHorizontalAlignment_property.mObserverExplorer,
        valueExplorer: &self.numberHorizontalAlignment_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "pinNameIsDisplayedInSchematics",
        idx: self.pinNameIsDisplayedInSchematics_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.pinNameIsDisplayedInSchematics_property.mObserverExplorer,
        valueExplorer: &self.pinNameIsDisplayedInSchematics_property.mValueExplorer
      )
      createEntryForPropertyNamed (
        "xPin",
        idx: self.xPin_property.ebObjectIndex,
        y: &y,
        view: view,
        observerExplorer: &self.xPin_property.mObserverExplorer,
        valueExplorer: &self.xPin_property.mValueExplorer
      )
    //-------------------------------------------------- Finish Window construction
    //--- Resize View
      let viewFrame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
      view.frame = viewFrame
    //--- Set content size
      self.mExplorerWindow?.setContentSize (NSSize (width: EXPLORER_ROW_WIDTH + 16.0, height: fmin (600.0, y)))
    //--- Set close button as 'remove window' button
      let closeButton : NSButton? = self.mExplorerWindow?.standardWindowButton (.closeButton)
      closeButton?.target = self
      closeButton?.action = #selector(SelectionController_AutoLayoutSymbolDocument_mSymbolPinSelectionController.deleteSelectionControllerWindowAction(_:))
    //--- Set window title
      let windowTitle = explorerIndexString (ebObjectIndex) + " " + String (describing: type (of: self))
      self.mExplorerWindow!.title = windowTitle
    //--- Add Scroll view
      let frame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
      let sw = NSScrollView (frame: frame)
      sw.hasVerticalScroller = true
      sw.documentView = view
      self.mExplorerWindow!.contentView = sw
    }
  #endif
  
  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func showObjectWindowFromExplorerButton (_ : Any) {
      if self.mExplorerWindow == nil {
        self.buildExplorerWindow ()
      }
      self.mExplorerWindow?.makeKeyAndOrderFront (nil)
    }
  #endif
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func deleteSelectionControllerWindowAction (_ : Any) {
      self.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func clearObjectExplorer () {
      if let closeButton = self.mExplorerWindow?.standardWindowButton (.closeButton) {
        closeButton.target = nil
      }
      self.mExplorerWindow?.orderOut (nil)
      self.mExplorerWindow = nil
    }
  #endif

  //····················································································································

  private final func bind_property_yPin () {
    self.selectedArray_property.addEBObserverOf_yPin (self.yPin_property)
    self.yPin_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yPin_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yPin_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yPin_property.setProp (inValue)
          }
        }
      }
    }
    self.yPin_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yPin_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_xName () {
    self.selectedArray_property.addEBObserverOf_xName (self.xName_property)
    self.xName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xName_property.setProp (inValue)
          }
        }
      }
    }
    self.xName_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xName_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_yName () {
    self.selectedArray_property.addEBObserverOf_yName (self.yName_property)
    self.yName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yName_property.setProp (inValue)
          }
        }
      }
    }
    self.yName_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yName_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_xNumber () {
    self.selectedArray_property.addEBObserverOf_xNumber (self.xNumber_property)
    self.xNumber_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xNumber_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xNumber_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xNumber_property.setProp (inValue)
          }
        }
      }
    }
    self.xNumber_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xNumber_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_yNumber () {
    self.selectedArray_property.addEBObserverOf_yNumber (self.yNumber_property)
    self.yNumber_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yNumber_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yNumber_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yNumber_property.setProp (inValue)
          }
        }
      }
    }
    self.yNumber_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yNumber_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_name () {
    self.selectedArray_property.addEBObserverOf_name (self.name_property)
    self.name_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.name_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.name_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.name_property.setProp (inValue)
          }
        }
      }
    }
    self.name_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.name_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_nameHorizontalAlignment () {
    self.selectedArray_property.addEBObserverOf_nameHorizontalAlignment (self.nameHorizontalAlignment_property)
    self.nameHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <HorizontalAlignment> ()
          var isMultipleSelection = false
          for object in v {
            switch object.nameHorizontalAlignment_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.nameHorizontalAlignment_property.mWriteModelFunction = { [weak self] (inValue : HorizontalAlignment) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.nameHorizontalAlignment_property.setProp (inValue)
          }
        }
      }
    }
    self.nameHorizontalAlignment_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : HorizontalAlignment, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.nameHorizontalAlignment_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_numberHorizontalAlignment () {
    self.selectedArray_property.addEBObserverOf_numberHorizontalAlignment (self.numberHorizontalAlignment_property)
    self.numberHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <HorizontalAlignment> ()
          var isMultipleSelection = false
          for object in v {
            switch object.numberHorizontalAlignment_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.numberHorizontalAlignment_property.mWriteModelFunction = { [weak self] (inValue : HorizontalAlignment) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.numberHorizontalAlignment_property.setProp (inValue)
          }
        }
      }
    }
    self.numberHorizontalAlignment_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : HorizontalAlignment, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.numberHorizontalAlignment_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_pinNameIsDisplayedInSchematics () {
    self.selectedArray_property.addEBObserverOf_pinNameIsDisplayedInSchematics (self.pinNameIsDisplayedInSchematics_property)
    self.pinNameIsDisplayedInSchematics_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pinNameIsDisplayedInSchematics_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.pinNameIsDisplayedInSchematics_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.pinNameIsDisplayedInSchematics_property.setProp (inValue)
          }
        }
      }
    }
    self.pinNameIsDisplayedInSchematics_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.pinNameIsDisplayedInSchematics_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_xPin () {
    self.selectedArray_property.addEBObserverOf_xPin (self.xPin_property)
    self.xPin_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xPin_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xPin_property.setProp (inValue)
          }
        }
      }
    }
    self.xPin_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xPin_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_filledBezierPath () {
    self.selectedArray_property.addEBObserverOf_filledBezierPath (self.filledBezierPath_property)
    self.filledBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSBezierPath> ()
          var isMultipleSelection = false
          for object in v {
            switch object.filledBezierPath_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_issues () {
    self.selectedArray_property.addEBObserverOf_issues (self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_nameRect () {
    self.selectedArray_property.addEBObserverOf_nameRect (self.nameRect_property)
    self.nameRect_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSRect> ()
          var isMultipleSelection = false
          for object in v {
            switch object.nameRect_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

