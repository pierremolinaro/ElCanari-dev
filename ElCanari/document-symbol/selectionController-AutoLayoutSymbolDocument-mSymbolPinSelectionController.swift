//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller AutoLayoutSymbolDocument mSymbolPinSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_AutoLayoutSymbolDocument_mSymbolPinSelectionController : EBSwiftBaseObject {

  //····················································································································
  //   Selection observable property: yPin
  //····················································································································

  final let yPin_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: xName
  //····················································································································

  final let xName_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: yName
  //····················································································································

  final let yName_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: xNumber
  //····················································································································

  final let xNumber_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: yNumber
  //····················································································································

  final let yNumber_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: name
  //····················································································································

  final let name_property = EBComputedProperty_String ()

  //····················································································································
  //   Selection observable property: nameHorizontalAlignment
  //····················································································································

  final let nameHorizontalAlignment_property = EBComputedProperty_HorizontalAlignment ()

  //····················································································································
  //   Selection observable property: numberHorizontalAlignment
  //····················································································································

  final let numberHorizontalAlignment_property = EBComputedProperty_HorizontalAlignment ()

  //····················································································································
  //   Selection observable property: pinNameIsDisplayedInSchematics
  //····················································································································

  final let pinNameIsDisplayedInSchematics_property = EBComputedProperty_Bool ()

  //····················································································································
  //   Selection observable property: xPin
  //····················································································································

  final let xPin_property = EBComputedProperty_Int ()

  //····················································································································
  //   Selection observable property: filledBezierPath
  //····················································································································

  final let filledBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  final let objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  final let selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  final let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································
  //   Selection observable property: nameRect
  //····················································································································

  final let nameRect_property = EBTransientProperty_NSRect ()

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : EBReferenceArray <SymbolPin> { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_SymbolPin <SymbolObject> ()

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_SymbolObject) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_yPin ()
    self.bind_property_xName ()
    self.bind_property_yName ()
    self.bind_property_xNumber ()
    self.bind_property_yNumber ()
    self.bind_property_name ()
    self.bind_property_nameHorizontalAlignment ()
    self.bind_property_numberHorizontalAlignment ()
    self.bind_property_pinNameIsDisplayedInSchematics ()
    self.bind_property_xPin ()
    self.bind_property_filledBezierPath ()
    self.bind_property_objectDisplay ()
    self.bind_property_selectionDisplay ()
    self.bind_property_issues ()
    self.bind_property_nameRect ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- yPin
    self.yPin_property.mReadModelFunction = nil 
    self.yPin_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_yPin_StopsBeingObserved (by: self.yPin_property)
  //--- xName
    self.xName_property.mReadModelFunction = nil 
    self.xName_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_xName_StopsBeingObserved (by: self.xName_property)
  //--- yName
    self.yName_property.mReadModelFunction = nil 
    self.yName_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_yName_StopsBeingObserved (by: self.yName_property)
  //--- xNumber
    self.xNumber_property.mReadModelFunction = nil 
    self.xNumber_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_xNumber_StopsBeingObserved (by: self.xNumber_property)
  //--- yNumber
    self.yNumber_property.mReadModelFunction = nil 
    self.yNumber_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_yNumber_StopsBeingObserved (by: self.yNumber_property)
  //--- name
    self.name_property.mReadModelFunction = nil 
    self.name_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_name_StopsBeingObserved (by: self.name_property)
  //--- nameHorizontalAlignment
    self.nameHorizontalAlignment_property.mReadModelFunction = nil 
    self.nameHorizontalAlignment_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_nameHorizontalAlignment_StopsBeingObserved (by: self.nameHorizontalAlignment_property)
  //--- numberHorizontalAlignment
    self.numberHorizontalAlignment_property.mReadModelFunction = nil 
    self.numberHorizontalAlignment_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_numberHorizontalAlignment_StopsBeingObserved (by: self.numberHorizontalAlignment_property)
  //--- pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.mReadModelFunction = nil 
    self.pinNameIsDisplayedInSchematics_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_pinNameIsDisplayedInSchematics_StopsBeingObserved (by: self.pinNameIsDisplayedInSchematics_property)
  //--- xPin
    self.xPin_property.mReadModelFunction = nil 
    self.xPin_property.mWriteModelFunction = nil 
    self.selectedArray_property.toMany_xPin_StopsBeingObserved (by: self.xPin_property)
  //--- filledBezierPath
    self.filledBezierPath_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_filledBezierPath_StopsBeingObserved (by: self.filledBezierPath_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_objectDisplay_StopsBeingObserved (by: self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_selectionDisplay_StopsBeingObserved (by: self.selectionDisplay_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_issues_StopsBeingObserved (by: self.issues_property)
  //--- nameRect
    self.nameRect_property.mReadModelFunction = nil 
    self.selectedArray_property.toMany_nameRect_StopsBeingObserved (by: self.nameRect_property)
  } */

  //····················································································································

  private final func bind_property_yPin () {
    self.selectedArray_property.toMany_yPin_StartsToBeObserved (by: self.yPin_property)
    self.yPin_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yPin_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yPin_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yPin_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xName () {
    self.selectedArray_property.toMany_xName_StartsToBeObserved (by: self.xName_property)
    self.xName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yName () {
    self.selectedArray_property.toMany_yName_StartsToBeObserved (by: self.yName_property)
    self.yName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yName_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yName_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xNumber () {
    self.selectedArray_property.toMany_xNumber_StartsToBeObserved (by: self.xNumber_property)
    self.xNumber_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xNumber_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xNumber_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xNumber_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_yNumber () {
    self.selectedArray_property.toMany_yNumber_StartsToBeObserved (by: self.yNumber_property)
    self.yNumber_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yNumber_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yNumber_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yNumber_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_name () {
    self.selectedArray_property.toMany_name_StartsToBeObserved (by: self.name_property)
    self.name_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.name_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.name_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.name_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_nameHorizontalAlignment () {
    self.selectedArray_property.toMany_nameHorizontalAlignment_StartsToBeObserved (by: self.nameHorizontalAlignment_property)
    self.nameHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <HorizontalAlignment> ()
          var isMultipleSelection = false
          for object in v {
            switch object.nameHorizontalAlignment_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.nameHorizontalAlignment_property.mWriteModelFunction = { [weak self] (inValue : HorizontalAlignment) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.nameHorizontalAlignment_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_numberHorizontalAlignment () {
    self.selectedArray_property.toMany_numberHorizontalAlignment_StartsToBeObserved (by: self.numberHorizontalAlignment_property)
    self.numberHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <HorizontalAlignment> ()
          var isMultipleSelection = false
          for object in v {
            switch object.numberHorizontalAlignment_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.numberHorizontalAlignment_property.mWriteModelFunction = { [weak self] (inValue : HorizontalAlignment) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.numberHorizontalAlignment_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_pinNameIsDisplayedInSchematics () {
    self.selectedArray_property.toMany_pinNameIsDisplayedInSchematics_StartsToBeObserved (by: self.pinNameIsDisplayedInSchematics_property)
    self.pinNameIsDisplayedInSchematics_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pinNameIsDisplayedInSchematics_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.pinNameIsDisplayedInSchematics_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.pinNameIsDisplayedInSchematics_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_xPin () {
    self.selectedArray_property.toMany_xPin_StartsToBeObserved (by: self.xPin_property)
    self.xPin_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xPin_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xPin_property.setProp (inValue)
          }
        }
      }
    }
  }
  //····················································································································

  private final func bind_property_filledBezierPath () {
    self.selectedArray_property.toMany_filledBezierPath_StartsToBeObserved (by: self.filledBezierPath_property)
    self.filledBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSBezierPath> ()
          var isMultipleSelection = false
          for object in v {
            switch object.filledBezierPath_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.toMany_objectDisplay_StartsToBeObserved (by: self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.toMany_selectionDisplay_StartsToBeObserved (by: self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_issues () {
    self.selectedArray_property.toMany_issues_StartsToBeObserved (by: self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_nameRect () {
    self.selectedArray_property.toMany_nameRect_StartsToBeObserved (by: self.nameRect_property)
    self.nameRect_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSRect> ()
          var isMultipleSelection = false
          for object in v {
            switch object.nameRect_property.selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

