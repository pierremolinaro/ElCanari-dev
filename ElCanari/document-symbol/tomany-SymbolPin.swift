//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolPin : ReadOnlyAbstractArrayProperty <SymbolPin> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolPin>,                            
                                 addedSet inAddedSet : EBReferenceSet <SymbolPin>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_yPin { // Stored property
        managedObject.yPin_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xName { // Stored property
        managedObject.xName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_yName { // Stored property
        managedObject.yName_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xNumber { // Stored property
        managedObject.xNumber_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_yNumber { // Stored property
        managedObject.yNumber_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_name { // Stored property
        managedObject.name_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_nameHorizontalAlignment { // Stored property
        managedObject.nameHorizontalAlignment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_numberHorizontalAlignment { // Stored property
        managedObject.numberHorizontalAlignment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_pinNameIsDisplayedInSchematics { // Stored property
        managedObject.pinNameIsDisplayedInSchematics_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_xPin { // Stored property
        managedObject.xPin_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_filledBezierPath { // Transient property
        managedObject.filledBezierPath_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_nameRect { // Transient property
        managedObject.nameRect_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_yPin { // Stored property
        managedObject.yPin_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xName { // Stored property
        managedObject.xName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_yName { // Stored property
        managedObject.yName_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xNumber { // Stored property
        managedObject.xNumber_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_yNumber { // Stored property
        managedObject.yNumber_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_name { // Stored property
        managedObject.name_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_nameHorizontalAlignment { // Stored property
        managedObject.nameHorizontalAlignment_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_numberHorizontalAlignment { // Stored property
        managedObject.numberHorizontalAlignment_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_pinNameIsDisplayedInSchematics { // Stored property
        managedObject.pinNameIsDisplayedInSchematics_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_xPin { // Stored property
        managedObject.xPin_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_filledBezierPath { // Transient property
        managedObject.filledBezierPath_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_nameRect { // Transient property
        managedObject.nameRect_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'yPin' stored property
  //····················································································································

  private final var mObserversOf_yPin : EBObservedObject? = nil

  //····················································································································

  final func toMany_yPin_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_yPin {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yPin_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yPin = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_yPin_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yPin?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'xName' stored property
  //····················································································································

  private final var mObserversOf_xName : EBObservedObject? = nil

  //····················································································································

  final func toMany_xName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_xName {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xName = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_xName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'yName' stored property
  //····················································································································

  private final var mObserversOf_yName : EBObservedObject? = nil

  //····················································································································

  final func toMany_yName_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_yName {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yName_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yName = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_yName_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yName?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'xNumber' stored property
  //····················································································································

  private final var mObserversOf_xNumber : EBObservedObject? = nil

  //····················································································································

  final func toMany_xNumber_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_xNumber {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xNumber_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xNumber = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_xNumber_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xNumber?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'yNumber' stored property
  //····················································································································

  private final var mObserversOf_yNumber : EBObservedObject? = nil

  //····················································································································

  final func toMany_yNumber_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_yNumber {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.yNumber_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_yNumber = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_yNumber_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_yNumber?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private final var mObserversOf_name : EBObservedObject? = nil

  //····················································································································

  final func toMany_name_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_name {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.name_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_name = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_name_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_name?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'nameHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_nameHorizontalAlignment : EBObservedObject? = nil

  //····················································································································

  final func toMany_nameHorizontalAlignment_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_nameHorizontalAlignment {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.nameHorizontalAlignment_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_nameHorizontalAlignment = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_nameHorizontalAlignment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_nameHorizontalAlignment?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'numberHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_numberHorizontalAlignment : EBObservedObject? = nil

  //····················································································································

  final func toMany_numberHorizontalAlignment_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_numberHorizontalAlignment {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.numberHorizontalAlignment_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_numberHorizontalAlignment = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_numberHorizontalAlignment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_numberHorizontalAlignment?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'pinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private final var mObserversOf_pinNameIsDisplayedInSchematics : EBObservedObject? = nil

  //····················································································································

  final func toMany_pinNameIsDisplayedInSchematics_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_pinNameIsDisplayedInSchematics {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.pinNameIsDisplayedInSchematics_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_pinNameIsDisplayedInSchematics = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_pinNameIsDisplayedInSchematics_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_pinNameIsDisplayedInSchematics?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'xPin' stored property
  //····················································································································

  private final var mObserversOf_xPin : EBObservedObject? = nil

  //····················································································································

  final func toMany_xPin_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_xPin {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.xPin_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_xPin = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_xPin_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_xPin?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'filledBezierPath' transient property
  //····················································································································

  private final var mObserversOf_filledBezierPath : EBObservedObject? = nil

  //····················································································································

  final func toMany_filledBezierPath_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_filledBezierPath {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.filledBezierPath_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_filledBezierPath = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_filledBezierPath_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_filledBezierPath?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObject? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues : EBObservedObject? = nil

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'nameRect' transient property
  //····················································································································

  private final var mObserversOf_nameRect : EBObservedObject? = nil

  //····················································································································

  final func toMany_nameRect_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObject
    if let r = self.mObserversOf_nameRect {
      relay = r
    }else{
      relay = EBObservedObject ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.nameRect_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_nameRect = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_nameRect_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_nameRect?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_SymbolPin is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_SymbolPin <SUPER : EBManagedObject> : ReadOnlyArrayOf_SymbolPin {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private let mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <SymbolPin> ()
      for superObject in newModelArray.values {
        if let object = superObject as? SymbolPin {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [SymbolPin] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <SymbolPin> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolPin : ReadOnlyArrayOf_SymbolPin {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <SymbolPin>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_SymbolPin is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_SymbolPin : ReadWriteArrayOf_SymbolPin, EBSignatureObserverProtocol, DocumentStorablePropertyProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <SymbolPin> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! SymbolPin)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    var objectArray = EBReferenceArray <SymbolPin> ()
    let indexArray = inData.base62EncodedIntArray (fromRange: inRange)
    for idx in indexArray {
      objectArray.append (inRawObjectArray [idx].object as! SymbolPin)
    }
    self.setProp (objectArray)
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    enterToManyRelationshipObjectIndexes (from: self.propval.values, into: &ioData)
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <SymbolPin>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolPin>,
                                 addedSet inAddedSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [SymbolPin] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <SymbolPin>) { self.mInternalArrayValue = inValue }

  //····················································································································

  final override var propval : EBReferenceArray <SymbolPin> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : SymbolPin) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : SymbolPin) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_SymbolPin is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

