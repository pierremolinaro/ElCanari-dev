//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolPin : ReadOnlyAbstractArrayProperty <SymbolPin> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolPin>,                            
                                 addedSet inAddedSet : EBReferenceSet <SymbolPin>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
      self.removeEBObserversOf_yPin_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_xName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_yName_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_xNumber_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_yNumber_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_name_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_nameHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_numberHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_pinNameIsDisplayedInSchematics_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_xPin_fromElementsOfSet (inRemovedSet) // Stored property
      self.removeEBObserversOf_filledBezierPath_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
      self.removeEBObserversOf_nameRect_fromElementsOfSet (inRemovedSet) // Transient property
    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
      self.addEBObserversOf_yPin_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_xName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_yName_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_xNumber_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_yNumber_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_name_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_nameHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_numberHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_pinNameIsDisplayedInSchematics_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_xPin_toElementsOfSet (inAddedSet) // Stored property
      self.addEBObserversOf_filledBezierPath_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
      self.addEBObserversOf_nameRect_toElementsOfSet (inAddedSet) // Transient property
   }
  }

  //····················································································································
  //   Observers of 'yPin' stored property
  //····················································································································

  private final var mObserversOf_yPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yPin (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPin.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPin (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPin.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yPin_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_yPin.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_yPin.dictionary {
          if let observer = entry.observer {
            managedObject.yPin_property.addEBObserver (observer)
          }else{
            self.mObserversOf_yPin.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPin_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_yPin.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.yPin_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_yPin.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'xName' stored property
  //····················································································································

  private final var mObserversOf_xName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xName_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_xName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_xName.dictionary {
          if let observer = entry.observer {
            managedObject.xName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_xName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xName_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_xName.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.xName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_xName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'yName' stored property
  //····················································································································

  private final var mObserversOf_yName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yName (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yName (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yName_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_yName.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_yName.dictionary {
          if let observer = entry.observer {
            managedObject.yName_property.addEBObserver (observer)
          }else{
            self.mObserversOf_yName.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yName_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_yName.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.yName_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_yName.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'xNumber' stored property
  //····················································································································

  private final var mObserversOf_xNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xNumber (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xNumber.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xNumber (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xNumber.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xNumber_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_xNumber.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_xNumber.dictionary {
          if let observer = entry.observer {
            managedObject.xNumber_property.addEBObserver (observer)
          }else{
            self.mObserversOf_xNumber.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xNumber_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_xNumber.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.xNumber_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_xNumber.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'yNumber' stored property
  //····················································································································

  private final var mObserversOf_yNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yNumber (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yNumber.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yNumber (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yNumber.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yNumber_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_yNumber.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_yNumber.dictionary {
          if let observer = entry.observer {
            managedObject.yNumber_property.addEBObserver (observer)
          }else{
            self.mObserversOf_yNumber.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yNumber_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_yNumber.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.yNumber_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_yNumber.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private final var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_name.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_name.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_name.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_name.dictionary {
          if let observer = entry.observer {
            managedObject.name_property.addEBObserver (observer)
          }else{
            self.mObserversOf_name.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_name.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.name_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_name.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'nameHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_nameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nameHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_nameHorizontalAlignment_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_nameHorizontalAlignment.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_nameHorizontalAlignment.dictionary {
          if let observer = entry.observer {
            managedObject.nameHorizontalAlignment_property.addEBObserver (observer)
          }else{
            self.mObserversOf_nameHorizontalAlignment.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nameHorizontalAlignment_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_nameHorizontalAlignment.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.nameHorizontalAlignment_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_nameHorizontalAlignment.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'numberHorizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_numberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_numberHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_numberHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.numberHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_numberHorizontalAlignment (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_numberHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.numberHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_numberHorizontalAlignment_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_numberHorizontalAlignment.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_numberHorizontalAlignment.dictionary {
          if let observer = entry.observer {
            managedObject.numberHorizontalAlignment_property.addEBObserver (observer)
          }else{
            self.mObserversOf_numberHorizontalAlignment.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_numberHorizontalAlignment_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_numberHorizontalAlignment.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.numberHorizontalAlignment_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_numberHorizontalAlignment.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'pinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private final var mObserversOf_pinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinNameIsDisplayedInSchematics (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinNameIsDisplayedInSchematics.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinNameIsDisplayedInSchematics (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinNameIsDisplayedInSchematics.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinNameIsDisplayedInSchematics_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_pinNameIsDisplayedInSchematics.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_pinNameIsDisplayedInSchematics.dictionary {
          if let observer = entry.observer {
            managedObject.pinNameIsDisplayedInSchematics_property.addEBObserver (observer)
          }else{
            self.mObserversOf_pinNameIsDisplayedInSchematics.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinNameIsDisplayedInSchematics_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_pinNameIsDisplayedInSchematics.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.pinNameIsDisplayedInSchematics_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_pinNameIsDisplayedInSchematics.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'xPin' stored property
  //····················································································································

  private final var mObserversOf_xPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xPin (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPin.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPin (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPin.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xPin_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    if !self.mObserversOf_xPin.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_xPin.dictionary {
          if let observer = entry.observer {
            managedObject.xPin_property.addEBObserver (observer)
          }else{
            self.mObserversOf_xPin.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPin_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for (_, entry) in self.mObserversOf_xPin.dictionary {
      if let observer = entry.observer {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.xPin_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_xPin.triggerPacking ()
      }
    }
  }

  //····················································································································
  //   Observers of 'filledBezierPath' transient property
  //····················································································································

  private final var mObserversOf_filledBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_filledBezierPath (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_filledBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.filledBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_filledBezierPath (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_filledBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.filledBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_filledBezierPath_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_filledBezierPath.dictionary {
        if let observer = entry.observer {
          managedObject.filledBezierPath_property.addEBObserver (observer)
        }else{
          self.mObserversOf_filledBezierPath.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_filledBezierPath_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_filledBezierPath.dictionary {
        if let observer = entry.observer {
          managedObject.filledBezierPath_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_filledBezierPath.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.observer {
          managedObject.objectDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_objectDisplay.dictionary {
        if let observer = entry.observer {
          managedObject.objectDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_objectDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.observer {
          managedObject.selectionDisplay_property.addEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_selectionDisplay.dictionary {
        if let observer = entry.observer {
          managedObject.selectionDisplay_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_selectionDisplay.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.observer {
          managedObject.issues_property.addEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_issues.dictionary {
        if let observer = entry.observer {
          managedObject.issues_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_issues.triggerPacking ()
        }
      }
    }
  }

  //····················································································································
  //   Observers of 'nameRect' transient property
  //····················································································································

  private final var mObserversOf_nameRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nameRect (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameRect.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameRect (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameRect.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_nameRect_toElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_nameRect.dictionary {
        if let observer = entry.observer {
          managedObject.nameRect_property.addEBObserver (observer)
        }else{
          self.mObserversOf_nameRect.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nameRect_fromElementsOfSet (_ inSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_nameRect.dictionary {
        if let observer = entry.observer {
          managedObject.nameRect_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_nameRect.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOf_SymbolPin : ReadOnlyArrayOf_SymbolPin {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : SymbolPin, _ right : SymbolPin) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_SymbolPin? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_SymbolPin,
                        sortCallback inSortCallBack : Optional < (_ left : SymbolPin, _ right : SymbolPin) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <SymbolPin>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [SymbolPin] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <SymbolPin> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_SymbolPin <SUPER : EBManagedObject> : ReadOnlyArrayOf_SymbolPin {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <SymbolPin> ()
      for superObject in newModelArray.values {
        if let object = superObject as? SymbolPin {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [SymbolPin] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <SymbolPin> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolPin : ReadOnlyArrayOf_SymbolPin {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <SymbolPin>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_SymbolPin : ReadWriteArrayOf_SymbolPin {

  //····················································································································

  private weak var mModel : ReadWriteArrayOf_SymbolPin? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_SymbolPin?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <SymbolPin>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <SymbolPin> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <SymbolPin>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [SymbolPin] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <SymbolPin> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_SymbolPin : ReadWriteArrayOf_SymbolPin, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    self.mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private final let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <SymbolPin>) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolPin>,
                                 addedSet inAddedSet : EBReferenceSet <SymbolPin>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [SymbolPin] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <SymbolPin>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <SymbolPin> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : SymbolPin) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : SymbolPin) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StandAloneArrayOf_SymbolPin : ReadWriteArrayOf_SymbolPin {

  //····················································································································

  override var selection : EBSelection < [SymbolPin] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <SymbolPin>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <SymbolPin> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : SymbolPin) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : SymbolPin) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_SymbolPin : StoredArrayOf_SymbolPin {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = EBReferenceArray <SymbolPin> ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "SymbolPin") as? SymbolPin {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_yPin (self.mObserverForWritingPreferences)
    self.addEBObserverOf_xName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_yName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_xNumber (self.mObserverForWritingPreferences)
    self.addEBObserverOf_yNumber (self.mObserverForWritingPreferences)
    self.addEBObserverOf_name (self.mObserverForWritingPreferences)
    self.addEBObserverOf_nameHorizontalAlignment (self.mObserverForWritingPreferences)
    self.addEBObserverOf_numberHorizontalAlignment (self.mObserverForWritingPreferences)
    self.addEBObserverOf_pinNameIsDisplayedInSchematics (self.mObserverForWritingPreferences)
    self.addEBObserverOf_xPin (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { [weak self] in self?.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue.values {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

