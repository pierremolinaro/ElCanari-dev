//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolText : ReadOnlyAbstractArrayProperty <SymbolText> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <SymbolText>,                            
                                 addedSet inAddedSet : EBReferenceSet <SymbolText>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    for managedObject in inRemovedSet.values {
      if let relay = self.mObserversOf_y { // Stored property
        managedObject.y_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_text { // Stored property
        managedObject.text_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_horizontalAlignment { // Stored property
        managedObject.horizontalAlignment_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_x { // Stored property
        managedObject.x_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.stopsBeingObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.stopsBeingObserved (by: relay)
      }
    }
  //--- Add observers to added objects
    for managedObject in inAddedSet.values {
      if let relay = self.mObserversOf_y { // Stored property
        managedObject.y_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_text { // Stored property
        managedObject.text_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_horizontalAlignment { // Stored property
        managedObject.horizontalAlignment_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_x { // Stored property
        managedObject.x_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_objectDisplay { // Transient property
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_selectionDisplay { // Transient property
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      if let relay = self.mObserversOf_issues { // Transient property
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
    }
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private final var mObserversOf_y : EBObservedObserver? = nil

  //····················································································································

  final func toMany_y_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_y {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.y_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_y = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_y_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_y?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'text' stored property
  //····················································································································

  private final var mObserversOf_text : EBObservedObserver? = nil

  //····················································································································

  final func toMany_text_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_text {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.text_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_text = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_text_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_text?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'horizontalAlignment' stored property
  //····················································································································

  private final var mObserversOf_horizontalAlignment : EBObservedObserver? = nil

  //····················································································································

  final func toMany_horizontalAlignment_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_horizontalAlignment {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.horizontalAlignment_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_horizontalAlignment = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_horizontalAlignment_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_horizontalAlignment?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private final var mObserversOf_x : EBObservedObserver? = nil

  //····················································································································

  final func toMany_x_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_x {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.x_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_x = relay
    }
    relay.startsToBeObserved (by: inObserver)
  }

  //····················································································································

  final func toMany_x_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_x?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_objectDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_objectDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.objectDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_objectDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_objectDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_objectDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay : EBObservedObserver? = nil

  //····················································································································

  final func toMany_selectionDisplay_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_selectionDisplay {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.selectionDisplay_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_selectionDisplay = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_selectionDisplay_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_selectionDisplay?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues : EBObservedObserver? = nil

  //····················································································································

  final func toMany_issues_StartsToBeObserved (by inObserver : EBObserverProtocol) {
    let relay : EBObservedObserver
    if let r = self.mObserversOf_issues {
      relay = r
    }else{
      relay = EBObservedObserver ()
      self.startsToBeObserved (by: relay)
      for managedObject in self.propval.values {
        managedObject.issues_property.startsToBeObserved (by: relay)
      }
      self.mObserversOf_issues = relay
    }
    relay.startsToBeObserved (by:  inObserver)
  }

  //····················································································································

  final func toMany_issues_StopsBeingObserved (by inObserver : EBObserverProtocol) {
    self.mObserversOf_issues?.stopsBeingObserved (by: inObserver)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SymbolText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// TransientArrayOf_SymbolText is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SymbolText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class TransientArrayOfSuperOf_SymbolText <SUPER : EBManagedObject> : ReadOnlyArrayOf_SymbolText {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private let mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <SymbolText> ()
      for superObject in newModelArray.values {
        if let object = superObject as? SymbolText {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [SymbolText] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <SymbolText> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ReadWriteArrayOf_SymbolText is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SymbolText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// ProxyArrayOf_SymbolText is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: SymbolText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// StoredArrayOf_SymbolText is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: SymbolText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// PreferencesArrayOf_SymbolText is useless.

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

