//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//   EBGraphicView
//--------------------------------------------------------------------------------------------------

final class EBGraphicView : NSView {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init? (coder : NSCoder) {
    fatalError ("init(coder:) has not been implemented")
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init () {
    super.init (frame: .zero)
    noteObjectAllocation (self)
    DispatchQueue.main.async { self.configureGraphicView () }
 }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  deinit {
    noteObjectDeallocation (self)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func viewDidMoveToWindow () {
    if self.window == nil { // Remove from window
      self.removeXYHelperWindow ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private func configureGraphicView () {
    self.postsFrameChangedNotifications = true
    NotificationCenter.default.addObserver (
      self,
      selector: #selector (self.ebFrameChanged (_:)),
      name: NSView.frameDidChangeNotification,
      object: self
    )
    self.installLiveScrollingNotification ()
    self.addEndLiveMagnificationObserver ()
    self.setNeedsDisplayAndUpdateViewBounds ()
  //--- Track flags changed events, event if view is not first responder
    self.mEventMonitor = NSEvent.addLocalMonitorForEvents (matching: .flagsChanged) { [weak self] (inEvent) in
      if let me = self {
        let unalignedLocationInView = me.convert (inEvent.locationInWindow, from: nil)
        if me.bounds.contains (unalignedLocationInView), let isKeyWindow = me.window?.isKeyWindow, isKeyWindow {
          me.flagsChanged (with: inEvent)
        }else{
          me.removeXYHelperWindow ()
        }
      }
      return inEvent
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mZoomDidChangeCallback : Optional < (_ inZoom : Int) -> Void > = nil
  var mHelperStringForOptionModifier : String? = nil
  var mHelperStringDidChangeCallback : Optional < (_ inString : String) -> Void > = nil
  var mXYwindow : NSWindow? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak var mFocusRingView : EBFocusRingView? = nil // SHOULD be weak

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func set (focusRingView inView : EBFocusRingView) {
    self.mFocusRingView = inView
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var isFlipped : Bool { return false }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mTrackingArea : NSTrackingArea? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mWorkingArea : WorkingArea? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mWorkingAreaRectStringController : EBGenericReadWritePropertyController <String>? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mZoomPropertyCache = 0 { // Used in EBGraphicView-magnify-and-zoom.swift
    didSet {
      if self.mZoomPropertyCache != oldValue {
        self.mZoomController?.updateModel (withValue: self.mZoomPropertyCache)
        self.applyZoom ()
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mEventMonitor : Any? = nil // For tracking option key change

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: Tool tips
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mTooltipsController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mTooltipArray = GraphicViewTooltipArray ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @objc private func ebFrameChanged (_ _ : Notification) {
    self.defineToolTips ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mMouseDownInterceptor : Optional < (_ inMouseDownLocationInView : NSPoint) -> Bool > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mMouseDownBehaviour = DefaultBehaviourOnMouseDown ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mStartOptionMouseDownCallback : Optional < (_ inUnalignedMouseLocation : NSPoint) -> Bool > = nil
  var mContinueOptionMouseDraggedCallback : Optional < (_ inUnalignedMouseLocation : NSPoint, _ inModifierFlags : NSEvent.ModifierFlags) -> Void > = nil
  var mAbortOptionMouseOperationCallback : Optional < () -> Void > = nil
  var mHelperStringOptionMouseOperationCallback : Optional < (_ inModifierFlags : NSEvent.ModifierFlags) -> String? > = nil
  var mStopOptionMouseUpCallback : Optional < (_ inUnalignedMouseLocation : NSPoint) -> Bool > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setOptionMouseCallbacks (start inStartCallback : @escaping (_ inUnalignedMouseLocation : NSPoint) -> Bool,
                                continue inContinueCallback : @escaping (_ inUnalignedMouseLocation : NSPoint, _ inModifierFlags : NSEvent.ModifierFlags) -> Void,
                                abort inAbortCallback : @escaping () -> Void,
                                helper inHelperCallback : @escaping (_ inModifierFlags : NSEvent.ModifierFlags) -> String?,
                                stop inStopCallback : @escaping (_ inUnalignedMouseLocation : NSPoint) -> Bool) {
    self.mStartOptionMouseDownCallback = inStartCallback
    self.mContinueOptionMouseDraggedCallback = inContinueCallback
    self.mAbortOptionMouseOperationCallback = inAbortCallback
    self.mHelperStringOptionMouseOperationCallback = inHelperCallback
    self.mStopOptionMouseUpCallback = inStopCallback
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

   private(set) var mMouseMovedOrFlagsChangedCallback : Optional < (_ inMouseUnalignedLocation : NSPoint) -> Void> = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setMouseMovedOrFlagsChangedCallback (_ inCallback : @escaping (_ inMouseUnalignedLocation : NSPoint) -> Void) {
    self.mMouseMovedOrFlagsChangedCallback = inCallback
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mOptionalFrontShape : EBShape? = nil {
    didSet {
      if self.mOptionalFrontShape != oldValue {
        if let oldBox = oldValue?.boundingBox {
          self.setNeedsDisplay (oldBox)
        }
        if let newBox = self.mOptionalFrontShape?.boundingBox {
          self.setNeedsDisplay (newBox)
        }
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) var mMouseExitCallback : Optional < () -> Void> = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setMouseExitCallback (_ inCallback : @escaping () -> Void) {
    self.mMouseExitCallback = inCallback
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) var mKeyDownCallback : Optional < (_ inMouseLocation : NSPoint, _ inKey : UnicodeScalar) -> Void> = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setKeyDownCallback (_ inCallback : @escaping (_ inMouseLocation : NSPoint, _ inKey : UnicodeScalar) -> Void) {
    self.mKeyDownCallback = inCallback
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) weak var mViewController : EBGraphicViewControllerProtocol? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func set (controller inController : EBGraphicViewControllerProtocol?) {
    self.mViewController = inController
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func objectWithIndexIsSelected (_ inIndex : Int) -> Bool {
    return self.mViewController?.selectedIndexesSet.contains (inIndex) ?? false
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mSelectionRectangle : NSRect? = nil {
    didSet {
      if let oldSelectionRectangle = oldValue {
        self.setNeedsDisplay (oldSelectionRectangle.insetBy (dx: -1.0, dy: -1.0))
      }
      if let newSelectionRectangle = self.mSelectionRectangle {
        self.setNeedsDisplay (newSelectionRectangle.insetBy (dx: -1.0, dy: -1.0))
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mUnderObjectsDisplay = EBShape () {
    didSet {
      self.noteInvalidRectangles (old: oldValue, new: self.mUnderObjectsDisplay)
      if self.mUnderObjectsDisplay != oldValue {
        self.setNeedsDisplayAndUpdateViewBounds ()
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mUnderObjectsDisplayController : EBObservablePropertyController?

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mOverObjectsDisplay = EBShape () {
    didSet {
      self.noteInvalidRectangles (old: oldValue, new: self.mOverObjectsDisplay)
      if self.mOverObjectsDisplay != oldValue {
        self.setNeedsDisplayAndUpdateViewBounds ()
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mOverObjectsDisplayController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGuideBezierPath : NSBezierPath? = nil {
    willSet {
      self.invalidateGuideBezierPath ()
    }
    didSet {
      self.invalidateGuideBezierPath ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) var mArrowKeyMagnitude : Int = 0

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func set (arrowKeyMagnitude : Int) {
    self.mArrowKeyMagnitude = arrowKeyMagnitude
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mArrowKeyMagnitudeController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) var mShiftArrowKeyMagnitude : Int = 0

 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -····················

  func set (shiftArrowKeyMagnitude : Int) {
    self.mShiftArrowKeyMagnitude = shiftArrowKeyMagnitude
  }

 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -····················

  var mShiftArrowKeyMagnitudeController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mBackColor : NSColor = NSColor.white {
    didSet {
      self.needsDisplay = true
      if let scrollView = self.superview?.superview as? NSScrollView {
        scrollView.backgroundColor = self.mBackColor
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mBackColorController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) var mObjectDisplayArray = [EBShape] () {
    didSet {
      if self.mObjectDisplayArray != oldValue {
        self.noteInvalidRectangles (old: oldValue, new: self.mObjectDisplayArray)
        self.setNeedsDisplayAndUpdateViewBounds ()
        self.defineToolTips ()
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var objectDisplayBounds : NSRect {
    var r = NSZeroRect
    for shape in self.mObjectDisplayArray {
      r = r.union (shape.boundingBox)
    }
    return r
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func updateObjectDisplay (_ inObjectDisplayArray : [EBShape]) {
    self.mObjectDisplayArray = inObjectDisplayArray
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var contentsBoundingBox : NSRect {
    var r = NSRect () // For including (0, 0)
    r = r.union (self.objectDisplayBounds)
    r = r.union (self.mIssueBezierPathes.boundingBox)
    r = r.union (self.mUnderObjectsDisplay.boundingBox)
    r = r.union (self.mOverObjectsDisplay.boundingBox)
    r = r.union (self.selectionShapeBoundingBox)
    if let ciImage = self.mBackgroundImage {
      let rImage = ciImage.extent
      let bp = self.mBackgroundImageAffineTransform.transform (NSBezierPath (rect: rImage))
      r = r.union (bp.bounds)
    }
    if let ciImage = self.mForegroundImage {
      let rImage = ciImage.extent
      let bp = self.mForegroundImageAffineTransform.transform (NSBezierPath (rect: rImage))
      r = r.union (bp.bounds)
    }
    return r
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileprivate(set) var mMouseGridInCanariUnit : Int = 1 // No grid for mouse

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func set (mouseGridInCanariUnit : Int) {
    self.mMouseGridInCanariUnit = mouseGridInCanariUnit
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mMouseGridController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) var mPasteboardType : NSPasteboard.PasteboardType? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func register (pasteboardType inPasteboardType : NSPasteboard.PasteboardType?) {
    self.mPasteboardType = inPasteboardType
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   MARK: -
  //   Selection Layer
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSelectionShapes = [EBShape] ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var selectionShapes : [EBShape] {
    self.mViewController?.computeSelectionShape ()
    return self.mSelectionShapes
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var selectionShapeBoundingBox : NSRect {
    var r = NSRect.null
    for shape in self.mSelectionShapes {
      r = r.union (shape.boundingBox)
    }
    return r
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func updateSelectionShape (_ inShapes : [EBShape]) {
    if self.mSelectionShapes != inShapes {
//      Swift.print ("updateSelectionShape Change")
      for shape in self.mSelectionShapes {
        if !shape.boundingBox.isEmpty {
          // Swift.print ("  old \(shape.boundingBox)")
          self.setNeedsDisplay (shape.boundingBox.insetBy(dx: -1.0, dy: -1.0))
        }
      }
      self.mSelectionShapes = inShapes
      for shape in self.mSelectionShapes {
        if !shape.boundingBox.isEmpty {
           //Swift.print ("  new \(shape.boundingBox)")
          self.setNeedsDisplay (shape.boundingBox.insetBy(dx: -1.0, dy: -1.0))
        }
      }
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setNeedsDisplayAndUpdateViewBounds () {
    self.needsDisplay = true
    self.deferredApplyZoom ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private func deferredApplyZoom () {
    // Swift.print ("deferredApplyZoom")
    if NSEvent.pressedMouseButtons == 0 { // No pressed button
      self.applyZoom ()
    }else{
      DispatchQueue.main.async { self.deferredApplyZoom () }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setHelperTextField (_ inString : String) {
    self.mHelperStringDidChangeCallback? (inString)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) var mXPlacardUnit = 2286 // mils

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func set (XPlacardUnit inUnit : Int) {
     self.mXPlacardUnit = inUnit
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mXPlacardUnitController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) var mYPlacardUnit = 2286 // mils

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func set (YPlacardUnit inUnit : Int) {
     self.mYPlacardUnit = inUnit
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mYPlacardUnitController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mIssueBezierPathes = [EBBezierPath] ()
  var mIssueKind : CanariIssue.Kind = .error // Any value, not used if mIssueBezierPathes is empty

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mZoomController : EBGenericReadWritePropertyController <Int>? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mHorizontalFlip = false
  private var mVerticalFlip = false

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func set (horizontalFlip inFlip : Bool) {
    self.flip (horizontal: inFlip, vertical: self.mVerticalFlip)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var horizontalFlip : Bool {
    return self.mHorizontalFlip
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setVerticalFlip (_ inFlip : Bool) {
    self.flip (horizontal: self.mHorizontalFlip, vertical: inFlip)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var verticalFlip : Bool {
    return self.mVerticalFlip
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileprivate func flip (horizontal inHorizontalFlip : Bool, vertical inVerticalFlip : Bool) {
     if let clipView = self.superview as? NSClipView {
       let toggleHorizontalFlip : CGFloat = (inHorizontalFlip != self.mHorizontalFlip) ? -1.0 : 1.0
       let toggleVerticalFlip   : CGFloat = (inVerticalFlip   != self.mVerticalFlip)   ? -1.0 : 1.0
       clipView.scaleUnitSquare (to: NSSize (width: toggleHorizontalFlip, height: toggleVerticalFlip))
       self.mHorizontalFlip = inHorizontalFlip
       self.mVerticalFlip = inVerticalFlip
     }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mHorizontalFlipController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mVerticalFlipController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mWorkingAreaColorController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Grid Style
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridStyle : GridStyle = .noGrid {
    didSet {
      if self.mGridStyle != oldValue {
        self.needsDisplay = true
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridStyleController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridStepInCanariUnit : Int = milsToCanariUnit (fromInt: 25) {
    didSet {
      if (self.mGridStepInCanariUnit != oldValue) && (self.mGridStyle != .noGrid)  {
        self.needsDisplay = true
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridStepController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridDisplayFactor : Int = 4 {
    didSet {
      if (self.mGridDisplayFactor != oldValue) && (self.mGridStyle != .noGrid)  {
        self.needsDisplay = true
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridDisplayFactorController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridLineColor : NSColor = .black {
    didSet {
      if (self.mGridLineColor != oldValue) && (self.mGridStyle == .line)  {
        self.needsDisplay = true
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridLineColorController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridCrossColor : NSColor = .black {
    didSet {
      if (self.mGridCrossColor != oldValue) && (self.mGridStyle == .cross)  {
        self.needsDisplay = true
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mGridCrossColorController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mContextualMenuBuilder : Optional < (_ inPoint : CanariPoint) -> NSMenu? > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // MARK: -
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var acceptsFirstResponder : Bool { return true }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mIsFirstResponder = false {
    didSet {
      if self.mIsFirstResponder != oldValue {
        self.mFocusRingView?.setFocusRing (self.mIsFirstResponder)
      }
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func becomeFirstResponder () -> Bool {
    self.mIsFirstResponder = true
    return true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func resignFirstResponder () -> Bool {
    self.mIsFirstResponder = false
    return true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // BACKGROUND IMAGE
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mBackgroundImage : CIImage? = nil {
    didSet {
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  var mBackgroundImageDataController : EBObservablePropertyController? = nil

  var mBackgroundImageOpacity : CGFloat = 1.0
//  var mBackgroundImageOpacityController : EBObservablePropertyController? = nil

  var mBackgroundImageAffineTransform = NSAffineTransform () {
    didSet {
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // FOREGROUND IMAGE
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var mForegroundImage : CIImage? = nil {
    didSet {
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  var mForegroundImageDataController : EBObservablePropertyController? = nil

  var mForegroundImageOpacity : CGFloat = 1.0
  var mForegroundImageOpacityController : EBObservablePropertyController? = nil

  var mForegroundImageAffineTransform = NSAffineTransform () {
    didSet {
      self.setNeedsDisplayAndUpdateViewBounds ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // REGISTER DRAGGED TYPES
  // MARK: -
  // https://stackoverflow.com/questions/4782636/nsview-subviews-interrupting-drag-operation
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func register (draggedTypes inPasteboardTypes : [NSPasteboard.PasteboardType]) {
    if let scrollView = self.enclosingScrollView {
      scrollView.registerForDraggedTypes (inPasteboardTypes)
    }else{
      self.registerForDraggedTypes (inPasteboardTypes)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // USES OPTION KEY FOR DUPLICATING SELECTED OBJECTS
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private(set) var mUsesOptionKeyForDuplicatingSelectedObjects = true

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setUsesOptionKeyForDuplicatingSelectedObjects (_ inFlag : Bool) {
    self.mUsesOptionKeyForDuplicatingSelectedObjects = inFlag
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

