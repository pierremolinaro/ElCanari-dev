//
//  AutoLayoutImageObserverView.swift
//
//  Created by Pierre Molinaro on 05/02/2021.
//
//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//   AutoLayoutImageObserverView
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class AutoLayoutImageObserverView : ALB_NSImageView {

  //································································································

  private let mControlSize : EBControlSize?
  private let mWidth : CGFloat?

  //································································································

//  override init () {
//    self.mControlSize = nil
//    self.mWidth = nil
//    super.init ()
//
//    self.imageScaling = .scaleProportionallyUpOrDown
//    self.imageFrameStyle = .none
//
////    self.setContentCompressionResistancePriority (.defaultHigh, for: .horizontal)
////    self.setContentCompressionResistancePriority (.defaultHigh, for: .vertical)
//  }

  //································································································

  init (width inWidth : CGFloat) {
    self.mControlSize = nil
    self.mWidth = inWidth
    super.init ()

    self.imageScaling = .scaleProportionallyUpOrDown
    self.imageFrameStyle = .none

//    self.setContentCompressionResistancePriority (.defaultHigh, for: .horizontal)
//    self.setContentCompressionResistancePriority (.defaultHigh, for: .vertical)
  }

  //································································································

  init (size inControlSize : EBControlSize) {
    self.mControlSize = inControlSize
    self.mWidth = nil
    super.init ()

    self.imageScaling = .scaleProportionallyUpOrDown
    self.imageFrameStyle = .none
    self.controlSize = inControlSize.cocoaControlSize
    self.frame.size = self.intrinsicContentSize
  }

  //································································································

  required init? (coder : NSCoder) {
    fatalError ("init(coder:) has not been implemented")
  }

  //································································································

  override var intrinsicContentSize : NSSize {
    if let controlSize = self.mControlSize {
      let s : CGFloat
      switch controlSize {
      case .mini : s = 15.0 // ???
      case .small : s = 17.0
      case .regular : s =  24.0
      }
      return NSSize (width: s, height: s)
   }else if let width = self.mWidth {
      return NSSize (width: width, height: NSView.noIntrinsicMetric)
   }else{
      return super.intrinsicContentSize
    }
  }

  //································································································
  //  $enabled binding
  //································································································

  private var mEnabledBindingController : EnabledBindingController? = nil

  //································································································

  final func bind_enabled (_ inExpression : EBMultipleBindingBooleanExpression) -> Self {
    self.mEnabledBindingController = EnabledBindingController (inExpression, self)
    return self
  }

  //································································································
  //  image binding
  //································································································

  fileprivate func updateImage (_ inObjectSelection : EBSelection <NSImage>) {
    switch inObjectSelection {
    case .empty, .multiple :
      self.image = nil
      self.enable (fromValueBinding: false, self.mEnabledBindingController)
    case .single (let propertyValue) :
      self.image = propertyValue
      self.enable (fromValueBinding: true, self.mEnabledBindingController)
    }
  }

  //································································································

  fileprivate var mImageController : EBObservablePropertyController? = nil

  //································································································

  final func bind_image (_ inObject : EBObservableProperty <NSImage>) -> Self {
    self.mImageController = EBObservablePropertyController (
      observedObjects: [inObject],
      callBack: { [weak self] in self?.updateImage (inObject.selection) ; }
    )
    return self
  }

  //································································································
  //  tooltip binding
  //································································································

  fileprivate func updateTooltip (_ inObjectSelection : EBSelection <String>) {
    switch inObjectSelection {
    case .empty, .multiple :
      self.toolTip = nil
      self.enable (fromValueBinding: false, self.mEnabledBindingController)
    case .single (let propertyValue) :
      self.toolTip = propertyValue
      self.enable (fromValueBinding: true, self.mEnabledBindingController)
    }
  }

  //································································································

  private var mTooltipController : EBObservablePropertyController? = nil

  //································································································

  final func bind_tooltip (_ inObject : EBObservableProperty <String>) -> Self {
    self.mTooltipController = EBObservablePropertyController (
      observedObjects: [inObject],
      callBack: { [weak self] in self?.updateTooltip (inObject.selection) }
    )
    return self
  }

  //································································································
  //  $hidden binding
  //································································································

  private var mHiddenBindingController : HiddenBindingController? = nil

  //································································································

  final func bind_hidden (_ inExpression : EBMultipleBindingBooleanExpression) -> Self {
    self.mHiddenBindingController = HiddenBindingController (inExpression, self)
    return self
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
