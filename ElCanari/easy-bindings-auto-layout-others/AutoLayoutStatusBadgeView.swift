//
//  AutoLayoutStatusBadge.swift
//  ElCanari
//
//  Created by Pierre Molinaro on 25/03/2023.
//
//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

private let BADGE_WIDTH : CGFloat = 16.0

//--------------------------------------------------------------------------------------------------
//   AutoLayoutStatusBadgeView
//--------------------------------------------------------------------------------------------------

final class AutoLayoutStatusBadgeView : ALB_NSView {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mWarningCount : Int = 0
  private var mErrorCount : Int = 0

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var intrinsicContentSize : NSSize {
    return NSSize (width: BADGE_WIDTH, height: BADGE_WIDTH)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func draw (_ inDirtyRect : NSRect) {
  //--- Color and text
    let color : NSColor
    let str : String
    if self.mErrorCount > 0 {
      color = NSColor.systemRed
      str = "\(min (self.mErrorCount, 99))"
    }else if self.mWarningCount > 0 {
      color = NSColor.systemOrange
      str = "\(min (self.mWarningCount, 99))"
    }else{
      color = NSColor.systemGreen
      str = ""
    }
    color.setFill ()
    let r = NSRect (
      center: self.bounds.center,
      size: NSSize (width: BADGE_WIDTH, height: BADGE_WIDTH)
    )
    let bp = NSBezierPath (ovalIn: r)
    bp.fill ()
  //---
    let textAttributes : [NSAttributedString.Key : Any] = [
      NSAttributedString.Key.font : NSFont.boldSystemFont (ofSize: 10.0),
      NSAttributedString.Key.foregroundColor : NSColor.white
    ]
    let size = str.size (withAttributes: textAttributes)
    let p = NSPoint (x: self.bounds.center.x - size.width / 2.0, y: self.bounds.center.y - size.height / 2.0)
    str.draw (at: p, withAttributes: textAttributes)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  $warningCount binding
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mWarningCountController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_warningCount (_ inObject : EBObservableProperty <Int>) -> Self {
    self.mWarningCountController = EBObservablePropertyController (
      observedObjects: [inObject],
      callBack: { [weak self] in self?.updateWarningCount (inObject.selection) }
    )
    return self
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileprivate func updateWarningCount (_ inObjectSelection : EBSelection <Int>) {
    switch inObjectSelection {
    case .empty, .multiple :
      self.mWarningCount = 0
    case .single (let propertyValue) :
      self.mWarningCount = propertyValue
    }
    self.needsDisplay = true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  $errorCount binding
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mErrorCountController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_errorCount (_ inObject : EBObservableProperty <Int>) -> Self {
    self.mErrorCountController = EBObservablePropertyController (
      observedObjects: [inObject],
      callBack: { [weak self] in self?.updateErrorCount (inObject.selection) }
    )
    return self
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileprivate func updateErrorCount (_ inObjectSelection : EBSelection <Int>) {
    switch inObjectSelection {
    case .empty, .multiple :
      self.mErrorCount = 0
    case .single (let propertyValue) :
      self.mErrorCount = propertyValue
    }
    self.needsDisplay = true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  tooltip binding
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileprivate func updateTooltip (_ inObjectSelection : EBSelection <String>) {
    switch inObjectSelection {
    case .empty, .multiple :
      self.toolTip = nil
    case .single (let propertyValue) :
      self.toolTip = propertyValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mTooltipController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_tooltip (_ inObject : EBObservableProperty <String>) -> Self {
    self.mTooltipController = EBObservablePropertyController (
      observedObjects: [inObject],
      callBack: { [weak self] in self?.updateTooltip (inObject.selection) }
    )
    return self
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  $status binding
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mStatusController : EBObservablePropertyController? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_status (_ inObject : EBObservableProperty <Int>) -> Self {
    self.mStatusController = EBObservablePropertyController (
      observedObjects: [inObject],
      callBack: { [weak self] in self?.updateStatus (inObject.selection) }
    )
    return self
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileprivate func updateStatus (_ inObjectSelection : EBSelection <Int>) {
    switch inObjectSelection {
    case .empty, .multiple :
      self.mErrorCount = 0
    case .single (let propertyValue) :
      self.mErrorCount = propertyValue
    }
    self.needsDisplay = true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
