//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//   AutoLayoutDoubleSlider
//--------------------------------------------------------------------------------------------------

final class AutoLayoutDoubleSlider : ALB_NSSlider {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mWidth : Int
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (width inWidth : Int, min inMin : Int, max inMax : Int, ticks inTickCount : Int) {
    self.mWidth = inWidth
    super.init (min: inMin, max: inMax, ticks: inTickCount)

    if inWidth < 0 {
      _ = self.expandableWidth ()
    }
    self.allowsTickMarkValuesOnly = true
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init? (coder : NSCoder) {
    fatalError ("init(coder:) has not been implemented")
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func sendAction (_ action : Selector?, to : Any?) -> Bool {
    self.mValueController?.updateModel (withValue: self.doubleValue)
    let r = super.sendAction (action, to: to)
    flushOutletEvents ()
    return r
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var intrinsicContentSize : NSSize {
    var s = super.intrinsicContentSize
    if self.mWidth >= 0 {
      s.width = CGFloat (self.mWidth)
    }
    return s
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  doubleValue binding
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileprivate func update (from object : EBObservableProperty <Double>) {
    switch object.selection {
    case .empty, .multiple :
      self.stringValue = "-"
      self.enable (fromValueBinding: false, self.enabledBindingController ())
    case .single (let propertyValue) :
      self.doubleValue = propertyValue
      self.enable (fromValueBinding: true, self.enabledBindingController ())
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mValueController : EBGenericReadWritePropertyController <Double>? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func bind_value (_ object : EBObservableMutableProperty <Double>) -> Self {
    self.mValueController = EBGenericReadWritePropertyController <Double> (
      observedObject: object,
      callBack: { [weak self] in self?.update (from: object) }
    )
    return self
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//  final func unbind_value () {
//    self.mValueController?.unregister ()
//    self.mValueController = nil
//  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
