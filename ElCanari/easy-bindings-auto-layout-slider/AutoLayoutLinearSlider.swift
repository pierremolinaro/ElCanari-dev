//
//  AutoLayoutLinearSlider.swift
//  ElCanari
//
//  Created by Pierre Molinaro on 06/02/2021.
//
//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//   AutoLayoutLinearSlider
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class AutoLayoutLinearSlider : ALB_NSSlider_enabled_hidden_bindings {

  //································································································

  override init (min inMin : Int, max inMax : Int, ticks inMarkCount : Int) {
    super.init (min: inMin, max: inMax, ticks: inMarkCount)

    self.controlSize = .small
    self.font = NSFont.systemFont (ofSize: NSFont.systemFontSize (for: self.controlSize))
    self.sliderType = .linear
  }

  //································································································

  required init? (coder inCoder : NSCoder) {
    fatalError ("init(coder:) has not been implemented")
  }

  //································································································

  func setAllowsTickMarkValuesOnly () -> Self {
    self.allowsTickMarkValuesOnly = true
    return self
  }

  //································································································

  override func sendAction (_ action : Selector?, to : Any?) -> Bool {
    self.mDoubleValueController?.updateModel (withValue: self.doubleValue)
    self.mIntValueController?.updateModel (withValue: Int (self.doubleValue.rounded ()))
    let r = super.sendAction (action, to: to)
    flushOutletEvents ()
    return r
  }

  //································································································
  //  doubleValue binding
  //································································································

  fileprivate func updateDoubleValue (_ object : EBObservableProperty <Double>) {
    switch object.selection {
    case .empty, .multiple :
      self.stringValue = "-"
      self.enable (fromValueBinding: false, self.enabledBindingController)
    case .single (let propertyValue) :
      self.doubleValue = propertyValue
      self.enable (fromValueBinding: true, self.enabledBindingController)
    }
  }

  //································································································

  private var mDoubleValueController : EBGenericReadWritePropertyController <Double>? = nil

  //································································································

  final func bind_doubleValue (_ inObject : EBObservableMutableProperty <Double>, sendContinously : Bool) -> Self {
    self.mDoubleValueController = EBGenericReadWritePropertyController <Double> (
      observedObject: inObject,
      callBack: { [weak self] in self?.updateDoubleValue (inObject) }
    )
    self.isContinuous = sendContinously
    return self
  }

  //································································································
  //  intValue binding
  //································································································

  fileprivate func updateIntValue (_ object : EBObservableProperty <Int>) {
    switch object.selection {
    case .empty, .multiple :
      self.stringValue = "-"
      self.enable (fromValueBinding: false, self.enabledBindingController)
    case .single (let propertyValue) :
      self.doubleValue = Double (propertyValue)
      self.enable (fromValueBinding: true, self.enabledBindingController)
    }
  }

  //································································································

  private var mIntValueController : EBGenericReadWritePropertyController <Int>? = nil

  //································································································

  final func bind_intValue (_ inObject : EBObservableMutableProperty <Int>, sendContinously : Bool) -> Self {
    self.mIntValueController = EBGenericReadWritePropertyController <Int> (
      observedObject: inObject,
      callBack: { [weak self] in self?.updateIntValue (inObject) }
    )
    self.isContinuous = sendContinously
    return self
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
