//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------

let ENTITY_KEY = "--entity"

//--------------------------------------------------------------------------------------------------
//  EBSignatureObserverProtocol
//--------------------------------------------------------------------------------------------------

@MainActor @objc protocol EBSignatureObserverProtocol : AnyObject {
  func clearSignatureCache ()
  func signature () -> UInt32
}

//--------------------------------------------------------------------------------------------------

struct RawObject {
  let object : EBManagedObject
  let propertyDictionary : [String : NSRange]
}

//--------------------------------------------------------------------------------------------------

protocol AnySendableObject : AnyObject, Sendable {
}

//--------------------------------------------------------------------------------------------------

class EBManagedObject : EBSignatureObserverProtocol, AnySendableObject {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var className : String { return String (describing: type (of: self)) }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak final var mUndoManager : UndoManager? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var savingIndex : Int { return self.mSavingIndex }

  final private var mSavingIndex = 0

  final func setSavingIndex (_ inIndex : Int) {
    self.mSavingIndex = inIndex
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  init
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  required init (_ inUndoManager : UndoManager?) {
    self.mUndoManager = inUndoManager
    noteObjectAllocation (self)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  deinit {
    noteObjectDeallocation (self)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var objectIndex : Int { return objectIntIdentifier (self) }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Getters
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final var undoManager : UndoManager? { self.mUndoManager }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Setup from value dictionary (binary format)
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func setUpProperties (fromValueDictionary inDictionary : [String : Any],
                              managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    var propertyArray = [AnyObject] ()
    self.accumulateProperties (into: &propertyArray)
    for property in propertyArray {
      if let storedProperty = property as? any EBDocumentStorablePropertyAndRelationshipProtocol, storedProperty.key != nil {
        storedProperty.initialize (fromValueDictionary: inDictionary, managedObjectArray: inManagedObjectArray)
      }
    }
//    let mirror = Mirror (reflecting: self)
//    for property in mirror.children {
//      if let storedProperty = property.value as? any EBDocumentStorablePropertyAndRelationshipProtocol, storedProperty.key != nil {
//        storedProperty.initialize (fromValueDictionary: inDictionary, managedObjectArray: inManagedObjectArray)
//      }
//    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Setup with range dictionary (text format)
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//  func setUpProperties (withRangeDictionary inRangeDictionary : [String : NSRange],
//                        rawObjectArray inRawObjectArray : [RawObject],
//                        data inData : Data) {
//  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func setUpProperties (withRangeDictionary inRangeDictionary : [String : NSRange],
                              rawObjectArray inRawObjectArray : [RawObject],
                              data inData : Data) {
    var propertyArray = [AnyObject] ()
    self.accumulateProperties (into: &propertyArray)
    for property in propertyArray {
      if let storedProperty = property as? any EBDocumentStorablePropertyAndRelationshipProtocol,
         let key = storedProperty.key,
         let range = inRangeDictionary [key] {
        storedProperty.initialize (fromRange: range, ofData: inData, inRawObjectArray)
      }
    }
//    let mirror = Mirror (reflecting: self)
//    for property in mirror.children {
//      if let storedProperty = property.value as? any EBDocumentStorablePropertyAndRelationshipProtocol,
//         let key = storedProperty.key,
//         let range = inRangeDictionary [key] {
//        storedProperty.initialize (fromRange: range, ofData: inData, inRawObjectArray)
//      }
//    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   accessibleObjectsForSaveOperation
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//  func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
//  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    var propertyArray = [AnyObject] ()
    self.accumulateProperties (into: &propertyArray)
    for property in propertyArray {
      if let storedProperty = property as? any EBDocumentStorablePropertyAndRelationshipProtocol, storedProperty.key != nil {
        storedProperty.enterRelationshipObjects (intoArray: &ioObjectArray)
      }
    }
//    let mirror = Mirror (reflecting: self)
//    for property in mirror.children {
//      if let storedProperty = property.value as? any EBDocumentStorablePropertyAndRelationshipProtocol, storedProperty.key != nil {
//        storedProperty.enterRelationshipObjects (intoArray: &ioObjectArray)
//      }
//    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save relationships
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func savePropertiesAndRelationshipsIntoDictionary (_ ioDictionary : inout [String : Any]) {
    ioDictionary [ENTITY_KEY] = self.className
    var propertyArray = [AnyObject] ()
    self.accumulateProperties (into: &propertyArray)
    for property in propertyArray {
      if let storedProperty = property as? any EBDocumentStorablePropertyAndRelationshipProtocol, storedProperty.key != nil {
        storedProperty.store (inDictionary: &ioDictionary)
      }
    }
//    let mirror = Mirror (reflecting: self)
//    for property in mirror.children {
//      if let storedProperty = property.value as? any EBDocumentStorablePropertyAndRelationshipProtocol, storedProperty.key != nil {
//        storedProperty.store (inDictionary: &ioDictionary)
//      }
//    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //  Save properties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func savePropertiesIntoDictionary (_ ioDictionary : inout [String : Any]) {
    ioDictionary [ENTITY_KEY] = self.className
    var propertyArray = [AnyObject] ()
    self.accumulateProperties (into: &propertyArray)
    for property in propertyArray {
      if let storedProperty = property as? any EBDocumentStorablePropertyProtocol, storedProperty.key != nil {
        storedProperty.store (inDictionary: &ioDictionary)
      }
    }
//    let mirror = Mirror (reflecting: self)
//    for property in mirror.children {
//      if let storedProperty = property.value as? any EBDocumentStorablePropertyProtocol, storedProperty.key != nil {
//        storedProperty.store (inDictionary: &ioDictionary)
//      }
//    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   appendPropertyNamesTo(string:)
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func appendPropertyNamesTo (string ioString : inout String) {
    var propertyArray = [AnyObject] ()
    self.accumulateProperties (into: &propertyArray)
    for property in propertyArray {
      if let storedProperty = property as? any EBDocumentStorablePropertyAndRelationshipProtocol, let key = storedProperty.key {
        ioString += key + "\n"
      }
    }
//    let mirror = Mirror (reflecting: self)
//    for property in mirror.children {
//      if let storedProperty = property.value as? any EBDocumentStorablePropertyAndRelationshipProtocol, let key = storedProperty.key {
//        ioString += key + "\n"
//      }
//    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   appendPropertyValuesTo(data:)
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func appendPropertyValuesTo (data ioData : inout Data) {
    var propertyArray = [AnyObject] ()
    self.accumulateProperties (into: &propertyArray)
    for property in propertyArray {
      if let storedProperty = property as? any EBDocumentStorablePropertyAndRelationshipProtocol, storedProperty.key != nil {
        storedProperty.appendValueTo (data: &ioData)
        ioData.append (ascii: .lineFeed)
      }
    }
//    let mirror = Mirror (reflecting: self)
//    for property in mirror.children {
//      if let storedProperty = property.value as? any EBDocumentStorablePropertyAndRelationshipProtocol, storedProperty.key != nil {
//        storedProperty.appendValueTo (data: &ioData)
//        ioData.append (ascii: .lineFeed)
//      }
//    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   accumulateProperties
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func accumulateProperties (into ioArray : inout [AnyObject]) {
  }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   setSignatureObserver
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   clearSignatureCache
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func clearSignatureCache () {
    if self.mSignature != nil {
      self.mSignature = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final var mSignature : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final func signature () -> UInt32 {
    if let s = self.mSignature {
      return s
    }else{
      let s = self.computeSignature ()
      self.mSignature = s
      return s
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func computeSignature () -> UInt32 {
    return 0
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
