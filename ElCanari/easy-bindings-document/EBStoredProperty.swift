//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredProperty <T : EBStoredPropertyProtocol> : EBObservableMutableProperty <T>, EBDocumentStorablePropertyProtocol {

  //····················································································································

  weak private var mUndoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································

  private let mKey : String?
  var key : String? { return self.mKey }

  //····················································································································

  init (defaultValue inValue : T, undoManager inUndoManager : UndoManager?, key inKey : String?) {
    self.mValue = inValue
    self.mUndoManager = inUndoManager
    self.mKey = inKey
    super.init ()
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if self.mValue != oldValue {
        self.mUndoManager?.registerUndo (withTarget: self) { $0.mValue = oldValue }
        if logEvents () {
          appendMessageString ("Property #\(self.objectIndex) did change value to \(self.mValue)\n")
        }
        self.observedObjectDidChange ()
        self.clearSignatureCache ()
      }
    }
  }

  //····················································································································

  override var selection : EBSelection <T> { return .single (self.mValue) }

  //····················································································································

  var propval : T { return self.mValue }

  //····················································································································

  override func setProp (_ inValue : T) { self.mValue = inValue }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey {
      ioDictionary [key] = self.mValue.convertToNSObject ()
    }
  }

  //····················································································································

  func appendValueTo (data ioData : inout Data) {
    return self.propval.appendPropertyValueTo (&ioData)
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
  }

  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let value = inDictionary [key] as? NSObject {
      self.setProp (T.convertFromNSObject (object: value))
    }
  }

  //····················································································································

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inManagedObjectArray : [RawObject]) {
    if let value = T.unarchiveFromDataRange (inData, inRange) {
      self.setProp (value)
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK
  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  private func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.propval.ebHashValue ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
