//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func collectAndPrepareObjectsForSaveOperation (fromRoot inRootObject : EBManagedObject) -> [EBManagedObject] {
  var reachableObjectArray = [inRootObject]
  var reachableObjectSet = EBReferenceSet (inRootObject)
  var objectsToExploreArray = [inRootObject]
  while let objectToExplore = objectsToExploreArray.last {
    objectsToExploreArray.removeLast ()
    var accessible = [EBManagedObject] ()
    objectToExplore.accessibleObjectsForSaveOperation (objects: &accessible)
    for managedObject in accessible {
      if !reachableObjectSet.contains (managedObject) {
        reachableObjectSet.insert (managedObject)
        reachableObjectArray.append (managedObject)
        objectsToExploreArray.append (managedObject)
      }
    }
  }
//--- Set savingIndex for each object
  var idx = 0
  for object in reachableObjectArray {
    object.setSavingIndex (idx)
    idx += 1
  }
  return reachableObjectArray
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func enterToManyRelationshipObjectIndexes (from inArray : [EBManagedObject], into ioData : inout Data) {
  var optionalFirstIndex : Int? = nil
  var rangeCount = 0
  for object in inArray {
    if let firstIndex = optionalFirstIndex {
      if object.savingIndex == (firstIndex + 1) {
        rangeCount += 1
        optionalFirstIndex = object.savingIndex
      }else if rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
        ioData.append (ascii: .space)
        ioData.append (base62Encoded: object.savingIndex)
        rangeCount = 0
        optionalFirstIndex = object.savingIndex
      }else{
        ioData.append (ascii: .space)
        ioData.append (base62Encoded: object.savingIndex)
        optionalFirstIndex = object.savingIndex
      }
    }else{
      ioData.append (base62Encoded: object.savingIndex)
      optionalFirstIndex = object.savingIndex
    }
  }
  if optionalFirstIndex != nil, rangeCount > 0 {
    ioData.append (ascii: .colon)
    ioData.append (base62Encoded: rangeCount)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————
