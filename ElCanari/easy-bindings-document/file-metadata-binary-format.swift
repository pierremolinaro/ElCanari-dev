//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————

func getBinaryFileMetadata (forFileHandle inFileHandle : FileHandle) -> EBFileMetadata? {
//--- Rewind
  inFileHandle.seek (toFileOffset: 0)
//--- Read format string
  let formatStringData : Data = inFileHandle.readData (ofLength: PM_BINARY_FORMAT_SIGNATURE.utf8.count)
  if formatStringData.count != PM_BINARY_FORMAT_SIGNATURE.utf8.count {
    return nil
  }else{
    let signatureData = PM_BINARY_FORMAT_SIGNATURE.data (using: String.Encoding.utf8)
    if signatureData! != formatStringData {
      return nil
    }
  }
//--- Read status
  let status : MetadataStatus
  if let s = MetadataStatus (rawValue: Int (inFileHandle.readByte ())) {
    status = s
  }else{
    status = .unknown
    return nil
  }
//--- Check byte is 1
  if inFileHandle.readByte () != 1 {
    return nil
  }
//--- Read metadata dictionary
  let dictionaryData : Data = inFileHandle.readAutosizedData ()
  if let possibleDictionary : Any = try? PropertyListSerialization.propertyList (from: dictionaryData, options: PropertyListSerialization.MutabilityOptions (), format: nil),
     let dict = possibleDictionary as? [String : Any] {
    return EBFileMetadata (metadataStatus: status, metadataDictionary: dict)
  }else{
    return nil
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate extension FileHandle {

  //································································································

  func readAutosizedUnsignedInteger () -> UInt {
    var result : UInt = 0
    var shift : UInt = 0
    var done = false
    repeat{
      let byte : UInt = UInt (self.readByte ())
      let w = byte & 0x7F
      result |= w << shift
      shift += 7
      done = (byte & 0x80) == 0
    }while !done
    return result
  }

  //································································································

  func readAutosizedData () -> Data {
    let dataLength = self.readAutosizedUnsignedInteger ()
    return self.readData (ofLength: Int (dataLength))
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
