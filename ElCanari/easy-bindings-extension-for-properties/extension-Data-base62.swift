//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private let base62EncodedChars : [ASCII] = [
  .zero, .one, .two, .three, .four, .five, .six, .seven, .eight, .nine,
  .A, .B, .C, .D, .E, .F, .G, .H, .I, .J, .K, .L, .M,
  .N, .O, .P, .Q, .R, .S, .T, .U, .V, .W, .X, .Y, .Z,
  .a, .b, .c, .d, .e, .f, .g, .h, .i, .j, .k, .l, .m,
  .n, .o, .p, .q, .r, .s, .t, .u, .v, .w, .x, .y, .z
]

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Data {

  //····················································································································

  mutating func append (base62Encoded inValue : Int) {
    let insertionIndex = self.count
    if inValue > 0 {
      var v = inValue
      while v > 0 {
        self.insert (base62EncodedChars [v % base62EncodedChars.count].rawValue, at: insertionIndex)
        v /= base62EncodedChars.count
      }
    }else if inValue < 0 {
      var v = -inValue
      while v > 0 {
        self.insert (base62EncodedChars [v % base62EncodedChars.count].rawValue, at: insertionIndex)
        v /= base62EncodedChars.count
      }
      self.insert (ASCII.minus.rawValue, at: insertionIndex) // Minus sign
    }else{
      self.append (base62EncodedChars [0].rawValue)
    }
  }

  //····················································································································

  mutating func append (ascii inValue : ASCII) {
    self.append (inValue.rawValue)
  }

  //····················································································································

  func parseUnsigned (idx ioIdx : inout Int, result outResult : inout Int) {
    outResult = 0
    var loop = true
    while loop {
      if ioIdx < self.count {
        let c = self [ioIdx]
        if (c >= ASCII.zero.rawValue) && (c <= ASCII.nine.rawValue) {
          outResult *= 62
          outResult += Int (c - ASCII.zero.rawValue)
          ioIdx += 1
        }else if (c >= ASCII.A.rawValue) && (c <= ASCII.Z.rawValue) {
          outResult *= 62
          outResult += Int (c - ASCII.A.rawValue) + 10
          ioIdx += 1
        }else if (c >= ASCII.a.rawValue) && (c <= ASCII.z.rawValue) {
          outResult *= 62
          outResult += Int (c - ASCII.a.rawValue) + 10 + 26
          ioIdx += 1
        }else{
          loop = false
        }
      }else{
        loop = false
      }
    }
  }

  //····················································································································

  func base62EncodedInt (range inRange : NSRange) -> Int? {
    if inRange.length == 0 {
      return nil
    }else{
      let sign : Int
      var idx = inRange.location
      if self [idx] == ASCII.minus.rawValue {
        sign = -1
        idx += 1
      }else{
        sign = 1
      }
      var r = 0
      self.parseUnsigned (idx: &idx, result: &r)
      return sign * r
    }
  }

  //····················································································································

  func base62EncodedUInt32 (range inRange : NSRange) -> UInt32? {
    var result : UInt32 = 0
    var idx = inRange.location
    let end = inRange.location + inRange.length
    var loop = true
    while loop {
      if idx < end {
        let c = self [idx]
        if (c >= ASCII.zero.rawValue) && (c <= ASCII.nine.rawValue) {
          result *= 62
          result += UInt32 (c - ASCII.zero.rawValue)
          idx += 1
        }else if (c >= ASCII.A.rawValue) && (c <= ASCII.Z.rawValue) {
          result *= 62
          result += UInt32 (c - ASCII.A.rawValue) + 10
          idx += 1
        }else if (c >= ASCII.a.rawValue) && (c <= ASCII.z.rawValue) {
          result *= 62
          result += UInt32 (c - ASCII.a.rawValue) + 10 + 26
          idx += 1
        }else{
          loop = false
        }
      }else{
        loop = false
      }
    }
    return result
  }

  //····················································································································

  func base62EncodedIntArray (fromRange inRange : NSRange) -> [Int] {
    var result = [Int] ()
    if inRange.length > 0 {
      var idx = inRange.location
      let end = inRange.location + inRange.length
      var loop = true
      while loop {
        var value = 0
        self.parseUnsigned (idx: &idx, result: &value)
        result.append (value)
        if (idx < end) && (self [idx] == ASCII.colon.rawValue) {
          idx += 1
          var factor = 0
          self.parseUnsigned (idx: &idx, result: &factor)
          for i in 1 ... factor {
            result.append (value + i)
          }
        }
        loop = (idx < end) && (self [idx] == ASCII.space.rawValue)
        idx += 1
      }
    }
    return result
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

