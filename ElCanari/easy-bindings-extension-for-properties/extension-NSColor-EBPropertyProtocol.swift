//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    extension NSColor : EBStoredPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————

extension NSColor : EBStoredPropertyProtocol {

  //····················································································································

  final func ebHashValue () -> UInt32 {
    let s = self.archiveToString ()
    return s.ebHashValue ()
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    let s = self.archiveToString ()
    return s as NSString
  }

  //····················································································································

  static func convertFromNSObject (object inObject : NSObject) -> Self {
    if let string = inObject as? String {
      return Self.unarchiveFromString (string: string) as! Self
    }else{ // Old color save
//      let data = inObject as! Data
      // return (try! NSKeyedUnarchiver.unarchiveTopLevelObjectWithData (data)) as! Self // unarchiveTopLevelObjectWithData' was deprecated in macOS 10.14
      if let data = inObject as? Data, let color = try? NSKeyedUnarchiver.unarchivedObject (ofClass: NSColor.self, from: data) {
        return color as! Self
      }else{
         return NSColor.black as! Self
      }
    }
  }

  //····················································································································

  func archiveToString () -> String {
    let rgbColor = self.usingColorSpace (.genericRGB)!
    let red = rgbColor.redComponent
    let green = rgbColor.greenComponent
    let blue = rgbColor.blueComponent
    let alpha = rgbColor.alphaComponent
    let s = "\(red) \(green) \(blue) \(alpha)"
    return s
  }

  //····················································································································

  static func unarchiveFromString (string : String) -> NSObject? {
    let scanner = Scanner (string: string)
    if let red = scanner.scanDouble (),
       let green = scanner.scanDouble (),
       let blue = scanner.scanDouble (),
       let alpha = scanner.scanDouble () {
      return NSColor (calibratedRed: CGFloat (red), green: CGFloat (green), blue: CGFloat (blue), alpha: CGFloat (alpha))
    }else{
      return nil
    }
  }

  //····················································································································

  func appendPropertyValueTo (_ ioData : inout Data) {
    ioData.append (self.archiveToString ().data (using: .utf8)!)
  }

  //····················································································································

  static func unarchiveFromDataRange (_ inData : Data, _ inRange : NSRange) -> Self? {
    let dataSlice = inData [inRange.location ..< inRange.location + inRange.length]
    if let s = String (data: dataSlice, encoding: .utf8) {
      return Self.unarchiveFromString (string: s) as? Self
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
