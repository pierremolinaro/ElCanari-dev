//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    extension String : EBStoredPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————

extension String : EBStoredPropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    let possibleData = self.data (using: String.Encoding.utf8)
    if let data = possibleData {
      return data.ebHashValue ()
    }else{
      return 0
    }
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return self as NSObject
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> String {
    return object as! String
  }

  //····················································································································

  func appendPropertyValueTo (_ ioData : inout Data) {
    let escapedString = self.replacingOccurrences(of: "\n", with: "\\n")
    ioData.append (escapedString.data (using: .utf8)!)
  }

  //····················································································································

  static func unarchiveFromDataRange (_ inData : Data, _ inRange : NSRange) -> String? {
    var result : String? = nil
    let dataSlice = inData [inRange.location ..< inRange.location + inRange.length]
    if let s = String (bytes: dataSlice, encoding: .utf8) {
      result = s.replacingOccurrences(of: "\\n", with: "\n")
    }
    return result
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
