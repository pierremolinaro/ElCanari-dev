//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    BezierPathArray
//--------------------------------------------------------------------------------------------------

struct BezierPathArray : Hashable, Comparable, EBStoredPropertyProtocol {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mPathes = [BezierPath] ()

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var array : [BezierPath] { return self.mPathes }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  mutating func append (_ inBP : BezierPath) {
    if !inBP.isEmpty {
      self.mPathes.append (inBP)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  mutating func append (_ inBezierPathArray : BezierPathArray) {
    self.mPathes += inBezierPathArray.mPathes
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  static func < (lhs: BezierPathArray, rhs: BezierPathArray) -> Bool {
    var inferior = lhs.mPathes.count < rhs.mPathes.count
    if lhs.mPathes.count == rhs.mPathes.count {
      var idx = 0
      while idx < lhs.mPathes.count {
        if lhs.mPathes [idx] >= rhs.mPathes [idx] {
          inferior = false
          idx = lhs.mPathes.count // For exiting loop
        }
        idx += 1
      }
    }
    return inferior
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func ebHashValue () -> UInt32 {
    let archiver = NSKeyedArchiver (requiringSecureCoding: true)
    archiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
    archiver.finishEncoding ()
    return archiver.encodedData.ebHashValue ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func convertToNSObject () -> NSObject {
    let archiver = NSKeyedArchiver (requiringSecureCoding: true)
    var array = [NSBezierPath] ()
    for p in self.mPathes {
      array.append (p.nsBezierPath)
    }
    archiver.encode (array, forKey: NSKeyedArchiveRootObjectKey)
    archiver.finishEncoding ()
    return archiver.encodedData as NSObject
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  static func convertFromNSObject (object : NSObject) -> BezierPathArray {
    let array = try! NSKeyedUnarchiver.unarchivedObject (ofClass: NSArray.self, from: object as! Data) as! [NSBezierPath]
    var result = BezierPathArray ()
    for bp in array {
      result.append (BezierPath (bp))
    }
    return result
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendPropertyValueTo (_ ioData : inout Data) {
    var first = true
    for bp in array {
      if first {
        first = false
      }else{
        ioData.append (ascii: .verticalBar)
      }
      bp.nsBezierPath.appendPropertyValueTo (&ioData)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  static func unarchiveFromDataRange (_ inData : Data, _ inRange : NSRange) -> BezierPathArray? {
    if let array = try? NSKeyedUnarchiver.unarchivedObject (ofClass: NSArray.self, from: inData [inRange.location ..< inRange.location + inRange.length]) as? [NSBezierPath] {
      var result = BezierPathArray ()
      for bp in array {
        result.append (BezierPath (bp))
      }
      return result
    }else{
      return nil
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
