//——————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    EBOutletEvent class
//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor fileprivate var gPendingOutletEvents = [EBOutletEvent] ()

//——————————————————————————————————————————————————————————————————————————————————————————————————

class EBOutletEvent : EBObserverProtocol {

  //································································································

  init () {
    noteObjectAllocation (self)
  }

  //································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //································································································

  final var objectIndex : Int { return Int (bitPattern: ObjectIdentifier (self)) }

  //································································································
  //   Properties
  //································································································

  final var mEventCallBack : Optional < () -> Void > = nil
  private final var mEventIsPosted = false

  //································································································
  //   observedObjectDidChange
  //································································································

  func observedObjectDidChange () {
    if logEvents () {
      if gPendingOutletEvents.count == 0 {
        appendMessageString ("Post events\n")
      }
      let str = "  #\(self.objectIndex) " + String (describing: type (of: self)) + "\n"
      if !self.mEventIsPosted {
        appendMessageString (str)
      }else{ // Event already posted
        appendMessageString (str, color: NSColor.brown)
      }
    }
    if !self.mEventIsPosted {
      self.mEventIsPosted = true
      if gPendingOutletEvents.count == 0 {
        DispatchQueue.main.async {
          flushOutletEvents ()
        }
      }
      gPendingOutletEvents.append (self)
    }
  }

  //································································································
  //   sendUpdateEvent
  //································································································

  final func sendUpdateEvent () {
    self.mEventIsPosted = false
    self.mEventCallBack? ()
  }

  //································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————
//    flushOutletEvents
//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func flushOutletEvents () {
  if gPendingOutletEvents.count > 0 {
    #if BUILD_OBJECT_EXPLORER
      if logEvents () {
        appendMessageString ("Flush outlet events\n", color: .blue)
      }
    #endif
    while gPendingOutletEvents.count > 0 {
      let pendingOutletEvents = gPendingOutletEvents
      gPendingOutletEvents.removeAll ()
//      for event in pendingOutletEvents {
//        event.mEventIsPosted = false
//      }
      for event in pendingOutletEvents {
        #if BUILD_OBJECT_EXPLORER
          if logEvents () {
            let message = "  #\(event.objectIndex) " + String (describing: type (of: event)) + "\n"
            appendMessageString (message, color: .blue)
          }
        #endif
        event.sendUpdateEvent ()
      }
      #if BUILD_OBJECT_EXPLORER
        if gPendingOutletEvents.count > 0 && logEvents () {
          let message = "\(gPendingOutletEvents.count) outlet event(s) posted during flush\n"
          appendMessageString (message, color: .red)
        }
      #endif
    }
    #if BUILD_OBJECT_EXPLORER
      if logEvents () {
        appendMessageString ("--------------------------------------\n", color: NSColor.blue)
      }
    #endif
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func logEvents () -> Bool {
  #if BUILD_OBJECT_EXPLORER
    return gTransientExplorer.logEvents ()
  #else
    return false
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendToTransientEventLog (_ inMessage : String) {
  #if BUILD_OBJECT_EXPLORER
    gTransientExplorer.appendMessage (inMessage, .blue)
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendMessageString (_ inMessage : String) {
  #if BUILD_OBJECT_EXPLORER
    gTransientExplorer.appendMessage (inMessage, .black)
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendMessageString (_ inMessage : String, color inColor : NSColor) {
  #if BUILD_OBJECT_EXPLORER
    gTransientExplorer.appendMessage (inMessage, inColor)
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendShowTransientEventLogWindowMenuItem (_ inMenu : NSMenu) {
  #if BUILD_OBJECT_EXPLORER
    let item = NSMenuItem (
      title: "Show Transient Event Log Window",
      action: #selector (TransientExplorer.showTransientEventLogWindow (_:)),
      keyEquivalent: ""
    )
    item.keyEquivalentModifierMask = [.command, .control]
    item.target = gTransientExplorer
    inMenu.addItem (item)
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————

#if BUILD_OBJECT_EXPLORER
  @MainActor fileprivate var gTransientExplorer = TransientExplorer ()
#endif

//——————————————————————————————————————————————————————————————————————————————————————————————————

#if BUILD_OBJECT_EXPLORER
  @MainActor fileprivate final class TransientExplorer {

    //·················································································································

    private var mTransientEventExplorerWindow : NSWindow
    private var mTransientEventExplorerTextView : AutoLayoutTextObserverView

    //··················································································································

    init () {
      self.mTransientEventExplorerTextView = AutoLayoutTextObserverView (size: .small)
      self.mTransientEventExplorerWindow = NSWindow (
        contentRect: NSRect (x: 0.0, y: 0.0, width: 600.0, height: 400.0),
        styleMask: [.titled, .closable, .resizable, .miniaturizable],
        backing: .buffered,
        defer: true
      )
      self.mTransientEventExplorerWindow.title = "Transient Event Log"
      self.mTransientEventExplorerWindow.isReleasedWhenClosed = false // Close button just hides the window, but do not release it
      let mainVStack = AutoLayoutVerticalStackView ().set (topMargin: 8)
      let hStack = AutoLayoutHorizontalStackView ()
      let clearTransientEventLogButton = AutoLayoutButton (title: "Clear Transient Event Log", size: .regular)
      clearTransientEventLogButton.setClosureAction ({ self.mTransientEventExplorerTextView.string = "" })
      _ = hStack.appendView (clearTransientEventLogButton)
                .appendFlexibleSpace ()
                .set (leftMargin: 8)
      _ = mainVStack.appendView (hStack)
                    .appendView (self.mTransientEventExplorerTextView)
    //--- Assign main view to window
      self.mTransientEventExplorerWindow.contentView = mainVStack
    }

    //··················································································································

    @objc func showTransientEventLogWindow (_ inSender : Any?) {
      self.mTransientEventExplorerTextView.string = ""
      self.mTransientEventExplorerWindow.makeKeyAndOrderFront (inSender)
    }

    //··················································································································

    func appendMessage (_ inMessage : String, _ inColor : NSColor) {
      if logEvents () {
        self.mTransientEventExplorerTextView.appendMessageString (inMessage, color: inColor)
      }
    }

    //··················································································································

    func logEvents () -> Bool {
      return self.mTransientEventExplorerWindow.isVisible
    }

    //··················································································································

  }
#endif

//——————————————————————————————————————————————————————————————————————————————————————————————————
