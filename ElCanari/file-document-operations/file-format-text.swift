//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct RawObject {
  let index : Int
  let object : EBManagedObject
  let propertyDictionary : [String : NSRange]
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func loadEasyBindingTextFile (_ inUndoManager : EBUndoManager?,
                              documentName inDocumentName : String,
                              from ioDataScanner: inout EBDataScanner) throws -> EBDocumentData {
  appendDocumentFileOperationInfo ("Read Text Document file: \(inDocumentName)\n")
  var operationStartDate = Date ()
  let startDate = operationStartDate
//--- Check header ends with line feed
  ioDataScanner.acceptRequired (byte: ASCII.lineFeed.rawValue)
//--- Read Status
  let metadataStatus = UInt8 (ioDataScanner.parseBase62EncodedInt ())
 // Swift.print ("metadataStatus \(metadataStatus)")
//--- Read metadata dictionary
  let metadataDictionary : [String : Any] = try ioDataScanner.parseJSON ()
 // Swift.print ("metadataDictionary \(metadataDictionary)")
//--- Read classes
  var classDefinition = [(String, [String])] ()
  while ioDataScanner.testAccept (byte: ASCII.dollar.rawValue) {
    let className = try ioDataScanner.parseString ()
    var readPropertyNames = true
    var propertyNameArray = [String] ()
    while readPropertyNames, ioDataScanner.ok () {
      if ioDataScanner.test (byte: ASCII.dollar.rawValue) {
        readPropertyNames = false
      }else if ioDataScanner.test (byte: ASCII.at.rawValue) {
        readPropertyNames = false
      }else{
        let propertyName = try ioDataScanner.parseString ()
        propertyNameArray.append (propertyName)
      }
    }
    classDefinition.append ((className, propertyNameArray))
  }
  appendDocumentFileOperationInfo ("  Read \(classDefinition.count) classes: \(Int (Date ().timeIntervalSince (operationStartDate) * 1000.0)) ms\n")
//--- Read objects
  operationStartDate = Date ()
  let op = OperationQueue ()
  let mutex = DispatchSemaphore (value: 1)
  var rawObjectArray = [RawObject] ()
  var idx = 0
  let data = ioDataScanner.data
  while !ioDataScanner.eof (), ioDataScanner.testAccept (byte: ASCII.at.rawValue) {
    let index = idx
    idx += 1
    let classIndex = ioDataScanner.parseBase62EncodedInt ()
    let propertyNameArray = classDefinition [classIndex].1
    var propertyValueDictionary = [String : NSRange] ()
    propertyValueDictionary.reserveCapacity (propertyNameArray.count)
    for propertyName in propertyNameArray {
      let propertyRange = ioDataScanner.getLineRangeAndAdvance ()
      propertyValueDictionary [propertyName] = propertyRange
    }
    let className = classDefinition [classIndex].0
    op.addOperation {
      let managedObject = newInstanceOfEntityNamed (inUndoManager, className)!
      managedObject.setUpPropertiesWithTextDictionary (propertyValueDictionary, data)
      let rawObject = RawObject (index: index, object: managedObject, propertyDictionary: propertyValueDictionary)
      mutex.wait ()
      rawObjectArray.append (rawObject)
      mutex.signal ()
    }
  }
  let pendingOperationCount = op.operationCount
  op.waitUntilAllOperationsAreFinished ()
  rawObjectArray.sort { $0.index < $1.index }
  appendDocumentFileOperationInfo ("  Read \(rawObjectArray.count) objects, pending ops \(pendingOperationCount): \(Int (Date ().timeIntervalSince (operationStartDate) * 1000.0)) ms\n")
//--- Setup toOne
  operationStartDate = Date ()
  for rawObject in rawObjectArray {
    let valueDictionary = rawObject.propertyDictionary
    let managedObject = rawObject.object
    managedObject.setUpToOneRelationshipsWithTextDictionary (valueDictionary, rawObjectArray, ioDataScanner.data)
  }
  appendDocumentFileOperationInfo ("  Setup toOne: \(Int (Date ().timeIntervalSince (operationStartDate) * 1000.0)) ms\n")
//--- Setup toMany
  operationStartDate = Date ()
  for rawObject in rawObjectArray {
    let valueDictionary = rawObject.propertyDictionary
    let managedObject = rawObject.object
    managedObject.setUpToManyRelationshipsWithTextDictionary (valueDictionary, rawObjectArray, ioDataScanner.data)
  }
  appendDocumentFileOperationInfo ("  Setup toMany: \(Int (Date ().timeIntervalSince (operationStartDate) * 1000.0)) ms\n")
//--- Scanner error ?
  appendDocumentFileOperationInfo ("Total duration: \(Int (Date ().timeIntervalSince (startDate) * 1000.0)) ms\n\n")
  if !ioDataScanner.ok () {
    let dictionary = [
      "Cannot Open Document" : NSLocalizedDescriptionKey,
      "The file has an invalid format" : NSLocalizedRecoverySuggestionErrorKey
    ]
    throw NSError (domain: Bundle.main.bundleIdentifier!, code: 1, userInfo: dictionary)
  }
//--- Analyze read data
  if ioDataScanner.ok (), rawObjectArray.count > 0 {
    let rootObject = rawObjectArray [0].object
    return EBDocumentData (
      documentMetadataStatus: metadataStatus,
      documentMetadataDictionary: metadataDictionary,
      documentRootObject: rootObject,
      documentFileFormat: .textual
    )
  }else{
    let dictionary = [
      "Cannot Open Document" :  NSLocalizedDescriptionKey,
      "Root object cannot be read" :  NSLocalizedRecoverySuggestionErrorKey
    ]
    throw NSError (domain: Bundle.main.bundleIdentifier!, code: 1, userInfo: dictionary)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func dataForTextualSaveOperation (from inDocumentData : EBDocumentData) throws -> Data {
//--- First line: PM-TEXT-FORMAT
  var fileStringData = Data ()
  fileStringData.append (ascii: .P)
  fileStringData.append (ascii: .M)
  fileStringData.append (ascii: .minus)
  fileStringData.append (ascii: .T)
  fileStringData.append (ascii: .E)
  fileStringData.append (ascii: .X)
  fileStringData.append (ascii: .T)
  fileStringData.append (ascii: .minus)
  fileStringData.append (ascii: .F)
  fileStringData.append (ascii: .O)
  fileStringData.append (ascii: .R)
  fileStringData.append (ascii: .M)
  fileStringData.append (ascii: .A)
  fileStringData.append (ascii: .T)
  fileStringData.append (ascii: .lineFeed)
//--- Append status
  fileStringData.append (base62Encoded: Int (inDocumentData.documentMetadataStatus))
  fileStringData.append (ascii: .lineFeed)
//--- Append metadata dictionary
  // .sortedKeys is only available in 10.13
  let textMetaData = try JSONSerialization.data (withJSONObject: inDocumentData.documentMetadataDictionary, options: [])
  fileStringData += textMetaData
  fileStringData.append (ascii: .lineFeed)
//--- Build class index dictionary
  let objectArray = collectAndPrepareObjectsForSaveOperation (fromRoot: inDocumentData.documentRootObject)
  var classDictionary = [String : Int] ()
  var classDescriptionString = ""
  for object in objectArray {
    let key = String (describing: type (of: object as Any))
    if classDictionary [key] == nil {
      classDictionary [key] = classDictionary.count
      classDescriptionString += "$" + key + "\n"
      object.appendPropertyNamesTo (&classDescriptionString)
    }
  }
  fileStringData += classDescriptionString.data (using: .utf8)!
//--- Save data
  for object in objectArray {
    let key = String (describing: type (of: object as Any))
    let classIndex = classDictionary [key]!
  //  Swift.print ("\(classIndex)")
    fileStringData.append (ascii: .at)
    fileStringData.append (base62Encoded: classIndex)
    fileStringData.append (ascii: .lineFeed)
    object.appendPropertyValuesTo (&fileStringData)
  }
//---
//   Swift.print ("Text Saving \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
  return fileStringData
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
