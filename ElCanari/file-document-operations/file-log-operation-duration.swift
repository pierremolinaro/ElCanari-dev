//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//  Created by Pierre Molinaro on 14/06/2021.
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Public functions
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func setStartOperationDateToNow (_ inMessage : String) {
  gLogFileOperations.setStartOperationDateToNow (inMessage)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendDocumentFileOperationInfo (_ inMessage : String) {
  gLogFileOperations.appendDocumentFileOperationInfo (inMessage)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendTotalDurationDocumentFileOperationInfo () {
  gLogFileOperations.appendTotalDurationDocumentFileOperationInfo ()
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendShowDocumentFileOperationDurationWindowMenuItem (_ inMenu : NSMenu) {
  let menuItem = NSMenuItem (
    title: "Show Document File Operation Duration Window",
    action: #selector (LogFileOperation.makeKeyAndOrderFront (_:)),
    keyEquivalent: ""
  )
  menuItem.target = gLogFileOperations
  menuItem.keyEquivalentModifierMask = [.command, .control]
  inMenu.addItem (menuItem)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Private entities
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor fileprivate var gLogFileOperations = LogFileOperation ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor fileprivate final class LogFileOperation : EBObjcBaseObject { // SHOULD INHERIT FROM NSObject

  //····················································································································
  //  Properties
  //····················································································································

  private var mWindow = CanariWindow (
    contentRect: NSRect (x: 50, y:50, width: 600, height: 300),
    styleMask: [.titled, .closable, .resizable],
    backing: .buffered,
    defer: true
  )

  private let mTextView = AutoLayoutTextObserverView ()
  private var mOperationStartDate = Date ()
  private var mStepStartDate = Date ()

  //····················································································································
  //  Init
  //····················································································································

  override init () {
    super.init ()
  //--- Configure Window
    self.mWindow.title = "Document Operation Duration"
    self.mWindow.isReleasedWhenClosed = false // Close button just hides the window, but do not release it
    _ = self.mWindow.setFrameAutosaveName ("Document.Operation.Window.Frame")
  //--- Build window contents
    let vStack = AutoLayoutVerticalStackView ().set (margins: 8)
    _ = vStack.appendView (self.mTextView)
    let button = AutoLayoutButton (title: "Clear", size: .small)
      .bind_run (target: self, selector: #selector (Self.clearTextAction(_:)))
      .expandableWidth ()
    _ = vStack.appendView (button)
  //--- Assign main view to window
    self.mWindow.contentView = vStack
  }

  //····················································································································

  @objc func clearTextAction (_ inSender : Any?) {
    self.mTextView.string = ""
  }

  //····················································································································

  @objc func makeKeyAndOrderFront (_ inSender : Any?) {
    if self.mWindow.isVisible {
      self.mWindow.orderOut (inSender)
    }else{
      self.mWindow.makeKeyAndOrderFront (nil)
    }
  }

  //····················································································································

  func setStartOperationDateToNow (_ inMessage : String) {
    self.mOperationStartDate = Date ()
    self.mStepStartDate = self.mOperationStartDate
    if self.mWindow.isVisible {
      self.mTextView.string += inMessage + "\n"
      _ = RunLoop.main.run (mode: .default, before: Date ())
    }
  }

  //····················································································································

  func appendDocumentFileOperationInfo (_ inMessage : String) {
    if self.mWindow.isVisible {
      let duration = "  +\(Int (Date ().timeIntervalSince (self.mStepStartDate) * 1000.0)) ms: "
      self.mStepStartDate = Date ()
      self.mTextView.string += duration + inMessage + "\n"
      _ = RunLoop.main.run (mode: .default, before: Date ())
    }
  }

  //····················································································································

  func appendTotalDurationDocumentFileOperationInfo () {
    if self.mWindow.isVisible {
      self.mTextView.string += "Total: \(Int (Date ().timeIntervalSince (self.mOperationStartDate) * 1000.0)) ms.\n\n"
      _ = RunLoop.main.run (mode: .default, before: Date ())
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
