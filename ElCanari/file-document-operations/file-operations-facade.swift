//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBManagedDocumentFileFormat
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBManagedDocumentFileFormat {
  case binary
  case textual

  //····················································································································

  var string : String {
    switch self {
    case .binary : return "binary"
    case .textual : return "textual"
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBDocumentData
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct EBDocumentData {
  let documentMetadataStatus : UInt8
  let documentMetadataDictionary : [String : Any]
  let documentRootObject : EBManagedObject
  let documentFileFormat : EBManagedDocumentFileFormat
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBDocumentReadData
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBDocumentReadData {
  case ok (documentData : EBDocumentData)
  case readError (error : Error)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//     loadEasyBindingFile fromURL
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func loadEasyBindingFile (fromURL inURL: URL) -> EBDocumentReadData {
  do{
    let data = try Data (contentsOf: inURL)
    let documentReadData = loadEasyBindingFile (fromData: data, documentName: inURL.lastPathComponent, undoManager: nil)
    return documentReadData
  }catch{
    return .readError (error: error)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//     loadEasyBindingFile
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func loadEasyBindingFile (fromData inData: Data,
                                     documentName inDocumentName : String,
                                     undoManager inUndoManager : UndoManager?) -> EBDocumentReadData {
//---- Define input data scanner
  var dataScanner = EBDataScanner (data: inData)
//--- Check Signature
  if dataScanner.testString (string: PM_BINARY_FORMAT_SIGNATURE) {
    return loadEasyBindingBinaryFile (inUndoManager, documentName: inDocumentName, from: &dataScanner)
  }else if dataScanner.testString (string: PM_TEXTUAL_FORMAT_SIGNATURE) {
    return loadEasyBindingTextFile (inUndoManager, documentName: inDocumentName, from: &dataScanner)
  }else{
    let dictionary = [
      "Cannot Open Document" : NSLocalizedDescriptionKey,
      "The file has an invalid format" : NSLocalizedRecoverySuggestionErrorKey
    ]
    let error = NSError (domain: Bundle.main.bundleIdentifier!, code: 1, userInfo: dictionary)
    return .readError (error: error)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//     dataForSaveOperation
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func dataForSaveOperation (from inDocumentData : EBDocumentData) throws -> Data {
  switch inDocumentData.documentFileFormat {
  case .textual :
    return try dataForTextualSaveOperation (from: inDocumentData)
  case .binary :
    return try dataForBinarySaveOperation (from: inDocumentData)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   save
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func save (documentData inDocumentData : EBDocumentData, toURL inURL : URL) throws {
  let data = try dataForSaveOperation (from: inDocumentData)
  try data.write(to: inURL)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
