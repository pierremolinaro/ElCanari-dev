//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    A P P L I C A T I O N    C L A S S
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor @objc(EBApplication) final class EBApplication : NSApplication {

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    private var mTransientEventExplorerWindow : NSWindow? = nil
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    fileprivate var mTransientEventExplorerTextView : AutoLayoutTextObserverView? = nil
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func showTransientEventLogWindow (_ inSender : Any?) {
      if self.mTransientEventExplorerWindow == nil {
        self.mTransientEventExplorerWindow = NSWindow (
          contentRect: NSRect (x: 0.0, y: 0.0, width: 600.0, height: 400.0),
          styleMask: [.titled, .closable, .resizable, .miniaturizable],
          backing: .buffered,
          defer: true
        )
        self.mTransientEventExplorerWindow?.title = "Transient Event Log"
        self.mTransientEventExplorerWindow?.isReleasedWhenClosed = false // Close button just hides the window, but do not release it
        let mainVStack = AutoLayoutVerticalStackView ()
        let hStack = AutoLayoutHorizontalStackView ()
        let clearTransientEventLogButton = AutoLayoutButton (title: "Clear Transient Event Log", size: .regular)
          .bind_run (target: self, selector: #selector (Self.clearTransientEventLogWindow (_:)))
        _ = hStack.appendView (clearTransientEventLogButton)
        _ = hStack.appendFlexibleSpace ()
        _ = mainVStack.appendView (hStack)
        let textView = AutoLayoutTextObserverView ()
        self.mTransientEventExplorerTextView = textView
        _ = mainVStack.appendView (textView)
     //--- Assign main view to window
        self.mTransientEventExplorerWindow?.contentView = mainVStack
      }
      self.mTransientEventExplorerTextView?.string = ""
      self.mTransientEventExplorerWindow?.makeKeyAndOrderFront (inSender)
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc private func clearTransientEventLogWindow (_ _ : Any?) {
      self.mTransientEventExplorerTextView?.string = ""
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @MainActor func appendToTransientEventLog (_ inMessage : String) {
      if logEvents () {
        self.mTransientEventExplorerTextView?.appendMessageString (inMessage, color: .blue)
      }
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @MainActor func logEvents () -> Bool {
      return self.mTransientEventExplorerWindow?.isVisible ?? false
    }
  #endif

  //····················································································································

  override func sendEvent (_ inEvent : NSEvent) {
    super.sendEvent (inEvent)
    flushModelEvents ()
    flushOutletEvents ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendShowTransientEventLogWindowMenuItem (_ inMenu : NSMenu) {
  #if BUILD_OBJECT_EXPLORER
    let item = NSMenuItem (
      title: "Show Transient Event Log Window",
      action: #selector (EBApplication.showTransientEventLogWindow (_:)),
      keyEquivalent: ""
    )
    item.keyEquivalentModifierMask = [.command, .control]
    item.target = NSApplication.shared
    inMenu.addItem (item)
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendMessageString (_ inMessage : String) {
  #if BUILD_OBJECT_EXPLORER
    let theApp = NSApplication.shared as! EBApplication
    theApp.mTransientEventExplorerTextView?.appendMessageString (inMessage)
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func appendMessageString (_ inMessage : String, color inColor : NSColor) {
  #if BUILD_OBJECT_EXPLORER
    let theApp = NSApplication.shared as! EBApplication
    theApp.mTransientEventExplorerTextView?.appendMessageString (inMessage, color: inColor)
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
