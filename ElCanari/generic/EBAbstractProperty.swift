//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBObservedObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBObservedObject : EBSwiftBaseObject {

  private final var mObservers = EBWeakEventSet ()

  //····················································································································

  final func addEBObserver (_ inObserver : EBObserverProtocol) {
    self.mObservers.insert (inObserver)
    #if BUILD_OBJECT_EXPLORER
      self.updateObserverExplorer ()
    #endif
    inObserver.observedObjectDidChange ()
  }

  //····················································································································

  final func addEBObserversFrom (_ ioObserverSet : inout EBWeakEventSet) {
    if !ioObserverSet.isEmpty {
      ioObserverSet.apply { (_ observer : EBObserverProtocol) in
        self.mObservers.insert (observer)
        observer.observedObjectDidChange ()
      }
      #if BUILD_OBJECT_EXPLORER
        self.updateObserverExplorer ()
      #endif
    }
  }

  //····················································································································

  final func removeEBObserver (_ inObserver : EBObserverProtocol) {
    self.mObservers.remove (inObserver)
    #if BUILD_OBJECT_EXPLORER
      self.updateObserverExplorer ()
    #endif
  }

  //····················································································································

  final func removeEBObserversFrom (_ ioObserverSet : inout EBWeakEventSet) {
    if !ioObserverSet.isEmpty {
      ioObserverSet.apply {(_ observer : EBObserverProtocol) in
        self.mObservers.remove (observer)
      }
      #if BUILD_OBJECT_EXPLORER
        self.updateObserverExplorer ()
      #endif
    }
  }

  //····················································································································

  func observedObjectDidChange () {
    self.mObservers.apply ( {(_ observer : EBObserverProtocol) in observer.observedObjectDidChange () })
  }

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mObserverExplorer : NSPopUpButton? {
      didSet {
        self.updateObserverExplorer ()
      }
    }
  #endif
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final func updateObserverExplorer () {
      if let observerExplorer = self.mObserverExplorer {
        observerExplorer.removeAllItems ()
        let observerCount = self.mObservers.nonNilEntryCount
        observerExplorer.addItem (withTitle: String (observerCount))
        observerExplorer.isEnabled = observerCount > 0
        self.mObservers.apply ( {(_ observer : EBObserverProtocol) in
          let stringValue = explorerObjectIndexString (observer.objectIndex) + " - " + String (describing: type (of: observer))
          observerExplorer.addItem (withTitle: stringValue)
        })
      }
    }
  #endif

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
