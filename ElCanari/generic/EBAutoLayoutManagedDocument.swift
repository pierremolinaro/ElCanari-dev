//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBAutoLayoutManagedDocument
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBAutoLayoutManagedDocument : NSDocument {

  //····················································································································

  private final var mReadMetadataStatus : UInt8 = 0
  private final var mMetadataDictionary = [String : Any] ()
  private final var mSplashScreenWindow : CanariWindow? = nil
  private final var mSplashTextField : AutoLayoutLabel? = nil

  //····················································································································
  //   Properties
  //····················································································································

  final var mRootObject : EBManagedObject?

  //····················································································································
  //    init
  //····················································································································

  override init () {
    super.init ()
    noteObjectAllocation (self)
    self.undoManager = self.mUndoManager
    self.mUndoManager.disableUndoRegistration ()
    self.mRootObject = newInstanceOfEntityNamed (self.mUndoManager, rootEntityClassName ())!
    self.mUndoManager.enableUndoRegistration ()
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //    ebUndoManager
  //····················································································································

  fileprivate final var mUndoManager = EBUndoManager ()

  //····················································································································

  final var ebUndoManager : EBUndoManager {
    return self.mUndoManager
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  func rootEntityClassName () -> String {
    return ""
  }

  //····················································································································
  // Providing the drag image, called by a source drag table view (CanariDragSourceTableView)
  //····················································································································

  func dragImageForRows (source inSourceTableView : AutoLayoutCanariDragSourceTableView,
                         with dragRows: IndexSet,
                         tableColumns: [NSTableColumn],
                         event dragEvent: NSEvent,
                         offset dragImageOffset: NSPointPointer) -> NSImage {
    return NSImage (named: NSImage.Name ("exclamation"))!
  }

  //····················································································································
  //   Drag destination
  //····················································································································
  //The six NSDraggingDestination methods are invoked in a distinct order:
  //
  // ① As the image is dragged into the destination’s boundaries, the destination is sent a draggingEntered: message.
  //       The method should return a value that indicates which dragging operation the destination will perform.
  // ② While the image remains within the destination, a series of draggingUpdated: messages are sent.
  //       The method should return a value that indicates which dragging operation the destination will perform.
  // ③ If the image is dragged out of the destination, draggingExited: is sent and the sequence of
  //       NSDraggingDestination messages stops. If it re-enters, the sequence begins again (with a new
  //       draggingEntered: message).
  // ④ When the image is released, it either slides back to its source (and breaks the sequence) or a
  //       prepareForDragOperation: message is sent to the destination, depending on the value returned by the most
  //       recent invocation of draggingEntered: or draggingUpdated:.
  // ⑤  If the prepareForDragOperation: message returned YES, a performDragOperation: message is sent.
  // ⑥  Finally, if performDragOperation: returned YES, concludeDragOperation: is sent.
  //
  //····················································································································

  func draggingEntered (_ sender: NSDraggingInfo, _ destinationScrollView : NSScrollView) -> NSDragOperation {
    // NSLog ("draggingEntered")
    return .copy
  }

  //····················································································································

  func draggingUpdated (_ sender: NSDraggingInfo, _ destinationScrollView : NSScrollView) -> NSDragOperation {
    // NSLog ("draggingUpdated")
    return .copy
  }

  //····················································································································

  func draggingExited (_ sender: NSDraggingInfo?, _ destinationScrollView : NSScrollView) {
    // NSLog ("draggingExited")
  }

  //····················································································································

  func prepareForDragOperation (_ sender: NSDraggingInfo, _ destinationScrollView : NSScrollView) -> Bool {
    // NSLog ("prepareForDragOperation")
    return true
  }

  //····················································································································

  func performDragOperation (_ sender: NSDraggingInfo, _ destinationScrollView : NSScrollView) -> Bool {
    // NSLog ("performDragOperation")
    return false
  }

  //····················································································································

  func concludeDragOperation (_ inSender: NSDraggingInfo?, _ destinationScrollView : NSScrollView) {
  }

  //····················································································································
  //    Document File Format
  //····················································································································

  final var mManagedDocumentFileFormat : EBManagedDocumentFileFormat = .binary {
    didSet {
      if self.mManagedDocumentFileFormat != oldValue {
        self.ebUndoManager.registerUndo (withTarget: self) { $0.mManagedDocumentFileFormat = oldValue }
      }
    }
  }

  //····················································································································
  //-  SAVE
  //····················································································································

  func metadataStatusForSaving () -> UInt8 {
    return 0 ;
  }

  //····················································································································

  func saveMetadataDictionary (version : Int, metadataDictionary : inout [String : Any]) {
  }

  //····················································································································

  override final func data (ofType typeName : String) throws -> Data {
  //--- Update document version
    var version = self.mVersion.propval
    switch self.mVersionShouldChangeObserver.selection {
    case .empty, .multiple :
      break
    case .single (let shouldChange) :
      if shouldChange {
        version += 1
        self.mVersion.setProp (version)
        self.mVersionShouldChangeObserver.updateStartUpSignature ()
      }
    }
  //--- Save metadata dictionary
    self.saveMetadataDictionary (version: version, metadataDictionary : &self.mMetadataDictionary)
  //--- Add the width and the height of main window to metadata dictionary
    if let unwrappedWindowForSheet = windowForSheet { // Document has been opened in the user interface
      if unwrappedWindowForSheet.styleMask.contains(.resizable) { // Only if window is resizable
        let windowSize = unwrappedWindowForSheet.frame.size ;
        self.mMetadataDictionary [WINDOW_WIDTH_METADATADICTIONARY_KEY] = windowSize.width
        self.mMetadataDictionary [WINDOW_HEIGHT_METADATADICTIONARY_KEY] = windowSize.height
      }
    }
  //---
    let documentData = EBDocumentData (
      documentMetadataStatus: self.metadataStatusForSaving (),
      documentMetadataDictionary: self.mMetadataDictionary,
      documentRootObject: self.mRootObject!,
      documentFileFormat: self.mManagedDocumentFileFormat
    )
    return try dataForSaveOperation (from: documentData)
  }

  //····················································································································
  //  Reachable objects from root object
  //····················································································································

  private final func reachableObjectsFromRootObject () -> [EBManagedObject] {
    let rootObject = self.mRootObject!
    var reachableObjectArray = [rootObject]
    var reachableObjectSet = EBReferenceSet (rootObject)
    var objectsToExploreArray = [rootObject]
    while let objectToExplore = objectsToExploreArray.last {
      objectsToExploreArray.removeLast ()
      var accessible = [EBManagedObject] ()
      objectToExplore.accessibleObjects (objects: &accessible)
      for managedObject in accessible {
        if !reachableObjectSet.contains (managedObject) {
          reachableObjectSet.insert (managedObject)
          reachableObjectArray.append (managedObject)
          objectsToExploreArray.append (managedObject)
        }
      }
    }
    return reachableObjectArray
  }

  //····················································································································
  //    READ DOCUMENT FROM FILE
  //····················································································································

  override final func read (from inData : Data, ofType typeName : String) throws {
  //--- Show "Opening xxx…" splash window ?
    if inData.count > 300_000 {
      let window = CanariWindow (
        contentRect: .zero,
        styleMask: [.docModalWindow],
        backing: .buffered,
        defer: true
      )
      self.mSplashScreenWindow = window
      let textField = AutoLayoutLabel (bold: false, size: .small).set (alignment: .center)
      self.mSplashTextField = textField
      textField.stringValue = "Loading File…"
      let vStackView = AutoLayoutVerticalStackView ().set (margins: 12)
      vStackView.appendView (AutoLayoutStaticLabel (title: "Opening " + self.displayName + "…", bold: true, size: .small, alignment: .center))
      vStackView.appendView (textField)
      let hStackView = AutoLayoutHorizontalStackView ().set (margins: 0)
      hStackView.appendView (AutoLayoutFlexibleSpace ())
      hStackView.appendView (AutoLayoutSpinningProgressIndicator (size: .small))
      hStackView.appendView (AutoLayoutFlexibleSpace ())
      vStackView.appendView (hStackView)
      window.contentView = vStackView
      window.isReleasedWhenClosed = false
      window.makeKeyAndOrderFront (nil)
      window.center ()
//      if let screen = window.screen {
//        window.setFrameOrigin (NSPoint (x:100, y: 100))
//      }
      RunLoop.current.run (until: Date ())
    }
    self.ebUndoManager.disableUndoRegistration ()
  //--- Load file
    let documentData = try loadEasyBindingFile (fromData: inData, documentName: self.displayName, undoManager: self.ebUndoManager)
    self.mManagedDocumentFileFormat = documentData.documentFileFormat
  //--- Store Status
    self.mReadMetadataStatus = documentData.documentMetadataStatus
  //--- Store metadata dictionary
    self.mMetadataDictionary = documentData.documentMetadataDictionary
  //--- Read version from file
    self.mVersion.setProp (self.readVersionFromMetadataDictionary (documentData.documentMetadataDictionary))
  //--- Remove current root object graph
    for object in self.reachableObjectsFromRootObject () {
      object.cleanUpRelationshipsAndRemoveAllObservers ()
    }
  //--- Store root object
    self.mRootObject = documentData.documentRootObject
  //---
    self.ebUndoManager.enableUndoRegistration ()
  }

  //····················································································································

  func readVersionFromMetadataDictionary (_ metadataDictionary : [String : Any]) -> Int {
    return 0
  }

  //····················································································································

  func windowDefaultSize () -> NSSize {
    return NSSize (width: 480, height: 320)
  }

  //····················································································································

  func windowStyleMask () -> NSWindow.StyleMask {
    return [.titled, .closable, .miniaturizable, .resizable]
  }

  //····················································································································
  //   makeWindowControllers
  //····················································································································

  override func makeWindowControllers () {
  //--- Signature observer
    self.mRootObject?.setSignatureObserver (observer: self.mSignatureObserver)
    self.mSignatureObserver.setRootObject (self.mRootObject!)
  //--- Version did change observer
    self.mVersionShouldChangeObserver.setSignatureObserverAndUndoManager (self.mSignatureObserver, self.ebUndoManager)
    self.mSignatureObserver.addEBObserver (self.mVersionShouldChangeObserver)
  //--- Create the window and set the content view
    let s = self.windowDefaultSize ()
    let windowWidth  = (self.mMetadataDictionary [WINDOW_WIDTH_METADATADICTIONARY_KEY] as? CGFloat) ?? s.width
    let windowHeight = (self.mMetadataDictionary [WINDOW_HEIGHT_METADATADICTIONARY_KEY] as? CGFloat) ?? s.height
    let window = NSWindow (
      contentRect: NSRect(x: 0.0, y: 0.0, width: windowWidth, height: windowHeight),
      styleMask: self.windowStyleMask (),
      backing: .buffered,
      defer: true
    )
    window.isReleasedWhenClosed = false
    window.center ()
  //---
    let windowController = NSWindowController (window: window)
    self.addWindowController (windowController)
  //--- Build user interface
    if let textField = self.mSplashTextField {
      textField.stringValue = "Configuring User Interface…"
      RunLoop.current.run (until: Date ())
    }
    self.ebBuildUserInterface ()
    self.windowForSheet?.makeKeyAndOrderFront (nil)
    flushOutletEvents ()
    if let window = self.mSplashScreenWindow {
      window.orderOut (nil)
      self.mSplashTextField = nil
      self.mSplashScreenWindow = nil
    }
    appendDocumentFileOperationInfo ("User Interface Built.")
    appendTotalDurationDocumentFileOperationInfo ()
  }

  //····················································································································

  func ebBuildUserInterface () {
  }

  //····················································································································
  //   showObjectExplorerWindow:
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @IBAction func showObjectExplorerWindow (_ : AnyObject) {
      if mDocumentExplorerWindow == nil {
        self.createAndPopulateObjectExplorerWindow ()
      }
      self.mDocumentExplorerWindow?.makeKeyAndOrderFront (nil)
    }
  #endif

  //····················································································································
  //   createAndPopulateObjectExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final func createAndPopulateObjectExplorerWindow () {
    //-------------------------------------------------- Create Window
      let r = NSRect (x: 20.0, y: 20.0, width: 10.0, height: 10.0)
      self.mDocumentExplorerWindow = NSWindow (
        contentRect: r,
        styleMask: [.titled, .closable],
        backing: .buffered,
        defer: true,
        screen: nil
      )
    //-------------------------------------------------- Adding properties
      let view = NSView (frame: r)
      var y : CGFloat = 0.0
      self.populateExplorerWindow (&y, view: view)
    //-------------------------------------------------- Finish Window construction
    //--- Resize View
      let viewFrame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
      view.frame = viewFrame
    //--- Set content size
      self.mDocumentExplorerWindow?.setContentSize (NSSize (width: EXPLORER_ROW_WIDTH + 16.0, height: fmin (600.0, y)))
    //--- Set close button as 'remove window' button
      let closeButton = self.mDocumentExplorerWindow?.standardWindowButton (.closeButton)
      closeButton?.target = self
      closeButton?.action = #selector(Self.deleteDocumentWindowAction(_:))
    //--- Set window title
      self.mDocumentExplorerWindow?.title = "Document " + className
    //--- Add Scroll view
      let frame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
      let sw = NSScrollView (frame: frame)
      sw.hasVerticalScroller = true
      sw.documentView = view
      self.mDocumentExplorerWindow?.contentView = sw
    }
  #endif

  //····················································································································
  //   deleteDocumentWindowAction
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    @objc func deleteDocumentWindowAction (_ : Any) {
      self.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final func clearObjectExplorer () {
      let closeButton = mDocumentExplorerWindow?.standardWindowButton (.closeButton)
      closeButton?.target = nil
      self.mDocumentExplorerWindow?.orderOut (nil)
      self.mDocumentExplorerWindow = nil
      self.mAccessibleObjectsExplorerPopUpButton = nil
      self.mRootObjectExplorerButton = nil
    }
  #endif

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final var mDocumentExplorerWindow : NSWindow? = nil
  #endif

  #if BUILD_OBJECT_EXPLORER
    final var mAccessibleObjectsExplorerPopUpButton : NSPopUpButton? = nil
  #endif

  #if BUILD_OBJECT_EXPLORER
    final var mRootObjectExplorerButton : NSButton? = nil {
      didSet {
        if let valueExplorer = self.mRootObjectExplorerButton {
          updateManagedObjectToOneRelationshipDisplay (object: self.mRootObject, button: valueExplorer)
        }
      }
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      if let rootObject = self.mRootObject {
        createEntryForToOneRelationshipNamed (
          "Root",
          object: rootObject,
          y: &y,
          view: view,
          valueExplorer: &self.mRootObjectExplorerButton
        )
        createEntryForToManyRelationshipNamed (
          "Entities",
          object: rootObject,
          y: &y,
          view: view,
          valueExplorer: &self.mAccessibleObjectsExplorerPopUpButton
        )
      }
    }
  #endif

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final func updateReachableEntitiesPopUpButton () {
      if let accessibleObjectsExplorerPopUpButton = self.mAccessibleObjectsExplorerPopUpButton {
        let selectedObjects = reachableObjectsFromRootObject ()
        updateManagedObjectToManyRelationshipDisplay (objectArray: selectedObjects, popUpButton: accessibleObjectsExplorerPopUpButton)
      }
    }
  #endif

  //····················································································································
  //   removeUserInterface
  //····················································································································

  func removeUserInterface () {
    self.mSignatureObserver.removeEBObserver (self.mVersionShouldChangeObserver)
    #if BUILD_OBJECT_EXPLORER
      self.clearObjectExplorer ()
    #endif
  }

  //····················································································································

  override final func removeWindowController (_ inWindowController : NSWindowController) {
    setStartOperationDateToNow ("Closing \(self.lastComponentOfFileName)")
  //--- Remove user interface
    self.mSignatureObserver.removeEBObserver (self.mVersionShouldChangeObserver)
    #if BUILD_OBJECT_EXPLORER
      self.clearObjectExplorer ()
    #endif
    self.removeUserInterface ()
    appendDocumentFileOperationInfo ("remove interface done")
  //--- Remove all entities
    let allEntities = self.reachableObjectsFromRootObject ()
    #if BUILD_OBJECT_EXPLORER
      for entity in allEntities {
        entity.clearObjectExplorer ()
      }
    #endif
    appendDocumentFileOperationInfo ("remove entity observers done")
    for entity in allEntities {
      entity.cleanUpToManyRelationships ()
    }
    appendDocumentFileOperationInfo ("clean up to many relationship done")
    for entity in allEntities {
      entity.cleanUpToOneRelationships ()
    }
    appendDocumentFileOperationInfo ("clean up to one relationship done")
  //---
    super.removeWindowController (inWindowController)
    appendDocumentFileOperationInfo ("removeWindowController done")
    appendTotalDurationDocumentFileOperationInfo ()
  }

  //····················································································································
  //    Signature observer
  //····················································································································

  private final var mSignatureObserver = EBSignatureObserverEvent ()

  //····················································································································

  final var signatureObserver_property : EBSignatureObserverEvent { return self.mSignatureObserver }

  //····················································································································
  //    Version
  //····················································································································

  private final var mVersion = EBStoredProperty_Int (defaultValue: 0, undoManager: nil)

  //····················································································································

  final var versionObserver_property : EBStoredProperty_Int { return self.mVersion }

  //····················································································································
  //    Version observer
  //····················································································································

  private final var mVersionShouldChangeObserver = EBVersionShouldChangeObserver ()

  //····················································································································

  final var versionShouldChangeObserver_property : EBVersionShouldChangeObserver {
    return self.mVersionShouldChangeObserver
  }

  //····················································································································
  //    Reset version and signature
  //····················································································································

  final func resetVersionAndSignature () {
    self.ebUndoManager.registerUndo (
      withTarget: self,
      selector: #selector (Self.performUndoVersionNumber(_:)),
      object: NSNumber (value: self.mVersion.propval)
    )
    self.mVersion.setProp (0)
    self.mVersionShouldChangeObserver.clearStartUpSignature ()
  }

  //····················································································································

  @objc func performUndoVersionNumber (_ oldValue : NSNumber) {
    self.ebUndoManager.registerUndo (
      withTarget: self,
      selector: #selector (Self.performUndoVersionNumber(_:)),
      object: NSNumber (value: self.mVersion.propval)
    )
    self.mVersion.setProp (oldValue.intValue)
  }

  //····················································································································
  // Menu Events
  //····················································································································

  override func validateMenuItem (_ inMenuItem : NSMenuItem) -> Bool {
    let validate : Bool
    let action = inMenuItem.action
    if action == #selector (Self.printDocument(_:)) {
      validate = self.windowForSheet?.firstResponder is EBGraphicView
    }else if action == #selector (Self.setBinaryFormatAction(_:)) {
      validate = true
      inMenuItem.state = (self.mManagedDocumentFileFormat == .binary) ? .on : .off
    }else if action == #selector (Self.setTextualFormatAction(_:)) {
      validate = true
      inMenuItem.state = (self.mManagedDocumentFileFormat == .textual) ? .on : .off
    }else{
      validate = super.validateMenuItem (inMenuItem)
    }
    // NSLog ("VALIDATE \(action) -> \(validate)")
    return validate
  }

  //····················································································································
  //   FORMAT ACTIONS
  //····················································································································

  @IBAction final func setBinaryFormatAction (_ inSender : Any?) {
    self.mManagedDocumentFileFormat = .binary
  }

  //····················································································································

  @IBAction final func setTextualFormatAction (_ inSender : Any?) {
    self.mManagedDocumentFileFormat = .textual
  }

  //····················································································································
  //   PRINT
  //····················································································································

  @objc override func printDocument (_ inSender : Any?) {
    if let view = self.windowForSheet?.firstResponder as? EBGraphicView {
      let printOperation = NSPrintOperation (view: view, printInfo: self.printInfo)
      let printPanel = printOperation.printPanel
      printPanel.options = [printPanel.options, .showsPaperSize, .showsOrientation, .showsScaling]
      self.runModalPrintOperation (printOperation, delegate: nil, didRun: nil, contextInfo: nil)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBVersionShouldChangeObserver
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBVersionShouldChangeObserver : EBGenericTransientProperty <Bool>, EBSignatureObserverProtocol {

  //····················································································································

  private weak var mUndoManager : EBUndoManager? = nil // SOULD BE WEAK
  private weak var mSignatureObserver : EBSignatureObserverEvent? = nil // SOULD BE WEAK
  private var mSignatureAtStartUp : UInt32 = 0

  //····················································································································

  override init () {
    super.init ()
    self.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        return .single (unwSelf.mSignatureAtStartUp != unwSelf.signature ())
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  final func setSignatureObserverAndUndoManager (_ signatureObserver : EBSignatureObserverEvent, _ ebUndoManager : EBUndoManager?) {
    self.mUndoManager = ebUndoManager
    self.mSignatureObserver = signatureObserver
    self.mSignatureAtStartUp = signatureObserver.signature ()
  }

  //····················································································································

  final func updateStartUpSignature () {
    if let signatureObserver = self.mSignatureObserver {
      self.mSignatureAtStartUp = signatureObserver.signature ()
      self.observedObjectDidChange ()
    }
  }

  //····················································································································

  func signature () -> UInt32 {
    if let signatureObserver = self.mSignatureObserver {
      return signatureObserver.signature ()
    }else{
      return 0
    }
  }

  //····················································································································

  func clearSignatureCache () {
    self.observedObjectDidChange ()
  }

  //····················································································································
  // clearStartUpSignature
  //····················································································································

  func clearStartUpSignature () {
    self.mUndoManager?.registerUndo (withTarget: self, selector:#selector (performUndo(_:)), object:NSNumber (value: mSignatureAtStartUp))
    self.mSignatureAtStartUp = 0
    self.observedObjectDidChange ()
  }

  //····················································································································

  @objc func performUndo (_ oldValue : NSNumber) {
    self.mUndoManager?.registerUndo (withTarget: self, selector:#selector (performUndo(_:)), object:NSNumber (value: mSignatureAtStartUp))
    self.mSignatureAtStartUp = oldValue.uint32Value
    self.observedObjectDidChange ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func appendShowExploreDocumentWindowMenuItem (_ inMenu : NSMenu) {
  #if BUILD_OBJECT_EXPLORER
    let menuItem = NSMenuItem (
      title: "Explore document",
      action: #selector (EBAutoLayoutManagedDocument.showObjectExplorerWindow (_:)),
      keyEquivalent: ""
    )
    menuItem.keyEquivalentModifierMask = [.command, .control]
    inMenu.addItem (menuItem)
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBSignatureObserverEvent
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBSignatureObserverEvent : EBGenericTransientProperty <UInt32>, EBSignatureObserverProtocol {

  //····················································································································

  private weak var mRootObject : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  override init () {
    super.init ()
    self.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        return .single (unwSelf.signature ())
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  final func setRootObject (_ rootObject : EBSignatureObserverProtocol) {
    self.mRootObject = rootObject
  }

  //····················································································································

  func signature () -> UInt32 {
    if let rootObject = self.mRootObject {
      return rootObject.signature ()
    }else{
      return 0
    }
  }

  //····················································································································

  func clearSignatureCache () {
    self.observedObjectDidChange ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
