//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredEnumProperty <T : EnumPropertyProtocol> : EBReadWriteEnumProperty <T>, DocumentStorableProperty {

  //····················································································································

  weak private var mUndoManager : UndoManager? = nil // SOULD BE WEAK
  fileprivate var mPreferenceKey : String?

  //····················································································································

  fileprivate var mKey : String?
  var key : String? { return self.mKey }

  //····················································································································

  init (defaultValue inValue : T, undoManager inEBUndoManager : UndoManager?, key inKey : String?) {
    self.mValue = inValue
    self.mPreferenceKey = nil
    self.mKey = inKey
    self.mUndoManager = inEBUndoManager
    super.init ()
  }

  //····················································································································

  init (defaultValue inValue : T, prefKey inPreferenceKey : String) {
    self.mValue = inValue
    self.mPreferenceKey = inPreferenceKey
    self.mKey = inPreferenceKey
    super.init ()
  //--- Read from preferences
    let possibleValue = UserDefaults.standard.object (forKey: inPreferenceKey)
    if let value = possibleValue as? NSObject {
      setProp (T.convertFromNSObject (object: value))
    }
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if self.mValue != oldValue {
        if let prefKey = self.mPreferenceKey {
          UserDefaults.standard.set (mValue.convertToNSObject (), forKey:prefKey)
        }
        self.mUndoManager?.registerUndo (withTarget: self) { $0.mValue = oldValue }
        if logEvents () {
          appendMessageString ("Property #\(self.objectIndex) did change value to \(self.mValue)\n")
        }
        self.observedObjectDidChange ()
        self.clearSignatureCache ()
      }
    }
  }

  //····················································································································

  override var selection : EBSelection <T> { return .single (mValue) }

  //····················································································································

  var propval : T { return self.mValue }

  //····················································································································

  override func setProp (_ value : T) { self.mValue = value }

  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let value = inDictionary [key] as? NSObject {
      self.setProp (T.convertFromNSObject (object: value))
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey {
      ioDictionary [key] = self.mValue.convertToNSObject ()
    }
  }

  //····················································································································

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
  }

  //····················································································································

//  func readFrom (dictionary inDictionary : [String : Any], forKey inKey : String) {
//    if let value = inDictionary [inKey] as? NSObject {
//      self.setProp (T.convertFromNSObject (object: value))
//    }
//  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final private func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.propval.ebHashValue ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
