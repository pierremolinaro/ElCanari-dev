//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBGenericStoredProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBGenericStoredProperty <T : EBStoredPropertyProtocol> : EBObservableMutableProperty <T> {

  //····················································································································

  weak private var mUndoManager : UndoManager? // SOULD BE WEAK

  //····················································································································

  init (defaultValue inValue : T, undoManager inUndoManager : UndoManager?) {
    self.mValue = inValue
    self.mUndoManager = inUndoManager
    super.init ()
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if self.mValue != oldValue {
        self.mUndoManager?.registerUndo (withTarget: self) { $0.mValue = oldValue }
        if logEvents () {
          appendMessageString ("Property #\(self.objectIndex) did change value to \(self.mValue)\n")
        }
        self.observedObjectDidChange ()
        self.clearSignatureCache ()
      }
    }
  }

  //····················································································································

  override var selection : EBSelection <T> { return .single (self.mValue) }

  //····················································································································

  var propval : T { return self.mValue }

  //····················································································································

  override func setProp (_ inValue : T) { self.mValue = inValue }

  //····················································································································

  func storeIn (dictionary ioDictionary : inout [String : Any], forKey inKey : String) {
    ioDictionary [inKey] = self.mValue.convertToNSObject ()
//    dictionary.setValue (self.mValue.convertToNSObject (), forKey: inKey)
  }

  //····················································································································

  func readFrom (dictionary : NSDictionary, forKey inKey : String) {
    let possibleValue = dictionary.object (forKey: inKey)
    if let value = possibleValue as? NSObject {
      self.setProp (T.convertFromNSObject (object: value))
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK
  private var mSignatureCache : UInt32? = nil

  //····················································································································

  func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  private func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.propval.ebHashValue ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
