//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  Dictionary keys for drag and drop, copy / paste
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let OBJECT_DICTIONARY_KEY = "OBJECTS_DICTIONARY_KEY"
let OBJECT_ADDITIONAL_DICTIONARY_KEY = "OBJECTS_ADDITIONAL_DICTIONARY_KEY"
let X_KEY = "X"
let Y_KEY = "Y"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBGraphicManagedObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBGraphicManagedObject : EBManagedObject {

  //····················································································································
  //   Transient property: selectionDisplay
  //····················································································································

  final var selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var selectionDisplay : EBShape? {
    switch self.selectionDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: objectDisplay
  //····················································································································

  final var objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  final var objectDisplay : EBShape? {
    switch self.objectDisplay_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //  Cursor
  //····················································································································

  func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return nil // Uses default cursor
  }

  //····················································································································
  //  Translation
  //····················································································································

  func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return CanariPoint (x: inDx, y: inDy)
  }

  //····················································································································

  func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return false
  }

  //····················································································································

  func translate (xBy inDx: Int, yBy inDy: Int, userSet ioSet : inout EBReferenceSet <AnyObject>) {
  }

  //····················································································································
  //  Move
  //····················································································································

  func canMove (knob inKnobIndex : Int,
                proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                shift inShift : Bool) -> CanariPoint {
    return inProposedAlignedTranslation
  }

  //····················································································································

  func move (knob inKnobIndex: Int,
             proposedDx inDx: Int,
             proposedDy inDy: Int,
             unalignedMouseLocationX inUnlignedMouseLocationX : Int,
             unalignedMouseLocationY inUnlignedMouseLocationY : Int,
             alignedMouseLocationX inAlignedMouseLocationX : Int,
             alignedMouseLocationY inAlignedMouseLocationY : Int,
             shift inShift : Bool) {
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  func snapToGrid (_ inGrid : Int) {
  }

  //····················································································································

  func canSnapToGrid (_ inGrid : Int) -> Bool {
    return false
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  func flipHorizontally () {
  }

  //····················································································································

  func canFlipHorizontally () -> Bool {
    return false
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  func flipVertically () {
  }

  //····················································································································

  func canFlipVertically () -> Bool {
    return false
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return false
  }

  //····················································································································

  func rotate90Clockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout EBReferenceSet <AnyObject>) {
  }

  //····················································································································

  func rotate90CounterClockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout EBReferenceSet <AnyObject>) {
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  func canCopyAndPaste () -> Bool {
    return false
  }

  //····················································································································

  func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                              objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return ""
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  func alignmentPoints () -> Set <CanariPoint> {
    return Set <CanariPoint> ()
  }

  //····················································································································
  //  Can be deleted
  //····················································································································

  func canBeDeleted () -> Bool {
    return true
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  func operationBeforeRemoving () {
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Set where Element == CanariPoint {

  //····················································································································

  mutating func insertCanariPoint (x inX : Int, y inY : Int) {
    self.insert (CanariPoint (x: inX, y: inY))
  }

  //····················································································································

}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//@objc final class EBReferenceSet <AnyObject> : EBObjcBaseObject { // SHOULD INHERIT FROM NSObject
//
//  //····················································································································
//
//  private var mObjects = Set <EBObjcBaseObject> ()
//
//  //····················································································································
//
//  func insert (_ inObject : EBObjcBaseObject) {
//    self.mObjects.insert (inObject)
//  }
//
//  //····················································································································
//
//  func contains (_ inObject : EBObjcBaseObject) -> Bool {
//    return self.mObjects.contains (inObject)
//  }
//
//  //····················································································································
//
//}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
