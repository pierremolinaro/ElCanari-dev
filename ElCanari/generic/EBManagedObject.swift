//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBSignatureObserverProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor @objc protocol EBSignatureObserverProtocol : AnyObject {
  func clearSignatureCache ()
  func signature () -> UInt32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBManagedObject: hérite de EBObjcBaseObject
//  Moins volumineux avec EBSwiftBaseObject, mais plus long à l'ouverture
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor class EBManagedObject : EBSignatureObserverProtocol {

  //····················································································································

  final var className : String { return String (describing: type (of: self)) } // Required when inherits from EBSwiftBaseObject

  //····················································································································

  private weak final var mUndoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································

  final var savingIndex : Int { return self.mSavingIndex }

  final private var mSavingIndex = 0

  final func setSavingIndex (_ inIndex : Int) {
    self.mSavingIndex = inIndex
  }

  //····················································································································
  //  init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mUndoManager = inUndoManager
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  final var objectIndex : Int { return objectIntIdentifier (self) }

  //····················································································································
  //  Getters
  //····················································································································

  final var undoManager : UndoManager? {
    return self.mUndoManager
  }

  //····················································································································

  final var ebObjectIndex_selection : EBSelection <Int> { return .single (self.objectIndex) }

  //····················································································································
  //  Setup
  //····················································································································

  final func setUpProperties (withDictionary inDictionary : [String : Any],
                              managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    let mirror = Mirror (reflecting: self)
    for property in mirror.children {
      if let storedProperty = property.value as? DocumentStorablePropertyProtocol, storedProperty.key != nil {
        storedProperty.initialize (fromDictionary: inDictionary, managedObjectArray: inManagedObjectArray)
      }
    }
  }

  //····················································································································

  final func setUpPropertiesWithTextDictionary (_ inRangeDictionary : [String : NSRange],
                                                _ inRawObjectArray : [RawObject],
                                                _ inData : Data) {
    let mirror = Mirror (reflecting: self)
    for property in mirror.children {
      if let storedProperty = property.value as? DocumentStorablePropertyProtocol,
         let key = storedProperty.key,
         let range = inRangeDictionary [key] {
        storedProperty.initialize (fromRange: range, ofData: inData, inRawObjectArray)
      }
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  final func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    let mirror = Mirror (reflecting: self)
    for property in mirror.children {
      if let storedProperty = property.value as? DocumentStorablePropertyProtocol, storedProperty.key != nil {
        storedProperty.enterRelationshipObjects (intoArray: &ioObjectArray)
      }
    }
  }

  //····················································································································
  //  Save
  //····················································································································

  final func saveIntoDictionary (_ ioDictionary : inout [String : Any]) {
    ioDictionary [ENTITY_KEY] = self.className
//    Swift.print ("Object of class \(self.className)")
    let mirror = Mirror (reflecting: self)
    for property in mirror.children {
      if let storedProperty = property.value as? DocumentStorablePropertyProtocol, storedProperty.key != nil {
        storedProperty.store (inDictionary: &ioDictionary)
        // Swift.print ("  \(key)")
      }
    }
  }

  //····················································································································
  //   appendPropertyNamesTo(string:)
  //····················································································································

  final func appendPropertyNamesTo (string ioString : inout String) {
    let mirror = Mirror (reflecting: self)
    for property in mirror.children {
      if let storedProperty = property.value as? DocumentStorablePropertyProtocol, let key = storedProperty.key {
        ioString += key + "\n"
      }
    }
  }

  //····················································································································
  //   appendPropertyValuesTo(string:)
  //····················································································································

  final func appendPropertyValuesTo (data ioData : inout Data) {
    let mirror = Mirror (reflecting: self)
    for property in mirror.children {
      if let storedProperty = property.value as? DocumentStorablePropertyProtocol, storedProperty.key != nil {
        storedProperty.appendValueTo (data: &ioData)
        ioData.append (ascii: .lineFeed)
      }
    }
  }

  //····················································································································
  //   setSignatureObserver
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
  }

  //····················································································································
  //   clearSignatureCache
  //····················································································································

  final func clearSignatureCache () {
    if self.mSignature != nil {
      self.mSignature = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private final var mSignature : UInt32? = nil

  //····················································································································

  final func signature () -> UInt32 {
    if let s = self.mSignature {
      return s
    }else{
      let s = self.computeSignature ()
      self.mSignature = s
      return s
    }
  }

  //····················································································································

  func computeSignature () -> UInt32 {
    return 0
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
