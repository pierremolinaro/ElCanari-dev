//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBSignatureObserverProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc protocol EBSignatureObserverProtocol : AnyObject {
  func clearSignatureCache ()
  func signature () -> UInt32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBManagedObject: hérite de EBObjcBaseObject
//  Moins volumineux avec EBSwiftBaseObject, mais plus long à l'ouverture
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

var gInitSemaphore = DispatchSemaphore (value: 1) // Sémaphore d'exclusion mutuelle utilisé lors de l'init

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBManagedObject : EBObjcBaseObject, EBSignatureObserverProtocol {

  //····················································································································

  // final var className : String { return String (describing: type (of: self)) } // Required when inherits from EBSwiftBaseObject

  //····················································································································

  private weak final var mEBUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································

  final var savingIndex = 0

  //····················································································································
  //  init
  //····················································································································

  required init (_ inUndoManager : EBUndoManager?) {
    self.mEBUndoManager = inUndoManager
    super.init ()
  }

  //····················································································································
  //  Setup
  //····················································································································

  func setUpWithDictionary (_ inDictionary : NSDictionary,
                            managedObjectArray : inout [EBManagedObject]) {
    self.setUpAtomicPropertiesWithDictionary (inDictionary)
  }

  //····················································································································

  func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
  }

  //····················································································································

  func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                          _ inData : Data) {
  }

  //····················································································································

  func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                  _ inRawObjectArray : [RawObject],
                                                  _ inData : Data) {
  }

  //····················································································································

  func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inRawObjectArray : [RawObject],
                                                   _ inData : Data) {
  }

  //····················································································································
  //  Save
  //····················································································································

  func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    ioDictionary.setValue (self.className.pathExtension, forKey: ENTITY_KEY)
  }

  //····················································································································
  //  Getters
  //····················································································································

  final var ebUndoManager : EBUndoManager? {
    return self.mEBUndoManager
  }

  //····················································································································

  final var ebObjectIndex_selection : EBSelection <Int> { return .single (self.objectIndex) }

  //····················································································································
  //  reachableObjects
  //····················································································································

  func removeRecursivelyAllRelationsShips () {
  //--- Find all reachable entities
    var reachableObjectSet = EBReferenceSet <EBManagedObject> ()
    reachableObjectSet.insert (self)
    var objectsToExploreArray = [EBManagedObject] ()
    objectsToExploreArray.append (self)
    while let objectToExplore = objectsToExploreArray.last {
      objectsToExploreArray.removeLast ()
      var accessible = [EBManagedObject] ()
      objectToExplore.accessibleObjects (objects: &accessible)
      for managedObject in accessible {
        if !reachableObjectSet.contains (managedObject) {
          reachableObjectSet.insert (managedObject)
          objectsToExploreArray.append (managedObject)
        }
      }
    }
  //--- Remove relationships
    for object in reachableObjectSet.values {
      object.cleanUpToOneRelationships ()
      object.cleanUpToManyRelationships ()
    }
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  func accessibleObjects (objects : inout [EBManagedObject]) {
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
  }

  //····················································································································
  //   cleanUpRelationshipsAndRemoveAllObservers
  //····················································································································

  final func cleanUpRelationshipsAndRemoveAllObservers () {
    self.cleanUpToManyRelationships ()
    self.cleanUpToOneRelationships ()
  }

  //····················································································································
  //   cleanUpToManyRelationships
  //····················································································································

  func cleanUpToManyRelationships () {
  }

  //····················································································································
  //   cleanUpToOneRelationships
  //····················································································································

  func cleanUpToOneRelationships () {
  }

  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  func appendPropertyNamesTo (_ ioString : inout String) {
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  func appendPropertyValuesTo (_ ioString : inout Data) {
  }

  //····················································································································
  //   store (managedObjectArray:relationshipName:intoDictionary)
  //····················································································································

  final func store (managedObjectArray : [EBManagedObject], // NSArray,
                    relationshipName : String,
                    intoDictionary : NSMutableDictionary) {

    if managedObjectArray.count > 0 {
      let indexArray = NSMutableArray ()
      for managedObject in managedObjectArray {
        indexArray.add (NSNumber (value:managedObject.savingIndex))
      }
      intoDictionary.setObject (indexArray, forKey:relationshipName as NSCopying)
    }
  }

  //····················································································································
  //   store (managedObject:relationshipName:intoDictionary)
  //····················································································································

  final func store (managedObject : EBManagedObject?,
                    relationshipName : String,
                    intoDictionary : NSMutableDictionary) {
    if let unwObject = managedObject {
      intoDictionary.setObject (NSNumber (value: unwObject.savingIndex), forKey: relationshipName as NSCopying)
    }
  }

  //····················································································································
  //   readEntityFromDictionary
  //····················································································································

  final func readEntityFromDictionary (inRelationshipName : String,
                                       inDictionary : NSDictionary,
                                       managedObjectArray : inout [EBManagedObject]) -> EBManagedObject? {
    let opValue : Int? = inDictionary.value (forKey: inRelationshipName) as? Int
    var result : EBManagedObject? = nil
    if let value = opValue {
      result = managedObjectArray [value]
    }
    return result
  }

  //····················································································································
  //   readEntityArrayFromDictionary
  //····················································································································

  final func readEntityArrayFromDictionary (inRelationshipName : String,
                                            inDictionary : NSDictionary,
                                            managedObjectArray : inout [EBManagedObject]) -> [EBManagedObject] {
    let opIndexArray : [Int]? = inDictionary.value (forKey: inRelationshipName) as? [Int]
    var result = [EBManagedObject] ()
    if let indexArray = opIndexArray {
      for number in indexArray {
        let managedObject = managedObjectArray [number]
        result.append (managedObject)
      }
    }
    return result
  }

  //····················································································································
  //   setSignatureObserver
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
  }

  //····················································································································
  //   clearSignatureCache
  //····················································································································

  final func clearSignatureCache () {
    if self.mSignature != nil {
      self.mSignature = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private final var mSignature : UInt32? = nil

  //····················································································································

  final func signature () -> UInt32 {
    if let s = self.mSignature {
      return s
    }else{
      let s = self.computeSignature ()
      self.mSignature = s
      return s
    }
  }

  //····················································································································

  func computeSignature () -> UInt32 {
    return 0
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
