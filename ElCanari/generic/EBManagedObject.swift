//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBSignatureObserverProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor @objc protocol EBSignatureObserverProtocol : AnyObject {
  func clearSignatureCache ()
  func signature () -> UInt32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBManagedObject: hérite de EBObjcBaseObject
//  Moins volumineux avec EBSwiftBaseObject, mais plus long à l'ouverture
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// let gInitSemaphore = DispatchSemaphore (value: 1) // Sémaphore d'exclusion mutuelle utilisé lors de l'init

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBManagedObject : EBObjcBaseObject, EBSignatureObserverProtocol {

  //····················································································································

  // final var className : String { return String (describing: type (of: self)) } // Required when inherits from EBSwiftBaseObject

  //····················································································································

  private weak final var mUndoManager : UndoManager? = nil // SOULD BE WEAK

  //····················································································································

  final var savingIndex : Int { return self.mSavingIndex }

  final private var mSavingIndex = 0

  final func setSavingIndex (_ inIndex : Int) {
    self.mSavingIndex = inIndex
  }

  //····················································································································
  //  init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
    self.mUndoManager = inUndoManager
    super.init ()
  }

  //····················································································································
  //  Getters
  //····················································································································

  final var undoManager : UndoManager? {
    return self.mUndoManager
  }

  //····················································································································

  final var ebObjectIndex_selection : EBSelection <Int> { return .single (self.objectIndex) }

  //····················································································································
  //  Setup
  //····················································································································

  func setUpWithDictionary (_ inDictionary : [String : Any],
                            managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    self.setUpAtomicPropertiesWithDictionary (inDictionary)
  }

  //····················································································································

  func setUpAtomicPropertiesWithDictionary (_ inDictionary : [String : Any]) {
  }

  //····················································································································

  func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                          _ inData : Data) {
  }

  //····················································································································

  func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                  _ inRawObjectArray : [RawObject],
                                                  _ inData : Data) {
  }

  //····················································································································

  func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inRawObjectArray : [RawObject],
                                                   _ inData : Data) {
  }

  //····················································································································
  //  Save
  //····················································································································

  func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    ioDictionary [ENTITY_KEY] = self.className.pathExtension
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
  }

  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  func appendPropertyNamesTo (_ ioString : inout String) {
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  func appendPropertyValuesTo (_ ioString : inout Data) {
  }

  //····················································································································
  //   store (managedObjectArray:relationshipName:intoDictionary)
  //····················································································································

  final func store (managedObjectArray inManagedObjectArray : [EBManagedObject],
                    relationshipName inRelationshipName : String,
                    intoDictionary ioDictionary : inout [String : Any]) {

    if inManagedObjectArray.count > 0 {
      var indexArray = [Int] ()
      for managedObject in inManagedObjectArray {
        indexArray.append (managedObject.savingIndex)
      }
      ioDictionary [inRelationshipName] = indexArray
    }
  }

  //····················································································································
  //   store (managedObject:relationshipName:intoDictionary)
  //····················································································································

  final func store (managedObject inPossibleManagedObject : EBManagedObject?,
                    relationshipName inRelationshipName : String,
                    intoDictionary ioDictionary : inout [String : Any]) {
    if let unwObject = inPossibleManagedObject {
      ioDictionary [inRelationshipName] = unwObject.savingIndex
    }
  }

  //····················································································································
  //   readEntityFromDictionary
  //····················································································································

  final func readEntityFromDictionary (relationshipName inRelationshipName : String,
                                       dictionary inDictionary : [String : Any],
                                       managedObjectArray inManagedObjectArray : [EBManagedObject]) -> EBManagedObject? {
    var result : EBManagedObject? = nil
    if let value = inDictionary [inRelationshipName] as? Int {
      result = inManagedObjectArray [value]
    }
    return result
  }

  //····················································································································
  //   readEntityArrayFromDictionary
  //····················································································································

  final func readEntityArrayFromDictionary (inRelationshipName : String,
                                            inDictionary : [String : Any],
                                            managedObjectArray : [EBManagedObject]) -> [EBManagedObject] {
    let opIndexArray : [Int]? = inDictionary [inRelationshipName] as? [Int]
    var result = [EBManagedObject] ()
    if let indexArray = opIndexArray {
      for number in indexArray {
        let managedObject = managedObjectArray [number]
        result.append (managedObject)
      }
    }
    return result
  }

  //····················································································································
  //   setSignatureObserver
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
  }

  //····················································································································
  //   clearSignatureCache
  //····················································································································

  final func clearSignatureCache () {
    if self.mSignature != nil {
      self.mSignature = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private final var mSignature : UInt32? = nil

  //····················································································································

  final func signature () -> UInt32 {
    if let s = self.mSignature {
      return s
    }else{
      let s = self.computeSignature ()
      self.mSignature = s
      return s
    }
  }

  //····················································································································

  func computeSignature () -> UInt32 {
    return 0
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
