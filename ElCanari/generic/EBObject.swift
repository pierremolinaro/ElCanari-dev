//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct ObjectAddress : Hashable {
  private let address : Int

  init (_ inObject : AnyObject?) {
    self.address = unsafeBitCast (inObject, to: Int.self)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ObjectIndexProtocol : AnyObject {
  var explorerIndexString : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private var gEasyBindingsObjectIndex = 0

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBObjcBaseObject class
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBObjcBaseObject : NSObject, EBUserClassNameProtocol, ObjectIndexProtocol {

  //····················································································································

  final let ebObjectIndex : Int

  //····················································································································

  override init () {
    self.ebObjectIndex = gEasyBindingsObjectIndex
    gEasyBindingsObjectIndex += 1
    super.init ()
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  final var explorerIndexString : String {
    return explorerObjectIndexString (self.ebObjectIndex)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBSwiftBaseObject class
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBSwiftBaseObject : EBUserClassNameProtocol, ObjectIndexProtocol {

  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    final let ebObjectIndex : Int
  #endif

  //····················································································································

  init () {
    #if BUILD_OBJECT_EXPLORER
      self.ebObjectIndex = gEasyBindingsObjectIndex
      gEasyBindingsObjectIndex += 1
    #endif
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  final var explorerIndexString : String {
    #if BUILD_OBJECT_EXPLORER
      return explorerObjectIndexString (self.ebObjectIndex)
    #else
      return ""
    #endif
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBSwiftEquatableBaseObject class
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//class EBSwiftEquatableBaseObject : EBSwiftBaseObject, Equatable {
//
//  //····················································································································
//  //   Equatable Protocol
//  //····················································································································
//
//  public static func == (lhs : EBSwiftEquatableBaseObject, rhs : EBSwiftEquatableBaseObject) -> Bool {
//    return lhs.ebObjectIndex == rhs.ebObjectIndex
//  }
//
//  //····················································································································
//
//}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBSwiftHashableBaseObject class
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//class EBSwiftHashableBaseObject : EBSwiftEquatableBaseObject, Hashable {
//
//  //····················································································································
//  //   Hashable Protocol
//  //····················································································································
//
//  func hash (into hasher: inout Hasher) {
//    self.ebObjectIndex.hash (into: &hasher)
//  }
//
//  //····················································································································
//
//}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private let explorerLetters = ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L",
                               "M", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

private func explorerObjectIndexString (_ idx : Int) -> String {
  var result = String (idx % 10)
  var n = idx / 10
  result += "\(n % 10)"
  n /= 10
  result += explorerLetters [n % explorerLetters.count]
  n /= explorerLetters.count
  result += explorerLetters [n % explorerLetters.count]
  n /= explorerLetters.count
  result += explorerLetters [n % explorerLetters.count]
  n /= explorerLetters.count
  if n > 0 {
    result += "\(n)"
  }
  return result
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
