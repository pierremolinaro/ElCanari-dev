//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Foundation

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct EBReferenceArray <T : AnyObject> : RangeReplaceableCollection {

  private var mArray : [T]

  //····················································································································
  //   init
  //····················································································································

  init () {
    self.mArray = []
  }

  //····················································································································

  init (_ inObject : T) {
    self.mArray = [inObject]
  }

  //····················································································································

  init (_ inArray : [T]) {
    self.mArray = inArray
  }

  //····················································································································

  mutating func append (_ inObject : T) {
    self.mArray.append (inObject)
  }

  //····················································································································

  mutating func remove (at inIndex : Int) {
    self.mArray.remove (at: inIndex)
  }

  //····················································································································

  mutating func removeAll () {
    self.mArray.removeAll ()
  }

  //····················································································································

  mutating func reverse () {
    self.mArray.reverse ()
  }

  //····················································································································

  subscript (_ inIndex : Int) -> T {
    return self.mArray [inIndex]
  }

  //····················································································································

  func contains (_ inObject : T) -> Bool {
    let address = ObjectIdentifier (inObject)
    var idx = 0
    while idx < self.mArray.count {
      let p = ObjectIdentifier (self.mArray [idx])
      idx += 1
      if address == p {
        return true
      }
    }
    return false
  }

  //····················································································································

  var values : [T] { return self.mArray }

  //····················································································································

  var count : Int { return self.mArray.count }

  //····················································································································

  func firstIndex (of inObject : T) -> Int? {
    let address = ObjectIdentifier (inObject)
    var idx = 0
    while idx < self.mArray.count {
      let p = ObjectIdentifier (self.mArray [idx])
      if address == p {
        return idx
      }
      idx += 1
    }
    return nil
  }

  //····················································································································
  // Protocol Collection
  //····················································································································

  var startIndex : Int { return 0 }

  //····················································································································

  var endIndex : Int { return self.mArray.count }

  //····················································································································

  func index (after i : Int) -> Int {
    return i + 1
  }

  //····················································································································

  static func += (lhs: inout EBReferenceArray <T>, rhs: EBReferenceArray <T>) {
    lhs.mArray += rhs.mArray
  }

  //····················································································································

  mutating func sort (by areInIncreasingOrder: (Element, Element) -> Bool) {
    self.mArray.sort { areInIncreasingOrder ($0, $1) }
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
