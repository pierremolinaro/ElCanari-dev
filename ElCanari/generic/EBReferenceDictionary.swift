//
//  EBReferenceDictionary.swift
//  ElCanari
//
//  Created by Pierre Molinaro on 29/09/2021.
//
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct EBReferenceDictionary <KEY : AnyObject, VALUE> {

  //····················································································································

  private var mDictionary : Dictionary <ObjectAddress, VALUE>

  //····················································································································

  init () {
    self.mDictionary = Dictionary <ObjectAddress, VALUE> ()
  }

  //····················································································································

  init (minimumCapacity inMinimumCapacity : Int) {
    self.mDictionary = Dictionary <ObjectAddress, VALUE> (minimumCapacity: inMinimumCapacity)
  }

  //····················································································································

  subscript (_ inKey : KEY) -> VALUE? {
    get {
      let address = ObjectAddress (inKey)
      return self.mDictionary [address]
    }
    set (newValue) {
      let address = ObjectAddress (inKey)
      self.mDictionary [address] = newValue
    }
  }

  //····················································································································

//  init (_ inObjects : [T]) {
//    self.mDictionary = Dictionary <ObjectAddress, T> (minimumCapacity: inObjects.count)
//    for object in inObjects {
//      self.insert (object)
//    }
//  }

  //····················································································································

//  mutating func insert (_ inObject : T) {
//    let address = ObjectAddress (inObject)
//    self.mDictionary [address] = inObject
//  }

  //····················································································································

//  mutating func remove (_ inObject : T) {
//    let address = ObjectAddress (inObject)
//    self.mDictionary [address] = nil
//  }

  //····················································································································

  func contains (_ inKey : KEY) -> Bool {
    let address = ObjectAddress (inKey)
    return self.mDictionary [address] != nil
  }

  //····················································································································

//  func intersection (_ inArray : [T]) -> EBReferenceSet <T> {
//    var result = EBReferenceSet <T> ()
//    for value in inArray {
//      if self.contains (value) {
//        result.insert (value)
//      }
//    }
//    return result
//  }

  //····················································································································

//  var first : T? { return self.mDictionary.first?.value }

  //····················································································································

//  mutating func removeFirst () {
//    let address = ObjectAddress (self.first!)
//    self.mDictionary [address] = nil
//  }

  //····················································································································

  var isEmpty : Bool { return self.mDictionary.isEmpty }

  //····················································································································

  var count : Int { return self.mDictionary.count }

  //····················································································································

  var values : Dictionary <ObjectAddress, VALUE>.Values { return self.mDictionary.values }

  //····················································································································

//  func subtracting (_ inOtherSet : EBReferenceSet <T>) -> EBReferenceSet <T> {
//     var result = self
//     for (key, _) in inOtherSet.mDictionary {
//       result.mDictionary [key] = nil
//     }
//     return result
//  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
