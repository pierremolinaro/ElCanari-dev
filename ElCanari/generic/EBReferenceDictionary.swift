//
//  EBReferenceDictionary.swift
//  ElCanari
//
//  Created by Pierre Molinaro on 29/09/2021.
//
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct EBReferenceDictionary <KEY : AnyObject, VALUE> : Sequence {

  //····················································································································

  private var mDictionary : Dictionary <ObjectIdentifier, (KEY, VALUE)>

  //····················································································································

  init () {
    self.mDictionary = Dictionary <ObjectIdentifier, (KEY, VALUE)> ()
  }

  //····················································································································

  init (minimumCapacity inMinimumCapacity : Int) {
    self.mDictionary = Dictionary <ObjectIdentifier, (KEY, VALUE)> (minimumCapacity: inMinimumCapacity)
  }

  //····················································································································

  subscript (_ inKey : KEY) -> VALUE? {
    get {
      let address = ObjectIdentifier (inKey)
      return self.mDictionary [address]?.1
    }
    set (optionalNewValue) {
      let address = ObjectIdentifier (inKey)
      if let newValue = optionalNewValue {
        self.mDictionary [address] = (inKey, newValue)
      }else{
        self.mDictionary [address] = nil
      }
    }
  }

  //····················································································································

  func contains (_ inKey : KEY) -> Bool {
    let address = ObjectIdentifier (inKey)
    return self.mDictionary [address] != nil
  }

  //····················································································································

  var isEmpty : Bool { return self.mDictionary.isEmpty }

  //····················································································································

  var count : Int { return self.mDictionary.count }

  //····················································································································

  func makeIterator () -> AnyIterator <(KEY, VALUE)> {
    let values = self.mDictionary.values
    var index = values.startIndex
    return AnyIterator {
      if index != values.endIndex {
        let result = values [index]
        values.formIndex (after: &index)
        return result
      }else{
        return nil
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
