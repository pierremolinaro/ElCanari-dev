//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct EBReferenceSet <T : AnyObject> {

  //····················································································································

  private var mDictionary : Dictionary <ObjectAddress, T>

  //····················································································································

  init () {
    self.mDictionary = Dictionary <ObjectAddress, T> ()
  }

  //····················································································································

  init (minimumCapacity inMinimumCapacity : Int) {
    self.mDictionary = Dictionary <ObjectAddress, T> (minimumCapacity: inMinimumCapacity)
  }

  //····················································································································

//  init <U> (_ inOtherSet : EBReferenceSet <U>) where U : T {
//    self.mDictionary = inOtherSet.mDictionary
//  }

  //····················································································································

  init (_ inObjects : [T]) {
    self.mDictionary = Dictionary <ObjectAddress, T> (minimumCapacity: inObjects.count)
    for object in inObjects {
      self.insert (object)
    }
  }

  //····················································································································

  mutating func insert (_ inObject : T) {
    let address = ObjectAddress (inObject)
    self.mDictionary [address] = inObject
  }

  //····················································································································

  mutating func remove (_ inObject : T) {
    let address = ObjectAddress (inObject)
    self.mDictionary [address] = nil
  }

  //····················································································································

  func contains (_ inObject : T) -> Bool {
    let address = ObjectAddress (inObject)
    return self.mDictionary [address] != nil
  }

  //····················································································································

  func intersection (_ inOtherSet : EBReferenceSet <T>) -> EBReferenceSet <T> {
    var result = EBReferenceSet <T> ()
    if self.mDictionary.count < inOtherSet.mDictionary.count {
      for value in self.mDictionary.values {
        if inOtherSet.contains (value) {
          result.insert (value)
        }
      }
    }else{
      for value in inOtherSet.mDictionary.values {
        if self.contains (value) {
          result.insert (value)
        }
      }
    }
    return result
  }

  //····················································································································

  func intersection (_ inArray : [T]) -> EBReferenceSet <T> {
    var result = EBReferenceSet <T> ()
    for value in inArray {
      if self.contains (value) {
        result.insert (value)
      }
    }
    return result
  }

  //····················································································································

  var first : T? { return self.mDictionary.first?.value }

  //····················································································································

  var isEmpty : Bool { return self.mDictionary.isEmpty }

  //····················································································································

  var count : Int { return self.mDictionary.count }

  //····················································································································

  var values : Dictionary <ObjectAddress, T>.Values { return self.mDictionary.values }

  //····················································································································

  func subtracting (_ inOtherSet : EBReferenceSet <T>) -> EBReferenceSet <T> {
     var result = self
     for (key, _) in inOtherSet.mDictionary {
       result.mDictionary [key] = nil
     }
     return result
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
