//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor struct EBWeakEventSet {

  //····················································································································

  private var mDictionary = [Int : EBWeakObserverSetElement] ()

  //····················································································································

  mutating func values () -> Dictionary <Int, EBWeakObserverSetElement>.Values {
    self.pack ()
    return self.mDictionary.values
  }

  //····················································································································

  private var mPackingTriggered = false

  //····················································································································

  mutating func triggerPacking () {
    self.mPackingTriggered = true
  }

  //····················································································································

  private mutating func pack () {
    if self.mPackingTriggered {
      self.mPackingTriggered = false
      for (key, entry) in self.mDictionary {
        if entry.possibleObserver == nil {
          self.mDictionary [key] = nil
        }
      }
    }
  }

  //····················································································································

  mutating func insert (_ inObserver : EBObserverProtocol) {
    let address = inObserver.objectIndex
    self.mDictionary [address] = EBWeakObserverSetElement (observer: inObserver)
  }

  //····················································································································

  mutating func remove (_ inObserver : EBObserverProtocol) {
    let address = inObserver.objectIndex
    self.mDictionary [address] = nil
  }

  //····················································································································

  var isEmpty : Bool { return self.mDictionary.isEmpty }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class EBWeakObserverSetRelay : EBSwiftBaseObject, EBObserverProtocol {

  //····················································································································

  private var mDictionary = [Int : EBWeakObserverSetElement] ()

  //····················································································································

  func insert (_ inObserver : EBObserverProtocol) {
    let address = inObserver.objectIndex
    self.mDictionary [address] = EBWeakObserverSetElement (observer: inObserver)
  }

  //····················································································································

  func remove (_ inObserver : EBObserverProtocol) {
    let address = inObserver.objectIndex
    self.mDictionary [address] = nil
  }

  //····················································································································

  var isEmpty : Bool { return self.mDictionary.isEmpty }

  //····················································································································

  func observedObjectDidChange () { // EBObserverProtocol
    for (key, entry) in self.mDictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
      }else{
        self.mDictionary [key] = nil
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBWeakObserverSetElement
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct EBWeakObserverSetElement {

  //····················································································································

  private weak var mObserver : EBObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  var possibleObserver : EBObserverProtocol? { return self.mObserver }

  //····················································································································

  init (observer inObserver : EBObserverProtocol) {
    self.mObserver = inObserver
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
