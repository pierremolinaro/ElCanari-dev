//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//fileprivate func update <T : Hashable> (currentSet ioCurrentSet : inout Set <T>,
//                                        fromNewArray inNewArray : [T],
//                                        oldArray inOldArray : [T]) -> (Bool, Set <T>, Set <T>) {
//  let equalModels = inNewArray == inOldArray
//  var addedSet = Set <T> ()
//  var removedSet = Set <T> ()
//  if !equalModels {
//    let newSet = Set (inNewArray)
//    if ioCurrentSet != newSet {
//      let oldSet = ioCurrentSet
//      ioCurrentSet = newSet
//      removedSet = oldSet.subtracting (newSet)
//      addedSet = newSet.subtracting (oldSet)
//    }
//  }
//  return (equalModels, addedSet, removedSet)
//}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate func update <T : AnyObject> (currentSet ioCurrentSet : inout EBReferenceSet <T>,
                                         fromNewArray inNewArray : EBReferenceArray <T>,
                                         oldArray inOldArray : EBReferenceArray <T>) -> (Bool, EBReferenceSet <T>, EBReferenceSet <T>) {
  var addedSet = EBReferenceSet <T> ()
  var removedSet = EBReferenceSet <T> ()
//--- Model did change ?
  var modelsAreEqual = inNewArray.count == inOldArray.count
  var idx = 0
  while modelsAreEqual && (idx < inNewArray.count) {
    modelsAreEqual = inNewArray [idx] === inOldArray [idx]
    idx += 1
  }
//---
  if !modelsAreEqual {
    var setAreEqual = ioCurrentSet.count == inNewArray.count
    var newSet = EBReferenceSet <T> (minimumCapacity: inNewArray.count)
    for object in inNewArray.values {
      newSet.insert (object)
      if !ioCurrentSet.contains (object) {
        setAreEqual = false
        addedSet.insert (object)
      }
    }
    if !setAreEqual {
      let oldSet = ioCurrentSet
      ioCurrentSet = newSet
      removedSet = oldSet.subtracting (newSet)
    }
  }
  return (modelsAreEqual, addedSet, removedSet)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyAbstractArrayProperty
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyAbstractArrayProperty <T : AnyObject> : ReadOnlyAbstractGenericRelationshipProperty {

  //····················································································································
  // Abstract methods
  //····················································································································

  var selection : EBSelection < [T] > { get { return .empty } }  // Abstract method

  //····················································································································

  var propval : EBReferenceArray <T> { return EBReferenceArray () } // Abstract method

  //····················································································································

  final var propset : EBReferenceSet <T> { return self.mInternalSetValue }

  //····················································································································
  //  Internal value
  //····················································································································

  final var internalSetValue : EBReferenceSet <T> { return self.mInternalSetValue }

  private final var mInternalSetValue = EBReferenceSet <T> () // Requires T to be hashable

  internal final var mInternalArrayValue = EBReferenceArray <T> () {
    didSet {
      let (equalModels, addedSet, removedSet) = update (currentSet: &self.mInternalSetValue, fromNewArray: self.mInternalArrayValue, oldArray: oldValue)
      if !equalModels {
        if self.mInternalArrayValue.count != oldValue.count {
          self.count_property.observedObjectDidChange ()
        }
        self.observedObjectDidChange ()
        self.notifyModelDidChangeFrom (oldValue: oldValue)
        self.notifyModelDidChange ()
        if !addedSet.isEmpty || !removedSet.isEmpty {
          self.updateObservers (removedSet: removedSet, addedSet: addedSet)
        }
      }
    }
  }

  //····················································································································

  internal func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <T>) {
  }

  //····················································································································

  internal func updateObservers (removedSet inRemovedSet : EBReferenceSet <T>, addedSet inAddedSet : EBReferenceSet <T>) {
  }

  //····················································································································
  //  count property
  //····················································································································

  final var count_property = EBTransientProperty_Int ()

  //····················································································································
  //  init
  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let me = self {
        switch me.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
