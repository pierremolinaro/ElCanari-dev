//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBOutletEvent class
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

var gPendingOutletEvents = [EBOutletEvent] ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBOutletEvent : EBSwiftBaseObject, EBObserverProtocol {

  //····················································································································
  //   Properties
  //····················································································································

  final var mEventCallBack : Optional < () -> Void > = nil
  fileprivate final var mEventIsPosted = false

  //····················································································································
  //   observedObjectDidChange
  //····················································································································

  func observedObjectDidChange () {
    if logEvents () {
      if gPendingOutletEvents.count == 0 {
        appendMessageString ("Post events\n")
      }
      let str = "  #\(self.objectIndex)" + String (describing: type (of: self)) + "\n"
      if !self.mEventIsPosted {
        appendMessageString (str)
      }else{ // Event already posted
        appendMessageString (str, color: NSColor.brown)
      }
    }
    if !self.mEventIsPosted {
      self.mEventIsPosted = true
      gPendingOutletEvents.append (self)
    }
  }

  //····················································································································
  //   sendUpdateEvent
  //····················································································································

  final func sendUpdateEvent () {
    self.mEventIsPosted = false
    self.mEventCallBack? ()
  }

  //····················································································································
  //  unregister
  //····················································································································

  func unregister () {
    self.mEventCallBack = nil
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    flushOutletEvents
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func flushOutletEvents () {
  if gPendingOutletEvents.count > 0 {
    #if BUILD_OBJECT_EXPLORER
      if logEvents () {
        appendMessageString ("Flush outlet events\n", color: NSColor.blue)
      }
    #endif
    while gPendingOutletEvents.count > 0 {
      let pendingOutletEvents = gPendingOutletEvents
      gPendingOutletEvents.removeAll ()
      for event in pendingOutletEvents {
        event.mEventIsPosted = false
      }
      for event in pendingOutletEvents {
        #if BUILD_OBJECT_EXPLORER
          if logEvents () {
            let message = "  #\(event.objectIndex)" + String (describing: type (of: event)) + "\n"
            appendMessageString (message, color: NSColor.blue)
          }
        #endif
        event.sendUpdateEvent ()
      }
      #if BUILD_OBJECT_EXPLORER
        if gPendingOutletEvents.count > 0 && logEvents () {
          let message = String (gPendingOutletEvents.count) +  " outlet event(s) posted during flush\n"
          appendMessageString (message, color: NSColor.red)
        }
      #endif
    }
    #if BUILD_OBJECT_EXPLORER
      if logEvents () {
        appendMessageString ("--------------------------------------\n", color: NSColor.blue)
      }
    #endif
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    A P P E N D    T O    T R A N S I E N T    E V E N T    L O G
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func logEvents () -> Bool {
  #if BUILD_OBJECT_EXPLORER
    let theApp = NSApplication.shared as! EBApplication
    return theApp.logEvents ()
  #else
    return false
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func appendToTransientEventLog (_ message : String) {
  #if BUILD_OBJECT_EXPLORER
    let theApp = NSApplication.shared as! EBApplication
    theApp.appendToTransientEventLog (message)
  #endif
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
