//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBDoubleField : NSTextField, EBUserClassNameProtocol, NSTextFieldDelegate {

  //····················································································································

  required init? (coder : NSCoder) {
    super.init (coder:coder)
    self.delegate = self
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame : NSRect) {
    super.init (frame: frame)
    self.delegate = self
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //    NSTextFieldDelegate delegate function
  //····················································································································

  func controlTextDidChange (_ notification : Notification) {
    if mSendContinously {
      if let inputString = currentEditor()?.string {
        // NSLog ("inputString %@", inputString)
        let numberFormatter = self.formatter as! NumberFormatter
        let number = numberFormatter.number (from: inputString)
        if number == nil {
          _ = control (
            self,
            didFailToFormatString: inputString,
            errorDescription: String (format:"The value “%@” is invalid.", inputString)
          )
        }else if let unwAction = self.action {
          NSApp.sendAction (unwAction, to: self.target, from: self)
        }
      }
    }
  }

  //····················································································································
  //    NSTextFieldDelegate delegate function
  //····················································································································

  func control (_ control: NSControl,
                didFailToFormatString string: String,
                errorDescription error: String?) -> Bool {
    let alert = NSAlert ()
    if let window = control.window {
      alert.messageText = error!
      alert.informativeText = "Please provide a valid value."
      alert.addButton (withTitle: "Ok")
      alert.addButton (withTitle: "Discard Change")
      alert.beginSheetModal (
        for: window,
        completionHandler:{ (response : NSApplication.ModalResponse) -> Void in
          if response == NSApplication.ModalResponse.alertSecondButtonReturn { // Discard Change
 //         self.integerValue = self.myIntegerValue.0
          }
        }
      )
    }
    return false
  }

  //····················································································································
  //  value binding
  //····················································································································

  fileprivate func updateDoubleValue (_ object : EBReadOnlyProperty_Double) {
    switch object.selection {
    case .empty :
      self.enableFromValueBinding (false)
      self.placeholderString = "No Selection"
      self.stringValue = ""
    case .single (let v) :
      self.enableFromValueBinding (true)
      self.placeholderString = nil
      self.doubleValue = v
    case .multiple :
      self.placeholderString = "Multiple Selection"
      self.stringValue = ""
      self.enableFromValueBinding (true)
    }
  }

  //····················································································································

  private var mValueController : Controller_EBDoubleField_value?
  private var mSendContinously : Bool = false

  final func bind_value (_ object : EBReadWriteProperty_Double, sendContinously : Bool, autoFormatter : Bool) {
    mSendContinously = sendContinously
    mValueController = Controller_EBDoubleField_value (
      object:object,
      outlet:self,
      sendContinously:sendContinously,
      autoFormatter:autoFormatter
    )
  }

  final func unbind_value () {
    mValueController?.unregister ()
    mValueController = nil
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller_EBDoubleField_value
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBDoubleField_value : EBObservablePropertyController {

  private let mObject : EBReadWriteProperty_Double
  private weak var mOutlet : EBDoubleField? = nil

  //····················································································································

  init (object : EBReadWriteProperty_Double,
        outlet : EBDoubleField,
        sendContinously : Bool,
        autoFormatter : Bool) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects: [object], callBack: { outlet.updateDoubleValue (object) } )
    outlet.target = self
    outlet.action = #selector(Controller_EBDoubleField_value.action(_:))
    if autoFormatter {
      let formatter = NumberFormatter ()
      outlet.formatter = formatter
    }else if outlet.formatter == nil {
      presentErrorWindow (#file, #line, "the outlet has no formatter")
    }else if !(outlet.formatter is NumberFormatter) {
      presentErrorWindow (#file, #line, "the formatter should be an NSNumberFormatter")
    }
  }

  //····················································································································

  @objc func action (_ sender : EBDoubleField) {
    if let outlet = self.mOutlet {
      _ = self.mObject.validateAndSetProp (outlet.doubleValue, windowForSheet: sender.window)
    }
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
