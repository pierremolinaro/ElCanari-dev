//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBSwitch : NSButton, EBUserClassNameProtocol {

  //····················································································································

  required init? (coder : NSCoder) {
    super.init (coder: coder)
    noteObjectAllocation (self)
    self.setButtonType (.switch)
  }

  //····················································································································

  override init (frame : NSRect) {
    super.init (frame: frame)
    noteObjectAllocation (self)
    self.setButtonType (.switch)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  override func sendAction (_ action : Selector?, to : Any?) -> Bool {
    self.mValueController?.updateModel ()
    return super.sendAction (action, to: to)
  }

  //····················································································································
  //  value binding
  //····················································································································

  fileprivate func updateValue (_ inObject : EBReadOnlyProperty_Bool) {
    switch inObject.selection {
    case .empty :
      self.state = NSControl.StateValue.off
      self.enableFromValueBinding (false)
    case .multiple :
      self.allowsMixedState = true
      self.state = NSControl.StateValue.mixed
      self.enableFromValueBinding (true)
    case .single (let v) :
      self.allowsMixedState = false
      self.state = v ? NSControl.StateValue.on : NSControl.StateValue.off
      self.enableFromValueBinding (true)
    }
  }

  //····················································································································

  fileprivate var mValueController : Controller_EBSwitch_value? = nil

  //····················································································································

  final func bind_value (_ inObject : EBReadWriteProperty_Bool) {
    self.mValueController = Controller_EBSwitch_value (object: inObject, outlet: self)
  }

  //····················································································································

  final func unbind_value () {
    self.mValueController?.unregister ()
    self.mValueController = nil
  }

  //····················································································································

  fileprivate func updateModel (_ inModel : EBReadWriteProperty_Bool) {
    inModel.setProp (self.state == NSControl.StateValue.on)
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller Controller_EBSwitch_value
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBSwitch_value : EBObservablePropertyController {

  private let mOutlet : EBSwitch
  private let mObject : EBReadWriteProperty_Bool

  //····················································································································

  init (object : EBReadWriteProperty_Bool, outlet : EBSwitch) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects: [object], callBack: { outlet.updateValue(object) })
  }

  //····················································································································

  func updateModel () {
    self.mObject.setProp (self.mOutlet.state == NSControl.StateValue.on)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBSwitch_TableViewCell
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBSwitch_TableViewCell) final class EBSwitch_TableViewCell : EBTableCellView {

  //····················································································································

  @IBOutlet var mCellOutlet : EBSwitch? = nil

  //····················································································································

  func checkOutlet (columnName : String, file : String, line : Int) {
    checkOutletConnection (self.mCellOutlet, "\"\(columnName)\" column view", EBSwitch.self, file, line)
  }

  //····················································································································

  func update () {
    self.mCellOutlet?.mValueController?.mEventCallBack? ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
