//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property BezierPathArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_BezierPathArray    = EBObservableProperty <BezierPathArray>
typealias EBTransientProperty_BezierPathArray   = EBTransientProperty <BezierPathArray>
typealias EBReadWriteProperty_BezierPathArray   = EBObservableMutableProperty <BezierPathArray>
typealias EBComputedProperty_BezierPathArray    = EBComputedProperty <BezierPathArray>
typealias EBStoredProperty_BezierPathArray      = EBStoredProperty <BezierPathArray>
typealias EBPreferencesProperty_BezierPathArray = EBPreferenceProperty <BezierPathArray>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func values_BezierPathArray_are_ordered (_ inLeft : BezierPathArray,
                                         _ inAscending : Bool,
                                         _ inRight : BezierPathArray) -> Bool {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
  return left < right
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func compare_BezierPathArray_properties (_ inLeft : EBReadOnlyProperty_BezierPathArray,
                                                    _ inAscending : Bool,
                                                    _ inRight : EBReadOnlyProperty_BezierPathArray) -> ComparisonResult {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
  switch left.selection {
  case .empty :
    switch right.selection {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.selection {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.selection {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
