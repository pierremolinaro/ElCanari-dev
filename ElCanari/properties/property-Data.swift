//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property Data
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Data    = EBObservableProperty <Data>
typealias EBTransientProperty_Data   = EBTransientProperty <Data>
typealias EBReadWriteProperty_Data   = EBObservableMutableProperty <Data>
typealias EBComputedProperty_Data    = EBComputedProperty <Data>
typealias EBStoredProperty_Data      = EBStoredProperty <Data>
typealias EBPreferencesProperty_Data = EBPreferenceProperty <Data>
typealias EBReadWritePropertyController_Data = EBGenericReadWritePropertyController <Data>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* func values_Data_are_ordered (_ inLeft : Data,
                                 _ inAscending : Bool,
                                 _ inRight : Data) -> Bool {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
  return left < right
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* @MainActor func compare_Data_properties (_ inLeft : EBReadOnlyProperty_Data,
                                            _ inAscending : Bool,
                                            _ inRight : EBReadOnlyProperty_Data) -> ComparisonResult {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
  switch left.selection {
  case .empty :
    switch right.selection {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.selection {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.selection {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/*final class EBReadWritePropertyController_Data : EBObservablePropertyController {

  //····················································································································

  private weak var mObject : EBReadWriteProperty_Data?

  //····················································································································

  init (observedObject inObject : EBReadWriteProperty_Data, callBack inCallBack : @escaping () -> Void) {
    self.mObject = inObject
    super.init (observedObjects : [inObject], callBack : inCallBack)
  }

  //····················································································································

  func updateModel (withValue inValue : Data) {
    self.mObject?.setProp (inValue)
  }

  //····················································································································

  var value : Data? {
    if let s = self.mObject?.selection {
      switch s {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
