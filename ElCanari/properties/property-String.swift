//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property String
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_String    = EBObservableProperty <String>
typealias EBTransientProperty_String   = EBTransientProperty <String>
typealias EBReadWriteProperty_String   = EBObservableMutableProperty <String>
typealias EBComputedProperty_String    = EBComputedProperty <String>
typealias EBStoredProperty_String      = EBStoredProperty <String>
typealias EBPreferencesProperty_String = EBPreferenceProperty <String>
typealias EBReadWritePropertyController_String = EBGenericReadWritePropertyController <String>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* func values_String_are_ordered (_ inLeft : String,
                                   _ inAscending : Bool,
                                   _ inRight : String) -> Bool {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
  return left.localizedStandardCompare (right) == .orderedAscending
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* @MainActor func compare_String_properties (_ inLeft : EBReadOnlyProperty_String,
                                              _ inAscending : Bool,
                                              _ inRight : EBReadOnlyProperty_String) -> ComparisonResult {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
  switch left.selection {
  case .empty :
    switch right.selection {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.selection {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.selection {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      return currentValue.localizedStandardCompare (otherValue)
    }
  }
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/*final class EBReadWritePropertyController_String : EBObservablePropertyController {

  //····················································································································

  private weak var mObject : EBReadWriteProperty_String?

  //····················································································································

  init (observedObject inObject : EBReadWriteProperty_String, callBack inCallBack : @escaping () -> Void) {
    self.mObject = inObject
    super.init (observedObjects : [inObject], callBack : inCallBack)
  }

  //····················································································································

  func updateModel (withValue inValue : String) {
    self.mObject?.setProp (inValue)
  }

  //····················································································································

  var value : String? {
    if let s = self.mObject?.selection {
      switch s {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
