//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property UInt32
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_UInt32    = EBObservableProperty <UInt32>
typealias EBTransientProperty_UInt32   = EBGenericTransientProperty <UInt32>
typealias EBReadWriteProperty_UInt32   = EBObservableMutableProperty <UInt32>
typealias EBComputedProperty_UInt32    = EBGenericComputedProperty <UInt32>
typealias EBStoredProperty_UInt32      = EBGenericStoredProperty <UInt32>
typealias EBPreferencesProperty_UInt32 = EBGenericPreferenceProperty <UInt32>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func values_UInt32_are_ordered (_ inLeft : UInt32,
                                _ inAscending : Bool,
                                _ inRight : UInt32) -> Bool {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
  return left < right
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func compare_UInt32_properties (_ inLeft : EBReadOnlyProperty_UInt32,
                                           _ inAscending : Bool,
                                           _ inRight : EBReadOnlyProperty_UInt32) -> ComparisonResult {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
  switch left.selection {
  case .empty :
    switch right.selection {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.selection {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.selection {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
