//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  Extension NSBezierPath
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSBezierPath {

  //····················································································································

  func addArrow (fillPath : NSBezierPath, to endPoint : NSPoint, arrowSize : CGFloat) {
    if endPoint != self.currentPoint {
   //--- Compute angle
      let angle = NSPoint.angleInRadian (self.currentPoint, endPoint)
    //--- Affine transform
      let tr = NSAffineTransform ()
      tr.translateX (by: endPoint.x, yBy:endPoint.y)
      tr.rotate (byRadians:angle)
    //--- Draw path
      let path = NSBezierPath ()
      path.move (to: NSPoint (x: 0.0, y: 0.0))
      path.line (to: NSPoint (x: -2.0 * arrowSize, y:  arrowSize))
      path.curve (to: NSPoint (x: -2.0 * arrowSize, y: -arrowSize),
                  controlPoint1: NSPoint (x: -arrowSize, y: -arrowSize),
                  controlPoint2: NSPoint (x: -arrowSize, y:  arrowSize))
      path.close ()
    //--- Add path
      fillPath.append (tr.transform (path))
    //--- Draw line
      self.line (to:endPoint)
    }
  }

  //····················································································································

  override open var description : String {
    return "\(self.elementCount) elements"
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
