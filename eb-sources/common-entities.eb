//--------------------------------------------------------------------------------------------------

enum EBControlSize {
  mini, small, regular
}

enum TextAlignment {
  left, right, center
}

enum MarginSize {
  zero, small, regular, large
}

enum QRCodeCorrectionLevel {
  low, medium, quality, high
}

func enum QRCodeCorrectionLevel.popupTitles {
  low : "Low (7%)" ;
  medium : "Medium (15%)" ;
  quality : "Quartile (25%)" ;
  high : "High (30%)" ;
}


enum LayerConfiguration {
  twoLayers, fourLayers, sixLayers
}

func enum LayerConfiguration.popupTitles {
  twoLayers : "2 Layers" ;
  fourLayers : "4 Layers" ;
  sixLayers : "6 Layers" ;
}

enum TrackCreationDirection {
  anyAngle, octolinear, rectilinear
}

//--------------------------------------------------------------------------------------------------

enum TrackEndStyle {
  round, square
}

func enum TrackEndStyle.popupTitles {
  round : "Round" ;
  square : "Square" ;
}

//--------------------------------------------------------------------------------------------------

enum MetadataStatus {
  unknown, ok, warning, error
}

//--------------------------------------------------------------------------------------------------

enum PadSide {
  traversing, front, back
}

//--------------------------------------------------------------------------------------------------

enum PadStyle {
  traversing, surface
}

func enum PadStyle.popupTitles {
  traversing : "Traversing" ;
  surface : "Surface" ;
}

//--------------------------------------------------------------------------------------------------

enum SlavePadStyle {
  traversing, componentSide, oppositeSide
}

func enum SlavePadStyle.popupTitles {
  traversing : "Traversing" ;
  componentSide : "Component Side" ;
  oppositeSide : "Opposite Side" ;
}

//--------------------------------------------------------------------------------------------------

enum PadShape {
  rect, round, octo
}

func enum PadShape.popupTitles {
  rect : "Rectangular" ;
  round : "Round" ;
  octo : "Octogonal" ;
}

//--------------------------------------------------------------------------------------------------

enum HorizontalAlignment {
  onTheRight, center, onTheLeft
}

func enum HorizontalAlignment.popupTitles {
  onTheRight : "Right" ;
  center : "Center" ;
  onTheLeft : "Left" ;
}

//--------------------------------------------------------------------------------------------------

enum VerticalAlignment {
  above, base, center, below
}

func enum VerticalAlignment.popupTitles {
  above : "above" ;
  base : "base" ;
  center : "center" ;
  below : "below" ;
}

//--------------------------------------------------------------------------------------------------

enum QuadrantRotation {
  rotation0, rotation90, rotation180, rotation270
}

func enum QuadrantRotation.degreesTitles {
  rotation0 : "0°" ;
  rotation90 : "90°" ;
  rotation180 : "180°" ;
  rotation270 : "270°" ;
}

func enum QuadrantRotation.directionTitles {
  rotation0 : "Right" ;
  rotation90 : "Above" ;
  rotation180 : "Left" ;
  rotation270 : "Below" ;
}

//--------------------------------------------------------------------------------------------------

enum SchematicSheetOrientation { a4Vertical, a4Horizontal, custom }

func enum SchematicSheetOrientation.popupTitles {
  a4Vertical : "A4 V" ;
  a4Horizontal : "A4 H" ;
  custom : "Custom" ;
}

//--------------------------------------------------------------------------------------------------

enum AutorouterPreferredDirections {
  vFrontHback, hFrontVback
}

func enum AutorouterPreferredDirections.popupTitles {
  vFrontHback : "| Front Side, -- Back Side" ;
  hFrontVback : "-- Front Side, | Back Side" ;
}

//--------------------------------------------------------------------------------------------------

enum AutorouterSnapAngle {
  rectilinear, octolinear, anyAngle
}

func enum AutorouterSnapAngle.popupTitles {
  rectilinear : "Rectilinear Routing (90°)" ;
  octolinear : "Octolinear Routing (45°)" ;
  anyAngle : "Any Angle Routing" ;
}

//--------------------------------------------------------------------------------------------------

enum RastnetDisplay {
  hidden, allNets, oneNet, componentNets, selectedComponents
}

func enum RastnetDisplay.popupTitles {
  hidden : "No" ;
  allNets : "All Nets" ;
  oneNet : "This Net" ;
  componentNets : "Nets of Component" ;
  selectedComponents : "Selected Components Nets" ;
}

//--------------------------------------------------------------------------------------------------

enum BoardTextLayer {
  legendFront, layoutFront, layoutBack, legendBack
}

func enum BoardTextLayer.popupTitles {
  legendFront : "Legend Front Layer" ;
  layoutFront : "Layout Front Layer" ;
  layoutBack  : "Layout Back Layer" ;
  legendBack : "Legend Back Layer" ;
}

//--------------------------------------------------------------------------------------------------

enum BoardQRCodeLayer {
  legendFront, legendBack
}

func enum BoardQRCodeLayer.popupTitles {
  legendFront : "Legend Front" ;
  legendBack : "Legend Back" ;
}

//--------------------------------------------------------------------------------------------------

enum BoardImageDisplay {
  original, gray, histogram
}

func enum BoardImageDisplay.popupTitles {
  original : "Original Image" ;
  gray : "Scaled Gray Image" ;
  histogram : "Scaled Gray Image Histogram" ;
}

//--------------------------------------------------------------------------------------------------

enum BoardTextVerticalAlignment {
  above, base, center, below
}

//--------------------------------------------------------------------------------------------------

enum BoardShape {
  rectangular, bezierPathes
}

//--------------------------------------------------------------------------------------------------

enum RestrictRectangleLayer {
  frontSide, backSide, bothSides
}

//--------------------------------------------------------------------------------------------------

enum RouteDirection {
  from, to
}

func enum RouteDirection.popupTitles {
  from : "From" ;
  to : "To" ;
}

//--------------------------------------------------------------------------------------------------

enum RouteOrigin {
  center,
  bottomLeft,
  middleBottom,
  bottomRight,
  middleRight,
  topRight,
  middleTop,
  topLeft,
  middleLeft
}

func enum RouteOrigin.popupTitles {
  center : "Center" ;
  bottomLeft : "Bottom Left" ;
  middleBottom : "Middle Bottom" ;
  bottomRight : "Bottom Right" ;
  middleRight : "Middle Right" ;
  topRight : "Top Right" ;
  middleTop : "Middle Top" ;
  topLeft : "Top Left" ;
  middleLeft : "Middle Left" ;
}

//--------------------------------------------------------------------------------------------------

enum PDFProductGrid {
  noGrid,
  gridMillimeter,
  grid100mils
}

func enum PDFProductGrid.popupTitles {
  noGrid : "No Grid" ;
  gridMillimeter : "1 mm Grid" ;
  grid100mils : "100 mils Grid" ;
}

//--------------------------------------------------------------------------------------------------

enum GerberUnit {
  metric,
  imperial
}

func enum GerberUnit.popupTitles {
  metric : "Metric (mm)" ;
  imperial : "Imperial (inch)" ;
}

//--------------------------------------------------------------------------------------------------

enum FreeRoutingAppSelection {
  arm64, x86, legacy
}

func enum FreeRoutingAppSelection.popupTitles {
  arm64 : "arm64 FreeRouting" ;
  x86 : "x86_64 FreeRouting" ;
  legacy : "Legacy FreeRouting" ;
}

//--------------------------------------------------------------------------------------------------
