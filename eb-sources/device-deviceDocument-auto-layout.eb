//----------------------------------------------------------------------------------------------------------------------
//     D E V I C E    D O C U M E N T
//----------------------------------------------------------------------------------------------------------------------

autoLayoutDocument AutoLayoutDeviceDocument root DeviceRoot stackView mDocumentMainView {

//······················································································································
//   MAIN VIEW
//······················································································································

  stackView mPageMasterView vStack { }
 
  stackView mDocumentMainView vStack set (spacing: 0) {
    hStack set (margins: 8) {
      vStack {
        SegmentedControlWithPages (documentView: stackView mPageMasterView, equalWidth: no, size : .regular) {
          addPage (title: "Description", tooltip: "Device Description", pageView: stackView mDescriptionPage)
          addPage (title: "Symbols", tooltip: "Device Symbols", pageView: stackView mSymbolsPage)
          addPage (title: "Packages", tooltip: "Device Available Packages", pageView: stackView mPackagesPage)
          addPage (title: "Assignments", tooltip: "Pin / Pad Assignments", pageView: stackView mAssignmentsPage)
          addPage (title: "Library", tooltip: "Device Embedded Library", pageView: stackView mLibraryPage)
          addPage (title: "Infos", tooltip: "Device Informations", pageView: stackView mInfosPage)
          $selectedPage root.mSelectedPageIndex
        }
        StaticLabel (title: "Page", bold: no, size : .small, alignment: .center)
      }
      vStack {
        SignatureField (size : .regular) { $signature signature }
        StaticLabel (title: "Signature", bold: no, size : .small, alignment: .center)
      }
      vStack {
        VersionField (size : .regular) { $version version $versionShouldChange versionShouldChange }
        StaticLabel (title: "Version", bold: no, size : .small, alignment: .center)
      }
      space
      vStack {
        hStack { space ImageObserverView (size : .regular) { $image self.mStatusImage $tooltip self.mStatusMessage } space }
        StaticLabel (title: "Status", bold: no, size : .small, alignment: .center)
      }
    }
    separator
    stackViewRef mPageMasterView
  }

  transient CanariIssueArray issues dependsFrom root.issues, self.documentFileName ;
  transient NSImage mStatusImage dependsFrom self.issues ;
  transient String mStatusMessage dependsFrom self.issues ;
  transient MetadataStatus mMetadataStatus dependsFrom self.issues ;

//······················································································································
//   DESCRIPTION
//······················································································································

  stackView mDescriptionPage vStack set (margins: 16) set (spacing: 12) {
    TextField (minWidth: 70, size : .regular) {
      expandableWidth ()
      set (alignment: .left)
      $value root.mTitle (sendContinously: yes)
    }
    hStack {
      CanariDeviceDroppableImageView (width: 240) { $imageData root.mImageData }
      vStack {
        StaticLabel (title: "PDF Documentation", bold: no, size : .regular, alignment: .center)
        TableView (size : .regular, addControlButtons: no) [configurator documentationTableView] {
          $tableValue #documentationController
        }
        hStack {
          Button (title: "-", size : .small) {
            $run removeDocumentationAction
            $enabled #documentationController.selectedArray.count > 0
          }
          Button (title: "Show Documentation", size : .small) {
            $run showDocAction
            $enabled #documentationController.selectedArray.count > 0
          }
          Button (title: "Save as…", size : .small) {
            $run saveDocAction
            $enabled #documentationController.selectedArray.count > 0
          }
          space
        }
      }
    }
  }

  tableViewController #documentationController (allowsEmptySelection:yes, allowsMultipleSelection:no) root.mDocs {
    column mFileName (title: "File Name", minWidth: 100, maxWidth: 4000, headerAlignment: .left, contentAlignment: .left) sortkey mFileName
    column fileSize (title: "Size (bytes)", minWidth: 120, maxWidth: 120, headerAlignment: .right, contentAlignment: .right) sortkey fileSize
  }

  action removeDocumentationAction ;
  action showDocAction ;
  action saveDocAction ;

//······················································································································
//   SYMBOLS
//······················································································································

  stackView mSymbolsPage hStack {
    vStack set (width: 250) set (margins: 8) {
      SegmentedControlWithPages (documentView: stackView mSymbolPageInspectorView, equalWidth: yes, size: .small)
        [configurator symbolInspectorSegmentedControl] {
        expandableWidth ()
        addPage (title: "", tooltip: "", pageView: stackView mSymbolPageOperationView)
        addPage (title: "", tooltip: "Grid, Zoom and Display Inspector", pageView: stackView mSymbolGridZoomInspectorView)
        $selectedPage root. mSelectedSymbolInspectorIndex
      }
      vStack set (leftMargin: 20) set (rightMargin: 20) set (bottomMargin: 20) set (spacing: 12) {
        stackViewRef mSymbolPageInspectorView
      }
      space
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 4000) {
      $horizontalFlip prefs.mSymbolHorizontalFlipForDevice
      $verticalFlip prefs.mSymbolHorizontalFlipForDevice
      $graphicController #symbolDisplayController
      $zoom root.mSymbolDisplayZoom
      $backColor prefs.mSymbolBackColorForDevice
    }
  }
  
  stackView mSymbolPageInspectorView hStack {
  }
  
  stackView mSymbolPageOperationView vStack set (margins: 0) {
    StaticLabel (title: "Add Symbol From", bold: yes, size : .small, alignment: .center)
    Button (title: "File Library…", size : .small) { expandableWidth () $run addSymbolFromLibraryAction }
    CanariAddSymbolInstancePullDownButton [configurator addSymbolInstancePullDownButton] {
      expandableWidth ()
      $enabled root.mSymbolTypes.count > 0
      $symbolTypeNames root.symbolTypeNames
    }
    StaticLabel (title: "Symbol Type", bold: yes, size : .small, alignment: .left)
    Label (bold: yes, size : .small) {
      set (alignment: .center)
      expandableWidth ()
      $title #symbolInstanceSelection.symbolTypeName
    }      
    StaticLabel (title: "Symbol Name", bold: yes, size : .small, alignment: .left)
    TextField (minWidth: 70, size : .small) {
      expandableWidth ()
      $value #symbolInstanceSelection.mInstanceName  (sendContinously : yes)
    }
    StaticLabel (title: "Symbol Errors", bold: yes, size : .small, alignment: .left)
    TextObserverView { expandableWidth () setRedTextColor () $observedValue root.inconsistentSymbolNameSetMessage }
    space
  }    

  arrayController #symbolDisplayController : root.mSymbolInstances ;
  selectionController SymbolInstanceInDevice #symbolInstanceSelection : #symbolDisplayController.selectedArray ;

  action addSymbolFromLibraryAction ;

  
  stackView mSymbolGridZoomInspectorView vStack set (margins: 0) {
    StaticLabel (title: "Display Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      addCenterYAligned (
        left: StaticLabel (title: "Background", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mSymbolBackColorForDevice (sendContinously:no) } space }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Flip", bold: no, size: .small, alignment: .center),
        right: Checkbox (title: "Horizontal", size : .small) { $value prefs.mSymbolHorizontalFlipForDevice }
      )
      addFirstBaseLineAligned (
        left: space,
        right: Checkbox (title: "Vertical", size : .small) { $value prefs.mSymbolVerticalFlipForDevice }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Symbol Color", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mSymbolColorForDevice (sendContinously:no) } space }
      )
      add (single: StaticLabel (title: "Symbol Width", bold: no, size: .small, alignment: .left) )
      add (single: TaggedPopUpButton (size: .small) {
          expandableWidth ()
          add (title: "0.5 Point", withTag: 5)
          add (title: "1.0 Point", withTag: 10)
          add (title: "1.5 Point", withTag: 15)
          add (title: "2.0 Points", withTag: 20)
          add (title: "2.5 Points", withTag: 25)
          $selectedTag prefs.symbolDrawingWidthForDeviceMultipliedByTen
        }
      )
      add (single: StaticLabel (title: "Symbol Name Font", bold: no, size: .small, alignment: .left))
      add (single: FontButton (width: 125, size: .small) { $fontValue prefs.mSymbolNameFontForDevice } )
      add (single: StaticLabel (title: "Pin Name Font", bold: no, size: .small, alignment: .left) )
      add (single: FontButton (width: 125, size: .small) { $fontValue prefs.mPinNameFontForDevice } )
    }
  }

//······················································································································
//   PACKAGES
//······················································································································

  stackView mPackagesPage hStack {
    vStack set (width: 250) set (margins: 8) {
      SegmentedControlWithPages (documentView: stackView mPackagePageInspectorView, equalWidth: yes, size: .small)
        [configurator packageInspectorSegmentedControl] {
        expandableWidth ()
        addPage (title: "", tooltip: "", pageView: stackView mPackagePageOperationView)
        addPage (title: "", tooltip: "Grid, Zoom and Display Inspector", pageView: stackView mPackageGridZoomInspectorView)
        $selectedPage root. mSelectedPackageInspectorIndex
      }
      vStack set (leftMargin: 20) set (rightMargin: 20) set (bottomMargin: 20) set (spacing: 12) {
        stackViewRef mPackagePageInspectorView
      }
      space
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 4000) {
      $horizontalFlip root.mPackageDisplayHorizontalFlip
      $verticalFlip root.mPackageDisplayVerticalFlip
      $graphicController #packageDisplayController
      $zoom root.mPackageDisplayZoom
      $backColor prefs.mPackageBackColorForDevice
    }
  }

  stackView mPackagePageInspectorView hStack {
  }

  stackView mPackageGridZoomInspectorView vStack {
    StaticLabel (title: "Display Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      addCenterYAligned (
        left: StaticLabel (title: "Background", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mPackageBackColorForDevice (sendContinously:no) } space }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Flip", bold: no, size: .small, alignment: .center),
        right: Checkbox (title: "Horizontal", size : .small) { $value prefs.mPackageHorizontalFlipForDevice }
      )
      addFirstBaseLineAligned (
        left: space,
        right: Checkbox (title: "Vertical", size : .small) { $value prefs.mPackageVerticalFlipForDevice }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Package", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mPackageColorForDevice (sendContinously:no) } space }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Package Width", bold: no, size: .small, alignment: .center),
        right: TaggedPopUpButton (size: .small) {
          add (title: "0.5 Point", withTag: 5)
          add (title: "1.0 Point", withTag: 10)
          add (title: "1.5 Point", withTag: 15)
          add (title: "2.0 Points", withTag: 20)
          add (title: "2.5 Points", withTag: 25)
          $selectedTag prefs.packageDrawingWidthForDeviceMultipliedByTen
        }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Front Side Pad", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mFrontSidePadColorForDevice (sendContinously:no) } space }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Back Side Pad", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mBottomSidePadColorForDevice (sendContinously:no) } space }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Pad Number", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mPadNumberColorForDevice (sendContinously:no) } space }
      )
      add (single: StaticLabel (title: "Pad Number Font", bold: no, size: .small, alignment: .left))
      add (single: FontButton (width: 125, size: .small) { $fontValue prefs.mPadNumberFontForDevice } )
      add (single: StaticLabel (title: "Package Name Font", bold: no, size: .small, alignment: .left))
      add (single: FontButton (width: 125, size: .small) { $fontValue prefs.mPackageNameFontForDevice } )
    }
  }

  stackView mPackagePageOperationView vStack set (margins: 0) {
    Button (title: "Add Package From File Library…", size : .small) {
      expandableWidth ()
      $run addPackageFromLibraryAction
    }
    Checkbox (title: "Horizontal Flip", size : .small) {
      expandableWidth ()
      $value root.mPackageDisplayHorizontalFlip
    }
    Checkbox (title: "Horizontal Flip", size : .small) {
      expandableWidth ()
      $value root.mPackageDisplayHorizontalFlip
    }
    GridView2 {
      addCenterYAligned (
        left: ColorWell {
          expandableHeight ()
          set (toolTip: "Stored in Preferences")
          $color prefs.packageColor (sendContinously: no)
        },
        right: Checkbox (title: "Display Packages", size : .small) { expandableWidth () $value root.mShowPackages }
      )
      addCenterYAligned (
        left: ColorWell {
          expandableHeight ()
          set (toolTip: "Stored in Preferences")
          $color prefs.padNumberColor (sendContinously: no)
        },
        right: Checkbox (title: "Display Pad Numbers", size : .small) {
          expandableWidth ()
          $value root.mShowPackagePadNumbers
        }
      )
      addCenterYAligned (
        left: ColorWell {
          expandableHeight ()
          set (toolTip: "Stored in Preferences")
          $color prefs.frontSidePadColor (sendContinously: no)
        },
        right: Checkbox (title: "Display Front Side Pads", size : .small) {
          expandableWidth ()
          $value root.mShowPackageFrontPads
        }
      )
      addCenterYAligned (
        left: ColorWell {
          expandableHeight ()
          set (toolTip: "Stored in Preferences")
          $color prefs.backSidePadColor (sendContinously: no)
        },
        right: Checkbox (title: "Display Back Side Pads", size : .small) {
          expandableWidth ()
          $value root.mShowPackageBackPads
        }
      )
    }
//    hStack setCenterYAlignment () {
//      ColorWell { expandableHeight () set (toolTip: "Stored in Preferences") $color prefs.frontSidePadColor (sendContinously: no) }
//      Checkbox (title: "Display Front Side Pads", size : .small) { $value root.mShowPackageFrontPads }
//      space
//    }
//    hStack setCenterYAlignment () {
//      ColorWell { expandableHeight () set (toolTip: "Stored in Preferences") $color prefs.backSidePadColor (sendContinously: no) }
//      Checkbox (title: "Display Back Side Pads", size : .small) { $value root.mShowPackageBackPads }
//      space
//    }
  }    


  action addPackageFromLibraryAction ;
  arrayController #packageDisplayController : root.mPackages ;

//······················································································································
//   LIBRARY
//······················································································································

  action resetSymbolsAndPackagesVersion ;
  action updateSymbolsAndPackagesAction ;

  tableViewController #symbolTypeController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mSymbolTypes {
    column versionString (title: "Version", minWidth: 60, maxWidth: 60, headerAlignment: .center, contentAlignment: .center) sortkey versionString
    column instanceCount (title: "Instances", minWidth: 80, maxWidth: 80, headerAlignment: .center, contentAlignment: .center) sortkey instanceCount
    column mTypeName (title: "Symbol", minWidth: 100, maxWidth: 4000, headerAlignment: .left, contentAlignment: .left) sortkey mTypeName
    column documentSize (title: "Size (bytes)", minWidth: 100, maxWidth: 100, headerAlignment: .center, contentAlignment: .right) sortkey documentSize
  }

  selectionController SymbolTypeInDevice #symbolTypeSelection : #symbolTypeController.selectedArray ;

  tableViewController #packageController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mPackages {
    column versionString (title: "Version", minWidth: 60, maxWidth: 60, headerAlignment: .center, contentAlignment: .center) sortkey versionString
    column mName (title: "Package", minWidth: 100, maxWidth: 4000, headerAlignment: .left, contentAlignment: .left) sortkey mName
    column documentSize (title: "Size (bytes)", minWidth: 100, maxWidth: 100, headerAlignment: .center, contentAlignment: .right) sortkey documentSize
  }

  stackView mLibraryPage vStack set (margins: 20) {
    hStack {
      Button (title: "Reset Symbols and Packages Version and Signature", size : .small) {
        $run resetSymbolsAndPackagesVersion
        $enabled (root.mPackages.count > 0) | (root.mSymbolTypes.count > 0)
      }
      Button (title: "Update Symbols and Packages", size : .small) {
        $run updateSymbolsAndPackagesAction
        $enabled (root.mPackages.count > 0) | (root.mSymbolTypes.count > 0)
      }
      space
    }
    vStack equalHeight () {
      vStack {
        StaticLabel (title: "Embedded Symbols", bold: yes, size : .small, alignment: .center)
        hStack {
          TableView (size : .small, addControlButtons: no) { $tableValue #symbolTypeController }
          vStack {
            Button (title: "Reset Version", size : .small) {
              expandableWidth ()
              $run resetSelectedSymbolVersion
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Update", size : .small) {
              expandableWidth ()
              $run updateSelectedSymbols
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Export…", size : .small) {
              expandableWidth ()
              $run exportSelectedSymbols
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Edit", size : .small) {
              expandableWidth ()
              $run editSelectedSymbols
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Remove", size : .small) {
              expandableWidth ()
              $run removeUselessSymbolTypeAction
              $enabled (#symbolTypeController.selectedArray.count == 1) & (#symbolTypeSelection.instanceCount == 0)
            }
            space
          }
        }
      }
      vStack {
        StaticLabel (title: "Embedded Packages", bold: yes, size : .small, alignment: .center)
        hStack { 
          TableView (size : .small, addControlButtons: no) { $tableValue #packageController }
          vStack {
            Button (title: "Reset Version", size : .small) {
              expandableWidth ()
              $run resetSelectedPackageVersion         
              $enabled #packageController.selectedArray.count > 0
            }
            Button (title: "Update", size : .small) {
              expandableWidth ()
              $run updateSelectedPackages
              $enabled #packageController.selectedArray.count > 0
            }
            Button (title: "Export…", size : .small) {
              expandableWidth ()
              $run exportSelectedPackages
              $enabled #packageController.selectedArray.count > 0
            }
            Button (title: "Edit", size : .small) {
              expandableWidth ()
              $run editSelectedPackages
              $enabled #packageController.selectedArray.count > 0
            }
            space
          }
        }
      }
    }
  }

//--- Symbols
  action resetSelectedSymbolVersion ;
  action editSelectedSymbols ;
  action exportSelectedSymbols ;
  action updateSelectedSymbols ;
  action removeUselessSymbolTypeAction ;

//--- Packages
  action resetSelectedPackageVersion ;
  action editSelectedPackages ;
  action exportSelectedPackages ;
  action updateSelectedPackages ;

//······················································································································
//   ASSIGNMENTS
//······················································································································

  stackView mAssignmentsPage hStack set (margins: 8) {
    hSplit $hidden !root.packagePadNameSetsAreConsistent | !root.symbolNameAreConsistent {
      vStack set (minWidth: 100) {
        StaticLabel (title: "Unassigned Pads", bold: yes, size : .regular, alignment: .center)
        CanariUnconnectedSymbolPadsInDeviceTableView [outlet mUnconnectedPadsInDeviceTableView] {
          expandableWidth ()
          $unconnectedPads root.unconnectedPads
        }
      }
      vStack set (minWidth: 200) {
        StaticLabel (title: "Unassigned Pins", bold: yes, size : .regular, alignment: .center)
        CanariUnconnectedSymbolPinsInDeviceTableView [outlet mUnconnectedSymbolPinsInDeviceTableView] {
          expandableWidth ()
          $unconnectedPins root.unconnectedPins
        }
      }
      vStack {
        StaticLabel (title: " ", bold: yes, size : .regular, alignment: .center)
        space
        Button (title: "- Bind →", size : .regular) {
          expandableWidth ()
          $run performBindAction
          $enabled self.hasUnconnectedPad & self.hasUnconnectedPin
        }
        Button (title: "- NC →", size : .regular) {
          expandableWidth ()
          $run performNCAction
          $enabled self.hasUnconnectedPad
        }
        space
        Button (title: "← Unbind -", size : .regular) {
          expandableWidth ()
          $run performUnbindAction
          $enabled self.hasAssignedPadProxies
        }
        Button (title: "← Unbind All -", size : .regular) {
          expandableWidth ()
          $run performUnbindAllAction
          $enabled self.hasAssignedPadProxies
        }
        space
      }
      vStack set (minWidth: 300) {
        StaticLabel (title: "Assignments", bold: yes, size : .regular, alignment: .center)
        CanariAssignedPadProxysInDeviceTableView [outlet mAssignedPadProxyTableView] {
          expandableWidth ()
          $assignedPadProxies root.assignedPadProxies
        }
      }
    }
    hStack $hidden root.packagePadNameSetsAreConsistent & root.symbolNameAreConsistent {
      space
      vStack {
        space
        Label (bold: yes, size : .regular) { setRedTextColor () $title self.assignmentInhibitionMessage }
        space
      }
      space
    }
  }

  transient Bool hasUnconnectedPad dependsFrom root.unconnectedPads ;
  transient Bool hasUnconnectedPin dependsFrom root.unconnectedPins ;
  transient Bool hasAssignedPadProxies dependsFrom root.assignedPadProxies ;
  transient String assignmentInhibitionMessage dependsFrom
     root.inconsistentPackagePadNameSetsMessage,
     root.inconsistentSymbolNameSetMessage
  ;

  action performBindAction ;
  action performNCAction ;
  action performUnbindAction ;
  action performUnbindAllAction ;

//······················································································································
//   INFOS
//······················································································································

  stackView mInfosPage vStack set (leftMargin: 20) set (rightMargin: 20) set (bottomMargin: 20) set (topMargin: 8) {
    hStack setFirstBaselineAlignment () {
      StaticLabel (title: "Device Prefix", bold: no, size : .small, alignment: .center) { set (minWidth: 84) }
      TextField (minWidth: 56, size : .small) { $value root.mPrefix (sendContinously : yes) }
      StaticLabel (title: "This field only accepts lowercase abd uppercase ASCII letters.", bold: no, size : .small, alignment: .center)
      space
      Button (title: "Reset Version and Signature", size : .small) { $run resetVersionAction }
    }
    vStack equalHeight () {
      hStack {
        vStack set (width: 84) { StaticLabel (title: "Status", bold: no, size : .small, alignment: .center) space }
        TextObserverView { $observedValue self.mStatusMessage }
      }
      hStack {
        vStack set (width: 84) { StaticLabel (title: "Comments", bold: no, size : .small, alignment: .center) space }
        TextView { $value root.mComments }
      }
    }
  }

  action resetVersionAction ;

}

//----------------------------------------------------------------------------*
