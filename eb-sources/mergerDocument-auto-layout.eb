//------------------------------------------------------------------------------
//     M E R G E R    D O C U M E N T
//------------------------------------------------------------------------------

autoLayoutDocument AutoLayoutMergerDocument root MergerRoot stackView \DocumentMainView {

  stackView \PageMasterView vStack { }

  stackView \DocumentMainView vStack set (spacing: .zero) {
    newView pageMasterView = \PageMasterView ()
    newView modelPage = \ModelPage ()
    newView boardPage = \BoardPage ()
    newView productPage = \ProductPage ()
    hStack set (margins: .regular) {
      vStack set (spacing: .zero) {
        SegmentedControlWithPages (documentView: view pageMasterView, equalWidth: no, size : .regular) {
          addPage (title: "Model", tooltip: "Model Description", pageView: view modelPage)
          addPage (title: "Board", tooltip: "Board Description", pageView: view boardPage)
          addPage (title: "Product", tooltip: "Product Description", pageView: view productPage)
          $selectedPage root.selectedPageIndex
        }
        gutter
        StaticLabel (title: "Page", bold: no, size : .regular, alignment: .center)
      }
      vStack set (spacing: .zero) {
        Checkbox (title: "Show Display Settings", size : .regular) {
          $enabled root.selectedPageIndex <= 1
          $value root.showDisplaySettingView
        }
        gutter
        StaticLabel (title: "Models and Board", bold: no, size : .regular, alignment: .center)
      }
      space
      vStack set (spacing: .zero) {
        StatusBadgeView () {
          $tooltip self.statusMessage
          $errorCount self.statusErrorCount
          $warningCount self.statusWarningCount
        }
        gutter
        StaticLabel (title: "Status", bold: no, size : .regular, alignment: .center)
      }
    }
    separator
    view pageMasterView
  }

  transient String modelVersionErrorMessage dependsFrom 
    root.boardModels.all.name,
    root.boardModels.all.modelVersion,
    root.boardModels.all.ignoreModelVersionError
  ;

  transient NSImage statusImage dependsFrom
    self.issues,
    self.modelVersionErrorMessage
  ;


  transient String statusMessage dependsFrom
    self.issues,
    self.modelVersionErrorMessage
  ;

  transient Int statusWarningCount dependsFrom
    self.issues
  ;

  transient Int statusErrorCount dependsFrom
    self.issues,
    self.modelVersionErrorMessage
  ;

  transient String boardDispositionStatusTitle dependsFrom self.issues ;

  transient CanariIssueArray issues dependsFrom
    root.overlapingArrangment, root.boardRect, root.boardLimitWidth,
    root.boardInstances.all.instanceRect, root.boardInstances.all.boardLimitWidth
  ;

  tableViewController #mBoardModelController (allowsEmptySelection: no, allowsMultipleSelection: no) root.boardModels {
    column name (title: "", minWidth: 100, maxWidth: 300, headerAlignment: .left, contentAlignment: .left)
  }

  action dismissDisplaySettingView ;

  //············································································
  //     Model Page
  //············································································

  stackView \ModelPage hStack  {
    newView settingsView = \SettingsView ()
    view settingsView
    vStack set (margins: .regular) set (width: 250) $hidden root.showDisplaySettingView {
      hStack {
        Button (title: "+", size : .small) {
          set (width: 40)
          $run addBoardModelAction
        }
        Button (title: "Update…", size : .small) {
          expandableWidth ()
          $run updateBoardModelAction
          $enabled #mBoardModelController.selectedArray.count > 0
        }
        Button (title: "-", size : .small) {
          set (width: 40)
          $run #mBoardModelController.remove
          $enabled (#mBoardModelController.selectedArray.count > 0) & (#mBoardModelSelection.instanceCount == 0)
        }
      }
      TableView (size : .regular, addControlButtons: no) {
        noHeaderView ()
        $tableValue #mBoardModelController
      }
      separator
      hStack {
        StaticLabel (title: "Artwork Name", bold: no, size : .small, alignment: .right)
        gutter
        Label (bold: yes, size: .small) { set (alignment: .left) $title #mBoardModelSelection.artworkName  }
      }
      hStack {
        StaticLabel (title: "Layout", bold: no, size : .small, alignment: .right)
        gutter
        Label (bold: yes, size: .small) {
          set (alignment: .left) $title #mBoardModelSelection.layerConfigurationString
        }
      }
      separator
      hStack {
        StaticLabel (title: "Model Width", bold: no, size : .small, alignment: .right)
        gutter
        CanariObservedDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #mBoardModelSelection.modelWidth, #mBoardModelSelection.modelWidthUnit
        }
      }
      hStack {
        StaticLabel (title: "Model Height", bold: no, size : .small, alignment: .right)
        gutter
        CanariObservedDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #mBoardModelSelection.modelHeight, #mBoardModelSelection.modelHeightUnit
        }
      }
      hStack {
        StaticLabel (title: "Limit Width", bold: no, size : .small, alignment: .right)
        gutter
        CanariObservedDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #mBoardModelSelection.modelLimitWidth, #mBoardModelSelection.modelLimitWidthUnit
        }
      }
      separator
      hStack {
        StaticLabel (title: "Archive Version", bold: no, size : .small, alignment: .right)
        gutter
        IntObserverField (bold: yes, size: .small) {
          set (alignment: .left)
          $observedValue #mBoardModelSelection.modelVersion
        }
      }
      Label (bold: yes, size : .small) {
        setRedTextColor ()
        $title #mBoardModelSelection.errorArchiveVersionMessage
        $size #mBoardModelSelection.errorArchiveLabelSize
        $textColor #mBoardModelSelection.errorArchiveLabelColor
        $hidden #mBoardModelSelection.errorArchiveVersionMessageIsHidden
      }
      Checkbox (title: "Ignore Board Archive Error", size : .small) {
        expandableWidth ()
        $value #mBoardModelSelection.ignoreModelVersionError
        $hidden #mBoardModelSelection.errorArchiveVersionMessageIsHidden
      }
      separator
      hStack {
        StaticLabel (title: "Board Count", bold: no, size : .small, alignment: .right)
        gutter
        IntObserverField (bold: yes, size: .small) {
          set (alignment: .left)
          $observedValue #mBoardModelSelection.instanceCount
        }
      }
      space
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 4000) {
      $hidden root.boardModels.count == 0
      $zoom #mBoardModelSelection.zoom
      $horizontalFlip prefs.mergerModelViewHorizontalFlip
      $verticalFlip prefs.mergerModelViewVerticalFlip
      $overObjectsDisplay #mBoardModelSelection.imageForModel
      $xPlacardUnit #mBoardModelSelection.modelWidthUnit
      $yPlacardUnit #mBoardModelSelection.modelHeightUnit
    }
    vStack {
      space
      StaticLabel (title: "No Model", bold: yes, size: .regular, alignment: .center) {
        $hidden root.boardModels.count > 0
      }
      space
    }
  }

  action addBoardModelAction ;
  action updateBoardModelAction ;
  selectionController BoardModel #mBoardModelSelection : #mBoardModelController.selectedArray ;

  //············································································
  //     Settings View
  //············································································

  stackView \SettingsView hStack {
    vStack set (bottomMargin: .regular) set (width: 250) $hidden !root.showDisplaySettingView {
      vStack withVScroller set (margins: .regular) {
        hStack { 
          space
          gutter
          StaticLabels (left: "Model", right: "Board", bold: yes, size: .small)
        }
        hStack { 
          StaticLabel (title: "Horizontal Flip", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewHorizontalFlip }
          space
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewHorizontalFlip }
        }
        hStack { 
          StaticLabel (title: "Vertical Flip", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewVerticalFlip }
          space
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewVerticalFlip }
        }
        hStack { 
          StaticLabel (title: "Holes", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayHoles }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorHoles }
          Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayHoles }
        }
        hStack { 
          StaticLabel (title: "Vias", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayVias }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorVias }
          Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayVias }
        }
        hStack { 
          StaticLabel (title: "Board Limits", bold: no, size: .small, alignment: .right)
          gutter
          space
//          Checkbox (title: "", size: .small) { expandableHeight () set (enabled : no, checked : yes) }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBoardLimits }
          Checkbox (title: "", size: .small) {
            expandableHeight () $value prefs.mergerBoardViewDisplayBoardLimits
          }
        }
        hStack { 
          StaticLabel (title: "Model Board Limits", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayModelBoardLimits }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInternalBoardsLimits }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayModelBoardsLimits }
        }
        hStack { 
          StaticLabel (title: "Background", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerShowModelBackground  }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackground }
          Checkbox (title: "", size: .small) { $value prefs.mergerShowInstanceBackground }
        }
        StaticLabel (title: "Front", bold: yes, size: .small, alignment: .left)
        hStack { 
          StaticLabel (title: "Pads", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayFrontPads }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontPads }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayFrontPads }
        }
        hStack { 
          StaticLabel (title: "Component Names", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayFrontComponentNames }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontComponentNames }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayFrontComponentNames }
        }
        hStack { 
          StaticLabel (title: "Component Values", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayFrontComponentValues }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontComponentValues }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayFrontComponentValues }
        }
        hStack { 
          StaticLabel (title: "Packages", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayFrontPackages }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontPackages }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayFrontPackages }
        }
        hStack { 
          StaticLabel (title: "Legend Texts", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayFrontLegendTexts }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontLegendTexts }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayFrontLegendTexts }
        }
        hStack { 
          StaticLabel (title: "Legend Lines", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayFrontLegendLines }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontLegendLines }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayFrontLegendLines }
        }
        hStack { 
          StaticLabel (title: "Layout Texts", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayFrontLayoutTexts }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontLayoutTexts }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayFrontLayoutTexts }
        }
        hStack { 
          StaticLabel (title: "Tracks", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayFrontTracks }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontTracks }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayFrontTracks }
        }
        StaticLabel (title: "Inner", bold: yes, size: .small, alignment: .left)
        hStack { 
          StaticLabel (title: "Traversing Pads", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayTraversingPads }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorTraversingPads }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayTraversingPads }
        }
        hStack { 
          StaticLabel (title: "Inner 1 Tracks", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayInner1Tracks }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInner1Tracks }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayInner1Tracks }
        }
        hStack { 
          StaticLabel (title: "Inner 2 Tracks", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayInner2Tracks }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInner2Tracks }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayInner2Tracks }
        }
        hStack { 
          StaticLabel (title: "Inner 3 Tracks", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) {$value prefs.mergerModelViewDisplayInner3Tracks }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInner3Tracks }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayInner3Tracks }
        }
        hStack { 
          StaticLabel (title: "Inner 4 Tracks", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayInner4Tracks }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInner4Tracks }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayInner4Tracks }
        }
        StaticLabel (title: "Back", bold: yes, size: .small, alignment: .left)
        hStack { 
          StaticLabel (title: "Pads", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayBackPads }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackPads }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayBackPads }
        }
        hStack { 
          StaticLabel (title: "Component Names", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayBackComponentNames }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackComponentNames }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayBackComponentNames }
        }
        hStack { 
          StaticLabel (title: "Component Values", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayBackComponentValues }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackComponentValues }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayBackComponentValues }
        }
        hStack { 
          StaticLabel (title: "Packages", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayBackPackages }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackPackages }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayBackPackages }
        }
        hStack { 
          StaticLabel (title: "Legend Texts", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayBackLegendTexts }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackLegendTexts }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayBackLegendTexts }
        }
        hStack { 
          StaticLabel (title: "Legend Lines", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayBackLegendLines }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackLegendLines }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayBackLegendLines }
        }
        hStack { 
          StaticLabel (title: "Layout Texts", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayBackLayoutTexts }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackLayoutTexts }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayBackLayoutTexts }
        }
        hStack { 
          StaticLabel (title: "Tracks", bold: no, size: .small, alignment: .right)
          gutter
          Checkbox (title: "", size: .small) { $value prefs.mergerModelViewDisplayBackTracks }
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackTracks }
          Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewDisplayBackTracks }
        }
      }
      space
      hStack set (rightMargin: .regular) {
        space Button (title: "Done", size : .regular) { $run dismissDisplaySettingView }
      }
    }
  }

  //············································································
  //     Board Page
  //············································································

  stackView \BoardBaseInspectorView vStack { }

  stackView \BoardPage hStack {
    newView boardBaseInspectorView = \BoardBaseInspectorView ()
    newView boardSettingsPage = \BoardSettingsPage ()
    newView boardIssuesPage = \BoardIssuesPage ()
    newView settingsView = \SettingsView ()
    view settingsView
    vStack set (margins: .regular) set (width: 250) $hidden root.showDisplaySettingView {
      SegmentedControlWithPages (documentView: view boardBaseInspectorView, equalWidth: yes, size : .regular)
        [outlet mBoardInspectorSegmentedControl configurator boardPageSegmentedControl] {
        expandableWidth ()
        addPage (title: "", tooltip: "Model Description", pageView: view boardSettingsPage)
        addPage (title: "", tooltip: "Issue Inspector", pageView: view boardIssuesPage)
        $segmentImage self.statusImage (segmentIndex : 1)
        $segmentTitle self.boardDispositionStatusTitle (segmentIndex : 1)
      }
      view boardBaseInspectorView
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 4000) [outlet mComposedBoardGraphicView configurator boardGraphicView] {
      $zoom root.zoom
      $horizontalFlip prefs.mergerBoardViewHorizontalFlip
      $verticalFlip prefs.mergerBoardViewVerticalFlip
      $overObjectsDisplay root.boardOutlineRectDisplay
      $graphicController #mBoardInstanceController
//      $arrowKeyMagnitude root.arrowMagnitude
//      $shiftArrowKeyMagnitude root.shiftArrowMagnitude
      $xPlacardUnit root.boardWidthUnit
      $yPlacardUnit root.boardHeightUnit
    }
  }

  arrayController #mBoardInstanceController : root.boardInstances ;
  selectionController MergerBoardInstance #mBoardInstanceSelection : #mBoardInstanceController.selectedArray ;

  //············································································
  //     Board Settings Page
  //············································································

  stackView \BoardSettingsPage vStack {
    hStack {
      vStack {
        StaticLabel (title: "Add Model", bold: yes, size : .small, alignment: .left)
        HelpButton (size : .small) { $run showBoardHelpAction }
        EnumPopUpButton (titles: enum QuadrantRotation.degreesTitles, size: .small) {
          expandableWidth ()
          $selectedIndex root.modelInsertionRotation
        }
      }
      CanariDragSourceTableView
        [outlet mModelDragSourceTableView configurator boardModelDragSourceTableView]
        { $models root.modelNames }
    }
    separator
    vStack withVScroller {
      StaticLabel (title: "Board", bold: yes, size : .small, alignment: .left)
      hStack {
        Checkbox (title: "Automatic Size", size: .small) { $value root.automaticBoardSize }
        space
        Checkbox (title: "Limits Overlap", size: .small) {
          $enabled root.boardInstances.count > 0
          $value root.overlapingArrangment
        }
      }
      hStack {
        StaticLabel (title: "Width", bold: no, size : .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit root.boardManualWidth, root.boardWidthUnit
          $hidden root.automaticBoardSize
        }
        CanariObservedDimensionAndPopUp (size: .small) {
          $dimensionAndUnit root.boardWidth, root.boardWidthUnit
          $hidden !root.automaticBoardSize
        }
      }
      hStack {
        StaticLabel (title: "Height", bold: no, size : .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit root.boardManualHeight, root.boardHeightUnit
          $hidden root.automaticBoardSize
        }
        CanariObservedDimensionAndPopUp (size: .small) {
          $dimensionAndUnit root.boardHeight, root.boardHeightUnit
          $hidden !root.automaticBoardSize
        }
      }
      hStack {
        StaticLabel (title: "Limit Width", bold: no, size : .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit root.boardLimitWidth, root.boardLimitWidthUnit
        }
      }
      separator
      StaticLabel (title: "Selected Element", bold: yes, size : .small, alignment: .left)
      hStack {
        StaticLabel (title: "Model", bold: no, size : .small, alignment: .right)
        gutter
        Label (bold: yes, size: .small) { $title #mBoardInstanceSelection.modelName }
      }
      hStack {
        StaticLabel (title: "Right", bold: no, size : .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #mBoardInstanceSelection.x, root.selectedBoardXUnit
        }
      }
      hStack {
        StaticLabel (title: "Bottom", bold: no, size : .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #mBoardInstanceSelection.y, root.selectedBoardYUnit
        }
      }
      CanariOrientationSegmentedControl (size : .small) {
        expandableWidth ()
        $orientation #mBoardInstanceSelection.instanceRotation
      }
      separator
      hStack {
        vStack {
          space
          Button (title: "Explode All", size : .small) { $run explodeAllAction }
          space
        }
        vStack {
          StaticLabel (title: "Stack All", bold: yes, size : .small, alignment: .center)
          hStack {
            space
            Button (title: "Up", size : .small) {
              setTitleAsUpArrow ()
              $run stackAllUpAction 
            }
            space
          }
          hStack {
            space
            Button (title: "Left", size : .small) {
              setTitleAsLeftArrow ()
              $run stackAllLeftAction 
            }
            Button (title: "Right", size : .small) {
              setTitleAsRightArrow ()
              $run stackAllRightAction 
            }
            space
          }
          hStack {
            space
            Button (title: "Down", size : .small) {
              setTitleAsDownArrow ()
              $run stackAllDownAction 
            }
            space
          }
        }
      }
      separator
      hStack {
        vStack {
          StaticLabel (title: "Move Selection", bold: yes, size : .small, alignment: .center)
          hStack {
            space
            Button (title: "Up", size : .small) {
              setTitleAsUpArrow ()
              $enabled #mBoardInstanceController.selectedArray.count > 0
              $run moveSelectionUpAction 
            }
            space
          }
          hStack {
            space
            Button (title: "Left", size : .small) {
              setTitleAsLeftArrow ()
              $enabled #mBoardInstanceController.selectedArray.count > 0
              $run moveSelectionLeftAction 
            }
            Button (title: "Right", size : .small) {
              setTitleAsRightArrow ()
              $enabled #mBoardInstanceController.selectedArray.count > 0
              $run moveSelectionRightAction 
            }
            space
          }
          hStack {
            space
            Button (title: "Down", size : .small) {
              setTitleAsDownArrow ()
              $enabled #mBoardInstanceController.selectedArray.count > 0
              $run moveSelectionDownAction 
            }
            space
          }
        }
        vStack {
          StaticLabel (title: "Stack Selection", bold: yes, size : .small, alignment: .center)
          hStack {
            space
            Button (title: "Up", size : .small) {
              setTitleAsUpArrow ()
              $enabled #mBoardInstanceController.selectedArray.count > 0
              $run stackSelectionUpAction 
            }
            space
          }
          hStack {
            space
            Button (title: "Left", size : .small) {
              setTitleAsLeftArrow ()
              $enabled #mBoardInstanceController.selectedArray.count > 0
              $run stackSelectionLeftAction 
            }
            Button (title: "Right", size : .small) {
              setTitleAsRightArrow ()
              $enabled #mBoardInstanceController.selectedArray.count > 0
              $run stackSelectionRightAction 
            }
            space
          }
          hStack {
            space
            Button (title: "Down", size : .small) {
              setTitleAsDownArrow ()
              $enabled #mBoardInstanceController.selectedArray.count > 0
              $run stackSelectionDownAction 
            }
            space
          }
        }
      }
      Button (title: "Explode Selection", size : .small) {
        $enabled #mBoardInstanceController.selectedArray.count > 0
        $run explodeSelectionAction 
      }
    }
  }

  action moveSelectionRightAction ;
  action moveSelectionLeftAction ;
  action moveSelectionUpAction ;
  action moveSelectionDownAction ;
  action stackSelectionRightAction ;
  action stackSelectionLeftAction ;
  action stackSelectionUpAction ;
  action stackSelectionDownAction ;
  action explodeSelectionAction ;
  action stackAllRightAction ;
  action stackAllLeftAction ;
  action stackAllUpAction ;
  action stackAllDownAction ;
  action explodeAllAction ;
  action showBoardHelpAction ;

  //············································································
  //     Board Issues Page
  //············································································

  stackView \BoardIssuesPage vStack {
    Label (bold: yes, size: .small) { expandableWidth () $title self.statusMessage }
    CanariIssueTableView (hasHideIssueButton: yes) [outlet mBoardIssueTableView] { $issues self.issues }
  }

  linker issueTableViewToGraphicView (mBoardIssueTableView, mComposedBoardGraphicView)

  //············································································
  //     Product Page
  //············································································

  stackView \ProductPage vStack set (margins: .regular) {
    newView productMasterView = \ProductMasterView ()
    newView artworkDescriptionPage = \ArtworkDescriptionPage ()
    newView artworkMinimaPage = \ArtworkMinimaPage ()
    newView artworkDataPage = \ArtworkDataPage ()
    newView pdfSettingsPage = \PDFSettingsPage ()
    newView generationLogPage = \GenerationLogPage ()
    hStack {
      vStack {
        Button (title: "Import Artwork…", size : .regular) {
          expandableWidth ()
          $hidden !root.mArtwork.none
          $run importArtworkAction 
        }
        Button (title: "Detach Artwork", size : .regular) {
          expandableWidth ()
          $hidden root.mArtwork.none
          $run detachArtworkAction 
        }
        Label (bold: yes, size : .regular) { expandableWidth () set (alignment: .center) $title root.mArtworkName }
        hStack {
          Checkbox (title: "Merger Archive", size : .regular) { $value root.mGenerateMergerArchive }
          Checkbox (title: "Gerber, PDF", size : .regular) { $value root.mGenerateGerberAndPDF }
          Button (title: "Generate Files", size : .regular) {
            expandableWidth ()
            $enabled !root.mArtwork.none & (root.boardInstances.count > 0) & !self.documentIsUnnamed
            $run generateProductFilesAction
          }
        }
      }
      vStack {
        Label (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $title self.documentFileShouldBeRenamedErrorMessage
        }
        TextObserverView (size: .small) {
          expandableWidth ()
          setNoBackground ()
          setNoVerticalScroller ()
          setNoHorizontalScroller ()
          $observedValue self.incorrectDocumentFileDetailedErrorMessage
        }
        space
      }
    }
    hStack $hidden !root.mArtwork.none {
      space
      vStack { space StaticLabel (title: "No Artwork", bold: yes, size : .regular, alignment: .center) space }
      space
    }
    vStack $hidden root.mArtwork.none {
      hStack {
        space
        SegmentedControlWithPages (documentView: view productMasterView, equalWidth: yes, size : .regular)
          [outlet mProductPageSegmentedControl] {
          addPage (title: "Gerber and PDF Settings", tooltip: "", pageView: view pdfSettingsPage)
          addPage (title: "Artwork Description", tooltip: "", pageView: view artworkDescriptionPage)
          addPage (title: "Artwork Minima", tooltip: "", pageView: view artworkMinimaPage)
          addPage (title: "Artwork Data", tooltip: "", pageView: view artworkDataPage)
          addPage (title: "Generation Log", tooltip: "", pageView: view generationLogPage)
        }
        space
      }
      view productMasterView
    }
 }

  action importArtworkAction ;
  action detachArtworkAction ;
  action generateProductFilesAction ;
  transient Bool documentIsUnnamed dependsFrom self.documentFileName ;
  transient String incorrectDocumentFileDetailedErrorMessage dependsFrom self.documentFileName ;
  transient String documentFileShouldBeRenamedErrorMessage dependsFrom self.documentFileName ;

  //············································································

  stackView \ProductMasterView vStack { }

  //············································································

  stackView \ArtworkDescriptionPage vStack {
    hStack { 
      StaticLabel (title: "Layer Description", bold: no, size: .regular, alignment: .right)
      gutter
      Label (bold: yes, size: .regular) {
        set (alignment: .left)
        expandableWidth ()
        $title root.layerConfigurationString
      }
    }
    hStack { 
      StaticLabel (title: "Artwork Version", bold: no, size: .regular, alignment: .right)
      gutter
      IntObserverField (bold: yes, size: .regular) {
        set (alignment: .left)
        expandableWidth ()
        $observedValue root.mArtworkVersion
      }
    }
    hStack { 
      vStack {StaticLabel (title: "Comment", bold: no, size: .regular, alignment: .right) space }
      gutter
      TextObserverView (size: .small) { expandableWidth () $observedValue root.comments }
    }
  }

  //············································································

  stackView \ArtworkDataPage vStack {
    hStack set (margins: .regular) {
      hStack {
        StaticLabel (title: "Drill File Extension", bold: no, size : .small, alignment: .center)
        TextField (minWidth: 56, size : .small) { $value root.drillDataFileExtension (sendContinously: yes) }
      }
      ImageObserverView (size: .small) { $image self.emptyDrillFileExtensionImage }
      space
    }
    hStack set (leftMargin: .regular) set (rightMargin: .regular) {
      vStack set (topMargin: .regular) {
        Label (bold: yes, size : .small) { $title self.generatedFileCountString }
        TableView (size : .small, addControlButtons: yes) { $tableValue #mDataController }
      }
      separator
      vStack set (topMargin: .regular) {
        hStack {
          hStack {
            StaticLabel (title: "File Extension", bold: yes, size : .small, alignment: .center)
            TextField (minWidth: 56, size : .small) { $value #mDataSelection.fileExtension (sendContinously: yes) }
          }
          ImageObserverView (size: .small) { $image #mDataSelection.emptyFileExtensionImage }
         space
         StaticLabel (title: "Empty Data File", bold: yes, size : .small, alignment: .center) { setOrangeTextColor () $hidden !#mDataSelection.hasNoData}
       }
        space
        StaticLabel (title: "Front Side Elements", bold: yes, size : .small, alignment: .left)
        hStack {
          vStack set (leftMargin: .large) {
            hStack {
              Checkbox (title: "Front Side Images", size : .small) {
                set (enabled: no)
                $value #mDataSelection.drawImagesTopSide
              }
              gutter
              Checkbox (title: "Front Side QRCodes", size : .small) {
                set (enabled: no)
                $value #mDataSelection.drawQRCodesTopSide
              }
            }
            hStack {
              Checkbox (title: "Legend Front Side Texts", size : .small) { $value #mDataSelection.drawTextsLegendTopSide }
              gutter
              Checkbox (title: "Layout Front Side Texts", size : .small) { $value #mDataSelection.drawTextsLayoutTopSide }
            }
            hStack {
              Checkbox (title: "Front Side Tracks", size : .small) { $value #mDataSelection.drawTracksTopSide }
              gutter
              Checkbox (title: "Front Side Pads", size : .small) { $value #mDataSelection.drawPadsTopSide }
            }
          }
          space
        }
        hStack set (leftMargin: .large) {
          Checkbox (title: "Front Side Component Names", size : .small) {
            $value #mDataSelection.drawComponentNamesTopSide
          }
          space
        }
        hStack set (leftMargin: .large) {
          Checkbox (title: "Front Side Component Values", size : .small) {
            $value #mDataSelection.drawComponentValuesTopSide
          }
          space
        }
        hStack set (leftMargin: .large) {
          Checkbox (title: "Front Side Package Legends", size : .small) {
            $value #mDataSelection.drawPackageLegendTopSide
          }
          space
        }
        StaticLabel (title: "Inner Elements", bold: yes, size : .small, alignment: .left)
        hStack {
          vStack set (leftMargin: .large) {
            hStack $hidden !root.hasInnerElements {
              Checkbox (title: "Traversing Pads", size : .small) {
                $value #mDataSelection.drawTraversingPads
              }
              gutter
              space
            }
            hStack $hidden root.hasInnerElements {
              Checkbox (title: "Traversing Pads", size : .small) {
                $enabled root.hasInnerElements
              }
              gutter
              space
            }
            hStack $hidden !root.hasInnerElements {
              Checkbox (title: "Inner 1 Layer Tracks", size : .small) {
                $value #mDataSelection.drawTracksInner1Layer
              }
              gutter
              Checkbox (title: "Inner 2 Layer Tracks", size : .small) {
                $value #mDataSelection.drawTracksInner2Layer
              }
            }
            hStack $hidden root.hasInnerElements {
              Checkbox (title: "Inner 1 Layer Tracks", size : .small) {
                $enabled root.hasInnerElements
              }
              gutter
              Checkbox (title: "Inner 2 Layer Tracks", size : .small) {
                $enabled root.hasInnerElements
              }
            }
            hStack $hidden root.hasSixLayers {
              Checkbox (title: "Inner 3 Layer Tracks", size : .small) {
                $value #mDataSelection.drawTracksInner3Layer
              }
              gutter
              Checkbox (title: "Inner 4 Layer Tracks", size : .small) {
                $value #mDataSelection.drawTracksInner4Layer
              }
            }
            hStack $hidden root.hasSixLayers {
              Checkbox (title: "Inner 3 Layer Tracks", size : .small) {
                $enabled root.hasSixLayers
              }
              gutter
              Checkbox (title: "Inner 4 Layer Tracks", size : .small) {
                $enabled root.hasSixLayers
              }
            }
          }
          space
        }
        StaticLabel (title: "Back Side Elements", bold: yes, size : .small, alignment: .left)
        hStack {
          vStack set (leftMargin: .large) {
            hStack {
              Checkbox (title: "Back Side Images", size : .small) {
                set (enabled: no)
                $value #mDataSelection.drawImagesBottomSide
              }
              gutter
              Checkbox (title: "Back Side QRCodes", size : .small) {
                set (enabled: no)
                $value #mDataSelection.drawQRCodesBottomSide
              }
            }
            hStack {
              Checkbox (title: "Legend Back Side Texts", size : .small) { $value #mDataSelection.drawTextsLegendBottomSide }
              gutter
              Checkbox (title: "Layout Back Side Texts", size : .small) { $value #mDataSelection.drawTextsLayoutBottomSide }
            }
            hStack {
              Checkbox (title: "Back Side Tracks", size : .small) { $value #mDataSelection.drawTracksBottomSide }
              gutter
              Checkbox (title: "Back Side Pads", size : .small) { $value #mDataSelection.drawPadsBottomSide }
            }
          }
          space
        }
        hStack set (leftMargin: .large) {
          Checkbox (title: "Back Side Component Names", size : .small) {
            $value #mDataSelection.drawComponentNamesBottomSide
          }
          space
        }
        hStack set (leftMargin: .large) { 
          Checkbox (title: "Back Side Component Values", size : .small) {
            $value #mDataSelection.drawComponentValuesBottomSide
          }
          space
        }
        hStack set (leftMargin: .large) { 
          Checkbox (title: "Back Side Package Legends", size : .small) { 
            $value #mDataSelection.drawPackageLegendBottomSide
          }
          space
        }
        StaticLabel (title: "Other Elements", bold: yes, size : .small, alignment: .center)
        hStack set (leftMargin: .large) {
          Checkbox (title: "Vias", size : .small) { $value #mDataSelection.drawVias }
          Checkbox (title: "Internal Board Limits", size : .small) { $value #mDataSelection.drawInternalBoardLimits }
          Checkbox (title: "Board Limits", size : .small) { $value #mDataSelection.drawBoardLimits }
          space
        }
        StaticLabel (title: "Option", bold: yes, size : .small, alignment: .left)
        hStack set (leftMargin: .large) {
          Checkbox (title: "Horizontal Mirror", size : .small) {
            $value #mDataSelection.horizontalMirror
          }
          space
        }
        space
      }
    }
  }

  transient NSImage emptyDrillFileExtensionImage dependsFrom self.emptyDrillFileExtension ;
  transient Bool emptyDrillFileExtension dependsFrom root.drillDataFileExtension ;
  transient String generatedFileCountString dependsFrom #mDataController.sortedArray.count ;

  tableViewController #mDataController (allowsEmptySelection:no, allowsMultipleSelection:no) root.fileGenerationParameterArray {
    editableColumn name (title: "Name", minWidth: 60, maxWidth: 200, headerAlignment: .left, contentAlignment: .left) sortkey name
    column parameterStatusImage (title: "", minWidth: 30, maxWidth: 30, headerAlignment: .center, contentAlignment: .center)
  }
  selectionController ArtworkFileGenerationParameters #mDataSelection : #mDataController.selectedArray ;

  //············································································

  stackView \ArtworkMinimaPage vStack {
    space
    hStack {
      space
      vStack {
        space
        StaticLabel (title: "PP: Pad to Pad Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TP: Track to Pad Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TT: Track to Track Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TW: Track Width", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "OAR: Outer Annular Ring", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: no, size : .small, alignment: .left)
        space
      }
      space
      StaticImageView (name: "artwork")
      space
    }
    space
    hStack {
      space
      vStack set (leftMargin: .large) set (rightMargin: .large) set (topMargin: .regular) {
        hStack {
          StaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: no, size : .regular, alignment: .center)
          gutter
          CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minPPTPTTTW, root.minPPTPTTTWdisplayUnit }
        }
        hStack {
          StaticLabel (title: "Minimum Value for PHD", bold: no, size : .regular, alignment: .center)
          gutter
          CanariObservedDimensionAndPopUp (size : .small) {
            $dimensionAndUnit root.minValueForPHDinEBUnit, root.minValueForPHDdisplayUnit
          }
        }
        hStack {
          StaticLabel (title: "Minimum Value for OAR", bold: no, size : .regular, alignment: .center)
          gutter
          CanariObservedDimensionAndPopUp (size : .small) {
            $dimensionAndUnit root.minValueForOARinEBUnit, root.minValueForOARdisplayUnit
          }
        }
        hStack {
          StaticLabel (title: "Minimum Value for Board Limit Width", bold: no, size : .regular, alignment: .center)
          gutter
          CanariObservedDimensionAndPopUp (size : .small) {
            $dimensionAndUnit root.minValueForBoardLimitWidth, root.minValueForBoardLimitWidthDisplayUnit
          }
        }
      }
      space
    }
    space
  }

  //············································································

  stackView \PDFSettingsPage hStack set (margins: .large) {
    vStack {
      StaticLabel (title: "Gerber Settings", bold: yes, size: .regular, alignment: .left)
      vStack set (leftMargin: .large) {
        EnumPopUpButton (titles: enum GerberUnit.popupTitles, size: .regular) {
          $selectedIndex root.mGerberProductUnit
        }
      }
      StaticLabel (title: "PDF Settings", bold: yes, size: .regular, alignment: .left)
      vStack set (leftMargin: .large) {
        hStack {
          ColorWell { $color root.mPDFBoardBackgroundColor }
          StaticLabel (title: "Board Background Color", bold: no, size: .regular, alignment: .center)
          space
        }
        EnumPopUpButton (titles: enum PDFProductGrid.popupTitles, size: .regular) {
          $selectedIndex root.mPDFProductGrid
        }
      }
      space
    }
    space
  }

  //············································································

  stackView \GenerationLogPage vStack {
    TextObserverView (size: .regular) [outlet mLogTextView]
  }

  //············································································

}

//——————————————————————————————————————————————————————————————————————————————
