//------------------------------------------------------------------------------
//     M E R G E R    D O C U M E N T
//------------------------------------------------------------------------------

autoLayoutDocument AutoLayoutMergerDocument root MergerRoot stackView \DocumentMainView {

  stackView \PageMasterView vStack { }

  stackView \DocumentMainView vStack set (spacing: 0) {
    newView pageMasterView = \PageMasterView ()
    newView modelPage = \ModelPage ()
    newView boardPage = \BoardPage ()
    newView productPage = \ProductPage ()
    hStack set (margins: 8) {
      vStack {
        SegmentedControlWithPages (documentView: view pageMasterView, equalWidth: no, size : .regular) {
          addPage (title: "Model", tooltip: "Model Description", pageView: view modelPage)
          addPage (title: "Board", tooltip: "Board Description", pageView: view boardPage)
          addPage (title: "Product", tooltip: "Product Description", pageView: view productPage)
          $selectedPage root.selectedPageIndex
        }
        StaticLabel (title: "Page", bold: no, size : .small, alignment: .center)
      }
//      vStack setCenterAlignment () {
//        Button (title: "Display Settings", size : .regular) {
//          $enabled root.selectedPageIndex <= 1
//          $run showPrefsForSettingMergerDisplayAction
//        }
//        StaticLabel (title: "for Model and Board Views", bold: no, size : .small, alignment: .center)
//      }
      vStack setCenterAlignment () {
        Checkbox (title: "Show Display Settings", size : .regular) {
          $enabled root.selectedPageIndex <= 1
          $value root.showDisplaySettingView
        }
        StaticLabel (title: "for Model and Board Views", bold: no, size : .small, alignment: .center)
      }
      space
      vStack {
        hStack { space ImageObserverView (size : .regular) { $image self.statusImage $tooltip self.statusMessage } space }
        StaticLabel (title: "Status", bold: no, size: .small, alignment: .center)
      }
    }
    separator
    view pageMasterView
  }

  transient String modelVersionErrorMessage dependsFrom 
    root.boardModels.all.name,
    root.boardModels.all.modelVersion,
    root.boardModels.all.ignoreModelVersionError
  ;

  transient NSImage statusImage dependsFrom
    self.issues,
//    root.boardLimitWidthOk,
    self.modelVersionErrorMessage
  ;
//
//  transient NSImage boardLimitWidthStatusImage dependsFrom root.boardLimitWidthOk ;

  transient String statusMessage dependsFrom
    self.issues,
//    root.boardLimitWidthErrorMessage,
    self.modelVersionErrorMessage
  ;


  transient String boardDispositionStatusTitle dependsFrom self.issues ;

  transient CanariIssueArray issues dependsFrom
    root.overlapingArrangment, root.boardRect, root.boardLimitWidth,
    root.boardInstances.all.instanceRect, root.boardInstances.all.boardLimitWidth
  ;
//  action showPrefsForSettingMergerDisplayAction ;
  tableViewController #mBoardModelController (allowsEmptySelection: no, allowsMultipleSelection: no) root.boardModels {
    column name (title: "", minWidth: 100, maxWidth: 300, headerAlignment: .left, contentAlignment: .left)
  }

  action dismissDisplaySettingView ;

  //············································································
  //     Model Page
  //············································································

  stackView \ModelPage hStack set (spacing: 0)  {
    newView settingsView = \SettingsView ()
    view settingsView
    vStack set (margins: 8) set (width: 250) $hidden root.showDisplaySettingView {
      hStack {
        Button (title: "+", size : .small) {
          set (width: 40)
          $run addBoardModelAction
        }
        Button (title: "Update…", size : .small) {
          expandableWidth ()
          $run updateBoardModelAction
          $enabled #mBoardModelController.selectedArray.count > 0
        }
        Button (title: "-", size : .small) {
          set (width: 40)
          $run #mBoardModelController.remove
          $enabled (#mBoardModelController.selectedArray.count > 0) & (#mBoardModelSelection.instanceCount == 0)
        }
      }
      TableView (size : .regular, addControlButtons: no) {
        noHeaderView ()
        $tableValue #mBoardModelController
      }
      separator
      GridView2 {
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Artwork Name", bold: no, size : .small, alignment: .right),
          right: Label (bold: yes, size: .small) { set (alignment: .left) $title #mBoardModelSelection.artworkName  }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Layout", bold: no, size : .small, alignment: .right),
          right: Label (bold: yes, size: .small) { set (alignment: .left) $title #mBoardModelSelection.layerConfigurationString }
        )
        addSeparator ()
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Model Width", bold: no, size : .small, alignment: .right),
          right: CanariObservedDimensionAndPopUp (size: .small) {
            $dimensionAndUnit #mBoardModelSelection.modelWidth, #mBoardModelSelection.modelWidthUnit
          }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Model Height", bold: no, size : .small, alignment: .right),
          right: CanariObservedDimensionAndPopUp (size: .small) {
            $dimensionAndUnit #mBoardModelSelection.modelHeight, #mBoardModelSelection.modelHeightUnit
          }
        )        
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Limit Width", bold: no, size : .small, alignment: .right),
          right: CanariObservedDimensionAndPopUp (size: .small) {
            $dimensionAndUnit #mBoardModelSelection.modelLimitWidth, #mBoardModelSelection.modelLimitWidthUnit
          }
        )
        addSeparator ()
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Archive Version", bold: no, size : .small, alignment: .right),
          right: IntObserverField (bold: yes, size: .small) {
            set (alignment: .left)
            $observedValue #mBoardModelSelection.modelVersion
          }
        )
        add (single:
          Label (bold: yes, size : .small) {
            setRedTextColor ()
            $title #mBoardModelSelection.errorArchiveVersionMessage
            $size #mBoardModelSelection.errorArchiveLabelSize
            $textColor #mBoardModelSelection.errorArchiveLabelColor
            $hidden #mBoardModelSelection.errorArchiveVersionMessageIsHidden
          }
        )
        add (single:
          Checkbox (title: "Ignore Board Archive Error", size : .small) {
            expandableWidth ()
            $value #mBoardModelSelection.ignoreModelVersionError
            $hidden #mBoardModelSelection.errorArchiveVersionMessageIsHidden
          }
        )
        addSeparator ()
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Board Count", bold: no, size : .small, alignment: .right),
          right: IntObserverField (bold: yes, size: .small) {
            set (alignment: .left)
            $observedValue #mBoardModelSelection.instanceCount
          }
        )
      }
      space
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 4000) {
      $hidden root.boardModels.count == 0
      $zoom #mBoardModelSelection.zoom
      $horizontalFlip prefs.mergerModelViewHorizontalFlip
      $verticalFlip prefs.mergerModelViewVerticalFlip
      $overObjectsDisplay #mBoardModelSelection.imageForModel
      $xPlacardUnit #mBoardModelSelection.modelWidthUnit
      $yPlacardUnit #mBoardModelSelection.modelHeightUnit
    }
    vStack {
      space
      hStack {
        space
        StaticLabel (title: "No Model", bold: yes, size: .regular, alignment: .center) { $hidden root.boardModels.count > 0 }
        space
      }
      space
    }
  }

  action addBoardModelAction ;
  action updateBoardModelAction ;
  selectionController BoardModel #mBoardModelSelection : #mBoardModelController.selectedArray ;

  //············································································
  //     Settings View
  //············································································

  stackView \SettingsView hStack set (spacing: 0) {
    vStack set (bottomMargin: 8) set (width: 250) $hidden !root.showDisplaySettingView {
      VerticalScrollView (content: 
        GridView2 {
          set (margins: 8)
          addCenterYAligned (
            left: space,
            right: StaticLabels (left: "Model", right: "Board", bold: yes, size: .small)
          )
          addCenterYAligned (
            left: StaticLabel (title: "Horizontal Flip", bold: no, size: .small, alignment: .right),
            right: hStack {
              Checkbox (title: "", size: .small) { $value prefs.mergerModelViewHorizontalFlip }
              space
              Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewHorizontalFlip }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Vertical Flip", bold: no, size: .small, alignment: .right),
            right: hStack {
              Checkbox (title: "", size: .small) { $value prefs.mergerModelViewVerticalFlip }
              space
              Checkbox (title: "", size: .small) { $value prefs.mergerBoardViewVerticalFlip }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Holes", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayHoles }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorHoles (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayHoles }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Vias", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayVias }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorVias (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayVias }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Board Limits", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () set (enabled : no, checked : yes) }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBoardLimits (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayBoardLimits }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Model Board Limits", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayModelBoardLimits }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInternalBoardsLimits (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayModelBoardsLimits }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Background", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () set (enabled : no, checked : yes) }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackground (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () set (enabled : no, checked : yes) }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Front", bold: yes, size: .small, alignment: .left),
            right: space
          )
          addCenterYAligned (
            left: StaticLabel (title: "Pads", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayFrontPads }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontPads (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayFrontPads }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Component Names", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayFrontComponentNames }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontComponentNames (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayFrontComponentNames }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Component Values", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayFrontComponentValues }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontComponentValues (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayFrontComponentValues }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Packages", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayFrontPackages }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontPackages (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayFrontPackages }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Legend Texts", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayFrontLegendTexts }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontLegendTexts (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayFrontLegendTexts }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Legend Lines", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayFrontLegendLines }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontLegendLines (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayFrontLegendLines }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Layout Texts", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayFrontLayoutTexts }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontLayoutTexts (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayFrontLayoutTexts }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Tracks", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayFrontTracks }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorFrontTracks (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayFrontTracks }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Inner", bold: yes, size: .small, alignment: .left),
            right: space
          )
          addCenterYAligned (
            left: StaticLabel (title: "Traversing Pads", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayTraversingPads }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorTraversingPads (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayTraversingPads }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Inner 1 Tracks", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayInner1Tracks }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInner1Tracks (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayInner1Tracks }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Inner 2 Tracks", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayInner2Tracks }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInner2Tracks (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayInner2Tracks }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Inner 3 Tracks", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayInner3Tracks }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInner3Tracks (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayInner3Tracks }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Inner 4 Tracks", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayInner4Tracks }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorInner4Tracks (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayInner4Tracks }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Back", bold: yes, size: .small, alignment: .left),
            right: space
          )
          addCenterYAligned (
            left: StaticLabel (title: "Pads", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayBackPads }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackPads (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayBackPads }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Component Names", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayBackComponentNames }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackComponentNames (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayBackComponentNames }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Component Values", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayBackComponentValues }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackComponentValues (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayBackComponentValues }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Packages", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayBackPackages }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackPackages (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayBackPackages }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Legend Texts", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayBackLegendTexts }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackLegendTexts (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayBackLegendTexts }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Legend Lines", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayBackLegendLines }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackLegendLines (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayBackLegendLines }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Layout Texts", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayBackLayoutTexts }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackLayoutTexts (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayBackLayoutTexts }
            }
          )
          addCenterYAligned (
            left: StaticLabel (title: "Tracks", bold: no, size: .small, alignment: .right),
            right: hStack setCenterYAlignment () {
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerModelViewDisplayBackTracks }
              ColorWell { set (toolTip: "Stored in Preferences") $color prefs.mergerColorBackTracks (sendContinously: no) }
              Checkbox (title: "", size: .small) { expandableHeight () $value prefs.mergerBoardViewDisplayBackTracks }
            }
          )
        }
      )
      space
      hStack set (rightMargin: 8) { space Button (title: "Done", size : .regular) { $run dismissDisplaySettingView } }
    }
  }

  //············································································
  //     Board Page
  //············································································

  stackView \BoardBaseInspectorView vStack { }

  stackView \BoardPage hStack set (spacing: 0) {
    newView boardBaseInspectorView = \BoardBaseInspectorView ()
    newView boardSettingsPage = \BoardSettingsPage ()
    newView boardIssuesPage = \BoardIssuesPage ()
    newView settingsView = \SettingsView ()
    view settingsView
    vStack set (margins: 8) set (width: 250) $hidden root.showDisplaySettingView {
      SegmentedControlWithPages (documentView: view boardBaseInspectorView, equalWidth: yes, size : .regular)
        [outlet mBoardInspectorSegmentedControl configurator boardPageSegmentedControl] {
        expandableWidth ()
        addPage (title: "", tooltip: "Model Description", pageView: view boardSettingsPage)
        addPage (title: "", tooltip: "Issue Inspector", pageView: view boardIssuesPage)
//        $segmentImage self.boardLimitWidthStatusImage (segmentIndex : 0)
        $segmentImage self.statusImage (segmentIndex : 1)
        $segmentTitle self.boardDispositionStatusTitle (segmentIndex : 1)
      }
      view boardBaseInspectorView
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 4000) [outlet mComposedBoardGraphicView configurator boardGraphicView] {
      $zoom root.zoom
      $horizontalFlip prefs.mergerBoardViewHorizontalFlip
      $verticalFlip prefs.mergerBoardViewVerticalFlip
      $overObjectsDisplay root.boardOutlineRectDisplay
      $graphicController #mBoardInstanceController
//      $arrowKeyMagnitude root.arrowMagnitude
//      $shiftArrowKeyMagnitude root.shiftArrowMagnitude
      $xPlacardUnit root.boardWidthUnit
      $yPlacardUnit root.boardHeightUnit
    }
  }

  arrayController #mBoardInstanceController : root.boardInstances ;
  selectionController MergerBoardInstance #mBoardInstanceSelection : #mBoardInstanceController.selectedArray ;

  //············································································
  //     Board Settings Page
  //············································································

  stackView \BoardSettingsPage vStack {
    hStack {
      vStack {
        StaticLabel (title: "Add Model", bold: yes, size : .small, alignment: .left)
        HelpButton (size : .small) { $run showBoardHelpAction }
        EnumPopUpButton (titles: enum QuadrantRotation.degreesTitles, size: .small) {
          expandableWidth ()
          $selectedIndex root.modelInsertionRotation
        }
      }
      CanariDragSourceTableView
        [outlet mModelDragSourceTableView configurator boardModelDragSourceTableView]
        { $models root.modelNames }
    }
    separator
    VerticalScrollView (content:
      vStack {
        StaticLabel (title: "Board", bold: yes, size : .small, alignment: .left)
        hStack {
          Checkbox (title: "Automatic Size", size: .small) { $value root.automaticBoardSize }
          space
          Checkbox (title: "Limits Overlap", size: .small) {
            $enabled root.boardInstances.count > 0
            $value root.overlapingArrangment
          }
        }
        GridView2 {
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Width", bold: no, size : .small, alignment: .right),
            right: vStack {
              CanariDimensionAndPopUp (size: .small) {
                $dimensionAndUnit root.boardManualWidth, root.boardWidthUnit
                $hidden root.automaticBoardSize
              }
              CanariObservedDimensionAndPopUp (size: .small) {
                $dimensionAndUnit root.boardWidth, root.boardWidthUnit
                $hidden !root.automaticBoardSize
              }
            }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Height", bold: no, size : .small, alignment: .right),
            right: vStack {
              CanariDimensionAndPopUp (size: .small) {
                $dimensionAndUnit root.boardManualHeight, root.boardHeightUnit
                $hidden root.automaticBoardSize
              }
              CanariObservedDimensionAndPopUp (size: .small) {
                $dimensionAndUnit root.boardHeight, root.boardHeightUnit
                $hidden !root.automaticBoardSize
              }
            }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Limit Width", bold: no, size : .small, alignment: .right),
            right: CanariDimensionAndPopUp (size: .small) {
              $dimensionAndUnit root.boardLimitWidth, root.boardLimitWidthUnit
            }
          )
//          addSeparator ()
//          add (single: StaticLabel (title: "Arrow Key Magnitude", bold: yes, size : .small, alignment: .left)
//          )
//          addFirstBaseLineAligned (
//            left: StaticLabel (title: "Arrow Key", bold: no, size : .small, alignment: .right),
//            right: CanariDimensionAndPopUp (size: .small) {
//              $dimensionAndUnit root.arrowMagnitude, root.arrowMagnitudeUnit
//            }
//          )
//          addFirstBaseLineAligned (
//            left: StaticLabel (title: "Shift Arrow Key", bold: no, size : .small, alignment: .right),
//            right: CanariDimensionAndPopUp (size: .small) {
//              $dimensionAndUnit root.shiftArrowMagnitude, root.shiftArrowMagnitudeUnit
//            }
//          )
          addSeparator ()
          add (single: StaticLabel (title: "Selected Element", bold: yes, size : .small, alignment: .left)
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Model", bold: no, size : .small, alignment: .right),
            right: Label (bold: yes, size: .small) { $title #mBoardInstanceSelection.modelName }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Right", bold: no, size : .small, alignment: .right),
            right: CanariDimensionAndPopUp (size: .small) {
              $dimensionAndUnit #mBoardInstanceSelection.x, root.selectedBoardXUnit
            }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Bottom", bold: no, size : .small, alignment: .right),
            right: CanariDimensionAndPopUp (size: .small) {
              $dimensionAndUnit #mBoardInstanceSelection.y, root.selectedBoardYUnit
            }
          )
          add (single:
            CanariOrientationSegmentedControl (size : .small) {
              expandableWidth ()
              $orientation #mBoardInstanceSelection.instanceRotation
            }
          )
        }
        separator
        hStack {
          vStack {
            space
            Button (title: "Explode All", size : .small) { $run explodeAllAction }
            space
          }
          vStack set (margins: 0) {
            StaticLabel (title: "Stack All", bold: yes, size : .small, alignment: .center)
            hStack {
              space
              Button (title: "Up", size : .small) {
                setTitleAsUpArrow ()
                $run stackAllUpAction 
              }
              space
            }
            hStack {
              space
              Button (title: "Left", size : .small) {
                setTitleAsLeftArrow ()
                $run stackAllLeftAction 
              }
              Button (title: "Right", size : .small) {
                setTitleAsRightArrow ()
                $run stackAllRightAction 
              }
              space
            }
            hStack {
              space
              Button (title: "Down", size : .small) {
                setTitleAsDownArrow ()
                $run stackAllDownAction 
              }
              space
            }
          }
        }
        separator
        hStack set (margins: 0) equalWidth () {
          vStack set (margins: 0) {
            StaticLabel (title: "Move Selection", bold: yes, size : .small, alignment: .center)
            hStack {
              space
              Button (title: "Up", size : .small) {
                setTitleAsUpArrow ()
                $enabled #mBoardInstanceController.selectedArray.count > 0
                $run moveSelectionUpAction 
              }
              space
            }
            hStack {
              space
              Button (title: "Left", size : .small) {
                setTitleAsLeftArrow ()
                $enabled #mBoardInstanceController.selectedArray.count > 0
                $run moveSelectionLeftAction 
              }
              Button (title: "Right", size : .small) {
                setTitleAsRightArrow ()
                $enabled #mBoardInstanceController.selectedArray.count > 0
                $run moveSelectionRightAction 
              }
              space
            }
            hStack {
              space
              Button (title: "Down", size : .small) {
                setTitleAsDownArrow ()
                $enabled #mBoardInstanceController.selectedArray.count > 0
                $run moveSelectionDownAction 
              }
              space
            }
          }
          vStack set (margins: 0) {
            StaticLabel (title: "Stack Selection", bold: yes, size : .small, alignment: .center)
            hStack {
              space
              Button (title: "Up", size : .small) {
                setTitleAsUpArrow ()
                $enabled #mBoardInstanceController.selectedArray.count > 0
                $run stackSelectionUpAction 
              }
              space
            }
            hStack {
              space
              Button (title: "Left", size : .small) {
                setTitleAsLeftArrow ()
                $enabled #mBoardInstanceController.selectedArray.count > 0
                $run stackSelectionLeftAction 
              }
              Button (title: "Right", size : .small) {
                setTitleAsRightArrow ()
                $enabled #mBoardInstanceController.selectedArray.count > 0
                $run stackSelectionRightAction 
              }
              space
            }
            hStack {
              space
              Button (title: "Down", size : .small) {
                setTitleAsDownArrow ()
                $enabled #mBoardInstanceController.selectedArray.count > 0
                $run stackSelectionDownAction 
              }
              space
            }
          }
        }
        Button (title: "Explode Selection", size : .small) {
          $enabled #mBoardInstanceController.selectedArray.count > 0
          $run explodeSelectionAction 
        }
      }
    )
  }

  action moveSelectionRightAction ;
  action moveSelectionLeftAction ;
  action moveSelectionUpAction ;
  action moveSelectionDownAction ;
  action stackSelectionRightAction ;
  action stackSelectionLeftAction ;
  action stackSelectionUpAction ;
  action stackSelectionDownAction ;
  action explodeSelectionAction ;
  action stackAllRightAction ;
  action stackAllLeftAction ;
  action stackAllUpAction ;
  action stackAllDownAction ;
  action explodeAllAction ;
  action showBoardHelpAction ;

  //············································································
  //     Board Issues Page
  //············································································

  stackView \BoardIssuesPage vStack {
    Label (bold: yes, size: .small) { expandableWidth () $title self.statusMessage }
    CanariIssueTableView (hasHideIssueButton: yes) [outlet mBoardIssueTableView] { $issues self.issues }
  }

  linker issueTableViewToGraphicView (mBoardIssueTableView, mComposedBoardGraphicView)

  //············································································
  //     Product Page
  //············································································

  stackView \ProductPage vStack set (margins: 8) {
    newView productMasterView = \ProductMasterView ()
    newView artworkDescriptionPage = \ArtworkDescriptionPage ()
    newView artworkMinimaPage = \ArtworkMinimaPage ()
    newView artworkDataPage = \ArtworkDataPage ()
    newView pdfSettingsPage = \PDFSettingsPage ()
    newView generationLogPage = \GenerationLogPage ()
    hStack {
      vStack {
        Button (title: "Import Artwork…", size : .regular) {
          expandableWidth ()
          $hidden !root.mArtwork.none
          $run importArtworkAction 
        }
        Button (title: "Detach Artwork", size : .regular) {
          expandableWidth ()
          $hidden root.mArtwork.none
          $run detachArtworkAction 
        }
        Label (bold: yes, size : .regular) { expandableWidth () set (alignment: .center) $title root.mArtworkName }
        Button (title: "Generate Files", size : .regular) {
          expandableWidth ()
          $enabled !root.mArtwork.none & (root.boardInstances.count > 0) & !self.documentIsUnnamed
          $run generateProductFilesAction
        }
      }
      vStack {
        Label (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $title self.documentFileShouldBeRenamedErrorMessage
        }
        TextObserverView () {
          expandableWidth ()
          setNoBackground ()
          setNoVerticalScroller ()
          setNoHorizontalScroller ()
          $observedValue self.incorrectDocumentFileDetailedErrorMessage
        }
        space
      }
    }
    hStack $hidden !root.mArtwork.none {
      space
      vStack { space StaticLabel (title: "No Artwork", bold: yes, size : .regular, alignment: .center) space }
      space
    }
    vStack $hidden root.mArtwork.none {
      hStack {
        space
        SegmentedControlWithPages (documentView: view productMasterView, equalWidth: yes, size : .regular)
          [outlet mProductPageSegmentedControl] {
          addPage (title: "Artwork Description", tooltip: "", pageView: view artworkDescriptionPage)
          addPage (title: "Artwork Minima", tooltip: "", pageView: view artworkMinimaPage)
          addPage (title: "Artwork Data", tooltip: "", pageView: view artworkDataPage)
          addPage (title: "PDF Settings", tooltip: "", pageView: view pdfSettingsPage)
          addPage (title: "Generation Log", tooltip: "", pageView: view generationLogPage)
        }
        space
      }
      view productMasterView
    }
 }

  action importArtworkAction ;
  action detachArtworkAction ;
  action generateProductFilesAction ;
  transient Bool documentIsUnnamed dependsFrom self.documentFileName ;
  transient String incorrectDocumentFileDetailedErrorMessage dependsFrom self.documentFileName ;
  transient String documentFileShouldBeRenamedErrorMessage dependsFrom self.documentFileName ;

  //············································································

  stackView \ProductMasterView vStack { }

  //············································································

  stackView \ArtworkDescriptionPage vStack {
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Layer Description", bold: no, size: .regular, alignment: .right),
        right: Label (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $title root.layerConfigurationString
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Artwork Version", bold: no, size: .regular, alignment: .right),
        right: IntObserverField (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $observedValue root.mArtworkVersion
        }
      )
      addCenterYAligned (
        left: vStack {StaticLabel (title: "Comment", bold: no, size: .regular, alignment: .right) space },
        right: TextObserverView () { expandableWidth () $observedValue root.comments }
      )
    }
  }

  //············································································

  stackView \ArtworkDataPage vStack set (spacing: 0) {
    hStack set (margins: 8) {
      hStack setFirstBaselineAlignment ()  {
        StaticLabel (title: "Drill File Extension", bold: no, size : .small, alignment: .center)
        TextField (minWidth: 56, size : .small) { $value root.drillDataFileExtension (sendContinously: yes) }
      }
      ImageObserverView (size: .small) { $image self.emptyDrillFileExtensionImage }
      space
    }
    hStack set (leftMargin: 8) set (rightMargin: 8) {
      vStack set (topMargin: 8) {
        Label (bold: yes, size : .small) { $title self.generatedFileCountString }
        TableView (size : .small, addControlButtons: yes) { $tableValue #mDataController }
      }
      separator
      vStack set (topMargin: 8) {
        hStack {
          hStack setFirstBaselineAlignment () {
            StaticLabel (title: "File Extension", bold: yes, size : .small, alignment: .center)
            TextField (minWidth: 56, size : .small) { $value #mDataSelection.fileExtension (sendContinously: yes) }
          }
          ImageObserverView (size: .small) { $image #mDataSelection.emptyFileExtensionImage }
         space
         StaticLabel (title: "Empty Data File", bold: yes, size : .small, alignment: .center) { setOrangeTextColor () $hidden !#mDataSelection.hasNoData}
       }
        space
        StaticLabel (title: "Front Side Elements", bold: yes, size : .small, alignment: .left)
        hStack {
          GridView2 {
            set (leftMargin: 20)
            addFirstBaseLineAligned (
              left: Checkbox (title: "Legend Front Side Texts", size : .small) { $value #mDataSelection.drawTextsLegendTopSide },
              right: Checkbox (title: "Layout Front Side Texts", size : .small) { $value #mDataSelection.drawTextsLayoutTopSide }
            )
            addFirstBaseLineAligned (
              left: Checkbox (title: "Front Side Tracks", size : .small) { $value #mDataSelection.drawTracksTopSide },
              right: Checkbox (title: "Front Side Pads", size : .small) { $value #mDataSelection.drawPadsTopSide }
            )
          }
          space
        }
        hStack set (leftMargin: 20) { Checkbox (title: "Front Side Component Names", size : .small) { $value #mDataSelection.drawComponentNamesTopSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Front Side Component Values", size : .small) { $value #mDataSelection.drawComponentValuesTopSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Front Side Package Legends", size : .small) { $value #mDataSelection.drawPackageLegendTopSide } space }
        StaticLabel (title: "Inner Elements", bold: yes, size : .small, alignment: .left)
        hStack {
          GridView2 {
            set (leftMargin: 20)
            addFirstBaseLineAligned (
              left:  Checkbox (title: "Traversing Pads", size : .small) { $value #mDataSelection.drawTraversingPads $hidden !root.hasInnerElements },
              right: space
            )
            addFirstBaseLineAligned (  // Always disabled items
              left:  Checkbox (title: "Traversing Pads", size : .small) { $enabled root.hasInnerElements $hidden root.hasInnerElements },
              right: space
            )
           addFirstBaseLineAligned (
              left:  Checkbox (title: "Inner 1 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner1Layer $hidden !root.hasInnerElements },
              right: Checkbox (title: "Inner 2 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner2Layer $hidden !root.hasInnerElements }
            )
            addFirstBaseLineAligned (  // Always disabled items
              left:  Checkbox (title: "Inner 1 Layer Tracks", size : .small) { $enabled root.hasInnerElements $hidden root.hasInnerElements },
              right: Checkbox (title: "Inner 2 Layer Tracks", size : .small) { $enabled root.hasInnerElements $hidden root.hasInnerElements }
            )
            addFirstBaseLineAligned (
              left:  Checkbox (title: "Inner 3 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner3Layer $hidden !root.hasSixLayers },
              right: Checkbox (title: "Inner 4 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner4Layer $hidden !root.hasSixLayers }
            )
            addFirstBaseLineAligned ( // Always disabled items
              left:  Checkbox (title: "Inner 3 Layer Tracks", size : .small) { $enabled root.hasSixLayers $hidden root.hasSixLayers },
              right: Checkbox (title: "Inner 4 Layer Tracks", size : .small) { $enabled root.hasSixLayers $hidden root.hasSixLayers }
            )
          }
          space
        }
        StaticLabel (title: "Back Side Elements", bold: yes, size : .small, alignment: .center)
        hStack {
          GridView2 {
            set (leftMargin: 20)
            addFirstBaseLineAligned (
              left: Checkbox (title: "Legend Back Side Texts", size : .small) { $value #mDataSelection.drawTextsLegendBottomSide },
              right: Checkbox (title: "Layout Back Side Texts", size : .small) { $value #mDataSelection.drawTextsLayoutBottomSide }
            )
            addFirstBaseLineAligned (
              left: Checkbox (title: "Back Side Tracks", size : .small) { $value #mDataSelection.drawTracksBottomSide },
              right: Checkbox (title: "Back Side Pads", size : .small) { $value #mDataSelection.drawPadsBottomSide }
            )
          }
          space
        }
        hStack set (leftMargin: 20) { Checkbox (title: "Back Side Component Names", size : .small) { $value #mDataSelection.drawComponentNamesBottomSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Back Side Component Values", size : .small) { $value #mDataSelection.drawComponentValuesBottomSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Back Side Package Legends", size : .small) { $value #mDataSelection.drawPackageLegendBottomSide } space }
        StaticLabel (title: "Other Elements", bold: yes, size : .small, alignment: .center)
        hStack set (leftMargin: 20) {
          Checkbox (title: "Vias", size : .small) { $value #mDataSelection.drawVias }
          Checkbox (title: "Internal Board Limits", size : .small) { $value #mDataSelection.drawInternalBoardLimits }
          Checkbox (title: "Board Limits", size : .small) { $value #mDataSelection.drawBoardLimits }
          space
        }
        hStack set (leftMargin: 20) setFirstBaselineAlignment () {
          Checkbox (title: "Pad Holes in PDF file, with diameter", size : .small) { $value #mDataSelection.drawPadHolesInPDF }
          CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mDataSelection.padHoleDiameterInPDF, #mDataSelection.measurementUnitForPadHoleInPDF $enabled #mDataSelection.drawPadHolesInPDF }
          space
        }
        StaticLabel (title: "Option", bold: yes, size : .small, alignment: .center)
        hStack set (leftMargin: 20) { Checkbox (title: "Horizontal Mirror", size : .small) { $value #mDataSelection.horizontalMirror } space }
        space
      }
    }
  }

  transient NSImage emptyDrillFileExtensionImage dependsFrom self.emptyDrillFileExtension ;
  transient Bool emptyDrillFileExtension dependsFrom root.drillDataFileExtension ;
  transient String generatedFileCountString dependsFrom #mDataController.sortedArray.count ;

  tableViewController #mDataController (allowsEmptySelection:no, allowsMultipleSelection:no) root.fileGenerationParameterArray {
    editableColumn name (title: "Name", minWidth: 60, maxWidth: 200, headerAlignment: .left, contentAlignment: .left) sortkey name
    column parameterStatusImage (title: "", minWidth: 30, maxWidth: 30, headerAlignment: .center, contentAlignment: .center)
  }
  selectionController ArtworkFileGenerationParameters #mDataSelection : #mDataController.selectedArray ;

  //············································································

  stackView \ArtworkMinimaPage vStack {
    space
    hStack {
      space
      vStack {
        space
        StaticLabel (title: "PP: Pad to Pad Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TP: Track to Pad Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TT: Track to Track Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TW: Track Width", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "OAR: Outer Annular Ring", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: no, size : .small, alignment: .left)
        space
      }
      space
      StaticImageView (name: "artwork")
      space
    }
    space
    hStack {
      space
      GridView2 {
        set (leftMargin: 20) set (rightMargin: 20) set (topMargin: 8)
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: no, size : .regular, alignment: .center),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minPPTPTTTW, root.minPPTPTTTWdisplayUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for PHD", bold: no, size : .regular, alignment: .center),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForPHDinEBUnit, root.minValueForPHDdisplayUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for OAR", bold: no, size : .regular, alignment: .center),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForOARinEBUnit, root.minValueForOARdisplayUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for Board Limit Width", bold: no, size : .regular, alignment: .center),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForBoardLimitWidth, root.minValueForBoardLimitWidthDisplayUnit }
        )
      }
      space
    }
    space
  }

  //············································································

  stackView \PDFSettingsPage vStack set (margins: 20) {
    hStack setFirstBaselineAlignment () {
      space
      ColorWell { $color root.mPDFBoardBackgroundColor (sendContinously : no) }
      StaticLabel (title: "Board Background Color", bold: no, size: .regular, alignment: .center)
      space
    }
    space
  }

  //············································································

  stackView \GenerationLogPage vStack {
    TextObserverView () [outlet mLogTextView]
  }

  //············································································

}

//——————————————————————————————————————————————————————————————————————————————
