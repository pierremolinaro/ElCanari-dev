//----------------------------------------------------------------------------------------------------------------------
//     P A C K A G E    D O C U M E N T
//----------------------------------------------------------------------------------------------------------------------

autoLayoutDocument AutoLayoutPackageDocument root PackageRoot stackView \DocumentMainView {

//----------------------------------------------------------------------------------------------------------------------
//   MAIN VIEW
//----------------------------------------------------------------------------------------------------------------------
 
  stackView \PageMasterView vStack { }
 
  stackView \DocumentMainView vStack {
    newView pageMasterView = \PageMasterView ()
    newView modelImagePage = \ModelImagePage ()
    newView packagePage = \PackagePage ()
    newView programPage = \ProgramPage ()
    newView infosPage = \InfosPage ()
    hStack set (margins: .regular) {
      vStack {
        SegmentedControlWithPages (documentView: view pageMasterView, equalWidth: no, size: .regular) {
          addPage (title: "Model Image", tooltip: "Model Image Editor", pageView: view modelImagePage)
          addPage (title: "Package", tooltip: "Package Editor", pageView: view packagePage)
          addPage (title: "Program", tooltip: "Program Editor", pageView: view programPage)
          addPage (title: "Infos", tooltip: "Package Informations", pageView: view infosPage)
          $selectedPage root.selectedPageIndex
          $segmentImage self.segmentedControlPackageIssueImage (segmentIndex : 1)
        }
        StaticLabel (title: "Page", bold: no, size : .small, alignment: .center)
      }
      vStack {
        SignatureField (size : .regular) { $signature signature }
        StaticLabel (title: "Signature", bold: no, size : .small, alignment: .center)
      }
      vStack {
        VersionField (size : .regular) { $version version $versionShouldChange versionShouldChange }
        StaticLabel (title: "Version", bold: no, size : .small, alignment: .center)
      }
      space
      vStack {
        hStack {
          space
          StatusBadgeView () {
            $tooltip self.statusMessage
            $errorCount self.statusErrorCount
            $warningCount self.statusWarningCount
          }
          space
        }
        StaticLabel (title: "Status", bold: no, size : .small, alignment: .center)
      }
    }
    separator
    view pageMasterView
  }

  transient String statusMessage dependsFrom self.issues ;
  transient Int statusWarningCount dependsFrom self.issues ;
  transient Int statusErrorCount dependsFrom self.issues ;
  transient MetadataStatus metadataStatus dependsFrom self.issues ;

  transient NSImage segmentedControlPackageIssueImage dependsFrom
     self.issues
  ;

//----------------------------------------------------------------------------------------------------------------------
//   PAGE    MODEL IMAGE
//----------------------------------------------------------------------------------------------------------------------
  
  action lockImagePointsAction ;
  action loadModelImageFromPasteboardAction ;
  action loadDIL16ModelImageFromResourcesAction ;
  action removeModelImageAction ;
  action copyModelImageAction ;
  action resetModelImagePointsAction ;
  arrayController #mModelImageObjectsController : root.mModelImageObjects ;

  stackView \ModelImagePage hStack {
    vStack {
      GridView2 {
        set (width: 250) 
        set (leftMargin: .large) set (rightMargin: .large) set (topMargin: .regular)
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Grid Style", bold: no, size : .small, alignment: .right),
          right: EnumPopUpButton (titles: enum GridStyle.popupTitles, size: .small) { $selectedIndex root.mModelImagePageGridStyle}
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Grid Display", bold: no, size : .small, alignment: .right),
          right:
            TaggedPopUpButton (size: .small) {
              add (title: "1 Step", withTag: 1)
              add (title: "2 Steps", withTag: 2)
              add (title: "4 Steps", withTag: 4)
              add (title: "5 Steps", withTag: 5)
              add (title: "8 Steps", withTag: 8)
              add (title: "10 Steps", withTag: 10)
              add (title: "12 Steps", withTag: 12)
              add (title: "15 Steps", withTag: 15)
              add (title: "20 Steps", withTag: 20)
              add (title: "25 Steps", withTag: 25)
              add (title: "50 Steps", withTag: 50)
              add (title: "100 Steps", withTag: 100)
              add (title: "200 Steps", withTag: 200)
              $selectedTag root.mModelImagePageGridDisplayFactor
            }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Grid Step", bold: no, size : .small, alignment: .right),
          right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit root.mModelImagePageGridStep, root.mModelImagePageGridStepUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Flip", bold: no, size : .small, alignment: .right),
          right: Checkbox (title: "Horizontal", size : .small) {
            expandableWidth ()
            $value root.mModelImagePageHorizontalFlip
          }
        )
        addFirstBaseLineAligned (
          left: FlexibleSpace,
          right: Checkbox (title: "Vertical", size : .small) {
            expandableWidth () 
            $value root.mModelImagePageVerticalFlip
          }
        )
      }
      separator
      GridView2 {
        set (leftMargin: .large) set (rightMargin: .large)
        addFirstBaseLineAligned (
          left: StaticLabels (left: "Placard", right: "X", bold: no, size : .small),
          right: CanariUnitPopUpButton (size : .small) { $unit root.mModelImagePageXPlacardUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
          right: CanariUnitPopUpButton (size : .small) { $unit root.mModelImagePageYPlacardUnit }
        )
      }
      separator
      GridView2 {
        set (leftMargin: .large) set (rightMargin: .large)
        addFirstBaseLineAligned (
          left: PullDownButton (title: "Action", size : .small) {
            add (item: menuItem "Paste Model Image" $run loadModelImageFromPasteboardAction $enabled !root.hasModelImage)
            add (item: menuItem "Load DIL16 Embedded Model Image" $run loadDIL16ModelImageFromResourcesAction $enabled !root.hasModelImage)
            add (item: menuItem "Copy Model Image" $run copyModelImageAction $enabled root.hasModelImage)
            add (item: menuItem "Remove Model Image" $run removeModelImageAction $enabled root.hasModelImage)
            add (item: menuItem "Reset Green and Brown Points" $run resetModelImagePointsAction $enabled root.hasModelImage)
          },
          right: Label (bold: no, size : .small) { $title root.modelImageSizeString }
        )
        add (single: CanariDimensionUnitSetterPullDownButton (size : .small) {
           expandableWidth ()
           $hidden !root.hasModelImage
           $setter6 root.mDimensionUnitFirstModelPointX, root.mDimensionUnitFirstModelPointY,
             root.mDimensionUnitSecondModelPointDx, root.mDimensionUnitSecondModelPointDy,
             root.mModelImageSecondPointXUnit, root.mModelImageSecondPointYUnit
          }
        )
        addFirstBaseLineAligned (
          left: StaticLabels (left: "Green", right: "X", bold: no, size : .small) { $hidden !root.hasModelImage },
          right: CanariDimensionAndPopUp (size : .small) { $hidden !root.hasModelImage $dimensionAndUnit root.mModelImageFirstPointX, root.mDimensionUnitFirstModelPointX }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right) { $hidden !root.hasModelImage },
          right: CanariDimensionAndPopUp (size : .small) { $hidden !root.hasModelImage $dimensionAndUnit root.mModelImageFirstPointY, root.mDimensionUnitFirstModelPointY }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "∆X", bold: no, size : .small, alignment: .right) { $hidden !root.hasModelImage },
          right: CanariDimensionAndPopUp (size : .small) { $hidden !root.hasModelImage $dimensionAndUnit root.mModelImageSecondPointDx, root.mDimensionUnitSecondModelPointDx }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "∆Y", bold: no, size : .small, alignment: .right) { $hidden !root.hasModelImage },
          right: CanariDimensionAndPopUp (size : .small) { $hidden !root.hasModelImage $dimensionAndUnit root.mModelImageSecondPointDy, root.mDimensionUnitSecondModelPointDy }
        )
        addFirstBaseLineAligned (
          left: StaticLabels (left: "Brown", right: "X", bold: no, size : .small) { $hidden !root.hasModelImage },
          right: CanariObservedDimensionAndPopUp (size : .small) { $hidden !root.hasModelImage $dimensionAndUnit root.secondPointX, root.mModelImageSecondPointXUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right) { $hidden !root.hasModelImage },
          right: CanariObservedDimensionAndPopUp (size : .small) { $hidden !root.hasModelImage $dimensionAndUnit root.secondPointY, root.mModelImageSecondPointYUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "PointSize", bold: no, size : .small, alignment: .right) { $hidden !root.hasModelImage },
          right: LinearSlider (min:1, max:61, ticks: 19) {
            $intValue root.mModelPointsCircleRadius (sendContinously : yes)
            $hidden !root.hasModelImage
          }
        )
        add (single:
          hStack {
            Button (title: "Lock Points to Model Image", size : .small) {
              $enabled !root.mPointsAreLocked & root.hasModelImage
              $run lockImagePointsAction
              $hidden !root.hasModelImage
            }
            space
            ImageObserverView (size : .small) { $hidden !root.hasModelImage $image root.lockImageView }
          }
        )
      }
      space
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 12_000) {
      $backgroundImageData root.mModelImageData
      $underObjectsDisplay root.backgroundImagePageBackgroundDisplay
      $horizontalFlip root.mModelImagePageHorizontalFlip
      $verticalFlip root.mModelImagePageVerticalFlip
      $graphicController #mModelImageObjectsController
      $mouseGrid root.mModelImagePageGridStep
      $gridStep root.mModelImagePageGridStep
      $arrowKeyMagnitude root.mModelImagePageGridStep
      $gridStyle root.mModelImagePageGridStyle
      $gridDisplayFactor root.mModelImagePageGridDisplayFactor
      $gridLineColor prefs.lineColorOfPackageGrid
      $gridCrossColor prefs.crossColorOfPackageGrid
      $zoom root.mModelImagePageZoom
      $backColor prefs.packageBackgroundColor
      $xPlacardUnit root.mModelImagePageXPlacardUnit
      $yPlacardUnit root.mModelImagePageYPlacardUnit
    }
  }

//----------------------------------------------------------------------------------------------------------------------
//   PAGE   PACKAGE
//----------------------------------------------------------------------------------------------------------------------

  arrayController #mPackageObjectsController : root.packageObjects ;
  transient NSImage addSegmentButtonImage dependsFrom prefs.packageColor ;
  transient NSImage addBezierButtonImage dependsFrom prefs.packageColor ;
  transient NSImage addOvalButtonImage dependsFrom prefs.packageColor ;
  transient NSImage addArcButtonImage dependsFrom prefs.packageColor ;
  transient NSImage addMasterPadButtonImage dependsFrom prefs.frontSidePadColor ;
  transient NSImage addSlavePadButtonImage dependsFrom prefs.frontSidePadColor ;
  transient NSImage addGuideButtonImage dependsFrom prefs.packageGuideColor ;
  transient NSImage addDimensionButtonImage dependsFrom prefs.packageDimensionColor ;
  transient NSImage addZoneButtonImage dependsFrom prefs.padZoneColor ;

  stackView \PackagePageInspectorMasterView vStack { }
  
  stackView \PackagePage hStack {
    newView packagePageInspectorMasterView = \PackagePageInspectorMasterView ()
    newView selectedObjectsInspectorView = \SelectedObjectsInspectorView ()
    newView gridZoomInspectorView = \GridZoomInspectorView ()
    newView displayInspectorView = \DisplayInspectorView ()
    newView issuesInspectorView = \IssuesInspectorView ()
    vStack set (width: 250) {
      vStack set (leftMargin: .large) set (rightMargin: .large) set (topMargin: .regular) set (spacing: .large) {
        hStack {
          DragSourceButton (tooltip: "Add Segment") [configurator addPackageSegment] { $image self.addSegmentButtonImage }
          space
          DragSourceButton (tooltip: "Add Bezier") [configurator addPackageBezier] { $image self.addBezierButtonImage }
          space
          DragSourceButton (tooltip: "Add Oval") [configurator addPackageOval] { $image self.addOvalButtonImage }
          space
          DragSourceButton (tooltip: "Add Arc") [configurator addPackageArc] { $image self.addArcButtonImage }
          space
          DragSourceButton (tooltip: "Add Master Pad") [configurator addPackageMasterPad] { $image self.addMasterPadButtonImage }
          space
          DragSourceButton (tooltip: "Add Slave Pad") [configurator addPackageSlavePad] { $image self.addSlavePadButtonImage $enabled root.packagePads.count > 0 }
          space
          DragSourceButton (tooltip: "Add Zone") [configurator addPackageZone] { $image self.addZoneButtonImage }
          space
          DragSourceButton (tooltip: "Add Guide") [configurator addPackageGuide] { $image self.addGuideButtonImage }
          space
          DragSourceButton (tooltip: "Add Dimension") [configurator addPackageDimension] { $image self.addDimensionButtonImage }
        }
        GridView2 {
          addCenterYAligned (
            left: StaticLabel (title: "Model Image Opacity", bold: no, size : .small, alignment: .center),
            right: LinearSlider (min:0, max:1, ticks: 11) {
              $doubleValue root.mModelImageOpacity (sendContinously:yes)
              $enabled root.hasModelImage
            }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Auto Numbering", bold: no, size : .small, alignment: .center),
            right: EnumPopUpButton (titles: enum PadNumbering.popupTitles, size: .small) {$selectedIndex root.padNumbering}
          ) 
          addFirstBaseLineAligned (
            left: space,
            right: hStack {
               StaticLabel (title: "From", bold: no, size : .small, alignment: .center) { $hidden !root.counterClockNumbering}
               IntField (minWidth: 45, size : .small) {
                 set (min: 0)
                 set (max: 360)
                 set (format: "##0°")
                 $value root.counterClockNumberingStartAngle (sendContinously : yes)
                 $hidden !root.counterClockNumbering
               }
            }
          ) 
        }
      }
      separator
      vStack set (leftMargin: .large) set (rightMargin: .large) {
       SegmentedControlWithPages (documentView: view packagePageInspectorMasterView, equalWidth: yes, size : .small)
          [configurator packagePageSegmentedControl] {
          expandableWidth ()
          addPage (title: "🛠", tooltip: "Selected Object Inspector", pageView: view selectedObjectsInspectorView)
          addPage (title: "🔍", tooltip: "Grid / Zoom Inspector", pageView: view gridZoomInspectorView)
          addPage (title: "🔍P", tooltip: "Display Inspector (values stored in Application Preferences)", pageView: view displayInspectorView)
          addPage (title: "", tooltip: "Issue Inspector", pageView: view issuesInspectorView)
          $selectedPage root.selectedInspector
          $segmentImage self.segmentedControlSegmentIssueImage (segmentIndex : 3)
          $segmentTitle self.segmentedControlSegmentIssueString (segmentIndex : 3)
        }
      }
      vStack set (leftMargin: .large) set (rightMargin: .large) set (spacing: .large) {
        view packagePageInspectorMasterView
      }
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 12_000) [outlet mPackageGraphicView configurator packageGraphicView]{
      $foregroundImageData root.mModelImageData
      $foregroundImageOpacity root.mModelImageOpacity
      $horizontalFlip root.horizontalFlip
      $verticalFlip root.verticalFlip
      $graphicController #mPackageObjectsController
      $overObjectsDisplay root.padNumberDisplay
      $mouseGrid root.gridStep
      $gridStep root.gridStep
      $arrowKeyMagnitude root.gridStep
      $shiftArrowKeyMagnitude root.gridStepMultipliedByDisplayFactor
      $gridStyle root.gridStyle
      $gridDisplayFactor root.gridDisplayFactor
      $gridLineColor prefs.lineColorOfPackageGrid
      $gridCrossColor prefs.crossColorOfPackageGrid
      $zoom root.zoom
      $backColor prefs.packageBackgroundColor
      $xPlacardUnit root.xPlacardUnit
      $yPlacardUnit root.yPlacardUnit
    }
  }

//----------------------------------------------------------------------------------------------------------------------
//   Issues
//----------------------------------------------------------------------------------------------------------------------

  stackView \IssuesInspectorView vStack {
    hStack { space Label (bold: no, size : .small) { $title self.statusMessage} space }
    CanariIssueTableView (hasHideIssueButton: yes) [outlet mPackageIssueTableView] { $issues self.issues }
  }

  transient CanariIssueArray issues dependsFrom root.issues, self.documentFileName ;
  transient Bool noIssue dependsFrom self.issues ;
  transient NSImage segmentedControlSegmentIssueImage dependsFrom self.issues ;
  transient String segmentedControlSegmentIssueString dependsFrom self.issues ;

  linker issueTableViewToGraphicView (mPackageIssueTableView, mPackageGraphicView)

//----------------------------------------------------------------------------------------------------------------------
//   Object inspector
//----------------------------------------------------------------------------------------------------------------------

  stackView \SelectedObjectsInspectorView vStack {
    newView segmentInspectorView = \SegmentInspectorView ()
    newView bezierCurveInspectorView = \BezierCurveInspectorView ()
    newView ovalInspectorView = \OvalInspectorView ()
    newView arcInspectorView = \ArcInspectorView ()
    newView masterPadInspectorView = \MasterPadInspectorView ()
    newView slavePadInspectorView = \SlavePadInspectorView ()
    newView guideInspectorView = \GuideInspectorView ()
    newView dimensionInspectorView = \DimensionInspectorView ()
    newView zoneInspectorView = \ZoneInspectorView ()
    ObjectInspectorView {
      addObjectInspector (forEntity: entity PackageSegment, inspectorView: view segmentInspectorView)
      addObjectInspector (forEntity: entity PackageBezier, inspectorView: view bezierCurveInspectorView)
      addObjectInspector (forEntity: entity PackageOval, inspectorView: view ovalInspectorView)
      addObjectInspector (forEntity: entity PackageArc, inspectorView: view arcInspectorView)
      addObjectInspector (forEntity: entity PackagePad, inspectorView: view masterPadInspectorView)
      addObjectInspector (forEntity: entity PackageSlavePad, inspectorView: view slavePadInspectorView)
      addObjectInspector (forEntity: entity PackageGuide, inspectorView: view guideInspectorView)
      addObjectInspector (forEntity: entity PackageDimension, inspectorView: view dimensionInspectorView)
      addObjectInspector (forEntity: entity PackageZone, inspectorView: view zoneInspectorView)
      $graphicController #mPackageObjectsController
    }
    space
  }

//--- Segment inspector
  selectionController PackageSegment #mPackageSegmentSelectionController : #mPackageObjectsController.selectedArray ;

  stackView \SegmentInspectorView vStack {
    StaticLabel (title: "Segment Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      add (single: CanariDimensionUnitSetterPullDownButton (size : .small) { $setter5
         #mPackageSegmentSelectionController.x1Unit, #mPackageSegmentSelectionController.y1Unit,
         #mPackageSegmentSelectionController.x2Unit, #mPackageSegmentSelectionController.y2Unit,
         #mPackageSegmentSelectionController.lengthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "First", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mPackageSegmentSelectionController.x1, #mPackageSegmentSelectionController.x1Unit }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mPackageSegmentSelectionController.y1, #mPackageSegmentSelectionController.y1Unit }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Second", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mPackageSegmentSelectionController.x2, #mPackageSegmentSelectionController.x2Unit }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mPackageSegmentSelectionController.y2, #mPackageSegmentSelectionController.y2Unit }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Length", bold: no, size : .small, alignment: .right),
        right: CanariObservedDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageSegmentSelectionController.lengthInCanariUnit, #mPackageSegmentSelectionController.lengthUnit
         }
      )
    }
  }

//--- Bezier Curve inspector
  selectionController PackageBezier #mPackageBezierCurveSelectionController : #mPackageObjectsController.selectedArray ;

  stackView \BezierCurveInspectorView vStack {
    StaticLabel (title: "Bezier Curve Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      add (single: CanariDimensionUnitSetterPullDownButton (size : .small) { $setter8
         #mPackageBezierCurveSelectionController.x1Unit, #mPackageBezierCurveSelectionController.y1Unit,
         #mPackageBezierCurveSelectionController.x2Unit, #mPackageBezierCurveSelectionController.y2Unit,
         #mPackageBezierCurveSelectionController.cpx1Unit, #mPackageBezierCurveSelectionController.cpy1Unit,
         #mPackageBezierCurveSelectionController.cpx2Unit, #mPackageBezierCurveSelectionController.cpy2Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "First", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageBezierCurveSelectionController.x1, #mPackageBezierCurveSelectionController.x1Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageBezierCurveSelectionController.y1, #mPackageBezierCurveSelectionController.y1Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Second", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageBezierCurveSelectionController.x2, #mPackageBezierCurveSelectionController.x2Unit
         }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageBezierCurveSelectionController.y2, #mPackageBezierCurveSelectionController.y2Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "First Ctrl", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageBezierCurveSelectionController.cpx1, #mPackageBezierCurveSelectionController.cpx1Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageBezierCurveSelectionController.cpy1, #mPackageBezierCurveSelectionController.cpy1Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Second Ctrl", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageBezierCurveSelectionController.cpx2, #mPackageBezierCurveSelectionController.cpx2Unit
         }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageBezierCurveSelectionController.cpy2, #mPackageBezierCurveSelectionController.cpy2Unit
        }
      )
    }
  }

//------- Oval inspector
  selectionController PackageOval #mPackageOvalSelectionController : #mPackageObjectsController.selectedArray ;

  stackView \OvalInspectorView vStack {
    StaticLabel (title: "Oval Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      add (single: CanariDimensionUnitSetterPullDownButton (size : .small) { $setter4
         #mPackageOvalSelectionController.xUnit, #mPackageOvalSelectionController.yUnit,
         #mPackageOvalSelectionController.widthUnit, #mPackageOvalSelectionController.heightUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Bottom Left", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small){
          $dimensionAndUnit #mPackageOvalSelectionController.x, #mPackageOvalSelectionController.xUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageOvalSelectionController.y, #mPackageOvalSelectionController.yUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Width", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageOvalSelectionController.width, #mPackageOvalSelectionController.widthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Height", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageOvalSelectionController.height, #mPackageOvalSelectionController.heightUnit
        }
      )
    }
  }

//------- Arc inspector
  selectionController PackageArc #mPackageArcSelectionController : #mPackageObjectsController.selectedArray ;

  stackView \ArcInspectorView vStack {
    StaticLabel (title: "Arc Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      add (single: CanariDimensionUnitSetterPullDownButton (size : .small) { $setter5
         #mPackageArcSelectionController.xCenterUnit, #mPackageArcSelectionController.yCenterUnit,
         #mPackageArcSelectionController.radiusUnit, #mPackageArcSelectionController.startTangentUnit,
         #mPackageArcSelectionController.endTangentUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Center", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackageArcSelectionController.xCenter, #mPackageArcSelectionController.xCenterUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageArcSelectionController.yCenter, #mPackageArcSelectionController.yCenterUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Radius", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageArcSelectionController.radius, #mPackageArcSelectionController.radiusUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Start Angle", bold: no, size : .small, alignment: .right),
        right: CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
          $angle #mPackageArcSelectionController.startAngle
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Angle", bold: no, size : .small, alignment: .right),
        right: CanariAngleField (minWidth: 64, size: .small) {
          $angle #mPackageArcSelectionController.arcAngle
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Start Tangent", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageArcSelectionController.startTangent, #mPackageArcSelectionController.startTangentUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "End Tangent", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackageArcSelectionController.endTangent, #mPackageArcSelectionController.endTangentUnit
        }
      )
    }
    hStack { Checkbox (title: "Path is Closed", size : .small) { $value #mPackageArcSelectionController.pathIsClosed } space }
  }


//------- Guide inspector
  selectionController PackageGuide #mPackageGuideSelectionController : #mPackageObjectsController.selectedArray ;

  stackView \GuideInspectorView vStack {
    StaticLabel (title: "Guide Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      add (single: CanariDimensionUnitSetterPullDownButton (size : .small) { $setter4
         #mPackageGuideSelectionController.x1Unit, #mPackageGuideSelectionController.y1Unit,
         #mPackageGuideSelectionController.x2Unit, #mPackageGuideSelectionController.y2Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "First", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mPackageGuideSelectionController.x1, #mPackageGuideSelectionController.x1Unit }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mPackageGuideSelectionController.y1, #mPackageGuideSelectionController.y1Unit }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Second", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mPackageGuideSelectionController.x2, #mPackageGuideSelectionController.x2Unit }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mPackageGuideSelectionController.y2, #mPackageGuideSelectionController.y2Unit }
      )
    }
  }
//------- Dimension inspector
  selectionController PackageDimension #mPackageDimensionSelectionController : #mPackageObjectsController.selectedArray ;

  stackView \DimensionInspectorView vStack {
    StaticLabel (title: "Dimension Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      add (single: CanariDimensionUnitSetterPullDownButton (size : .small) { $setter7
         #mPackageDimensionSelectionController.x1Unit, #mPackageDimensionSelectionController.y1Unit,
         #mPackageDimensionSelectionController.x2Unit, #mPackageDimensionSelectionController.y2Unit,
         #mPackageDimensionSelectionController.distanceUnit, #mPackageDimensionSelectionController.xDimensionUnit,
         #mPackageDimensionSelectionController.yDimensionUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "First", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageDimensionSelectionController.x1, #mPackageDimensionSelectionController.x1Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageDimensionSelectionController.y1, #mPackageDimensionSelectionController.y1Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Second", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageDimensionSelectionController.x2, #mPackageDimensionSelectionController.x2Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageDimensionSelectionController.y2, #mPackageDimensionSelectionController.y2Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Distance", bold: no, size : .small, alignment: .right),
        right: CanariObservedDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageDimensionSelectionController.distanceInCanariUnit, #mPackageDimensionSelectionController.distanceUnit
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Label", right: "∆X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageDimensionSelectionController.xDimension, #mPackageDimensionSelectionController.xDimensionUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "∆Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageDimensionSelectionController.yDimension, #mPackageDimensionSelectionController.yDimensionUnit
        }
      )
    }
    hStack {
      Checkbox (title: "Draw Label Background", size : .small) { $value #mPackageDimensionSelectionController.drawDimensionBackground }
      space
    }
    Button (title: "Set Label at Mid X", size : .small) { expandableWidth () $run setDimensionTextOriginAtMidXAction }
    Button (title: "Set Label at Mid Y", size : .small) { expandableWidth () $run setDimensionTextOriginAtMidYAction }
  }


  action setDimensionTextOriginAtMidXAction ;
  action setDimensionTextOriginAtMidYAction ;

//------- Zone inspector
  selectionController PackageZone #mPackageZoneSelectionController : #mPackageObjectsController.selectedArray ;

  stackView \ZoneInspectorView vStack {
    StaticLabel (title: "Zone Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      add (single: CanariDimensionUnitSetterPullDownButton (size : .small) { $setter6
         #mPackageZoneSelectionController.xUnit, #mPackageZoneSelectionController.yUnit,
         #mPackageZoneSelectionController.widthUnit, #mPackageZoneSelectionController.heightUnit,
         #mPackageZoneSelectionController.xNameUnit, #mPackageZoneSelectionController.yNameUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Bottom Left", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageZoneSelectionController.x, #mPackageZoneSelectionController.xUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageZoneSelectionController.y, #mPackageZoneSelectionController.yUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Width", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageZoneSelectionController.width, #mPackageZoneSelectionController.widthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Height", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageZoneSelectionController.height, #mPackageZoneSelectionController.heightUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Label", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageZoneSelectionController.xName, #mPackageZoneSelectionController.xNameUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageZoneSelectionController.yName, #mPackageZoneSelectionController.yNameUnit
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Name", bold: no, size : .small, alignment: .right),
        right: TextField (minWidth: 56, size : .small) {
          $value #mPackageZoneSelectionController.zoneName (sendContinously: yes)
        }
      )
      add (
        single: Checkbox (title: "Show Zone Name", size : .small) {
          expandableWidth ()
          $value #mPackageZoneSelectionController.displayZoneName
        }
      )
      add (
        single: Checkbox (title: "Show Zone Name with Pad Numbers", size : .small) {
          expandableWidth ()
          $value #mPackageZoneSelectionController.displayZoneNameWithPadNumbers
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Auto Numbering", bold: no, size : .small, alignment: .center),
        right: EnumPopUpButton (titles: enum PadNumbering.popupTitles, size: .small) {
          $selectedIndex #mPackageZoneSelectionController.zoneNumbering
        }
      )
      addSeparator ()
    }
    hStack {
      vStack {
        Button (title: "+", size : .small) { set (width: 32) $run addZoneForbiddenPadNumberAction }
        Button (title: "-", size : .small) {
          set (width: 32)
          $run removeZoneForbiddenPadNumberAction
          $enabled !#mPackageZoneSelectionController.emptyForbiddenPadArray
        }
        space
      }
      OneStringArrayTableView [outlet mZoneForbiddenPadNumberTableView] { $array #mPackageZoneSelectionController.forbiddenPadArray }
    }
  }

  action addZoneForbiddenPadNumberAction ;
  action removeZoneForbiddenPadNumberAction ;

//------- Pad inspector
  selectionController PackagePad #mPackagePadSelectionController : #mPackageObjectsController.selectedArray ;

  stackView \MasterPadInspectorView vStack {
    StaticLabel (title: "Master Pad Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      add (single: CanariDimensionUnitSetterPullDownButton (size : .small) { $setter7
         #mPackagePadSelectionController.xCenterUnit, #mPackagePadSelectionController.yCenterUnit,
         #mPackagePadSelectionController.widthUnit, #mPackagePadSelectionController.heightUnit,
         #mPackagePadSelectionController.holeWidthUnit, #mPackagePadSelectionController.holeHeightUnit,
         #mPackagePadSelectionController.annularRingUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Center", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackagePadSelectionController.xCenter, #mPackagePadSelectionController.xCenterUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackagePadSelectionController.yCenter, #mPackagePadSelectionController.yCenterUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Width", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackagePadSelectionController.width, #mPackagePadSelectionController.widthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Height", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackagePadSelectionController.height, #mPackagePadSelectionController.heightUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Shape", bold: no, size : .small, alignment: .right),
        right: EnumPopUpButton (titles: enum PadShape.popupTitles, size: .small) {
          $selectedIndex #mPackagePadSelectionController.padShape
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Style", bold: no, size : .small, alignment: .right),
        right: EnumPopUpButton (titles: enum PadStyle.popupTitles, size: .small) {
          $selectedIndex #mPackagePadSelectionController.padStyle
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Hole Width", bold: no, size : .small, alignment: .right) { $hidden !#mPackagePadSelectionController.padIsTraversing },
        right: CanariDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackagePadSelectionController.holeWidth, #mPackagePadSelectionController.holeWidthUnit
          $hidden !#mPackagePadSelectionController.padIsTraversing
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Hole Height", bold: no, size : .small, alignment: .right) { $hidden !#mPackagePadSelectionController.padIsTraversing },
        right: CanariDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackagePadSelectionController.holeHeight, #mPackagePadSelectionController.holeHeightUnit
          $hidden !#mPackagePadSelectionController.padIsTraversing
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Annular Ring", bold: no, size : .small, alignment: .right) { $hidden !#mPackagePadSelectionController.padIsTraversing },
        right: CanariObservedDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackagePadSelectionController.annularRing, #mPackagePadSelectionController.annularRingUnit
          $hidden !#mPackagePadSelectionController.padIsTraversing
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Zone", bold: no, size : .small, alignment: .right),
        right: Label (bold: yes, size : .small) { $title #mPackagePadSelectionController.zoneName }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Pad Number", bold: no, size : .small, alignment: .right),
        right: IntObserverField (bold: yes, size : .small) { $observedValue #mPackagePadSelectionController.padNumber }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Slave Pads", bold: no, size : .small, alignment: .right),
        right: IntObserverField (bold: yes, size : .small) { $observedValue #mPackagePadSelectionController.slavePadCount }
      )
      add (
        single : CanariPadRenumberPullDownButton [configurator configurePadRenumberPullDownButton] {
          $currentNumber #mPackagePadSelectionController.padNumber
          $currentZoneName #mPackagePadSelectionController.zoneName
          $enabled (#mPackagePadSelectionController.noZone & root.freePadNumbering) | #mPackagePadSelectionController.zoneAllowsManualRenumbering
        } 
      )
    }
  }


//------- Slave Pad inspector
  selectionController PackageSlavePad #mPackageSlavePadSelectionController : #mPackageObjectsController.selectedArray ;

  stackView \SlavePadInspectorView vStack {
    StaticLabel (title: "Slave Pad Inspector", bold: yes, size : .small, alignment: .center)
    GridView2 {
      add (single: CanariDimensionUnitSetterPullDownButton (size : .small) { $setter7
         #mPackageSlavePadSelectionController.xCenterUnit, #mPackageSlavePadSelectionController.yCenterUnit,
         #mPackageSlavePadSelectionController.widthUnit, #mPackageSlavePadSelectionController.heightUnit,
         #mPackageSlavePadSelectionController.holeWidthUnit, #mPackageSlavePadSelectionController.holeHeightUnit,
         #mPackageSlavePadSelectionController.annularRingUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Center", right: "X", bold: no, size : .small),
        right: CanariDimensionAndPopUp(size : .small) {
          $dimensionAndUnit #mPackageSlavePadSelectionController.xCenter, #mPackageSlavePadSelectionController.xCenterUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageSlavePadSelectionController.yCenter, #mPackageSlavePadSelectionController.yCenterUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Width", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageSlavePadSelectionController.width, #mPackageSlavePadSelectionController.widthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Height", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageSlavePadSelectionController.height, #mPackageSlavePadSelectionController.heightUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Shape", bold: no, size : .small, alignment: .right),
        right: EnumPopUpButton (titles: enum PadShape.popupTitles, size: .small) {
          $selectedIndex #mPackageSlavePadSelectionController.padShape
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Style", bold: no, size : .small, alignment: .right),
        right: EnumPopUpButton (titles: enum SlavePadStyle.popupTitles, size: .small) {
          $selectedIndex #mPackageSlavePadSelectionController.padStyle
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Hole Width", bold: no, size : .small, alignment: .right) { $hidden !#mPackageSlavePadSelectionController.padIsTraversing },
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageSlavePadSelectionController.holeWidth, #mPackageSlavePadSelectionController.holeWidthUnit
          $hidden !#mPackageSlavePadSelectionController.padIsTraversing
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Hole Height", bold: no, size : .small, alignment: .right) { $hidden !#mPackageSlavePadSelectionController.padIsTraversing },
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageSlavePadSelectionController.holeHeight, #mPackageSlavePadSelectionController.holeHeightUnit
          $hidden !#mPackageSlavePadSelectionController.padIsTraversing
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Annular Ring", bold: no, size : .small, alignment: .right) { $hidden !#mPackageSlavePadSelectionController.padIsTraversing },
        right: CanariObservedDimensionAndPopUp (size : .small) {
          $dimensionAndUnit #mPackageSlavePadSelectionController.annularRing, #mPackageSlavePadSelectionController.annularRingUnit
          $hidden !#mPackageSlavePadSelectionController.padIsTraversing
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Linked to Pad", bold: no, size : .small, alignment: .right),
        right: CanariSlavePadAssignPopUpButton [configurator configureSlavePadAssignPopUpButton] {
          $masterPadName #mPackageSlavePadSelectionController.masterPadNameWithZoneName
          $masterPadObjectIndexArray root.masterPadObjectIndexArray
        }
      )
    }
  }

//----------------------------------------------------------------------------------------------------------------------
//   Zoom and flip inspector
//----------------------------------------------------------------------------------------------------------------------

  stackView \GridZoomInspectorView vStack {
    StaticLabel (title: "(Stored in Document Preferences)", bold: no, size: .mini, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Style", bold: no, size : .small, alignment: .right),
        right: EnumPopUpButton (titles: enum GridStyle.popupTitles, size: .small) { $selectedIndex root.gridStyle}
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Display", bold: no, size : .small, alignment: .right),
        right:  TaggedPopUpButton (size: .small) {
          add (title: "1 Step", withTag: 1)
          add (title: "2 Steps", withTag: 2)
          add (title: "4 Steps", withTag: 4)
          add (title: "5 Steps", withTag: 5)
          add (title: "8 Steps", withTag: 8)
          add (title: "10 Steps", withTag: 10)
          $selectedTag root.gridDisplayFactor
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Step", bold: no, size : .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit root.gridStep, root.gridStepUnit }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Flip", bold: no, size : .small, alignment: .right),
        right: Checkbox (title: "Horizontal", size : .small) { expandableWidth ()  $value root.horizontalFlip }
      )
      addFirstBaseLineAligned (
        left: FlexibleSpace,
        right: Checkbox (title: "Vertical", size : .small) { expandableWidth ()  $value root.verticalFlip }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Placard", right: "X", bold: no, size : .small),
        right: CanariUnitPopUpButton (size : .small) { $unit root.xPlacardUnit }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size : .small, alignment: .right),
        right: CanariUnitPopUpButton(size : .small) { $unit root.yPlacardUnit }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Knob Size", bold: no, size : .small, alignment: .right),
        right: LinearSlider (min:7, max:41, ticks: 18) {
          expandableWidth ()
          $intValue root.knobSizeMultpliedByTen (sendContinously : yes)
        }
      )
    }
    space
  }

//--- Display inspector

  stackView \DisplayInspectorView vStack {
    StaticLabel (title: "(Stored in Application Preferences)", bold: no, size: .mini, alignment: .center)
    GridView2 {
      addCenterYAligned (
        left: StaticLabel (title: "Background", bold: no, size : .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.packageBackgroundColor } space }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Cross Grid", bold: no, size : .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.crossColorOfPackageGrid } space }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Line Grid", bold: no, size : .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.lineColorOfPackageGrid } space }
      )
      addSeparator ()
      addCenterYAligned (
        left: StaticLabel (title: "Package", bold: no, size : .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.packageColor } space }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Line Width", bold: no, size : .small, alignment: .center),
        right: TaggedPopUpButton (size: .small) {
          add (title: "0.5 Point", withTag: 5)
          add (title: "1.0 Point", withTag: 10)
          add (title: "1.5 Point", withTag: 15)
          add (title: "2.0 Points", withTag: 20)
          add (title: "2.5 Points", withTag: 25)
          $selectedTag prefs.packageDrawingWidthMultipliedByTen
        }
      )
      addSeparator ()
      addCenterYAligned (
        left: StaticLabel (title: "Pad Numbering", bold: no, size : .small, alignment: .center),
        right: hStack setCenterYAlignment () {
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.padNumberColor }
          Checkbox (title: "Show", size : .small) { expandableHeight () $value prefs.showPadNumber }
          space
        }
      )
      add (single: StaticLabel (title: "Pad Font", bold: no, size : .small, alignment: .left) )
      add (single: FontButton (width: 125, size : .small) { $fontValue prefs.padNumberFont } )
      addCenterYAligned (
        left: StaticLabel (title: "Top Side Pads", bold: no, size : .small, alignment: .center),
        right: hStack setCenterYAlignment () {
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.frontSidePadColor }
          Checkbox (title: "Show", size : .small) { expandableHeight () $value prefs.displayPackageFrontSidePads }
          space
        }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Back Side Pads", bold: no, size : .small, alignment: .center),
        right: hStack setCenterYAlignment () {
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.backSidePadColor }
          Checkbox (title: "Show", size : .small) { expandableHeight () $value prefs.displayPackageBackSidePads }
          space
        }
      )
      addSeparator ()
      addCenterYAligned (
        left: StaticLabel (title: "Guide Color", bold: no, size : .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.packageGuideColor } space }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Dimension Color", bold: no, size : .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.packageDimensionColor } space }
      )
      add (single: StaticLabel (title: "Dimension Font", bold: no, size : .small, alignment: .left) )
      add (single: FontButton (width: 125, size : .small) {$fontValue prefs.dimensionFont})
      addSeparator ()
      addCenterYAligned (
        left: StaticLabel (title: "Zone Color", bold: no, size : .small, alignment: .center),
        right: hStack {
          ColorWell { set (toolTip: "Stored in Preferences") $color prefs.padZoneColor }
          space
        }
      )
    }
    space
  }

//----------------------------------------------------------------------------------------------------------------------
//   PAGE   PROGRAM
//----------------------------------------------------------------------------------------------------------------------

  stackView \ProgramPage vStack set (leftMargin: .large) set (rightMargin: .large) set (bottomMargin: .large) set (topMargin: .regular) {
    hStack {
      Button (title: "Load from Design", size : .small) { $run loadFromDesignAction }
      Button (title: "Run", size : .small) { $run runProgramAction }
      Button (title: "Clear Error", size : .small) { $run clearProgramErrorAction  }
      Label (bold: no, size : .small) [outlet mProgramErrorTextField] { setRedTextColor () }
      space
      HelpButton (size : .small) { $run programHelpAction }
    }
    TextView [outlet mProgramTextView] { $value root.program }
  }

  action programHelpAction ;
  action loadFromDesignAction ;
  action runProgramAction ;
  action clearProgramErrorAction ;

//----------------------------------------------------------------------------------------------------------------------
//   PAGE   INFOS
//----------------------------------------------------------------------------------------------------------------------

  stackView \InfosPage vStack set (leftMargin: .large) set (rightMargin: .large) set (bottomMargin: .large) set (topMargin: .regular) {
    hStack {
      Button (title: "Reset Version and Signature", size : .small) { $run resetVersionAction }
      space
    }
    hStack {
      vStack { StaticLabel (title: "Comments", bold: no, size: .regular, alignment: .center) space }
      TextView { $value root.comments }
    }
  }

  action resetVersionAction ;
}

//----------------------------------------------------------------------------------------------------------------------
