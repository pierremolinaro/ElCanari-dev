//------------------------------------------------------------------------------
//     P R O J E C T    D O C U M E N T
//------------------------------------------------------------------------------

autoLayoutDocument AutoLayoutProjectDocument : AutoLayoutProjectDocumentSuperClass root ProjectRoot stackView \DocumentMainView {

  stackView \pageMasterView vStack { }

  stackView \DocumentMainView vStack set (spacing: 0) {
    newView pageMasterView = \pageMasterView ()
    newView componentsPage = \componentsPage ()
    newView libraryPage = \libraryPage ()
    newView schematicPage = \schematicsPage ()
    newView netClassesPage = \netClassesPage ()
    newView netListPage = \netListPage ()
    newView boardOutlinePage = \boardOutlinePage ()
    newView boardContentsPage = \boardContentsPage ()
    newView productPage = \productPage ()
    hStack set (margins: 8) {
      vStack {
        SegmentedControlWithPages (documentView: view pageMasterView, equalWidth: no, size : .regular) {
          addPage (title: "Components", tooltip: "", pageView: view componentsPage)
          addPage (title: "Library", tooltip: "", pageView: view libraryPage)
          addPage (title: "Schematic", tooltip: "", pageView: view schematicPage)
          addPage (title: "Net Classes", tooltip: "", pageView: view netClassesPage)
          addPage (title: "Net List", tooltip: "", pageView: view netListPage)
          addPage (title: "Board Outline", tooltip: "", pageView: view boardOutlinePage)
          addPage (title: "Board Contents", tooltip: "", pageView: view boardContentsPage)
          addPage (title: "Product", tooltip: "", pageView: view productPage)
          $selectedPage root.mSelectedPageIndex
        }
        StaticLabel (title: "Page", bold: no, size : .small, alignment: .center)
      }
      space
      vStack {
        hStack {
          space
          ImageObserverView (size : .regular) {
            $image root.schematicStatusImage $tooltip root.schematicStatusMessage
          }
          space
        }
        StaticLabel (title: "Schematic", bold: no, size : .small, alignment: .center)
      }
      vStack {
        hStack {
          space
          ImageObserverView (size : .regular) {
            $image root.boardStatusImage $tooltip root.boardStatusMessage
          }
          space
        }
        StaticLabel (title: "Board", bold: no, size : .small, alignment: .center)
      }
      vStack {
        hStack {
          space
          ImageObserverView (size : .regular) {
            $image root.ercStatusImage $tooltip root.ercStatusMessage
          }
          space
        }
        StaticLabel (title: "ERC", bold: no, size : .small, alignment: .center)
      }
    }
    separator
    view pageMasterView
  }
  
//---------------------- Components Tab

  stackView \componentsPage hStack set (margins: 8) {
    vStack {
      Label (bold: yes, size : .small) { expandableWidth () set (alignment: .center) $title self.componentCount }
      separator
      StaticLabel (title: "Add Component from:", bold: yes, size : .small, alignment: .left)
      Button (title: "File Library…", size: .small) { expandableWidth () $run addComponentFromFileLibraryAction }
      PullDownButton (title: "Embedded Library…", size: .small) {
         expandableWidth () $items root.deviceNames $run addComponentFromEmbeddedLibraryAction
      }
      separator
      StaticLabel (title: "On Selected Components", bold: yes, size : .small, alignment: .left)
      Button (title: "Duplicate", size: .small) {
        set (commandKeyEquivalent: "d")
        expandableWidth ()
        $run duplicateSelectedComponentsAction
        $enabled #componentController.selectedArray.count > 0
      }
      Button (title: "Rename…", size: .small) {
        expandableWidth ()
        set (commandKeyEquivalent: "r")
        $run renameSelectedComponentsAction
        $enabled #componentController.selectedArray.count == 1
      }
      Button (title: "Remove", size: .small) {
        expandableWidth ()
        setDeleteKeyAsKeyEquivalent ()
        $run removeSelectedComponentsAction
        $enabled #componentController.selectedArray.count > 0
      }
      Button (title: "Change Package…", size: .small) {
        expandableWidth ()
        set (controlCommandKeyEquivalent: "c")
        $run changePackageOfSelectedComponentsAction
        $enabled self.canChangePackage
      }
      Button (title: "Change Value…", size: .small) {
        expandableWidth ()
        set (controlCommandKeyEquivalent: "v")
        $run changeValueOfSelectedComponentsAction
        $enabled #componentController.selectedArray.count > 0
      }
      Button (title: "Reveal in Board", size: .small) {
        expandableWidth ()
        set (controlCommandKeyEquivalent: "b")
        $run revealPackageOfSelectedComponentsAction
        $enabled #componentController.selectedArray.count == 1
      }
      separator
      space
    }
    TableView (size : .regular, addControlButtons: no) { $tableValue #componentController }
  }

  transient String componentCount dependsFrom root.mComponents.count ;
  action addComponentFromFileLibraryAction ;
  action addComponentFromEmbeddedLibraryAction ;
  action duplicateSelectedComponentsAction ;
  action renameSelectedComponentsAction ;
  action removeSelectedComponentsAction ;
  action changePackageOfSelectedComponentsAction ;
  transient Bool canChangePackage dependsFrom #componentController.selectedArray.all.availablePackages ;
  action changeValueOfSelectedComponentsAction ;
  action revealPackageOfSelectedComponentsAction ;

  tableViewController #componentController (allowsEmptySelection:yes, allowsMultipleSelection:yes) root.mComponents {
     column componentName (title: "Name", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey componentName
     column deviceName (title: "Device", minWidth: 60, maxWidth: 300, headerAlignment: .left, contentAlignment: .left)
       sortkey deviceName
     column selectedPackageName (title: "Package", minWidth: 60, maxWidth: 300, headerAlignment: .left, contentAlignment: .left)
       sortkey selectedPackageName
     editableColumn mComponentValue (title: "Value", minWidth: 60, maxWidth: 200, headerAlignment: .left, contentAlignment: .left)
       sortkey mComponentValue
     column placementInSchematic (title: "inSchematics", minWidth: 60, maxWidth: 200, headerAlignment: .center, contentAlignment: .center)
       sortkey placementInSchematic
     column componentIsPlacedInBoardString (title: "inBoard", minWidth: 60, maxWidth: 200, headerAlignment: .center, contentAlignment: .center)
       sortkey componentIsPlacedInBoardString
  }

//---------------------- Library Tab

  stackView \libraryPage vStack set (margins: 8) {
//    newView libraryContentView = \LibraryContentView ()
    newView devicesInLibraryPage = \DevicesInLibraryPage ()
    newView fontsInLibraryPage = \FontsInLibraryPage ()
    hStack {
      Button (title: "Remove Embedded Devices", size: .regular) {
        set (controlCommandKeyEquivalent: "r")
        $run removeEmbeddedDevicesAction
        $enabled root.mDevices.count > 0
      }
      Button (title: "Reset Device and Font Versions", size: .regular) {
        set (controlCommandKeyEquivalent: "v")
        $run resetDevicesAndFontsVersionAction
        $enabled (root.mDevices.count > 0) | (root.mFonts.count > 0)
      }
      Button (title: "Update Devices and Fonts", size: .regular) {
        set (controlCommandKeyEquivalent: "u")
        $run updateDevicesAndFontsAction
        $enabled (root.mDevices.count > 0) | (root.mFonts.count > 0)
      }
      space   
    }
    TabView (size : .regular) {
      addTab (title: "Devices", tooltip: "", contentView: view devicesInLibraryPage)
      addTab (title: "Fonts", tooltip: "", contentView: view fontsInLibraryPage)
    }
//    hStack {
//      space
//      SegmentedControlWithPages (documentView: view libraryContentView, equalWidth: no, size : .regular) {
//        addPage (title: "Devices", tooltip: "", pageView: view devicesInLibraryPage)
//        addPage (title: "Fonts", tooltip: "", pageView: view fontsInLibraryPage)
//      }
//      space
//    }
//    view libraryContentView
  }
  
//  stackView \LibraryContentView vStack { }
  
  stackView \DevicesInLibraryPage vStack set (margins: 8) expandableWidth () {
     hStack {
      Button (title: "Edit Selected Device", size: .regular) {
        set (shiftCommandKeyEquivalent: "e")
        $run editSelectedDeviceAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      Button (title: "Reset Selected Device Version", size: .regular) {
        set (shiftCommandKeyEquivalent: "r")
        $run resetSelectedDeviceVersionAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
//      Button (title: "Remove Selected Device", size: .regular) {
//        setDeleteKeyAsKeyEquivalent ()
//        $run removeSelectedDeviceAction
//        $enabled self.canRemoveSelectedDevices
//      }
      Button (title: "Export Selected Device", size: .regular) {
        set (shiftCommandKeyEquivalent: "x")
        $run exportSelectedDeviceAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      Button (title: "Update Selected Device…", size: .regular) {
        set (shiftCommandKeyEquivalent: "u")
        $run updateSelectedDeviceAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      space
    }
    hStack set (spacing: 0) {
      TableView (size : .regular, addControlButtons: no) {
        expandableWidth ()
        set (minimumWidth: 400)
        $tableValue #projectDeviceController
      }
      divider
      vStack {
        StaticLabel (title: "Selected Device", bold: no, size: .regular, alignment: .center)
        hStack set (spacing: 0) {
          CanariProjectDeviceTableView (size : .regular) {
            expandableWidth ()
            set (minimumWidth: 150)
            $array self.selectedDeviceNames
          }
          divider
          vStack set (spacing: 0) {
            CanariProjectDeviceSymbolTypeAndNameTableView (size : .regular) {
              expandableWidth ()
              set (minimumWidth: 150)
              $array self.selectedDeviceSymbolNames
            }
            divider
            CanariProjectDevicePackageTableView (size : .regular) {
              expandableWidth ()
              $array self.selectedDevicePackageNames
            }
          }
          divider
          CanariProjectPinPadAssignmentTableView (size : .regular) {
            expandableWidth ()
            set (minimumWidth: 200)
            $array self.pinPadAssignments
          }
        }
      }
    }
  }

  stackView \FontsInLibraryPage vStack set (margins: 8) {
    hStack {
      Button (title: "Add Font…", size: .regular) {
        set (shiftCommandKeyEquivalent: "a")
        $run addFontAction
      }
      Button (title: "Edit Selected Font", size: .regular) {
        set (shiftCommandKeyEquivalent: "e")
        $run editFontAction
        $enabled #projectFontController.selectedArray.count > 0
      }
      Button (title: "Reset Selected Font Version", size: .regular) {
        set (shiftCommandKeyEquivalent: "r")
        $run resetFontVersionAction
        $enabled #projectFontController.selectedArray.count > 0
      }
      Button (title: "Update Selected Fonts", size: .regular) {
        set (shiftCommandKeyEquivalent: "u")
        $run updateFontAction
        $enabled #projectFontController.selectedArray.count > 0
      }
      Button (title: "Remove Selected Font", size: .regular) {
        setDeleteKeyAsKeyEquivalent ()
        $run removeFontAction
        $enabled #projectFontController.selectedArray.count > 0 & self.canRemoveSelectedFonts
      }
      space
    }
    TableView (size : .regular, addControlButtons: no) { $tableValue #projectFontController }
  }
 
  action removeEmbeddedDevicesAction ;
  action resetDevicesAndFontsVersionAction ;
  action updateDevicesAndFontsAction ;
  action addFontAction ;
  action editFontAction ;
  action resetFontVersionAction ;
  action updateFontAction ;
  action removeFontAction ;
  transient Bool canRemoveSelectedFonts
    dependsFrom #projectFontController.selectedArray.all.canRemoveFont ;
  action editSelectedDeviceAction ;
  action resetSelectedDeviceVersionAction ;
//  action removeSelectedDeviceAction ;
  transient Bool canRemoveSelectedDevices
    dependsFrom #projectDeviceController.selectedArray.all.canRemove ;
  action exportSelectedDeviceAction ;
  action updateSelectedDeviceAction ;
  transient ThreeStringArray pinPadAssignments
    dependsFrom #projectDeviceController.selectedArray.all.pinPadAssignments ;
  transient TwoStringArray selectedDeviceSymbolNames dependsFrom
    #projectDeviceController.selectedArray.all.symbolAndTypesNames ;
  transient StringArray selectedDevicePackageNames dependsFrom #projectDeviceController.selectedArray.all.packageNames ;
  transient StringArray selectedDeviceNames dependsFrom
    #projectDeviceController.selectedArray.all.symbolAndTypesNames ;
 
  tableViewController #projectFontController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mFonts {
     column mFontName (title: "Font Name", minWidth: 60, maxWidth: 2000, headerAlignment: .left, contentAlignment: .left)
       sortkey mFontName
     column versionString (title: "Version", minWidth: 60, maxWidth: 100, headerAlignment: .center, contentAlignment: .center)
       sortkey versionString
     column sizeString (title: "Size", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey sizeString
     column textCount (title: "# Texts", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey textCount
     column componentNamesCount (title: "# Component Names", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey componentNamesCount
     column componentValuesCount (title: "# Component Values", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey componentValuesCount
  }

  tableViewController #projectDeviceController (allowsEmptySelection:yes, allowsMultipleSelection:yes) root.mDevices {
     column mDeviceName (title: "Name", minWidth: 60, maxWidth: 600, headerAlignment: .left, contentAlignment: .left)
       sortkey mDeviceName
     column versionString (title: "Version", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey versionString
    column sizeString (title: "Size", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey sizeString
    column deviceComponentCountString (title: "Components", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey deviceComponentCountString
  } 

//---------------------- Net Class Tab

  stackView \netClassesPage vStack set (margins: 8) {
    hStack {
      Button (title: "New Net Class", size: .regular) {
        $run addNetClassAction
      }
      Button (title: "Edit Selected Net Class", size: .regular) {
        $run editNetClassAction
        $enabled #netClassController.selectedArray.count == 1
      }
      Button (title: "Remove Selected Net Class", size: .regular) {
        setDeleteKeyAsKeyEquivalent ()
        $run removeNetClassAction
        $enabled self.canRemoveNetClasses
      }
      space
    }
    TableView (size: .regular, addControlButtons: no) { $tableValue #netClassController }
  }

  action addNetClassAction ;
  action editNetClassAction ;
  action removeNetClassAction ;
  transient Bool canRemoveNetClasses dependsFrom root.mNetClasses.count, #netClassController.selectedArray.all.canRemove ;
  
  tableViewController #netClassController (allowsEmptySelection:yes, allowsMultipleSelection:yes) root.mNetClasses {
    column mNetClassName (title: "Name", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey mNetClassName
    column mNetClassColor (title: "Schematic Color", minWidth: 80, maxWidth: 100, headerAlignment: .left, contentAlignment: .left)
    column trackWidthString (title: "Width", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey trackWidthString
    column viaHoleDiameter (title: "Via Hole Diameter", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey viaHoleDiameter
    column viaPadDiameter (title: "Via Pad Diameter", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey viaPadDiameter
    column allowTracksOnFrontSideString (title: "Front Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnFrontSideString
    column allowTracksOnBackSideString (title: "Back Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnBackSideString
    column allowTracksOnInner1LayerString (title: "Inner 1 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner1LayerString
    column allowTracksOnInner2LayerString (title: "Inner 2 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner3LayerString
    column allowTracksOnInner1LayerString (title: "Inner 3 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner3LayerString
    column allowTracksOnInner4LayerString (title: "Inner 4 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner4LayerString
    column netUsage (title: "Used by…", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey netUsage
  }

//---------------------- Net Tab

  stackView \netListPage vStack set (margins: 8) {
    hStack {
      Label (bold: yes, size: .regular) { $title self.netCountString }
      Button (title: "Rename Net…", size: .regular) {
       set (commandKeyEquivalent: "r")
       $run renameNetAction
        $enabled self.netCount > 0
      }
      Button (title: "Select Net Class…", size: .regular) {
        set (commandKeyEquivalent: "k")
        $run selectNetClassAction
        $enabled self.netCount > 0
      }
      WarningImageView { $hidden root.netWarningCount == 0 }
      IntObserverField (bold: yes, size: .regular) {
        $observedValue root.netWarningCount
        $hidden root.netWarningCount == 0
      }
      space
    }
    hStack set (spacing: 0) {
      CanariNetDescriptionTableView [outlet mNetInfoTableView configurator netDescriptionTableViewConfigurator] {
        $netInfo root.netsDescription
      }
      divider
      vStack {
        StaticLabel (title: "Pins of Selected Net", bold: no, size: .regular, alignment: .center) { set (minWidth: 300) }
        TableView (size: .regular, addControlButtons: no) [configurator pinsOfSelectedNetTableViewConfigurator]
      }
    }
  }

  transient String netCountString dependsFrom root.netsDescription ;
  transient Int netCount dependsFrom root.netsDescription ;
  action renameNetAction ;
  action selectNetClassAction ;

//---------------------- Schematics Tab

  arrayController #schematicObjectsController : root.selectedSheetObjects ;
  action selectAllConnectedElementsInSchematicsAction ;
  action moveSelectedToSheetInSchematicsAction ;

  stackView \schematicsPage hStack {
    newView schematicLateralBar = \schematicsLateralBar ()
    view schematicLateralBar
    separator
    GraphicView (minZoom: 50, maxZoom: 1_000) [outlet mSchematicsView configurator schematicView] {
      $underObjectsDisplay root.schematicBackgroundDisplay
      $overObjectsDisplay root.schematicOverDisplay
      $horizontalFlip root.mSchematicHorizontalFlip
      $verticalFlip root.mSchematicVerticalFlip
      $graphicController #schematicObjectsController
      $gridStyle root.mSchematicGridStyle
      $gridDisplayFactor root.mSchematicGridDisplayFactor
      $gridLineColor prefs.lineColorGridForSchematic
      $gridCrossColor prefs.dotColorGridForSchematic
      $zoom root.mSchematicZoom
      $backColor prefs.schematicBackColor
    }
  }
  
  action prependNewSchematicHotKeysInspectorAction ;
  action prependNewSchematicInsertSymbolInspectorAction ;
  action prependNewSchematicDisplayInspectorAction ;
  action prependNewSchematicSheetInspectorAction ;
  action appendNewSchematicHotKeysInspectorAction ;
  action appendNewSchematicInsertSymbolInspectorAction ;
  action appendNewSchematicDisplayInspectorAction ;
  action appendNewSchematicSheetInspectorAction ;
  
  stackView \schematicsLateralBar vStack set (width: 250) set (spacing: 0) {
    newView selectedSchematicElementInspectorView = \selectedSchematicElementInspectorView ()
    newView schematicsInspectorView = \schematicsInspectorView ()
    newView schematicHotKeysInspectorView = \schematicsHotKeysInspectorView ()
    newView insertSymbolInSchematicView = \schematicsInsertSymbolInSchematicView ()
    newView schematicsDisplayInspectorView = \schematicsDisplayInspectorView ()
    newView schematicsSheetInspectorView = \schematicsSheetInspectorView ()
    hStack set (spacing: 0) set (margins: 8) {
      space
      PullDownButton (title: "", size: .regular) [configurator schematicPullDownButtonConfigurator] {
        add (item: menuItem "Select all Connected Elements"
             $run selectAllConnectedElementsInSchematicsAction )
        add (item: menuItem "Move Selected Elements to Sheet…"
             $run moveSelectedToSheetInSchematicsAction )
      }
      space
      DragSourceButtonWithMenus (tooltip: "Add Wire; hint: option click starts a new wire.") [configurator addWireInschematicsButton]
      space
      DragSourceButtonWithMenus (tooltip: "Add Comment") [configurator addCommentInSchematicsButton]
      space
    }
    vStack {
      hStack set (leftMargin: 8) set (rightMargin: 8) {
        SegmentedControlWithPages (documentView: view schematicsInspectorView, equalWidth: yes, size : .small) 
          [configurator schematicInspectorConfigurator] {
          expandableWidth ()
          addPage (title: "", tooltip: "Selected Element Inspector", pageView: view selectedSchematicElementInspectorView)
          addPage (title: "", tooltip: "Hot Keys", pageView: view schematicHotKeysInspectorView)
          addPage (title: "", tooltip: "Insert Symbol in Schematic", pageView: view insertSymbolInSchematicView)
          addPage (image: "", tooltip: "Display Inspector", pageView: view schematicsDisplayInspectorView)
          addPage (title: "", tooltip: "Sheet Inspector", pageView: view schematicsSheetInspectorView)
          $selectedPage root. mSelectedSchematicInspector
          $segmentTitle self.unplacedSymbolsCountString (segmentIndex : 2)
        }
      }
      view schematicsInspectorView
    }
  }

  transient Int unplacedSymbolsCount dependsFrom root.unplacedSymbols ;
  transient String unplacedSymbolsCountString dependsFrom self.unplacedSymbolsCount ;

  stackView \schematicsInspectorView vStack set (margins: 8) {
  }  
  
//--- Hot keys inspector
  stackView \schematicsHotKeysInspectorView vStack set (margins: 8) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewSchematicHotKeysInspectorAction }
      space
      StaticLabel (title: "Hot Keys", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewSchematicHotKeysInspectorAction }
    }
    StaticLabel (title: "[A] Connect all Symbol Pins", bold: no, size: .small, alignment: .left)
      [outletArray mConnectAllSymbolPinsSchematicHotKeyTextField]
    StaticLabel (title: "[B] Add Bottom Label", bold: no, size: .small, alignment: .left)
      [outletArray mAddBottomSchematicHotKeyTextField]
    StaticLabel (title: "[C] Connect", bold: no, size: .small, alignment: .left)
      [outletArray mConnectSchematicHotKeyTextField]
    StaticLabel (title: "[D] Disconnect", bold: no, size: .small, alignment: .left)
      [outletArray mDisconnectSchematicHotKeyTextField]
    StaticLabel (title: "[E] Disconnect All Symbol Pins", bold: no, size: .small, alignment: .left)
      [outletArray mDisconnectAllSymbolPinsSchematicHotKeyTextField]      
    StaticLabel (title: "[F] Add Label to Symbol Pins", bold: no, size: .small, alignment: .left)
      [outletArray mAddLabelToAllSymbolPinsSchematicHotKeyTextField]
    StaticLabel (title: "[L] Add Left Label", bold: no, size: .small, alignment: .left)
      [outletArray mAddLeftLabelSchematicHotKeyTextField]
    StaticLabel (title: "[M] Set NC to Symbol Pins", bold: no, size: .small, alignment: .left)
      [outletArray mAddNCToAllSymbolPinsSchematicHotKeyTextField]
    StaticLabel (title: "[N] Set NC", bold: no, size: .small, alignment: .left)
      [outletArray mAddNCSchematicHotKeyTextField]
    StaticLabel (title: "[P] Remove Wire Point", bold: no, size: .small, alignment: .left)
      [outletArray mRemoveWirePointSchematicHotKeyTextField]
    StaticLabel (title: "[R] Add Right Label", bold: no, size: .small, alignment: .left)
      [outletArray mAddRightLabelSchematicHotKeyTextField]
    StaticLabel (title: "[T] Add Top Label", bold: no, size: .small, alignment: .left)
      [outletArray mAddTopLabelSchematicHotKeyTextField]
    StaticLabel (title: "[V] Show / Hide Component Value", bold: no, size: .small, alignment: .left)
      [outletArray mShowHideSymbolValueSchematicHotKeyTextField]
    StaticLabel (title: "[X] Exchange Symbol…", bold: no, size: .small, alignment: .left)
      [outletArray mExchangeSymbolSchematicHotKeyTextField]
    StaticLabel (title: "[W] Insert Wire Point", bold: no, size: .small, alignment: .left)
      [outletArray mAddWirePointSchematicHotKeyTextField]
    space
  }  

//--- Unplaced symbols inspector
  stackView \schematicsInsertSymbolInSchematicView vStack set (margins: 8) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewSchematicInsertSymbolInspectorAction }
      space
      StaticLabel (title: "Insert Symbol Inspector", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewSchematicInsertSymbolInspectorAction }
    }
    CanariDragSourceTableView 
    [outletArray mUnplacedSymbolsTableViewArray configurator symbolDragSourceTableViewConfigurator] {
      $models root.unplacedSymbols
    }
  }  
  
//--- Grid and Flip inspector
  stackView \schematicsDisplayInspectorView vStack set (margins: 8) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewSchematicDisplayInspectorAction }
      space
      StaticLabel (title: "Display Inspector", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewSchematicDisplayInspectorAction }
    }
    TabView (size: .small) {
      addTab (title: "Grid, Flip", tooltip: "Grid and Flip", contentView : 
        GridView2 {
          set (margins: 8)
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Grid Step", bold: no, size : .small, alignment: .center),
            right: StaticLabel (title: "50 mils", bold: yes, size : .small, alignment: .center)
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Display Grid", bold: no, size : .small, alignment: .center),
            right: EnumPopUpButton (titles: enum GridStyle.popupTitles, size: .small) { $selectedIndex root.mSchematicGridStyle }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Every", bold: no, size : .small, alignment: .center),
            right: TaggedPopUpButton (size: .small) {
              add (title: "1 Step",   withTag:  1)
              add (title: "2 Steps",  withTag:  2)
              add (title: "4 Steps",  withTag:  4)
              add (title: "5 Steps",  withTag:  5)
              add (title: "8 Steps",  withTag:  8)
              add (title: "10 Steps", withTag: 10)
              $selectedTag root. mSchematicGridDisplayFactor
            }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Flip", bold: no, size : .small, alignment: .center),
            right: Checkbox (title: "Horizontal", size : .small) { $value root.mSchematicHorizontalFlip }
          )
          addFirstBaseLineAligned (
            left: FlexibleSpace,
            right: Checkbox (title: "Vertical", size : .small) { $value root.mSchematicVerticalFlip }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Cross Grid Color", bold: no, size : .small, alignment: .center),
            right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.dotColorGridForSchematic (sendContinously:yes) } space }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Line Grid Color", bold: no, size : .small, alignment: .center),
            right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.lineColorGridForSchematic (sendContinously:yes) } space }
          )
        }
      )
      addTab (title: "Colors, Font", tooltip: "Colors and Font", contentView:
        GridView2 {
          set (margins: 8)
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Symbols, unplaced Component", bold: no, size : .small, alignment: .center),
            right: ColorWell { set (toolTip: "Stored in Preferences") $color prefs.symbolColorForUnplacedComponentsForSchematic (sendContinously:yes) } 
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Symbols, placed Component", bold: no, size : .small, alignment: .center),
            right: ColorWell { set (toolTip: "Stored in Preferences") $color prefs.symbolColorForSchematic (sendContinously:yes) } 
          )
          add (single:
            hStack {
              space
              StaticLabel (title: "Symbols Drawing Width", bold: no, size : .small, alignment: .center)
              TaggedPopUpButton (size: .small) {
                add (title: "0.5 Point",   withTag:  5)
                add (title: "1.0 Point",  withTag:  10)
                add (title: "1.5 Point",  withTag:  15)
                add (title: "2.0 Point",  withTag:  20)
                add (title: "2.5 Point",  withTag:  25)
                $selectedTag prefs.symbolDrawingWidthMultipliedByTenForSchematic
              }
            }
          )
          addSeparator ()
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Component Name", bold: no, size : .small, alignment: .center),
            right: ColorWell { set (toolTip: "Stored in Preferences") $color prefs.componentNameColorForSchematic (sendContinously:yes) } 
          )
          add (single: FontButton (width: 125, size: .small) { $fontValue prefs.componentNameFontForSchematic })
          addSeparator ()
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Component Value", bold: no, size : .small, alignment: .center),
            right: ColorWell { set (toolTip: "Stored in Preferences") $color prefs.componentValueColorForSchematic (sendContinously:yes) } 
          )
          add (single: FontButton (width: 125, size: .small) { $fontValue prefs.componentValueFontForSchematic })
          addSeparator ()
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Pin Name", bold: no, size : .small, alignment: .center),
            right: ColorWell { set (toolTip: "Stored in Preferences") $color prefs.pinNameColorForSchematic (sendContinously:yes) } 
          )
          add (single: FontButton (width: 125, size: .small) { $fontValue prefs.pinNameFontForSchematic })
          addSeparator ()
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Pin Number", bold: no, size : .small, alignment: .center),
            right: ColorWell { set (toolTip: "Stored in Preferences") $color prefs.pinNumberColorForSchematic (sendContinously:yes) } 
          )
          add (single: FontButton (width: 125, size: .small) { $fontValue prefs.pinNumberFontForSchematic })
          addSeparator ()
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Connection", bold: no, size : .small, alignment: .center),
            right: ColorWell { set (toolTip: "Stored in Preferences") $color prefs.connectionColorForSchematic (sendContinously:yes) } 
          )
          addSeparator ()
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Background Color", bold: no, size : .small, alignment: .center),
            right: ColorWell { set (toolTip: "Stored in Preferences") $color prefs.schematicBackColor (sendContinously:yes) }
          )
          addFirstBaseLineAligned (
            left: StaticLabel (title: "Frame Color", bold: no, size : .small, alignment: .center),
            right: ColorWell { set (toolTip: "Stored in Preferences") $color prefs.schematicFrameColor (sendContinously:yes) }
          )
        }
      )
    }
    space
  }  

//--- Sheet inspector
  stackView \schematicsSheetInspectorView  vStack set (margins: 8) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewSchematicSheetInspectorAction }
      space
      StaticLabel (title: "Sheet Inspector", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewSchematicSheetInspectorAction }
    }
    hStack {
      PopUpButton (size: .small) [configurator sheetPopUpButtonConfigurator]
      Stepper [configurator sheetStepperConfigurator]
    }
    hStack {
      Button (title: "New Sheet", size: .small) { expandableHeight () $run newSheetAction }
      space
      vStack {
        Button (title: "Up", size: .small) [configurator moveSheetUp] { expandableWidth () }
        Button (title: "Down", size: .small) [configurator moveSheetDown]
      }
      space
      Button (title: "Delete Sheet", size: .small)
        { expandableHeight () $run deleteSheetAction $enabled root.mSheets.count > 1 }
    }
    StaticLabel (title: "Selected Sheet Name", bold: no, size: .small, alignment: .left)
    TextField (minWidth: 150, size: .small)
      { automaticallyAdjustHeight (maxWidth: 150) $value root.selectedSheetTitle (sendContinously : yes) }
    separator
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Title", bold: no, size: .small, alignment: .right)
          { expandableHeight () },
        right: TextField (minWidth: 150, size: .small)
          { automaticallyAdjustHeight (maxWidth: 150) $value root.mSchematicTitle (sendContinously : yes) }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Version", bold: no, size: .small, alignment: .right),
        right: TextField (minWidth: 150, size: .small) { $value root.mSchematicVersion (sendContinously : yes) }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Date", bold: no, size: .small, alignment: .right),
        right: hStack {
          Button (title: "Set…", size: .small) { $run openSetDateDialogAction }
          space 
          Button (title: "Set to Now", size: .small) { $run setDateToNowAction }
        }
      )
      addSeparator ()     
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Size", bold: no, size: .small, alignment: .right),
        right: EnumSegmentedControl (titles: enum SchematicSheetOrientation.popupTitles, equalWidth: no, size: .small)
        [configurator sheetOrientationSegmentedControlConfigurator] { $selectedSegment root.mSchematicSheetOrientation }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Width", bold: no, size: .small, alignment: .center)
          { $hidden !self.schematicSheetOrientationIsCustom },
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mSchematicCustomWidth, root.mSchematicCustomWidthUnit
          $hidden !self.schematicSheetOrientationIsCustom
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Height", bold: no, size: .small, alignment: .center)
          { $hidden !self.schematicSheetOrientationIsCustom },
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mSchematicCustomHeight, root.mSchematicCustomHeightUnit
          $hidden !self.schematicSheetOrientationIsCustom
        }
      )
    }
    space
  }  
 
  transient Bool schematicSheetOrientationIsCustom dependsFrom root.mSchematicSheetOrientation ; 
  action newSheetAction ;
  action deleteSheetAction ;
  action setDateToNowAction ;
  action openSetDateDialogAction ;
  
//----------------------------------------------------------------------------------------------------------------------
//   Schematic selected objects inspector
//----------------------------------------------------------------------------------------------------------------------

  stackView \selectedSchematicElementInspectorView vStack set (margins: 8) {
    newView schematicsWireInspectorView = \schematicsWireInspectorView ()
    newView ncInSchematicsInspectorView = \ncInSchematicsInspectorView ()
    newView schematicsLabelInspectorView = \schematicsLabelInspectorView ()
    newView commentInSchematicsInspectorView = \commentInSchematicsInspectorView ()
    newView componentSymbolInspectorView = \componentSymbolInspectorView ()
    ObjectInspectorView {
      addObjectInspector (forEntity: entity WireInSchematic, inspectorView: view schematicsWireInspectorView)
      addObjectInspector (forEntity: entity NCInSchematic, inspectorView: view ncInSchematicsInspectorView)
      addObjectInspector (forEntity: entity LabelInSchematic, inspectorView: view schematicsLabelInspectorView)
      addObjectInspector (forEntity: entity CommentInSchematic, inspectorView: view commentInSchematicsInspectorView)
      addObjectInspector (forEntity: entity ComponentSymbolInProject, inspectorView: view componentSymbolInspectorView)
      $graphicController #schematicObjectsController
    }
    space
  }

//--- Selected Wire In schematics
  selectionController WireInSchematic #wireInSchematicSelectionController :
    #schematicObjectsController.selectedArray
  ;
  
  stackView \schematicsWireInspectorView vStack {
    StaticLabel (title: "Wire Inspector", bold: yes, size: .small, alignment: .center)
    hStack {
      StaticLabel (title: "Net", bold: no, size: .small, alignment: .right)
      Label (bold: yes, size: .small) { expandableWidth () set (alignment: .left) $title #wireInSchematicSelectionController.netName }
    }
    Button (title: "Rename Net…", size: .small) {
      expandableWidth ()
      set (commandKeyEquivalent: "r")
      $run renameSchematicWireNetAction
      $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
    }
    Button (title: "Rename Net with Automatic Name", size: .small) {
      expandableWidth ()
      $run renameWireNetWithNewAutomaticNameAction
      $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
    }
    hStack {
      StaticLabel (title: "Net Class", bold: no, size: .small, alignment: .right)
      PopUpButton (size: .small) [configurator selectedWireNetPopUpButtonConfigurator] { expandableWidth () }
    }
    separator
    Button (title: "Merge Subnet into Existing Net…", size: .small) {
      expandableWidth ()
      set (commandKeyEquivalent: "m")
      $run mergeSubnetIntoAnExistingNetForSelectedWireAction
      $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
    }
    Button (title: "Insulate Subnet from Current Net", size: .small) {
      expandableWidth ()
      $run insulateSubnetFromCurrentNetForSelectedWireAction
      $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
    }
  }

  action renameSchematicWireNetAction ;
  action renameWireNetWithNewAutomaticNameAction ;
  action mergeSubnetIntoAnExistingNetForSelectedWireAction ;
  action insulateSubnetFromCurrentNetForSelectedWireAction ;

//--- Selected NC In schematics
  selectionController NCInSchematic #ncInSchematicSelectionController :
    #schematicObjectsController.selectedArray
  ;

  stackView \ncInSchematicsInspectorView vStack {
    StaticLabel (title: "NC Inspector", bold: yes, size: .small, alignment: .center)
    EnumSegmentedControl (titles: enum QuadrantRotation.directionTitles, equalWidth: yes, size: .small) {
      $selectedSegment #ncInSchematicSelectionController.mOrientation
    }
  }

//--- Selected label in schematic inspector
  selectionController LabelInSchematic #schematicLabelSelectionController :
    #schematicObjectsController.selectedArray
  ;

  stackView \schematicsLabelInspectorView vStack {
    StaticLabel (title: "Label Inspector", bold: yes, size: .small, alignment: .center)
    EnumSegmentedControl (titles: enum QuadrantRotation.directionTitles, equalWidth: yes, size: .small) {
      $selectedSegment #schematicLabelSelectionController.mOrientation
    }
    hStack {
      StaticLabel (title: "Net", bold: no, size: .small, alignment: .center) { notExpandableWidth () }
      Label (bold: yes, size: .small) { expandableWidth () set (alignment: .left) $title #schematicLabelSelectionController.netName }
    }
    Button (title: "Rename Net…", size: .small) {
      expandableWidth ()
      set (commandKeyEquivalent: "r")
      $run renameSchematicLabelNetAction
      $enabled #schematicLabelSelectionController.selectedArray.count == 1
    }
    Button (title: "Rename Net with Automatic Name", size: .small) {
      expandableWidth ()
      $run renameLabelNetWithNewAutomaticNameAction
      $enabled #schematicLabelSelectionController.selectedArray.count == 1
    }
    hStack {
      StaticLabel (title: "Net Class", bold: no, size: .small, alignment: .right)
      PopUpButton (size: .small) [configurator selectedLabelNetPopUpButtonConfigurator] { expandableWidth () }
    }
    separator
    Button (title: "Merge Subnet into Existing Net…", size: .small) {
      expandableWidth ()
      set (commandKeyEquivalent: "m")
      $run mergeSubnetIntoAnExistingNetForSelectedLabelAction
      $enabled #schematicLabelSelectionController.selectedArray.count == 1
    }
    Button (title: "Insulate Subnet from Current Net", size: .small) {
      expandableWidth ()
      $run insulateSubnetFromCurrentNetForSelectedLabelAction
      $enabled #schematicLabelSelectionController.selectedArray.count == 1
    }
  }

  action renameLabelNetWithNewAutomaticNameAction ;
  action renameSchematicLabelNetAction ;
  action mergeSubnetIntoAnExistingNetForSelectedLabelAction ;
  action insulateSubnetFromCurrentNetForSelectedLabelAction ;
  
//--- Selected comment in schematic inspector
  selectionController CommentInSchematic #commentInSchematicSelectionController :
    #schematicObjectsController.selectedArray
  ;

  stackView \commentInSchematicsInspectorView vStack {
    StaticLabel (title: "Comment Inspector", bold: yes, size: .small, alignment: .center)
    TextField (minWidth: 210, size: .small) {
      automaticallyAdjustHeight (maxWidth: 210)
      $value #commentInSchematicSelectionController.mComment (sendContinously : yes)
    }
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Color", bold: no, size: .small, alignment: .right),
        right: ColorWell { $color #commentInSchematicSelectionController.mColor (sendContinously:yes) }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Size", bold: no, size: .small, alignment: .right),
        right: DoubleField (width: 64, size: .small) { $value #commentInSchematicSelectionController.mSize (sendContinously:yes) }
      )
    }
    LinearSlider (min: 4, max: 20, ticks: 17) { setAllowsTickMarkValuesOnly () $doubleValue #commentInSchematicSelectionController.mSize (sendContinously:yes) }
    separator
    StaticLabel (title: "Alignment", bold: no, size: .small, alignment: .left)
    EnumSegmentedControl (titles: enum HorizontalAlignment.popupTitles, equalWidth: yes, size: .small) [configurator labelHAlignmentSegmendControlConfigurator] {
      $selectedSegment #commentInSchematicSelectionController.mHorizontalAlignment
    }
    EnumSegmentedControl (titles: enum VerticalAlignment.popupTitles, equalWidth: yes, size: .small) [configurator labelVAlignmentSegmendControlConfigurator] {
      $selectedSegment #commentInSchematicSelectionController.mVerticalAlignment
    }
  }
  
//--- Selected symbol in schematic inspector
  selectionController ComponentSymbolInProject #componentSymbolSelectionController :
    #schematicObjectsController.selectedArray
  ;
  stackView \componentSymbolInspectorView vStack {
    StaticLabel (title: "Symbol Inspector", bold: yes, size: .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Orientation", bold: no, size: .small, alignment: .center),
        right: EnumSegmentedControl (titles: enum QuadrantRotation.degreesTitles, equalWidth: no, size: .small) {
          $selectedSegment #componentSymbolSelectionController.mRotation
        }
      )
      addFirstBaseLineAligned (
        left: space,
        right: Checkbox (title: "Mirror", size : .small) { $value #componentSymbolSelectionController.mMirror }
      )
    }
    separator
    hStack {
      StaticLabel (title: "Component Name", bold: no, size: .small, alignment: .center) { notExpandableWidth () }
      Label (bold: yes, size: .small) {
        expandableWidth () set (alignment: .left) $title #componentSymbolSelectionController.componentName
      }
    }
    Button (title: "Rename Component…", size: .small) {
      expandableWidth ()
      $enabled #schematicObjectsController.selectedArray.count == 1
      $run renameComponentFromSelectedSymbolAction
    }
    separator
    StaticLabel (title: "Component Value", bold: no, size: .small, alignment: .center)
    Checkbox (title: "Show Component Value", size : .small) {
       $value #componentSymbolSelectionController.mDisplayComponentValue
     }
    TextField (minWidth: 100, size: .small) {
      expandableWidth ()
      $value #componentSymbolSelectionController.componentValueProxy (sendContinously: yes)
    }
    separator
    StaticLabel (title: "Symbol Instance Name", bold: no, size: .small, alignment: .center)
    Label (bold: yes, size: .small) {
      expandableWidth () 
      set (alignment: .center) 
      $title #componentSymbolSelectionController.mSymbolInstanceName
    }
    separator
    StaticLabel (title: "Symbol Type Name", bold: no, size: .small, alignment: .center)
    Label (bold: yes, size: .small) {
      expandableWidth () 
      set (alignment: .center) 
      $title #componentSymbolSelectionController.mSymbolTypeName
    }
    separator
    StaticLabel (title: "Device Name", bold: no, size: .small, alignment: .center)
    Label (bold: yes, size: .small) {
      expandableWidth () 
      set (alignment: .center) 
      $title #componentSymbolSelectionController.deviceName
    }
  }

  action renameComponentFromSelectedSymbolAction ;

//----------------- Board limits tab
  stackView \boardOutlinePage hStack {
    newView boardOutlineBaseView = \BoardOutlineBaseView ()
    newView boardOutlineInspectorView = \BoardOutlineInspectorView ()
    newView boardOutlineGridAndFlipView = \BoardOutlineGridAndFlipView ()
    vStack set (width: 250) set (margins: 8) {
      SegmentedControlWithPages (documentView: view boardOutlineBaseView, equalWidth: yes, size : .small)
        [configurator boardOutlineBaseConfigurator]  {
        addPage (title: "", tooltip: "", pageView: view boardOutlineInspectorView)
        addPage (title: "", tooltip: "", pageView: view boardOutlineGridAndFlipView)
        $selectedPage root.mBoardLimitsSelectedInspector
      }
      view boardOutlineBaseView
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 20_000) [configurator boardOutlineView]{
      $underObjectsDisplay root.borderViewBackground
      $horizontalFlip root.mBoardLimitsHorizontalFlip
      $verticalFlip root.mBoardLimitsVerticalFlip
      $graphicController #boardCurveObjectsController
      $gridStyle root.mBoardLimitsGridStyle
      $gridDisplayFactor root.mBoardLimitsGridDisplayFactor
      $gridLineColor prefs.lineColorGridForBoard
      $gridCrossColor prefs.crossColorGridForBoard
      $zoom root.mBoardLimitsZoom
      $backColor prefs.boardBackgroundColorForBoard
      $mouseGrid root.mBoardLimitsGridStep
      $gridStep root.mBoardLimitsGridStep
      $arrowKeyMagnitude root.mBoardLimitsGridStep
      $shiftArrowKeyMagnitude root.boardLimitsGridStepMultipliedByDisplayFactor
      $xPlacardUnit root.mBoardLimitsGridStepUnit
      $yPlacardUnit root.mBoardLimitsGridStepUnit
    }
  }

  arrayController #boardCurveObjectsController : root.mBorderCurves ;
  selectionController BorderCurve #boardCurveSelectionController :
    #boardCurveObjectsController.selectedArray
  ;

  stackView \BoardOutlineBaseView vStack {
    space
  }

  stackView \BoardOutlineGridAndFlipView vStack {
    StaticLabel (title: "Grid and Flip Inspector", bold: yes, size: .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Step", bold: no, size : .small, alignment: .center),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mBoardLimitsGridStep, root.mBoardLimitsGridStepUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Display Grid", bold: no, size : .small, alignment: .center),
        right: EnumPopUpButton (titles: enum GridStyle.popupTitles, size: .small) { expandableWidth () $selectedIndex root.mBoardLimitsGridStyle }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Display", bold: no, size : .small, alignment: .center),
        right: TaggedPopUpButton (size: .small) {
          expandableWidth ()
          add (title: "1 Step",   withTag:  1)
          add (title: "2 Steps",  withTag:  2)
          add (title: "4 Steps",  withTag:  4)
          add (title: "5 Steps",  withTag:  5)
          add (title: "8 Steps",  withTag:  8)
          add (title: "10 Steps", withTag: 10)
          $selectedTag root.mBoardLimitsGridDisplayFactor
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Flip", bold: no, size : .small, alignment: .center),
        right: Checkbox (title: "Horizontal", size : .small) { expandableWidth () $value root.mBoardLimitsHorizontalFlip }
      )
      addFirstBaseLineAligned (
        left: FlexibleSpace,
        right: Checkbox (title: "Vertical", size : .small) { expandableWidth () $value root.mBoardLimitsVerticalFlip }
      )
    }
    space
  }

  stackView \BoardOutlineInspectorView vStack {
    newView boardShapeBaseView = \BoardShapeBaseView ()
    newView boardRectangularOutlineView = \BoardRectangularOutlineView ()
    newView boardBezierPathOutlineView = \BoardBezierPathOutlineView ()
    StaticLabel (title: "Outlines", bold: yes, size : .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Board Limit Width", bold: no, size : .small, alignment: .center),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mBoardLimitsWidth, root.mBoardLimitsWidthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Board Clearance", bold: no, size : .small, alignment: .center),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mBoardClearance, root.mBoardClearanceUnit
        }
      )
    }
    separator
    StaticLabel (title: "Interior Bounding Box", bold: yes, size : .small, alignment: .center)
    CanariBoardRectangleView {
      $top root.boardInteriorTop
      $bottom root.boardInteriorBottom 
      $left root.boardInteriorLeft
      $right root.boardInteriorRight
      $unit root.mBoardPointsBoundingBoxUnit
    }
    separator
    StaticLabel (title: "Board Bounding Box", bold: yes, size : .small, alignment: .center)
    CanariBoardRectangleView {
      $top root.boardLimitBorderTop
      $bottom root.boardLimitBorderBottom 
      $left root.boardLimitBorderLeft
      $right root.boardLimitBorderRight
      $unit root.mBoardLimitsBoundingBoxUnit
    }
    separator
    StaticLabel (title: "Board Shape", bold: yes, size : .small, alignment: .center)
    SegmentedControlWithPages (documentView: view boardShapeBaseView, equalWidth: yes, size : .small) {
      addPage (title: "Rectangular", tooltip: "", pageView: view boardRectangularOutlineView)
      addPage (title: "Bezier Pathes", tooltip: "", pageView: view boardBezierPathOutlineView)
      $selectedSegment root.mBoardShape
    }
    view boardShapeBaseView
    space
  }

  stackView \BoardShapeBaseView vStack {
  }
  
  stackView \BoardRectangularOutlineView vStack {
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Board Width", bold: no, size : .small, alignment: .center),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mRectangularBoardWidth, root.mRectangularBoardWidthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Board Height", bold: no, size : .small, alignment: .center),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mRectangularBoardHeight, root.mRectangularBoardHeightUnit
        }
      )
    }
  }
  
  stackView \BoardBezierPathOutlineView vStack {
    Label (bold: yes, size : .small) { $title root.borderElementCountString }
    StaticLabel (title: "For editing Board limits, click on a line, use contextual click on a line.", 
                 bold: no,
                 size : .small,
                 alignment: .center) {
      expandableHeight ()
    }
    GridView2 {
      add (single: StaticLabel (title: "Selected Board Limit Element", bold: yes, size : .small, alignment: .center))
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Shape", bold: yes, size : .small, alignment: .left),
        right: EnumPopUpButton (titles: enum BorderCurveShape.popupTitles, size: .small) {
          $selectedIndex #boardCurveSelectionController.mShape
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "End Points", bold: yes, size : .small, alignment: .left),
        right: CanariUnitPopUpButton (size: .small) {
          $unit root.mBoardSelectedCurveDisplayUnit
        }
      )
      addFirstBaseLineAligned (
        left: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "X", bold: no, size : .small, alignment: .left)
          CanariDimensionField (size: .small) {
            $dimensionAndUnit #boardCurveSelectionController.mX, root.mBoardSelectedCurveDisplayUnit
          }
        },
        right: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "Y", bold: no, size : .small, alignment: .left)
          CanariDimensionField (size: .small) {
            $dimensionAndUnit #boardCurveSelectionController.mY, root.mBoardSelectedCurveDisplayUnit
          }
        }
      )
      addFirstBaseLineAligned (
        left: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "X", bold: no, size : .small, alignment: .left)
          DoubleObserverField (width: 72, bold: yes, size: .small) {
            $observedValue #boardCurveSelectionController.p2Xvalue
          }
        },
        right: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "Y", bold: no, size : .small, alignment: .left)
          DoubleObserverField (width: 72, bold: yes, size: .small) {
            $observedValue #boardCurveSelectionController.p2Yvalue
          }
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Control Points", bold: yes, size : .small, alignment: .left) {
          $hidden #boardCurveSelectionController.isLine
        },
        right: CanariUnitPopUpButton (size: .small) {
          $hidden #boardCurveSelectionController.isLine
          $unit root.mBoardLimitControlPointsDisplayUnit
        }
      )
      addFirstBaseLineAligned (
        left: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "X", bold: no, size : .small, alignment: .left) {
            $hidden #boardCurveSelectionController.isLine
          }
          CanariDimensionField (size: .small) {
            $hidden #boardCurveSelectionController.isLine
            $dimensionAndUnit #boardCurveSelectionController.mCPX1, root.mBoardLimitControlPointsDisplayUnit
          }
        },
        right: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "Y", bold: no, size : .small, alignment: .left) {
            $hidden #boardCurveSelectionController.isLine
          }
          CanariDimensionField (size: .small) {
            $hidden #boardCurveSelectionController.isLine
            $dimensionAndUnit #boardCurveSelectionController.mCPY1, root.mBoardLimitControlPointsDisplayUnit
          }
        }
      )
      addFirstBaseLineAligned (
        left: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "X", bold: no, size : .small, alignment: .left) {
            $hidden #boardCurveSelectionController.isLine
          }
          CanariDimensionField (size: .small) {
            $hidden #boardCurveSelectionController.isLine
            $dimensionAndUnit #boardCurveSelectionController.mCPX2, root.mBoardLimitControlPointsDisplayUnit
          }
        },
        right: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "Y", bold: no, size : .small, alignment: .left) {
            $hidden #boardCurveSelectionController.isLine
          }
          CanariDimensionField (size: .small) {
            $hidden #boardCurveSelectionController.isLine
            $dimensionAndUnit #boardCurveSelectionController.mCPY2, root.mBoardLimitControlPointsDisplayUnit
          }
        }
      )
      $hidden #boardCurveObjectsController.selectedArray.count == 0
    }
  }

//----------------- Board Contents tab

  arrayController #boardObjectsController : root.mBoardObjects ;  
  transient EBShape boardOutlineOverDisplay dependsFrom self.rastnetShape, root.boardIssues ;
  transient EBShape rastnetShape dependsFrom
    root.mRastnetDisplay,
    root.mRastnetDisplayedNetName,
    root.mRastnetDisplayedComponentName,
    root.mBoardObjects.all.netNameAndPadLocation,
    #boardObjectsController.selectedArray.all.componentName
  ;
  transient Int unplacedPackageCount dependsFrom root.unplacedPackages ;
  transient String unplacedPackagesCountString dependsFrom self.unplacedPackageCount ;
  transient String unplacedPackagesMessageString dependsFrom self.unplacedPackageCount ;

  stackView \boardContentsPage hStack set (spacing: 0) {
    newView boardInspectorView = \BoardInspectorView ()
    newView selectedElementInspectorView = \SelectedElementInspectorView ()
    newView insertComponentInBoardView = \insertComponentInBoardView ()
    newView boardDisplayInspectorView = \boardDisplayInspectorView ()
    newView boardRouterInspectorView = \boardRouterInspectorView ()
    newView boardERCInspectorView = \boardERCInspectorView ()
    vStack set (width: 250) set (spacing: 0) {
      hStack set (spacing: 0) set (margins: 8) {
        CanariBoardOperationPullDownButton [configurator boardOperationPullDownButtonConfigurator]
        space
        DragSourceButtonWithMenus (tooltip: "Add Restrict Rectangle;  the layers are set by the contextual menu.") [configurator addRestrictRectangleButton]
        space
        DragSourceButtonWithMenus (tooltip: "Add Line in Board;  the layer is set by the contextual menu.") [configurator addLineButton]
        space
        DragSourceButtonWithMenus (tooltip: "Add Text in Board; the layer is set by the contextual menu.") [configurator addTextButton]
        space
        DragSourceButtonWithMenus (tooltip: "Add Track; hint:\n  - option + click starts a new track.\n\nThe new track side is set by the right contextual menu. The direction constraint on creation is set by the left contextual menu.") [configurator addTrackButton]
      }
      vStack {
        hStack set (leftMargin: 8) set (rightMargin: 8) {
          SegmentedControlWithPages (documentView: view boardInspectorView, equalWidth: yes, size : .small) 
            [configurator boardInspectorConfigurator] {
            expandableWidth ()
            addPage (title: "", tooltip: "Selected Element Inspector", pageView: view selectedElementInspectorView)
            addPage (title: "", tooltip: "Insert Component in Board", pageView: view insertComponentInBoardView)
            addPage (title: "", tooltip: "Display Inspector", pageView: view boardDisplayInspectorView)
            addPage (image: "autorouter", tooltip: "Router Inspector", pageView: view boardRouterInspectorView)
            addPage (title: "ERC", tooltip: "Electric Rule Check Inspector", pageView: view boardERCInspectorView)
            $selectedPage root.mBoardSelectedInspector
            $segmentTitle self.unplacedPackagesCountString (segmentIndex : 1)
          }
        }
        view boardInspectorView
      }
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 20_000) [outlet mBoardView configurator boardView] {
      $underObjectsDisplay root.borderOutlineBackground
      $overObjectsDisplay self.boardOutlineOverDisplay
      $horizontalFlip root.mBoardHorizontalFlip
      $verticalFlip root.mBoardVerticalFlip
      $graphicController #boardObjectsController
      $gridStyle root.mBoardGridStyle
      $gridDisplayFactor root.mBoardGridDisplayFactor
      $gridLineColor prefs.lineColorGridForBoard
      $gridCrossColor prefs.crossColorGridForBoard
      $zoom root.mBoardZoom
      $backColor prefs.boardBackgroundColorForBoard
      $mouseGrid root.mBoardGridStep
      $gridStep root.mBoardGridStep
      $arrowKeyMagnitude root.mBoardGridStep
      $shiftArrowKeyMagnitude root.boardGridStepMultipliedByDisplayFactor
      $xPlacardUnit root.mBoardGridStepUnit
      $yPlacardUnit root.mBoardGridStepUnit
    }
  }

  stackView \BoardInspectorView : vStack ;

  action appendNewInsertComponentInBoardInspectorAction ;
  action prependNewInsertComponentInBoardInspectorAction ;
  
  stackView \insertComponentInBoardView vStack set (margins: 8) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewInsertComponentInBoardInspectorAction }
      space
      Label (bold: yes, size: .small) { $title self.unplacedPackagesMessageString }
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewInsertComponentInBoardInspectorAction }
    }
    CanariDragSourceTableView 
    [outletArray mUnplacedPackageTableViewArray configurator packageDragSourceTableViewConfigurator] {
      $models root.unplacedPackages
    }
  }
  
  transient Bool rastnetDisplayOneNet dependsFrom root.mRastnetDisplay ;
  transient Bool rastnetDisplayComponentNet dependsFrom root.mRastnetDisplay ;
  action prependNewBoardDisplayInspectorAction ;
  action appendNewBoardDisplayInspectorAction ;

  stackView \boardDisplayInspectorView vStack set (margins: 8) set (rightMargin: 0) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewBoardDisplayInspectorAction }
      space
      StaticLabel (title: "Board Display", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewBoardDisplayInspectorAction }
    }
    VerticalScrollView (content:
      GridView2 {
        add (
          single: StaticLabel (title: "Grid and Flip", bold: yes, size: .small, alignment: .left)
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Grid Step", bold: no, size: .small, alignment: .center),
          right: CanariDimensionAndPopUp (size : .small)  { $dimensionAndUnit root.mBoardGridStep, root.mBoardGridStepUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Display", bold: no, size: .small, alignment: .center),
          right: EnumPopUpButton (titles: enum GridStyle.popupTitles, size : .small)  { $selectedIndex root.mBoardGridStyle }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Every", bold: no, size: .small, alignment: .center),
          right: TaggedPopUpButton (size: .small) {
            add (title: "1 Step",   withTag:  1)
            add (title: "2 Steps",  withTag:  2)
            add (title: "4 Steps",  withTag:  4)
            add (title: "5 Steps",  withTag:  5)
            add (title: "8 Steps",  withTag:  8)
            add (title: "10 Steps", withTag: 10)
            $selectedTag root.mBoardGridDisplayFactor
          }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Flip", bold: no, size: .small, alignment: .center),
          right: Checkbox (title: "Horizontal", size : .small)  { $value root.mBoardHorizontalFlip }
        )
        addFirstBaseLineAligned (
          left: space,
          right: Checkbox (title: "Vertical", size : .small)  { $value root.mBoardVerticalFlip }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Cross Grid", bold: no, size: .small, alignment: .center),
          right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.crossColorGridForBoard (sendContinously:yes) } space }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Line Grid", bold: no, size: .small, alignment: .center),
          right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.lineColorGridForBoard (sendContinously:yes) } space }
        )
        add (single: StaticLabel (title: "Rastnet", bold: yes, size: .small, alignment: .left) )
        add (single: EnumPopUpButton (titles: enum RastnetDisplay.popupTitles, size: .small) { $selectedIndex root.mRastnetDisplay } )
        add (
          single: CanariSelectionPopUpButton (size: .small) {
            $selectedNameInArray root.mRastnetDisplayedNetName, root.netNamesArray
            $hidden !self.rastnetDisplayOneNet
          }
        )
        add (
          single: CanariSelectionPopUpButton (size: .small) {
            $selectedNameInArray root.mRastnetDisplayedComponentName, root.placedComponentNameArray
            $hidden !self.rastnetDisplayComponentNet
          }
        )
        add (
          single: StaticLabel (title: "Warning and Error Circle", bold: yes, size: .small, alignment: .center)
        )
        add (
          single: LinearSlider (min: 0, max: 24, ticks: 13) { $doubleValue root.mErrorOrWarningIssueSize (sendContinously : yes) }
        )
        add (
          single: StaticLabel (title: "Contextual Click Diameter", bold: yes, size: .small, alignment: .center)
        )
        add (
          single: LinearSlider (min: 10, max: 200, ticks: 10) { $doubleValue root.mControlKeyHiliteDiameter (sendContinously : yes) }
        )
        add (single: StaticLabel (title: "Pad Number", bold: yes, size: .small, alignment: .left) )
        add (single: FontButton (width: 125, size: .small) { $fontValue prefs.padNumberFontForBoard } )
        add (single: StaticLabel (title: "Package Width", bold: yes, size: .small, alignment: .left) )
        add (single: TaggedPopUpButton (size: .small) {
            add (title: "0.5 Point",   withTag:  5)
            add (title: "1.0 Point",  withTag:  10)
            add (title: "1.5 Point",  withTag:  15)
            add (title: "2.0 Point",  withTag:  20)
            add (title: "2.5 Point",  withTag:  25)
            $selectedTag root.packageDrawingWidthMultpliedByTenForBoard
          }
        )
        add (single: StaticLabel (title: "Display", bold: yes, size: .small, alignment: .left))
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.frontSidePadColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Front Side Pads", size : .small)  { expandableHeight  () $value root.displayFrontPadsForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.backSidePadColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Back Side Pads", size : .small)  { expandableHeight  () $value root.displayBackPadsForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.padNumberColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Pad Numbers", size : .small)  { expandableHeight  () $value root.displayPadNumbersForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.frontSideLegendColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Front Side Legend", size : .small)  { expandableHeight  () $value root.displayFrontLegendForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.backSideLegendColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Back Side Legend", size : .small)  { expandableHeight  () $value root.displayBackLegendForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.frontSideLayoutColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Front Side Layout", size : .small)  { expandableHeight  () $value root.displayFrontLayoutForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner1LayoutColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Inner 1 Layout", size : .small)  { expandableHeight  () $value root.displayInner1LayoutForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner2LayoutColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Inner 2 Layout", size : .small)  { expandableHeight  () $value root.displayInner2LayoutForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner3LayoutColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Inner 3 Layout", size : .small)  { expandableHeight  () $value root.displayInner3LayoutForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner4LayoutColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Inner 4 Layout", size : .small)  { expandableHeight  () $value root.displayInner4LayoutForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.backSideLayoutColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Back Side Layout", size : .small)  { expandableHeight  () $value root.displayBackLayoutForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.frontSideRestrictRectangleColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Front Layer Restrict Rect.", size : .small)  { expandableHeight  () $value root.displayFrontRestrictRectangles }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.backSideRestrictRectangleColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Back Layer Restrict Rect.", size : .small)  { expandableHeight  () $value root.displayBackRestrictRectangles }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner1SideRestrictRectangleColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Inner1 Layer Restrict Rect.", size : .small)  { expandableHeight  () $value root.displayInner1RestrictRectangles }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner2SideRestrictRectangleColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Inner2 Layer Restrict Rect.", size : .small)  { expandableHeight  () $value root.displayInner2RestrictRectangles }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner3SideRestrictRectangleColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Inner3 Layer Restrict Rect.", size : .small)  { expandableHeight  () $value root.displayInner3RestrictRectangles }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner4SideRestrictRectangleColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Inner4 Layer Restrict Rect.", size : .small)  { expandableHeight  () $value root.displayInner4RestrictRectangles }
        )
        addCenterYAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.boardLimitsColorForBoard (sendContinously:yes) } },
          right: StaticLabel (title: "Board Limits", bold: no, size : .small, alignment: .left)
        )
        addCenterYAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.boardClearanceColorForBoard (sendContinously:yes) } },
          right: StaticLabel (title: "Board Clearance", bold: no, size : .small, alignment: .left)
        )
        addCenterYAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.boardBackgroundColorForBoard (sendContinously:yes) } },
          right: StaticLabel (title: "Background", bold: no, size : .small, alignment: .left)
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.errorBackgroundColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Error Background", size : .small)  { expandableHeight  () $value root.drawErrorBackgroundForBoard }
        )
        addFirstBaseLineAligned (
          left: hStack { space ColorWell { set (toolTip: "Stored in Preferences") $color prefs.warningBackgroundColorForBoard (sendContinously:yes) } },
          right: Checkbox (title: "Warning Background", size : .small)  { expandableHeight  () $value prefs.drawWarningBackgroundForBoard }
        )
      }
    )
    space 
  }

  action prependNewBoardSettingsInspectorAction ;
  action appendNewBoardSettingsInspectorAction ;
  
  stackView \boardRouterInspectorView vStack set (margins: 8) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewBoardSettingsInspectorAction }
      space
      StaticLabel (title: "Board Settings", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewBoardSettingsInspectorAction }
    }
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Layers", bold: no, size: .small, alignment: .right),
        right: EnumPopUpButton (titles: enum LayerConfiguration.popupTitles, size: .small) {
          $selectedIndex root.mLayerConfiguration
          $run changeLayerConfigurationAction
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Clearance", bold: no, size: .small, alignment: .right),
        right: CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit root.mLayoutClearance, root.mLayoutClearanceUnit }
      )
      add (
        single: StaticLabel (title: "Autorouter Settings", bold: yes, size: .small, alignment: .center)
      )
      add (
        single: EnumPopUpButton (titles: enum AutorouterPreferredDirections.popupTitles, size: .small) {
          $selectedIndex root.mAutoRouterPreferredDirections
        }
      )
      add (
        single: EnumPopUpButton (titles: enum AutorouterSnapAngle.popupTitles, size: .small) {
          $selectedIndex root.mAutorouterSnapAngle
        }
      )
      add (
        single: hStack {
          StaticLabel (title: "Route", bold: no, size: .small, alignment: .center)
          space
          EnumPopUpButton (titles: enum RouteDirection.popupTitles, size: .small) {
            $selectedIndex root.mRouteDirection
          }
          space
          EnumPopUpButton (titles: enum RouteOrigin.popupTitles, size: .small) {
            $selectedIndex root.mRouteOrigin
          }
        }
      )
      add (single:
        TabView (size: .small) {
          addTab (title: "Basic", tooltip: "Autorouter Basic Configuration", contentView :
            vStack set (margins: 12) {
              hStack {
                space
                Checkbox (title: "Export Tracks and Vias", size: .small) { $value root.mExportExistingTracksAndVias }
                space
              }
              hStack {
                space
                ImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 48, height: 48) {
                  $run launchFreeRouterWithRouterDocument
                }
                space
              }
              hStack {
                space
                Button (title: "Import SES File", size: .small) { $run importSESFromBasicTabAction }
                space
              }
            }
          )
          addTab (title: "Advanced", tooltip: "Autorouter Advanced Configuration", contentView :
            vStack set (margins: 12) {
              hStack {
                space
                Checkbox (title: "Export Tracks and Vias", size: .small) { $value root.mExportExistingTracksAndVias2 }
                space
              }
              hStack {
                space
                Button (title: "Export DSN File…", size: .small) { $run exportDSNFileAction }
                space
              }
              hStack {
                space
                ImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 48, height: 48) {
                  $run launchFreeRouterWithoutAnyDocument
                }
                space
              }
              hStack {
                space
                Button (title: "Import SES File…", size: .small) { $run importSESFromExtendedTabAction }
                space
              }
            }
          )
          $selectedPage root.mAutorouterInterfaceMode
        }
      )
      add (
        single: StaticLabel (title: "Tracks", bold: yes, size: .small, alignment: .left)
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Top Layer Tracks", bold: no, size: .small, alignment: .right),
        right: Label (bold: yes, size : .small) { $title root.topSideTrackCountString }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Inner 1 Layer Tracks", bold: no, size: .small, alignment: .right),
        right: Label (bold: yes, size : .small) { $title root.inner1LayerTrackCountString }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Inner 2 Layer Tracks", bold: no, size: .small, alignment: .right),
        right: Label (bold: yes, size : .small) { $title root.inner2LayerTrackCountString }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Inner 3 Layer Tracks", bold: no, size: .small, alignment: .right),
        right: Label (bold: yes, size : .small) { $title root.inner3LayerTrackCountString }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Inner 4 Layer Tracks", bold: no, size: .small, alignment: .right),
        right: Label (bold: yes, size : .small) { $title root.inner4LayerTrackCountString }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Back Layer Tracks", bold: no, size: .small, alignment: .right),
        right: Label (bold: yes, size : .small) { $title root.backSideTrackCountString }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Total", bold: no, size: .small, alignment: .right),
        right: Label (bold: yes, size : .small) { $title root.trackCountString }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Trace Length", bold: no, size: .small, alignment: .right),
        right: hStack {
          Label (bold: yes, size : .small) { $title root.trackLengthString }
          CanariUnitPopUpButton (size : .small) { $unit root.mTrackLengthUnit }
          space
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Via Count", bold: no, size: .small, alignment: .right),
        right: Label (bold: yes, size : .small) { $title root.viaCountString }
      )
      add (
        single: Button (title: "Design Rule Check", size: .small) { $run performERCCheckingAction }
      )
    }
    space
  }
  
  action changeLayerConfigurationAction ;
  action launchFreeRouterWithRouterDocument ;
  action launchFreeRouterWithoutAnyDocument ;
  action importSESFromBasicTabAction ;
  action importSESFromExtendedTabAction ;
  action exportDSNFileAction ;
  action prependNewBoardERCCheckingInspectorAction ;
  action appendNewBoardERCCheckingInspectorAction ;
  
  stackView \boardERCInspectorView vStack set (margins: 8) {
    StaticLabel (title: "ERC Checking", bold: yes, size: .small, alignment: .center)
//    hStack {
//      Button (title: "◀︎+", size: .regular) { $run prependNewBoardERCCheckingInspectorAction }
//      space
//      StaticLabel (title: "ERC Checking", bold: yes, size: .small, alignment: .center)
//      space
//      Button (title: "+▶︎", size: .regular) { $run appendNewBoardERCCheckingInspectorAction }
//    }
    Checkbox (title: "Check Clearance\nbetween Pads of the same Net", size: .small) {
      set (width: 200, multiline: yes)
      $value root.mCheckClearanceBetweenPadsOfSameNet
    }
    Button (title: "Design Rule Check", size: .small) { $run performERCCheckingAction }
    vStack set (spacing: 0) {
      TextObserverView [outletArray mERCLogTextViewArray]
      divider
      CanariIssueTableView (hasHideIssueButton : yes) [
        outletArray mERCIssueTableViewArray configurator ercIssueTableViewConfigurator
      ]
    }
  }

  action performERCCheckingAction ;
  
//----------------------------------------------------------------------------------------------------------------------
//   Board selected objects inspector
//----------------------------------------------------------------------------------------------------------------------

  stackView \SelectedElementInspectorView vStack set (margins: 8) {
    newView boardTrackInspectorView = \BoardTrackInspectorView ()
    newView boardConnectorInspectorView = \BoardConnectorInspectorView ()
    newView boardLineInspectorView = \BoardLineInspectorView ()
    newView restrictRectangleInspectorView = \RestrictRectangleInspectorView ()
    newView boardTextInspectorView = \BoardTextInspectorView ()
    newView componentInBoardInspectorView = \ComponentInBoardInspectorView ()
    ObjectInspectorView {
      addObjectInspector (forEntity: entity BoardTrack, inspectorView: view boardTrackInspectorView)
      addObjectInspector (forEntity: entity BoardConnector, inspectorView: view boardConnectorInspectorView)
      addObjectInspector (forEntity: entity BoardLine, inspectorView: view boardLineInspectorView)
      addObjectInspector (forEntity: entity BoardRestrictRectangle, inspectorView: view restrictRectangleInspectorView)
      addObjectInspector (forEntity: entity BoardText, inspectorView: view boardTextInspectorView)
      addObjectInspector (forEntity: entity ComponentInProject, inspectorView: view componentInBoardInspectorView)
      $graphicController #boardObjectsController
    }
    space
  }

//--- Board track
  selectionController BoardTrack #boardTrackSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \BoardTrackInspectorView vStack {
    StaticLabel (title: "Board Track", bold: yes, size: .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Net Name", bold: no, size: .small, alignment: .center),
        right: Label (bold: yes, size: .small) {
          set (alignment: .left)
          expandableWidth ()
          $title #boardTrackSelectionController.netName
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Net Class Name", bold: no, size: .small, alignment: .center),
        right: Label (bold: yes, size: .small) {
          set (alignment: .left)
          expandableWidth ()
          $title #boardTrackSelectionController.netClassName
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Side", bold: no, size: .small, alignment: .center),
        right: EnumPopUpButton (titles: enum TrackSide.popupTitles, size: .small) {
          $selectedIndex #boardTrackSelectionController.mSide
        }
      )
      add (
        single: Checkbox (title: "Is Preserved by Auto Router", size : .small) { $value #boardTrackSelectionController.mIsPreservedByAutoRouter }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Track Width", bold: no, size: .small, alignment: .left),
        right: Checkbox (title: "Use Custom", size: .small) { $value #boardTrackSelectionController.mUsesCustomTrackWidth }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "From Net Class", bold: no, size: .small, alignment: .center) { $hidden #boardTrackSelectionController.mUsesCustomTrackWidth } ,
        right: CanariObservedDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardTrackSelectionController.netClassTrackWidth, #boardTrackSelectionController.mDefaultTrackWidthUnit
          $hidden #boardTrackSelectionController.mUsesCustomTrackWidth
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Custom", bold: no, size: .small, alignment: .center) { $hidden !#boardTrackSelectionController.mUsesCustomTrackWidth },
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardTrackSelectionController.mCustomTrackWidth, #boardTrackSelectionController.mCustomTrackWidthUnit
          $hidden !#boardTrackSelectionController.mUsesCustomTrackWidth
        }
      )
      addSeparator ()
      add (single:
        CanariTrackLockView {
          $angle #boardTrackSelectionController.trackDirectionInDegrees
          $manualLockP1 #boardTrackSelectionController.mManualLockP1
          $manualLockP2 #boardTrackSelectionController.mManualLockP2
          $p1ConnectedToSomePad #boardTrackSelectionController.p1ConnectedToSomePad
          $p2ConnectedToSomePad #boardTrackSelectionController.p2ConnectedToSomePad
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "On Knob Dragging", bold: no, size: .small, alignment: .center),
        right: EnumPopUpButton (titles: enum TrackLockDirection.popupTitles, size: .small) {
          $selectedIndex #boardTrackSelectionController.mDirectionLockOnKnobDragging
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Track Angle", bold: no, size: .small, alignment: .center),
        right: CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
          $angle #boardTrackSelectionController.trackDirectionInDegrees
          $enabled #boardTrackSelectionController.trackCanRotate
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabels (left: "P1", right: "X", bold: no, size: .small),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardTrackSelectionController.computedP1X, #boardTrackSelectionController.mP1XUnit
          $enabled #boardTrackSelectionController.p1CanMove
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size: .small, alignment: .right),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardTrackSelectionController.computedP1Y, #boardTrackSelectionController.mP1YUnit
          $enabled #boardTrackSelectionController.p1CanMove
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "P2", right: "X", bold: no, size: .small),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardTrackSelectionController.computedP2X, #boardTrackSelectionController.mP2XUnit
          $enabled #boardTrackSelectionController.p2CanMove
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size: .small, alignment: .right),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardTrackSelectionController.computedP2Y, #boardTrackSelectionController.mP2YUnit
          $enabled #boardTrackSelectionController.p2CanMove
        }
      )
    }
    space
  }

//--- Board Connector inspector
  selectionController BoardConnector #boardConnectorSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \BoardConnectorInspectorView vStack {
    StaticLabel (title: "Via Inspector", bold: yes, size: .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Net Name", bold: no, size: .small, alignment: .center),
        right: Label (bold: yes, size: .small) {
          set (alignment: .left)
          expandableWidth ()
          $title #boardConnectorSelectionController.netNameFromTracks
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Net Class Name", bold: no, size: .small, alignment: .center),
        right: Label (bold: yes, size: .small) {
          set (alignment: .left)
          expandableWidth ()
          $title #boardConnectorSelectionController.netClassName
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Hole Diameter", bold: no, size: .small, alignment: .left),
        right: Checkbox (title: "Use Custom", size: .small) { $value #boardConnectorSelectionController.mUsesCustomHoleDiameter }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "From Net Class", bold: no, size: .small, alignment: .center) { $hidden #boardConnectorSelectionController.mUsesCustomHoleDiameter } ,
        right: CanariObservedDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardConnectorSelectionController.viaDefaultHoleDiameter, #boardConnectorSelectionController.mDefaultHoleDiameterUnit
          $hidden #boardConnectorSelectionController.mUsesCustomHoleDiameter
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Custom", bold: no, size: .small, alignment: .center) { $hidden ! #boardConnectorSelectionController.mUsesCustomHoleDiameter },
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardConnectorSelectionController.mCustomHoleDiameter, #boardConnectorSelectionController.mCustomHoleDiameterUnit
          $hidden ! #boardConnectorSelectionController.mUsesCustomHoleDiameter
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Pad Diameter", bold: no, size: .small, alignment: .left),
        right: Checkbox (title: "Use Custom", size: .small) { $value #boardConnectorSelectionController.mUsesCustomPadDiameter }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "From Net Class", bold: no, size: .small, alignment: .center) { $hidden #boardConnectorSelectionController.mUsesCustomPadDiameter } ,
        right: CanariObservedDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardConnectorSelectionController.viaDefaultPadDiameter, #boardConnectorSelectionController.mDefaultPadDiameterUnit
          $hidden #boardConnectorSelectionController.mUsesCustomPadDiameter
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Custom", bold: no, size: .small, alignment: .center) { $hidden ! #boardConnectorSelectionController.mUsesCustomPadDiameter },
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardConnectorSelectionController.mCustomPadDiameter, #boardConnectorSelectionController.mCustomPadDiameterUnit
          $hidden ! #boardConnectorSelectionController.mUsesCustomPadDiameter
        }
      )     
    }
  }

//--- Board line inspector
  selectionController BoardLine #boardLineSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \BoardLineInspectorView vStack {
    StaticLabel (title: "Line Inspector", bold: yes, size: .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Width", bold: no, size: .small, alignment: .right),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardLineSelectionController.mWidth, #boardLineSelectionController.mWidthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Side", bold: no, size: .small, alignment: .right),
        right: EnumPopUpButton (titles: enum BoardLineLayer.popupTitles, size: .small) { $selectedIndex #boardLineSelectionController.mLayer }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabels (left: "P1", right: "X", bold: no, size: .small),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardLineSelectionController.mX1, #boardLineSelectionController.mX1Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size: .small, alignment: .right),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardLineSelectionController.mY1, #boardLineSelectionController.mY1Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "P2", right: "X", bold: no, size: .small),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardLineSelectionController.mX2, #boardLineSelectionController.mX2Unit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size: .small, alignment: .right),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardLineSelectionController.mY2, #boardLineSelectionController.mY2Unit
        }
      )
    }
  }

//--- Restrict rectangle inspector
  selectionController BoardRestrictRectangle #restrictRectangleSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \RestrictRectangleInspectorView vStack {
    StaticLabel (title: "Restrict Rectangle Inspector", bold: yes, size: .small, alignment: .center)
    CanariRestrictRectangleView {
      $front #restrictRectangleSelectionController.mIsInFrontLayer
      $back #restrictRectangleSelectionController.mIsInBackLayer
      $inner1 #restrictRectangleSelectionController.mIsInInner1Layer
      $inner2 #restrictRectangleSelectionController.mIsInInner2Layer
      $inner3 #restrictRectangleSelectionController.mIsInInner3Layer
      $inner4 #restrictRectangleSelectionController.mIsInInner4Layer
    }
  }

//--- Text inspector
  selectionController BoardText #boardTextSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \BoardTextInspectorView vStack {
    StaticLabel (title: "Text Inspector", bold: yes, size: .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Text", bold: no, size: .small, alignment: .right) { expandableHeight () },
        right: TextField (minWidth: 150, size: .small) {
          automaticallyAdjustHeight (maxWidth: 150)
          $value #boardTextSelectionController.mText (sendContinously : yes)
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Origin", right:"X", bold: no, size: .small),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardTextSelectionController.mX, #boardTextSelectionController.mXUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size: .small, alignment: .right),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #boardTextSelectionController.mY, #boardTextSelectionController.mYUnit
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Font", bold: no, size: .small, alignment: .right),
        right: CanariBoardFontPopUpButton {
          $currentFontName #boardTextSelectionController.fontName
          $fontNames root.fontNameArray
          $run setBoardTextFontAction
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Size", bold: no, size: .small, alignment: .right),
        right: DoubleField (width: 64, size: .small) {
          $value #boardTextSelectionController.mFontSize (sendContinously: yes)
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Weight", bold: no, size: .small, alignment: .right),
        right: DoubleField (width: 64, size: .small) {
          $value #boardTextSelectionController.mWeight (sendContinously: yes)
        }
      )
      addFirstBaseLineAligned (
        left: space,
        right: Checkbox (title: "Oblique", size: .small) { $value #boardTextSelectionController.mOblique }
      ) 
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Horizontal", bold: no, size: .small, alignment: .right),
        right: CanariHorizontalAlignmentSegmentedControl (size: .small) { $alignment #boardTextSelectionController.mHorizontalAlignment }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Vertical", bold: no, size: .small, alignment: .right),
        right: CanariVerticalAlignmentSegmentedControl (size: .small) { $alignment #boardTextSelectionController.mVerticalAlignment }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right),
        right: CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) { $angle #boardTextSelectionController.mRotation }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Side", bold: no, size: .small, alignment: .right),
        right: EnumPopUpButton (titles: enum BoardTextLayer.popupTitles, size: .small) { $selectedIndex #boardTextSelectionController.mLayer } 
      )
      add (single: Checkbox (title: "Show Rotation Knob", size: .small) {
        set (toolTip: "Common to all texts, stored in Preferences")
        $value prefs.mShowTextRotationKnobInBoard }
      )
    }
  }

  action setBoardTextFontAction ;
  
//--- Component inspector
  selectionController ComponentInProject #componentInBoardSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \ComponentInBoardInspectorView vStack {
    StaticLabel (title: "Component Inspector", bold: yes, size: .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Name", bold: yes, size: .small, alignment: .left),
        right: Label (bold: yes, size: .small) { set (alignment: .left) $title #componentInBoardSelectionController.componentName }
      )
      addFirstBaseLineAligned (
        left: space,
        right: Checkbox (title: "Display Name", size: .small) { $value #componentInBoardSelectionController.mNameIsVisibleInBoard }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Size", bold: no, size: .small, alignment: .right),
        right: DoubleField (width: 64, size: .small) {
          $value #componentInBoardSelectionController.mNameFontSize (sendContinously : no)
          // $enabled #componentInBoardSelectionController.mNameIsVisibleInBoard
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Font", bold: no, size: .small, alignment: .right),
        right: CanariBoardFontPopUpButton {
          $currentFontName #componentInBoardSelectionController.componentNameFontName
          $fontNames root.fontNameArray
          $run setComponentNameFontAction
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right),
        right: CanariPreferredDirectionSegmentedControl { $angle #componentInBoardSelectionController.mNameRotation }
      )
      addFirstBaseLineAligned (
        left: space,
        right: CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
          $angle #componentInBoardSelectionController.mNameRotation
          $enabled #componentInBoardSelectionController.mNameIsVisibleInBoard
        }
      )
      addSeparator ()
      add (single: Checkbox (title: "Draw Component Legend", size: .small) { $value #componentInBoardSelectionController.mDisplayLegend })
      addSeparator ()
      add (single: StaticLabel (title: "Package", bold: yes, size: .small, alignment: .left))
      add (single: CanariBoardComponentPackagePopUpButton [configurator componentPackagePopUpButtonConfigurator])
      add (single: Checkbox (title: "Show Rotation Knob", size: .small) {
        set (toolTip: "Common to all packages, stored in Preferences")
        $value prefs.mShowComponentRotationKnobInBoard
      })
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right),
        right: CanariPreferredDirectionSegmentedControl { $angle #componentInBoardSelectionController.mRotation }
      )
      addFirstBaseLineAligned (
        left: space,
        right: CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
          $angle #componentInBoardSelectionController.mRotation
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Center", right:"X", bold: no, size: .small),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #componentInBoardSelectionController.mX, #componentInBoardSelectionController.mXUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size: .small, alignment: .right),
        right: CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #componentInBoardSelectionController.mY, #componentInBoardSelectionController.mYUnit
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Value", bold: yes, size: .small, alignment: .left),
        right: TextField (minWidth: 150, size: .small) {
          automaticallyAdjustHeight (maxWidth: 150)
          $value #componentInBoardSelectionController.mComponentValue (sendContinously : yes)
    //    $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
        }
      )
      addFirstBaseLineAligned (
        left: space,
        right: Checkbox (title: "Display Value", size: .small) { $value #componentInBoardSelectionController.mValueIsVisibleInBoard }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Size", bold: no, size: .small, alignment: .right),
        right: DoubleField (width: 64, size: .small) {
          $value #componentInBoardSelectionController.mValueFontSize (sendContinously : no)
         // $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Font", bold: no, size: .small, alignment: .right),
        right: CanariBoardFontPopUpButton {
          $currentFontName #componentInBoardSelectionController.componentValueFontName
          $fontNames root.fontNameArray
          $run setComponentValueFontAction
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right),
        right: CanariPreferredDirectionSegmentedControl { $angle #componentInBoardSelectionController.mValueRotation }
      )
      addFirstBaseLineAligned (
        left: space,
        right: CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
          $angle #componentInBoardSelectionController.mValueRotation
          $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Slave Pads", bold: yes, size: .small, alignment: .left),
        right: BoolPopUpButton (title0: "should be insulated", title1: "should be routed") {
          $value #componentInBoardSelectionController.mSlavePadsShouldBeRouted
          $enabled #componentInBoardSelectionController.hasSlavePads
        }
      )
      addSeparator ()
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Side", bold: yes, size: .small, alignment: .left),
        right: EnumPopUpButton (titles: enum ComponentSide.popupTitles, size: .small) { $selectedIndex #componentInBoardSelectionController.mSide }
      )
    }
  }

  action setComponentNameFontAction ;
  action setComponentValueFontAction ;
   
  //············································································
  //     Product Page
  //············································································

  stackView \productPage vStack set (margins: 8) {
//    newView productMasterView = \ProductMasterView ()
    newView artworkDescriptionPage = \ArtworkDescriptionPage ()
    newView artworkMinimaPage = \ArtworkMinimaPage ()
    newView artworkDataPage = \ArtworkDataPage ()
    newView pdfSettingsPage = \PDFSettingsPage ()
    newView generationLogPage = \GenerationLogPage ()
    hStack {
      vStack {
        Button (title: "Import Artwork…", size : .regular) {
          expandableWidth ()
          $hidden !root.mArtwork.none
          $run importArtworkAction 
        }
        Button (title: "Detach Artwork", size : .regular) {
          expandableWidth ()
          $hidden root.mArtwork.none
          $run detachArtworkAction 
        }
        Label (bold: yes, size : .regular) { expandableWidth () set (alignment: .center) $title root.mArtworkName }
        Button (title: "Generate Files", size : .regular) {
          expandableWidth ()
          $enabled !root.mArtwork.none & !self.documentIsUnnamed
          $run generateProductFilesAction
        }
      }
      vStack {
        Label (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $title self.documentFileShouldBeRenamedErrorMessage
        }
        TextObserverView () {
          expandableWidth ()
          setNoBackground ()
          setNoVerticalScroller ()
          setNoHorizontalScroller ()
          $observedValue self.incorrectDocumentFileDetailedErrorMessage
        }
        space
      }
    }
    hStack $hidden !root.mArtwork.none {
      space
      vStack { space StaticLabel (title: "No Artwork", bold: yes, size : .regular, alignment: .center) space }
      space
    }
    vStack $hidden root.mArtwork.none {
      TabView (size : .regular) [outlet mProductPageSegmentedControl] { 
        addTab (title: "Artwork Description", tooltip: "", contentView: view artworkDescriptionPage)
        addTab (title: "Artwork Minima", tooltip: "", contentView: view artworkMinimaPage)
        addTab (title: "Artwork Data", tooltip: "", contentView: view artworkDataPage)
        addTab (title: "PDF Settings", tooltip: "", contentView: view pdfSettingsPage)
        addTab (title: "Generation Log", tooltip: "", contentView: view generationLogPage)
      }
    }
 }

  action importArtworkAction ;
  action detachArtworkAction ;
  action generateProductFilesAction ;
  transient Bool documentIsUnnamed dependsFrom self.documentFileName ;
  transient String incorrectDocumentFileDetailedErrorMessage dependsFrom self.documentFileName ;
  transient String documentFileShouldBeRenamedErrorMessage dependsFrom self.documentFileName ;

  //············································································

  stackView \ProductMasterView vStack { }

  //············································································

  stackView \ArtworkDescriptionPage vStack {
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Layer Description", bold: no, size: .regular, alignment: .center),
        right: Label (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $title root.layerConfigurationString
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Artwork Version", bold: no, size: .regular, alignment: .center),
        right: IntObserverField (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $observedValue root.mArtworkVersion
        }
      )
      addCenterYAligned (
        left: vStack { StaticLabel (title: "Comment", bold: no, size: .regular, alignment: .center) space},
        right: TextObserverView () { expandableWidth () $observedValue root.artworkComments }
      )
    }
  }

  //············································································

  stackView \ArtworkDataPage vStack set (margins: 20) {
    hStack set (margins: 8) {
      space
      hStack setFirstBaselineAlignment ()  {
        StaticLabel (title: "Drill File Extension", bold: no, size : .small, alignment: .center)
        TextField (minWidth: 56, size : .small) { $value root.drillDataFileExtension (sendContinously: yes) }
      }
      ImageObserverView (size: .small) { $image self.emptyDrillFileExtensionImage }
      space
    }
    hStack set (leftMargin: 8) set (rightMargin: 8) {
      space
      vStack set (topMargin: 8) {
        Label (bold: yes, size : .small) { $title self.generatedFileCountString }
        TableView (size : .small, addControlButtons: yes) { $tableValue #mDataController }
      }
      separator
      vStack set (topMargin: 8) {
        hStack {
          hStack setFirstBaselineAlignment () {
            StaticLabel (title: "File Extension", bold: yes, size : .small, alignment: .center)
            TextField (minWidth: 56, size : .small) { $value #mDataSelection.fileExtension (sendContinously: yes) }
          }
          ImageObserverView (size: .small) { $image #mDataSelection.emptyFileExtensionImage }
         space
         StaticLabel (title: "Empty Data File", bold: yes, size : .small, alignment: .center) { setOrangeTextColor () $hidden !#mDataSelection.hasNoData}
        }
        StaticLabel (title: "Front Side Elements", bold: yes, size : .small, alignment: .left)
        hStack {
          GridView2 {
            set (leftMargin: 20)
            addFirstBaseLineAligned (
              left: Checkbox (title: "Legend Front Side Texts", size : .small) { $value #mDataSelection.drawTextsLegendTopSide },
              right: Checkbox (title: "Layout Front Side Texts", size : .small) { $value #mDataSelection.drawTextsLayoutTopSide }
            )
            addFirstBaseLineAligned (
              left: Checkbox (title: "Front Side Tracks", size : .small) { $value #mDataSelection.drawTracksTopSide },
              right: Checkbox (title: "Front Side Pads", size : .small) { $value #mDataSelection.drawPadsTopSide }
            )
          }
          space
        }
        hStack set (leftMargin: 20) { Checkbox (title: "Front Side Component Names", size : .small) { $value #mDataSelection.drawComponentNamesTopSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Front Side Component Values", size : .small) { $value #mDataSelection.drawComponentValuesTopSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Front Side Package Legends", size : .small) { $value #mDataSelection.drawPackageLegendTopSide } space }
        StaticLabel (title: "Inner Elements", bold: yes, size : .small, alignment: .center)
        hStack {
          GridView2 {
            set (leftMargin: 20)
            addFirstBaseLineAligned (
              left:  Checkbox (title: "Traversing Pads", size : .small) { $value #mDataSelection.drawTraversingPads $hidden !root.hasInnerElements },
              right: space
            )
            addFirstBaseLineAligned (  // Always disabled items
              left:  Checkbox (title: "Traversing Pads", size : .small) { $enabled root.hasInnerElements $hidden root.hasInnerElements },
              right: space
            )
           addFirstBaseLineAligned (
              left:  Checkbox (title: "Inner 1 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner1Layer $hidden !root.hasInnerElements },
              right: Checkbox (title: "Inner 2 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner2Layer $hidden !root.hasInnerElements }
            )
            addFirstBaseLineAligned (  // Always disabled items
              left:  Checkbox (title: "Inner 1 Layer Tracks", size : .small) { $enabled root.hasInnerElements $hidden root.hasInnerElements },
              right: Checkbox (title: "Inner 2 Layer Tracks", size : .small) { $enabled root.hasInnerElements $hidden root.hasInnerElements }
            )
            addFirstBaseLineAligned (
              left:  Checkbox (title: "Inner 3 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner3Layer $hidden !root.hasSixLayers },
              right: Checkbox (title: "Inner 4 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner4Layer $hidden !root.hasSixLayers }
            )
            addFirstBaseLineAligned ( // Always disabled items
              left:  Checkbox (title: "Inner 3 Layer Tracks", size : .small) { $enabled root.hasSixLayers $hidden root.hasSixLayers },
              right: Checkbox (title: "Inner 4 Layer Tracks", size : .small) { $enabled root.hasSixLayers $hidden root.hasSixLayers }
            )
          }
          space
        }
        StaticLabel (title: "Back Side Elements", bold: yes, size : .small, alignment: .center)
        hStack {
          GridView2 {
            set (leftMargin: 20)
            addFirstBaseLineAligned (
              left: Checkbox (title: "Legend Back Side Texts", size : .small) { $value #mDataSelection.drawTextsLegendBottomSide },
              right: Checkbox (title: "Layout Back Side Texts", size : .small) { $value #mDataSelection.drawTextsLayoutBottomSide }
            )
            addFirstBaseLineAligned (
              left: Checkbox (title: "Back Side Tracks", size : .small) { $value #mDataSelection.drawTracksBottomSide },
              right: Checkbox (title: "Back Side Pads", size : .small) { $value #mDataSelection.drawPadsBottomSide }
            )
          }
          space
        }
        hStack set (leftMargin: 20) { Checkbox (title: "Back Side Component Names", size : .small) { $value #mDataSelection.drawComponentNamesBottomSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Back Side Component Values", size : .small) { $value #mDataSelection.drawComponentValuesBottomSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Back Side Package Legends", size : .small) { $value #mDataSelection.drawPackageLegendBottomSide } space }
        StaticLabel (title: "Other Elements", bold: yes, size : .small, alignment: .center)
        hStack set (leftMargin: 20) {
          Checkbox (title: "Vias", size : .small) { $value #mDataSelection.drawVias }
          Checkbox (title: "Internal Board Limits", size : .small) { $value #mDataSelection.drawInternalBoardLimits }
          Checkbox (title: "Board Limits", size : .small) { $value #mDataSelection.drawBoardLimits }
          space
        }
        hStack set (leftMargin: 20) setFirstBaselineAlignment () {
          Checkbox (title: "Pad Holes in PDF file, with diameter", size : .small) { $value #mDataSelection.drawPadHolesInPDF }
          CanariDimensionAndPopUp (size : .small) {
            $dimensionAndUnit #mDataSelection.padHoleDiameterInPDF, #mDataSelection.measurementUnitForPadHoleInPDF
            $enabled #mDataSelection.drawPadHolesInPDF
          }
        }
        StaticLabel (title: "Option", bold: yes, size : .small, alignment: .center)
        hStack set (leftMargin: 20) { Checkbox (title: "Horizontal Mirror", size : .small) { $value #mDataSelection.horizontalMirror } space }
      }
      space
    }
    space
  }

  transient NSImage emptyDrillFileExtensionImage dependsFrom self.emptyDrillFileExtension ;
  transient Bool emptyDrillFileExtension dependsFrom root.drillDataFileExtension ;
  transient String generatedFileCountString dependsFrom #mDataController.sortedArray.count ;

  tableViewController #mDataController (allowsEmptySelection:no, allowsMultipleSelection:no) root.fileGenerationParameterArray {
    editableColumn name (title: "Name", minWidth: 60, maxWidth: 200, headerAlignment: .left, contentAlignment: .left) sortkey name
    column parameterStatusImage (title: "", minWidth: 30, maxWidth: 30, headerAlignment: .center, contentAlignment: .center)
  }
  selectionController ArtworkFileGenerationParameters #mDataSelection : #mDataController.selectedArray ;

  //············································································

  stackView \ArtworkMinimaPage vStack set (margins: 20) {
    hStack {
      space
      vStack {
        space
        StaticLabel (title: "PP: Pad to Pad Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TP: Track to Pad Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TT: Track to Track Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TW: Track Width", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "OAR: Outer Annular Ring", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: no, size : .small, alignment: .left)
        space
      }
      StaticImageView (name: "artwork")
      space
    }
    hStack {
      space
      GridView2 {
        set (leftMargin: 20) set (rightMargin: 20) set (topMargin: 8)
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: no, size : .regular, alignment: .center),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minPPTPTTTW, root.minPPTPTTTWdisplayUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for PHD", bold: no, size : .regular, alignment: .center),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForPHDinEBUnit, root.minValueForPHDdisplayUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for OAR", bold: no, size : .regular, alignment: .center),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForOARinEBUnit, root.minValueForOARdisplayUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for Board Limit Width", bold: no, size : .regular, alignment: .center),
          right: CanariObservedDimensionAndPopUp (size : .small) {
            $dimensionAndUnit root.minValueForBoardLimitWidth, root.minValueForBoardLimitWidthDisplayUnit
          }
        )
      }
      space
    }
    space
  }

  //············································································

  stackView \PDFSettingsPage vStack set (margins: 20) {
    hStack setFirstBaselineAlignment () {
      space
      ColorWell { $color root.mPDFBoardBackgroundColor (sendContinously : no) }
      StaticLabel (title: "Board Background Color", bold: no, size: .regular, alignment: .center)
      space
    }
    space
  }

  //············································································

  stackView \GenerationLogPage vStack set (margins: 20) {
    TextObserverView () [outlet mProductFileGenerationLogTextView]
  }

  //············································································

}

//------------------------------------------------------------------------------
