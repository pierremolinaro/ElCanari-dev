//------------------------------------------------------------------------------
//     P R O J E C T    D O C U M E N T
//------------------------------------------------------------------------------

autoLayoutDocument AutoLayoutProjectDocument : AutoLayoutProjectDocumentSuperClass root ProjectRoot stackView \DocumentMainView {

  stackView \pageMasterView vStack { }

  stackView \DocumentMainView vStack set (spacing: .zero) {
    newView pageMasterView = \pageMasterView ()
    newView componentsPage = \componentsPage ()
    newView libraryPage = \libraryPage ()
    newView schematicPage = \schematicsPage ()
    newView netClassesPage = \netClassesPage ()
    newView netListPage = \netListPage ()
    newView boardOutlinePage = \boardOutlinePage ()
    newView boardContentsPage = \boardContentsPage ()
    newView productPage = \productPage ()
    hStack set (margins: .regular) {
      vStack set (spacing: .zero) {
        SegmentedControlWithPages (documentView: view pageMasterView, equalWidth: no, size : .regular) {
          addPage (title: "Components", tooltip: "", pageView: view componentsPage)
          addPage (title: "Library", tooltip: "", pageView: view libraryPage)
          addPage (title: "Schematic", tooltip: "", pageView: view schematicPage)
          addPage (title: "Net Classes", tooltip: "", pageView: view netClassesPage)
          addPage (title: "Net List", tooltip: "", pageView: view netListPage)
          addPage (title: "Board Outline", tooltip: "", pageView: view boardOutlinePage)
          addPage (title: "Board Contents", tooltip: "", pageView: view boardContentsPage)
          addPage (title: "Product", tooltip: "", pageView: view productPage)
          $selectedPage root.mSelectedPageIndex
          $segmentImage root.libraryPageRequiresAttentionImage (segmentIndex : 1)
          $segmentImage root.segmentedControlSchematicIssueImage (segmentIndex : 2)
          $segmentImage root.segmentedControlNetListIssueImage (segmentIndex : 4)
          $segmentImage root.segmentedControlBoardIssueImage (segmentIndex : 6)
          $segmentImage root.segmentedControlArtworkAttentionImage (segmentIndex : 7)
        }
        gutter
        StaticLabel (title: "Page", bold: no, size : .regular, alignment: .center)
      }
      space
      vStack set (spacing: .zero) $hidden prefs.fileSystemLibraryIsOk {
        Button (title: "Show Consistency Window", size: .regular)  { 
          $run prefs.showLibraryConsistencyLogWindowAction
          $image prefs.fileSystemLibraryStatusImage
        }
        gutter
        StaticLabel (title: "File System Library requires attention", bold: no, size : .regular, alignment: .center)
      }
      space
      vStack set (spacing: .zero) {
        StatusBadgeView () {
          $tooltip root.schematicStatusMessage
          $errorCount root.schematicErrorCount
          $warningCount root.schematicWarningCount
        }
        gutter
        StaticLabel (title: "Schematic", bold: no, size : .regular, alignment: .center)
      }
      vStack set (spacing: .zero) {
        StatusBadgeView () {
          $tooltip root.boardStatusMessage
          $errorCount root.boardStatusErrorCount
          $warningCount root.boardStatusWarningCount
        }
        gutter
        StaticLabel (title: "Board", bold: no, size : .regular, alignment: .center)
      }
      vStack  set (spacing: .zero) {
        StatusView () {
          $tooltip root.ercStatusMessage
          $status root.ercStatusValue
        }
        gutter
        StaticLabel (title: "ERC", bold: no, size : .regular, alignment: .center)
      }
    }
    separator
    view pageMasterView
  }

//---------------------- Components Tab

  stackView \componentsPage hStack set (margins: .regular) {
    vStack {
      Label (bold: yes, size : .small) { expandableWidth () set (alignment: .center) $title self.componentCount }
      separator
      StaticLabel (title: "Add Component from:", bold: yes, size : .small, alignment: .left)
      Button (title: "File Library…", size: .small) { expandableWidth () $run addComponentFromFileLibraryAction }
      PullDownButton (title: "Embedded Library…", size: .small) {
         expandableWidth () $items root.deviceNames $run addComponentFromEmbeddedLibraryAction
      }
      separator
      StaticLabel (title: "On Selected Components", bold: yes, size : .small, alignment: .left)
      Button (title: "Duplicate", size: .small) {
        set (commandKeyEquivalent: "d")
        expandableWidth ()
        $run duplicateSelectedComponentsAction
        $enabled #componentController.selectedArray.count > 0
      }
      Button (title: "Rename…", size: .small) {
        expandableWidth ()
        set (commandKeyEquivalent: "r")
        $run renameSelectedComponentsAction
        $enabled #componentController.selectedArray.count == 1
      }
      Button (title: "Remove", size: .small) {
        expandableWidth ()
        setDeleteKeyAsKeyEquivalent ()
        $run removeSelectedComponentsAction
        $enabled #componentController.selectedArray.count > 0
      }
      Button (title: "Change Package…", size: .small) {
        expandableWidth ()
        set (controlCommandKeyEquivalent: "c")
        $run changePackageOfSelectedComponentsAction
        $enabled self.canChangePackage
      }
      Button (title: "Change Value…", size: .small) {
        expandableWidth ()
        set (controlCommandKeyEquivalent: "v")
        $run changeValueOfSelectedComponentsAction
        $enabled #componentController.selectedArray.count > 0
      }
      Button (title: "Reveal in Board", size: .small) {
        expandableWidth ()
        set (controlCommandKeyEquivalent: "b")
        $run revealPackageOfSelectedComponentsAction
        $enabled #componentController.selectedArray.count == 1
      }
      separator
      space
    }
    TableView (size : .regular, addControlButtons: no) { $tableValue #componentController }
  }

  transient String componentCount dependsFrom root.mComponents.count ;
  action addComponentFromFileLibraryAction ;
  action addComponentFromEmbeddedLibraryAction ;
  action duplicateSelectedComponentsAction ;
  action renameSelectedComponentsAction ;
  action removeSelectedComponentsAction ;
  action changePackageOfSelectedComponentsAction ;
  transient Bool canChangePackage dependsFrom #componentController.selectedArray.all.availablePackages ;
  action changeValueOfSelectedComponentsAction ;
  action revealPackageOfSelectedComponentsAction ;

  tableViewController #componentController (allowsEmptySelection:yes, allowsMultipleSelection:yes) root.mComponents {
     column componentName (title: "Name", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey componentName
     column deviceName (title: "Device", minWidth: 60, maxWidth: 300, headerAlignment: .left, contentAlignment: .left)
       sortkey deviceName
     column selectedPackageName (title: "Package", minWidth: 60, maxWidth: 300, headerAlignment: .left, contentAlignment: .left)
       sortkey selectedPackageName
     editableColumn mComponentValue (title: "Value", minWidth: 60, maxWidth: 200, headerAlignment: .left, contentAlignment: .left)
       sortkey mComponentValue
     column placementInSchematic (title: "inSchematics", minWidth: 60, maxWidth: 200, headerAlignment: .center, contentAlignment: .center)
       sortkey placementInSchematic
     column componentIsPlacedInBoardString (title: "inBoard", minWidth: 60, maxWidth: 200, headerAlignment: .center, contentAlignment: .center)
       sortkey componentIsPlacedInBoardString
  }

//---------------------- Library Tab

  stackView \libraryPage vStack set (margins: .regular) {
    newView devicesInLibraryPage = \DevicesInLibraryPage ()
    newView fontsInLibraryPage = \FontsInLibraryPage ()
    hStack {
      Button (title: "Remove Embedded Devices", size: .regular) {
        set (controlCommandKeyEquivalent: "r")
        $run removeEmbeddedDevicesAction
        $enabled root.mDevices.count > 0
      }
      Button (title: "Reset Device and Font Versions", size: .regular) {
        set (controlCommandKeyEquivalent: "v")
        $run resetDevicesAndFontsVersionAction
        $enabled (root.mDevices.count > 0) | (root.mFonts.count > 0)
      }
      Button (title: "Update Devices and Fonts", size: .regular) {
        set (controlCommandKeyEquivalent: "u")
        $run updateDevicesAndFontsAction
        $enabled (root.mDevices.count > 0) | (root.mFonts.count > 0)
      }
      space   
    }
    TabView (size : .regular) {
      addTab (title: "Devices", tooltip: "", contentView: view devicesInLibraryPage)
      addTab (title: "Fonts", tooltip: "", contentView: view fontsInLibraryPage)
      $segmentImage root.fileSystemDeviceLibraryStatusImage (segmentIndex : 0)
      $segmentImage root.fileSystemFontLibraryStatusImage (segmentIndex : 1)
    }
  }
    
  stackView \DevicesInLibraryPage vStack set (margins: .regular) expandableWidth () {
     hStack {
      Button (title: "Edit Selected Device", size: .regular) {
        set (shiftCommandKeyEquivalent: "e")
        $run editSelectedDeviceAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      Button (title: "Reset Selected Device Version", size: .regular) {
        set (shiftCommandKeyEquivalent: "r")
        $run resetSelectedDeviceVersionAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      Button (title: "Export Selected Device", size: .regular) {
        set (shiftCommandKeyEquivalent: "x")
        $run exportSelectedDeviceAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      Button (title: "Update Selected Device…", size: .regular) {
        set (shiftCommandKeyEquivalent: "u")
        $run updateSelectedDeviceAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      space
    }
    hStack {
      TableView (size : .regular, addControlButtons: no) {
//        expandableWidth ()
//        set (minWidth: 400)
        $tableValue #projectDeviceController
      }
//      separator
      vStack {
        StaticLabel (title: "Selected Device", bold: yes, size: .regular, alignment: .center)
        CanariProjectDeviceDescriptionView {
           set (minWidth: 300)
           $symbolTypeNameArray self.selectedDeviceNames
           $symbolInstanceNameArray self.selectedDeviceSymbolNames
           $packageNameArray self.selectedDevicePackageNames
           $pinPadAssignmentArray self.pinPadAssignments
        }
//        hStack {
//          vStack {
//            CanariProjectDeviceTableView (size : .regular) {
//              expandableWidth ()
////              set (minHeight: 75)
//              set (minWidth: 150)
//              $array self.selectedDeviceNames
//            }
//            divider
//            CanariProjectDeviceSymbolTypeAndNameTableView (size : .regular) {
//              expandableWidth ()
//              set (minWidth: 75)
//              set (minHeight: 150)
//              $array self.selectedDeviceSymbolNames
//            }
//            divider
//            CanariProjectDevicePackageTableView (size : .regular) {
//              set (minHeight: 75)
//              expandableWidth ()
//              $array self.selectedDevicePackageNames
//            }
//          }
//          divider
//          CanariProjectPinPadAssignmentTableView (size : .regular) {
//            expandableWidth ()
//            set (minWidth: 200)
//            $array self.pinPadAssignments
//          }
//        }
      }
    }
  }

  stackView \FontsInLibraryPage vStack set (margins: .regular) {
    hStack {
      Button (title: "Add Font…", size: .regular) {
        set (shiftCommandKeyEquivalent: "a")
        $run addFontAction
      }
      Button (title: "Edit Selected Font", size: .regular) {
        set (shiftCommandKeyEquivalent: "e")
        $run editFontAction
        $enabled #projectFontController.selectedArray.count > 0
      }
      Button (title: "Reset Selected Font Version", size: .regular) {
        set (shiftCommandKeyEquivalent: "r")
        $run resetFontVersionAction
        $enabled #projectFontController.selectedArray.count > 0
      }
      Button (title: "Update Selected Fonts", size: .regular) {
        set (shiftCommandKeyEquivalent: "u")
        $run updateFontAction
        $enabled #projectFontController.selectedArray.count > 0
      }
      Button (title: "Remove Selected Font", size: .regular) {
        setDeleteKeyAsKeyEquivalent ()
        $run removeFontAction
        $enabled #projectFontController.selectedArray.count > 0 & self.canRemoveSelectedFonts
      }
      space
    }
    TableView (size : .regular, addControlButtons: no) { $tableValue #projectFontController }
  }
 
  action removeEmbeddedDevicesAction ;
  action resetDevicesAndFontsVersionAction ;
  action updateDevicesAndFontsAction ;
  action addFontAction ;
  action editFontAction ;
  action resetFontVersionAction ;
  action updateFontAction ;
  action removeFontAction ;
  transient Bool canRemoveSelectedFonts
    dependsFrom #projectFontController.selectedArray.all.canRemoveFont ;
  action editSelectedDeviceAction ;
  action resetSelectedDeviceVersionAction ;
  transient Bool canRemoveSelectedDevices
    dependsFrom #projectDeviceController.selectedArray.all.canRemove ;
  action exportSelectedDeviceAction ;
  action updateSelectedDeviceAction ;
  transient ThreeStringArray pinPadAssignments
    dependsFrom #projectDeviceController.selectedArray.all.pinPadAssignments ;
  transient TwoStringArray selectedDeviceSymbolNames dependsFrom
    #projectDeviceController.selectedArray.all.symbolAndTypesNames ;
  transient StringArray selectedDevicePackageNames dependsFrom
    #projectDeviceController.selectedArray.all.packageNames ;
  transient StringArray selectedDeviceNames dependsFrom
    #projectDeviceController.selectedArray.all.symbolAndTypesNames ;
 
  tableViewController #projectFontController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mFonts {
     column mFontName (title: "Font Name", minWidth: 60, maxWidth: 2000, headerAlignment: .left, contentAlignment: .left)
       sortkey mFontName
    column fileSystemStatusImage (title: "", minWidth: 20, maxWidth: 20, headerAlignment: .left, contentAlignment: .center)
    column mFileSystemStatusMessage (title: "Status in Device Library", minWidth: 150, maxWidth: 200, headerAlignment: .left, contentAlignment: .left) sortkey mFileSystemStatusMessage
     column versionString (title: "Version", minWidth: 60, maxWidth: 100, headerAlignment: .center, contentAlignment: .center)
       sortkey versionString
     column sizeString (title: "Size", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey sizeString
     column textCount (title: "# Texts", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey textCount
     column componentNamesCount (title: "# Component Names", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey componentNamesCount
     column componentValuesCount (title: "# Component Values", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey componentValuesCount
  }

  tableViewController #projectDeviceController (allowsEmptySelection:yes, allowsMultipleSelection:yes) root.mDevices {
     column mDeviceName (title: "Name", minWidth: 200, maxWidth: 4000, headerAlignment: .left, contentAlignment: .left)
       sortkey mDeviceName
    column fileSystemStatusImage (title: "", minWidth: 20, maxWidth: 20, headerAlignment: .left, contentAlignment: .center)
    column mFileSystemStatusMessage (title: "Status in Device Library", minWidth: 150, maxWidth: 200, headerAlignment: .left, contentAlignment: .left) sortkey mFileSystemStatusMessage
     column versionString (title: "Version", minWidth: 80, maxWidth: 80, headerAlignment: .center, contentAlignment: .center)
       sortkey versionString
    column sizeString (title: "Size (bytes)", minWidth: 100, maxWidth: 100, headerAlignment: .center, contentAlignment: .center)
       sortkey sizeString
    column deviceComponentCountString (title: "Components", minWidth: 100, maxWidth: 100, headerAlignment: .center, contentAlignment: .center)
       sortkey deviceComponentCountString
  } 

//---------------------- Net Class Tab

  stackView \netClassesPage vStack set (margins: .regular) {
    hStack {
      Button (title: "New Net Class", size: .regular) {
        $run addNetClassAction
      }
      Button (title: "Edit Selected Net Class", size: .regular) {
        $run editNetClassAction
        $enabled #netClassController.selectedArray.count == 1
      }
      Button (title: "Remove Selected Net Class", size: .regular) {
        setDeleteKeyAsKeyEquivalent ()
        $run removeNetClassAction
        $enabled self.canRemoveNetClasses
      }
      space
    }
    TableView (size: .regular, addControlButtons: no) { $tableValue #netClassController }
  }

  action addNetClassAction ;
  action editNetClassAction ;
  action removeNetClassAction ;
  transient Bool canRemoveNetClasses dependsFrom root.mNetClasses.count, #netClassController.selectedArray.all.canRemove ;
  
  tableViewController #netClassController (allowsEmptySelection:yes, allowsMultipleSelection:yes) root.mNetClasses {
    column mNetClassName (title: "Name", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey mNetClassName
    column mNetClassColor (title: "Schematic Color", minWidth: 80, maxWidth: 100, headerAlignment: .left, contentAlignment: .left)
    column trackWidthString (title: "Width", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey trackWidthString
    column viaHoleDiameter (title: "Via Hole Diameter", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey viaHoleDiameter
    column viaPadDiameter (title: "Via Pad Diameter", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey viaPadDiameter
    column allowTracksOnFrontSideString (title: "Front Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnFrontSideString
    column allowTracksOnBackSideString (title: "Back Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnBackSideString
    column allowTracksOnInner1LayerString (title: "Inner 1 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner1LayerString
    column allowTracksOnInner2LayerString (title: "Inner 2 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner3LayerString
    column allowTracksOnInner3LayerString (title: "Inner 3 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner3LayerString
    column allowTracksOnInner4LayerString (title: "Inner 4 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner4LayerString
    column netUsage (title: "Used by…", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey netUsage
  }

//---------------------- Net Tab

  stackView \netListPage vStack set (margins: .regular) {
    hStack {
      Label (bold: yes, size: .regular) { $title self.netCountString }
      Button (title: "Rename Net…", size: .regular) {
       set (commandKeyEquivalent: "r")
       $run renameNetAction
        $enabled self.netCount > 0
      }
      Button (title: "Select Net Class…", size: .regular) {
        set (commandKeyEquivalent: "k")
        $run selectNetClassAction
        $enabled self.netCount > 0
      }
      WarningImageView { $hidden root.netWarningCount == 0 }
      IntObserverField (bold: yes, size: .regular) {
        $observedValue root.netWarningCount
        $hidden root.netWarningCount == 0
      }
      space
    }
    hStack {
      CanariNetDescriptionTableView [outlet mNetInfoTableView configurator netDescriptionTableViewConfigurator] {
        set (minWidth: 300)
        $netInfo root.netsDescription
      }
      divider
      vStack {
        StaticLabel (title: "Selected Net Inspector", bold: yes, size: .small, alignment: .center)
        vStack withVScroller [configurator selectedNetVerticalScrollViewConfigurator]
        set (margins: .regular) set (width: 300) {
        }
//        VerticalScrollView (
//          content: vStack set (margins: .regular) set (width: 300) { }
//        ) [configurator selectedNetVerticalScrollViewConfigurator]
      }
    }
  }

  transient String netCountString dependsFrom root.netsDescription ;
  transient Int netCount dependsFrom root.netsDescription ;
  action renameNetAction ;
  action selectNetClassAction ;

//---------------------- Schematics Tab

  arrayController #schematicObjectsController : root.selectedSheetObjects ;
  action selectAllConnectedElementsInSchematicsAction ;
  action moveSelectedToSheetInSchematicsAction ;

  stackView \schematicsPage hStack {
    newView schematicLateralBar = \schematicsLateralBar ()
    view schematicLateralBar
    separator
    GraphicView (minZoom: 50, maxZoom: 1_000) [outlet mSchematicsView configurator schematicView] {
      prepend (toTopHStack:
        PullDownButton (title: "", size: .small) [configurator schematicPullDownButtonConfigurator] {
          add (item: menuItem "Select all Connected Elements"
               $run selectAllConnectedElementsInSchematicsAction )
          add (item: menuItem "Move Selected Elements to Sheet…"
               $run moveSelectedToSheetInSchematicsAction )
        }
      )
      prepend (toTopHStack: PopUpButton (size: .small) [configurator sheetPopUpButtonConfigurator2])
      $underObjectsDisplay root.schematicBackgroundDisplay
      $overObjectsDisplay root.schematicOverDisplay
      $tooltips root.schematicTooltips
      $horizontalFlip root.mSchematicHorizontalFlip
      $verticalFlip root.mSchematicVerticalFlip
      $graphicController #schematicObjectsController
      $gridStyle root.mSchematicGridStyle
      $gridDisplayFactor root.mSchematicGridDisplayFactor
      $gridLineColor prefs.lineColorGridForSchematic
      $gridCrossColor prefs.dotColorGridForSchematic
      $zoom root.mSchematicZoom
      $backColor prefs.schematicBackColor
    }
  }
  
  action prependNewSchematicHotKeysInspectorAction ;
  action prependNewSchematicInsertSymbolInspectorAction ;
  action prependNewSchematicDisplayInspectorAction ;
  action prependNewSchematicSheetInspectorAction ;
  action appendNewSchematicHotKeysInspectorAction ;
  action appendNewSchematicInsertSymbolInspectorAction ;
  action appendNewSchematicDisplayInspectorAction ;
  action appendNewSchematicSheetInspectorAction ;
  
  stackView \schematicsLateralBar vStack set (width: 250) {
    newView selectedSchematicElementInspectorView = \selectedSchematicElementInspectorView ()
    newView schematicsInspectorView = \schematicsInspectorView ()
    newView schematicHotKeysInspectorView = \schematicsHotKeysInspectorView ()
    newView insertSymbolInSchematicView = \schematicsInsertSymbolInSchematicView ()
    newView schematicsDisplayInspectorView = \schematicsDisplayInspectorView ()
    newView schematicsSheetInspectorView = \schematicsSheetInspectorView ()
    hStack set (margins: .regular) set (spacing: .small) {
      space
      DragSourceButtonWithMenus (tooltip: "Add Wire; hint: option click starts a new wire.") [configurator addWireInschematicsButton]
      space
      DragSourceButtonWithMenus (tooltip: "Add Comment") [configurator addCommentInSchematicsButton]
      space
    }
    vStack set (leftMargin: .regular) set (rightMargin: .regular) {
     Checkbox (title: "Enable Line Column Hilite", size : .small) { $value root.mSchematicEnableHiliteColumnAndRow }
     hStack {
        SegmentedControlWithPages (documentView: view schematicsInspectorView, equalWidth: no, size : .small) {
          expandableWidth ()
          addPage (title: "🛠", tooltip: "Selected Element Inspector", pageView: view selectedSchematicElementInspectorView)
          addPage (title: "🄰", tooltip: "Hot Keys", pageView: view schematicHotKeysInspectorView)
          addPage (title: "", tooltip: "Insert Symbol in Schematic", pageView: view insertSymbolInSchematicView)
          addPage (title: "🔍", tooltip: "Display Inspector", pageView: view schematicsDisplayInspectorView)
          addPage (title: "Sheets", tooltip: "Sheet Inspector", pageView: view schematicsSheetInspectorView)
          $selectedPage root. mSelectedSchematicInspector
          $segmentTitle self.unplacedSymbolsCountString (segmentIndex : 2)
          $segmentImage self.unplacedSymbolsSegmentImage (segmentIndex : 2)
          $segmentImage root.segmentedControlSheetIssueImage (segmentIndex : 4)
        }
      }
      view schematicsInspectorView
    }
  }

  transient Int unplacedSymbolsCount dependsFrom root.unplacedSymbols ;
  transient String unplacedSymbolsCountString dependsFrom self.unplacedSymbolsCount ;
  transient NSImage unplacedSymbolsSegmentImage dependsFrom self.unplacedSymbolsCount ;

  stackView \schematicsInspectorView vStack set (topMargin: .regular) set (bottomMargin: .regular) {
  }  
  
//--- Hot keys inspector
  stackView \schematicsHotKeysInspectorView vStack set (topMargin: .regular) set (bottomMargin: .regular) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewSchematicHotKeysInspectorAction }
      space
      StaticLabel (title: "Hot Keys", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewSchematicHotKeysInspectorAction }
    }
    StaticLabel (title: "[A] Connect all Symbol Pins", bold: no, size: .small, alignment: .left)
      [outletArray mConnectAllSymbolPinsSchematicHotKeyTextField]
    StaticLabel (title: "[B] Add Bottom Label", bold: no, size: .small, alignment: .left)
      [outletArray mAddBottomSchematicHotKeyTextField]
    StaticLabel (title: "[C] Connect", bold: no, size: .small, alignment: .left)
      [outletArray mConnectSchematicHotKeyTextField]
    StaticLabel (title: "[D] Disconnect", bold: no, size: .small, alignment: .left)
      [outletArray mDisconnectSchematicHotKeyTextField]
    StaticLabel (title: "[E] Disconnect All Symbol Pins", bold: no, size: .small, alignment: .left)
      [outletArray mDisconnectAllSymbolPinsSchematicHotKeyTextField]      
    StaticLabel (title: "[F] Add Label to Symbol Pins", bold: no, size: .small, alignment: .left)
      [outletArray mAddLabelToAllSymbolPinsSchematicHotKeyTextField]
    StaticLabel (title: "[L] Add Left Label", bold: no, size: .small, alignment: .left)
      [outletArray mAddLeftLabelSchematicHotKeyTextField]
    StaticLabel (title: "[M] Set NC to Symbol Pins", bold: no, size: .small, alignment: .left)
      [outletArray mAddNCToAllSymbolPinsSchematicHotKeyTextField]
    StaticLabel (title: "[N] Set NC", bold: no, size: .small, alignment: .left)
      [outletArray mAddNCSchematicHotKeyTextField]
    StaticLabel (title: "[P] Remove Wire Point", bold: no, size: .small, alignment: .left)
      [outletArray mRemoveWirePointSchematicHotKeyTextField]
    StaticLabel (title: "[R] Add Right Label", bold: no, size: .small, alignment: .left)
      [outletArray mAddRightLabelSchematicHotKeyTextField]
    StaticLabel (title: "[T] Add Top Label", bold: no, size: .small, alignment: .left)
      [outletArray mAddTopLabelSchematicHotKeyTextField]
    StaticLabel (title: "[V] Show / Hide Component Value", bold: no, size: .small, alignment: .left)
      [outletArray mShowHideSymbolValueSchematicHotKeyTextField]
    StaticLabel (title: "[X] Exchange Symbol…", bold: no, size: .small, alignment: .left)
      [outletArray mExchangeSymbolSchematicHotKeyTextField]
    StaticLabel (title: "[W] Insert Wire Point", bold: no, size: .small, alignment: .left)
      [outletArray mAddWirePointSchematicHotKeyTextField]
    space
  }  

//--- Unplaced symbols inspector
  stackView \schematicsInsertSymbolInSchematicView vStack set (topMargin: .regular) set (bottomMargin: .regular) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewSchematicInsertSymbolInspectorAction }
      space
      StaticLabel (title: "Insert Symbol Inspector", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewSchematicInsertSymbolInspectorAction }
    }
    CanariDragSourceTableView 
    [outletArray mUnplacedSymbolsTableViewArray configurator symbolDragSourceTableViewConfigurator] {
      $models root.unplacedSymbols
    }
  }  
  
//--- Grid and Flip inspector
  stackView \schematicsDisplayInspectorView vStack set (topMargin: .regular) set (bottomMargin: .regular) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewSchematicDisplayInspectorAction }
      space
      StaticLabel (title: "Display Inspector", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewSchematicDisplayInspectorAction }
    }
    TabView (size: .small) {
      addTab (title: "Grid, Flip", tooltip: "Grid and Flip", contentView : 
        vStack set (margins: .regular) {
          hStack {
            StaticLabel (title: "Grid Step", bold: no, size : .small, alignment: .right)
            gutter
            StaticLabel (title: "50 mils", bold: yes, size : .small, alignment: .left)
          }
          hStack {
            StaticLabel (title: "Display Grid", bold: no, size : .small, alignment: .right)
            gutter
            EnumPopUpButton (titles: enum GridStyle.popupTitles, size: .small) { $selectedIndex root.mSchematicGridStyle }
          }
          hStack {
            StaticLabel (title: "Every", bold: no, size : .small, alignment: .right)
            gutter
            TaggedPopUpButton (size: .small) {
              add (title: "1 Step",   withTag:  1)
              add (title: "2 Steps",  withTag:  2)
              add (title: "4 Steps",  withTag:  4)
              add (title: "5 Steps",  withTag:  5)
              add (title: "8 Steps",  withTag:  8)
              add (title: "10 Steps", withTag: 10)
              $selectedTag root. mSchematicGridDisplayFactor
            }
          }
          hStack {
            StaticLabel (title: "Flip", bold: no, size : .small, alignment: .right)
            gutter
            Checkbox (title: "Horizontal", size : .small) { $value root.mSchematicHorizontalFlip }
          }
          hStack {
            space
            gutter
            Checkbox (title: "Vertical", size : .small) { $value root.mSchematicVerticalFlip }
          }
          hStack {
            StaticLabel (title: "Cross Grid Color", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.dotColorGridForSchematic }
            space
          }
          hStack {
            StaticLabel (title: "Line Grid Color", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.lineColorGridForSchematic }
            space
          }
        }
      )
      addTab (title: "Colors, Font", tooltip: "Colors and Font", contentView:
        vStack set (margins: .regular) {
          hStack {
            StaticLabel (title: "Symbols, unplaced Component", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.symbolColorForUnplacedComponentsForSchematic } 
          }
          hStack {
            StaticLabel (title: "Symbols, placed Component", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.symbolColorForSchematic }
          } 
          hStack {
            space
            StaticLabel (title: "Symbols Drawing Width", bold: no, size : .small, alignment: .right)
            TaggedPopUpButton (size: .small) {
              add (title: "0.5 Point",   withTag:  5)
              add (title: "1.0 Point",  withTag:  10)
              add (title: "1.5 Point",  withTag:  15)
              add (title: "2.0 Point",  withTag:  20)
              add (title: "2.5 Point",  withTag:  25)
              $selectedTag prefs.symbolDrawingWidthMultipliedByTenForSchematic
            }
          }
          separator
          hStack {
            StaticLabel (title: "Component Name", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.componentNameColorForSchematic } 
          }
          FontButton (width: 125, size: .small) { $fontValue prefs.componentNameFontForSchematic }
          separator
          hStack {
            StaticLabel (title: "Component Value", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.componentValueColorForSchematic } 
          }
          FontButton (width: 125, size: .small) { $fontValue prefs.componentValueFontForSchematic }
          separator
          hStack {
            StaticLabel (title: "Pin Name", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.pinNameColorForSchematic } 
          }
          FontButton (width: 125, size: .small) { $fontValue prefs.pinNameFontForSchematic }
          separator
          hStack {
            StaticLabel (title: "Pin Number", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.pinNumberColorForSchematic } 
          }
          FontButton (width: 125, size: .small) { $fontValue prefs.pinNumberFontForSchematic }
          separator
          hStack {
            StaticLabel (title: "Connection", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.connectionColorForSchematic } 
          }
          separator
          hStack {
            StaticLabel (title: "Background Color", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.schematicBackColor }
          }
          hStack {
            StaticLabel (title: "Frame Color", bold: no, size : .small, alignment: .right)
            gutter
            ColorWell { set (toolTip: "Stored in Preferences") $color prefs.schematicFrameColor }
          }
        }
      )
    }
    space
  }  

//--- Sheet inspector
  stackView \schematicsSheetInspectorView vStack set (topMargin: .regular) set (bottomMargin: .regular) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewSchematicSheetInspectorAction }
      space
      StaticLabel (title: "Sheet Inspector", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewSchematicSheetInspectorAction }
    }
    hStack {
      PopUpButton (size: .small) [configurator sheetPopUpButtonConfigurator]
      ImageObserverView (size: .small) {
        $image root.segmentedControlSchematicIssueImage
        $hidden !root.hasSchematicIssue
      }
      Stepper [configurator sheetStepperConfigurator]
    }
    separator
    hStack {
      Button (title: "New Sheet", size: .small) { expandableHeight () $run newSheetAction }
      space
      vStack {
        Button (title: "Up", size: .small) [configurator moveSheetUp] { expandableWidth () }
        Button (title: "Down", size: .small) [configurator moveSheetDown]
      }
      space
      Button (title: "Delete Sheet", size: .small)
        { expandableHeight () $run deleteSheetAction $enabled root.mSheets.count > 1 }
    }
    separator
    StaticLabel (title: "Selected Sheet Name", bold: no, size: .small, alignment: .left)
    TextField (minWidth: 150, size: .small) {
       automaticallyAdjustHeight (maxWidth: 150)
       $value root.selectedSheetTitle (sendContinously : yes)
    }
    separator
    hStack {
      StaticLabel (title: "Title", bold: no, size: .small, alignment: .right) { expandableHeight () }
      gutter
      TextField (minWidth: 150, size: .small) {
        automaticallyAdjustHeight (maxWidth: 150) $value root.mSchematicTitle (sendContinously : yes)
      }
    }
    hStack {
      StaticLabel (title: "Version", bold: no, size: .small, alignment: .right)
      gutter
      TextField (minWidth: 150, size: .small) { $value root.mSchematicVersion (sendContinously : yes) }
    }
    hStack {
      StaticLabel (title: "Date", bold: no, size: .small, alignment: .right)
      gutter
      Button (title: "Set…", size: .small) { $run openSetDateDialogAction }
      space 
      Button (title: "Set to Now", size: .small) { $run setDateToNowAction }
    }
    separator   
    hStack {
      StaticLabel (title: "Size", bold: no, size: .small, alignment: .right)
      gutter
      EnumSegmentedControl (titles: enum SchematicSheetOrientation.popupTitles, equalWidth: no, size: .small)
        [configurator sheetOrientationSegmentedControlConfigurator] { $selectedSegment root.mSchematicSheetOrientation }
    }
    hStack $hidden !self.schematicSheetOrientationIsCustom {
      StaticLabel (title: "Width", bold: no, size: .small, alignment: .center)
      gutter
      CanariDimensionAndPopUp (size : .small) {
        $dimensionAndUnit root.mSchematicCustomWidth, root.mSchematicCustomWidthUnit
      }
    }
    hStack $hidden !self.schematicSheetOrientationIsCustom {
      StaticLabel (title: "Height", bold: no, size: .small, alignment: .center)
      gutter
      CanariDimensionAndPopUp (size : .small) {
        $dimensionAndUnit root.mSchematicCustomHeight, root.mSchematicCustomHeightUnit
      }
    }
    space
  }  
 
  transient Bool schematicSheetOrientationIsCustom dependsFrom root.mSchematicSheetOrientation ; 
  action newSheetAction ;
  action deleteSheetAction ;
  action setDateToNowAction ;
  action openSetDateDialogAction ;
  
//-----------------------------------------------------------------------------
//   Schematic selected objects inspector
//-----------------------------------------------------------------------------

  stackView \selectedSchematicElementInspectorView vStack set (topMargin: .regular) set (bottomMargin: .regular) {
    newView schematicsWireInspectorView = \schematicsWireInspectorView ()
    newView ncInSchematicsInspectorView = \ncInSchematicsInspectorView ()
    newView schematicsLabelInspectorView = \schematicsLabelInspectorView ()
    newView commentInSchematicsInspectorView = \commentInSchematicsInspectorView ()
    newView componentSymbolInspectorView = \componentSymbolInspectorView ()
    ObjectInspectorView {
      addObjectInspector (forEntity: entity WireInSchematic, inspectorView: view schematicsWireInspectorView)
      addObjectInspector (forEntity: entity NCInSchematic, inspectorView: view ncInSchematicsInspectorView)
      addObjectInspector (forEntity: entity LabelInSchematic, inspectorView: view schematicsLabelInspectorView)
      addObjectInspector (forEntity: entity CommentInSchematic, inspectorView: view commentInSchematicsInspectorView)
      addObjectInspector (forEntity: entity ComponentSymbolInProject, inspectorView: view componentSymbolInspectorView)
      $graphicController #schematicObjectsController
    }
    space
  }

//--- Selected Wire In schematics
  selectionController WireInSchematic #wireInSchematicSelectionController :
    #schematicObjectsController.selectedArray
  ;
  
  stackView \schematicsWireInspectorView vStack {
    StaticLabel (title: "Wire Inspector", bold: yes, size: .small, alignment: .center)
    hStack {
      StaticLabel (title: "Net", bold: no, size: .small, alignment: .right)
      Label (bold: yes, size: .small) { expandableWidth () set (alignment: .left) $title #wireInSchematicSelectionController.netName }
    }
    Button (title: "Rename Net…", size: .small) {
      expandableWidth ()
      set (commandKeyEquivalent: "r")
      $run renameSchematicWireNetAction
      $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
    }
    Button (title: "Rename Net with Automatic Name", size: .small) {
      expandableWidth ()
      $run renameWireNetWithNewAutomaticNameAction
      $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
    }
    hStack {
      StaticLabel (title: "Net Class", bold: no, size: .small, alignment: .right)
      PopUpButton (size: .small) [configurator selectedWireNetPopUpButtonConfigurator] { expandableWidth () }
    }
    separator
    Button (title: "Merge Subnet into Existing Net…", size: .small) {
      expandableWidth ()
      set (commandKeyEquivalent: "m")
      $run mergeSubnetIntoAnExistingNetForSelectedWireAction
      $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
    }
    Button (title: "Insulate Subnet from Current Net", size: .small) {
      expandableWidth ()
      $run insulateSubnetFromCurrentNetForSelectedWireAction
      $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
    }
  }

  action renameSchematicWireNetAction ;
  action renameWireNetWithNewAutomaticNameAction ;
  action mergeSubnetIntoAnExistingNetForSelectedWireAction ;
  action insulateSubnetFromCurrentNetForSelectedWireAction ;

//--- Selected NC In schematics
  selectionController NCInSchematic #ncInSchematicSelectionController :
    #schematicObjectsController.selectedArray
  ;

  stackView \ncInSchematicsInspectorView vStack {
    StaticLabel (title: "NC Inspector", bold: yes, size: .small, alignment: .center)
    EnumSegmentedControl (titles: enum QuadrantRotation.directionTitles, equalWidth: yes, size: .small) {
      $selectedSegment #ncInSchematicSelectionController.mOrientation
    }
  }

//--- Selected label in schematic inspector
  selectionController LabelInSchematic #schematicLabelSelectionController :
    #schematicObjectsController.selectedArray
  ;

  stackView \schematicsLabelInspectorView vStack {
    StaticLabel (title: "Label Inspector", bold: yes, size: .small, alignment: .center)
    EnumSegmentedControl (titles: enum QuadrantRotation.directionTitles, equalWidth: yes, size: .small) {
      $selectedSegment #schematicLabelSelectionController.mOrientation
    }
    hStack {
      StaticLabel (title: "Net", bold: no, size: .small, alignment: .center) { notExpandableWidth () }
      Label (bold: yes, size: .small) { expandableWidth () set (alignment: .left) $title #schematicLabelSelectionController.netName }
    }
    Button (title: "Rename Net…", size: .small) {
      expandableWidth ()
      set (commandKeyEquivalent: "r")
      $run renameSchematicLabelNetAction
      $enabled #schematicLabelSelectionController.selectedArray.count == 1
    }
    Button (title: "Rename Net with Automatic Name", size: .small) {
      expandableWidth ()
      $run renameLabelNetWithNewAutomaticNameAction
      $enabled #schematicLabelSelectionController.selectedArray.count == 1
    }
    hStack {
      StaticLabel (title: "Net Class", bold: no, size: .small, alignment: .right)
      PopUpButton (size: .small) [configurator selectedLabelNetPopUpButtonConfigurator] { expandableWidth () }
    }
    separator
    Button (title: "Merge Subnet into Existing Net…", size: .small) {
      expandableWidth ()
      set (commandKeyEquivalent: "m")
      $run mergeSubnetIntoAnExistingNetForSelectedLabelAction
      $enabled #schematicLabelSelectionController.selectedArray.count == 1
    }
    Button (title: "Insulate Subnet from Current Net", size: .small) {
      expandableWidth ()
      $run insulateSubnetFromCurrentNetForSelectedLabelAction
      $enabled #schematicLabelSelectionController.selectedArray.count == 1
    }
  }

  action renameLabelNetWithNewAutomaticNameAction ;
  action renameSchematicLabelNetAction ;
  action mergeSubnetIntoAnExistingNetForSelectedLabelAction ;
  action insulateSubnetFromCurrentNetForSelectedLabelAction ;
  
//--- Selected comment in schematic inspector
  selectionController CommentInSchematic #commentInSchematicSelectionController :
    #schematicObjectsController.selectedArray
  ;

  stackView \commentInSchematicsInspectorView vStack {
    StaticLabel (title: "Comment Inspector", bold: yes, size: .small, alignment: .center)
    TextField (minWidth: 210, size: .small) {
      automaticallyAdjustHeight (maxWidth: 210)
      $value #commentInSchematicSelectionController.mComment (sendContinously : yes)
    }
    Checkbox (title: "Bold", size : .small) { $value #commentInSchematicSelectionController.mBold }
    separator
    hStack {
      StaticLabel (title: "Color", bold: yes, size: .small, alignment: .left)
      gutter
      ColorWell { $color #commentInSchematicSelectionController.mColor }
    }
    separator
    hStack {
      StaticLabel (title: "Rotation", bold: yes, size: .small, alignment: .left)
      gutter
      CanariPreferredDirectionSegmentedControl { $angle #commentInSchematicSelectionController.mRotation }
    }
    hStack {
      space
      gutter
      CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) { $angle #commentInSchematicSelectionController.mRotation }
    }
    separator
    hStack {
      StaticLabel (title: "Size", bold: yes, size: .small, alignment: .left)
      gutter
      DoubleField (width: 64, size: .small) { $value #commentInSchematicSelectionController.mSize (sendContinously:yes) }
    }
    LinearSlider (min: 4, max: 20, ticks: 17) { setAllowsTickMarkValuesOnly () $doubleValue #commentInSchematicSelectionController.mSize (sendContinously:yes) }
    separator
    StaticLabel (title: "Alignment", bold: yes, size: .small, alignment: .left)
    EnumSegmentedControl (titles: enum HorizontalAlignment.popupTitles, equalWidth: yes, size: .small) [configurator labelHAlignmentSegmendControlConfigurator] {
      $selectedSegment #commentInSchematicSelectionController.mHorizontalAlignment
    }
    EnumSegmentedControl (titles: enum VerticalAlignment.popupTitles, equalWidth: yes, size: .small) [configurator labelVAlignmentSegmendControlConfigurator] {
      $selectedSegment #commentInSchematicSelectionController.mVerticalAlignment
    }
  }
  
//--- Selected symbol in schematic inspector
  selectionController ComponentSymbolInProject #componentSymbolSelectionController :
    #schematicObjectsController.selectedArray
  ;
  stackView \componentSymbolInspectorView vStack {
    StaticLabel (title: "Symbol Inspector", bold: yes, size: .small, alignment: .center)
    hStack {
      StaticLabel (title: "Orientation", bold: no, size: .small, alignment: .center)
      gutter
      EnumSegmentedControl (titles: enum QuadrantRotation.degreesTitles, equalWidth: no, size: .small) {
        $selectedSegment #componentSymbolSelectionController.mRotation
      }
    }
    hStack {
      space
      gutter
      Checkbox (title: "Mirror", size : .small) { $value #componentSymbolSelectionController.mMirror }
    }
    separator
    hStack {
      StaticLabel (title: "Component Name", bold: no, size: .small, alignment: .center) { notExpandableWidth () }
      Label (bold: yes, size: .small) {
        expandableWidth () set (alignment: .left) $title #componentSymbolSelectionController.componentName
      }
    }
    Button (title: "Rename Component…", size: .small) {
      expandableWidth ()
      $enabled #schematicObjectsController.selectedArray.count == 1
      $run renameComponentFromSelectedSymbolAction
    }
    separator
    StaticLabel (title: "Component Value", bold: no, size: .small, alignment: .center)
    Checkbox (title: "Show Component Value", size : .small) {
       $value #componentSymbolSelectionController.mDisplayComponentValue
     }
    TextField (minWidth: 100, size: .small) {
      expandableWidth ()
      $value #componentSymbolSelectionController.componentValueProxy (sendContinously: yes)
    }
    separator
    StaticLabel (title: "Symbol Instance Name", bold: no, size: .small, alignment: .center)
    Label (bold: yes, size: .small) {
      expandableWidth () 
      set (alignment: .center) 
      $title #componentSymbolSelectionController.mSymbolInstanceName
    }
    separator
    StaticLabel (title: "Symbol Type Name", bold: no, size: .small, alignment: .center)
    Label (bold: yes, size: .small) {
      expandableWidth () 
      set (alignment: .center) 
      $title #componentSymbolSelectionController.mSymbolTypeName
    }
    separator
    StaticLabel (title: "Device Name", bold: no, size: .small, alignment: .center)
    Label (bold: yes, size: .small) {
      expandableWidth () 
      set (alignment: .center) 
      $title #componentSymbolSelectionController.deviceName
    }
  }

  action renameComponentFromSelectedSymbolAction ;

//----------------- Board outline tab
  stackView \boardOutlinePage hStack {
    vStack withVScroller set (margins: .regular) set (width: 250) {
      newView boardShapeBaseView = \BoardShapeBaseView ()
      newView boardRectangularOutlineView = \BoardRectangularOutlineView ()
      newView boardBezierPathOutlineView = \BoardBezierPathOutlineView ()
      StaticLabel (title: "Board Shape", bold: yes, size : .small, alignment: .center)
      SegmentedControlWithPages (documentView: view boardShapeBaseView, equalWidth: no, size : .small) {
        addPage (title: "Rectangular", tooltip: "", pageView: view boardRectangularOutlineView)
        addPage (title: "Bezier Pathes", tooltip: "", pageView: view boardBezierPathOutlineView)
        $selectedSegment root.mBoardShape
      }
      view boardShapeBaseView
      separator
      StaticLabel (title: "Outlines", bold: yes, size : .small, alignment: .center)
      hStack {
        StaticLabel (title: "Board Limit Width", bold: no, size : .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mBoardLimitsWidth, root.mBoardLimitsWidthUnit
        }
      }
      hStack {
        StaticLabel (title: "Board Clearance", bold: no, size : .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mBoardClearance, root.mBoardClearanceUnit
        }
      }
      separator
      StaticLabel (title: "Interior Bounding Box", bold: yes, size : .small, alignment: .center)
      CanariBoardRectangleView {
        $top root.boardInteriorTop
        $bottom root.boardInteriorBottom 
        $left root.boardInteriorLeft
        $right root.boardInteriorRight
        $unit root.mBoardPointsBoundingBoxUnit
      }
      separator
      StaticLabel (title: "Board Bounding Box", bold: yes, size : .small, alignment: .center)
      CanariBoardRectangleView {
        $top root.boardLimitBorderTop
        $bottom root.boardLimitBorderBottom 
        $left root.boardLimitBorderLeft
        $right root.boardLimitBorderRight
        $unit root.mBoardLimitsBoundingBoxUnit
      }
      separator
      StaticLabel (title: "Grid and Flip Inspector", bold: yes, size: .small, alignment: .center)
      hStack {
        StaticLabel (title: "Grid Step", bold: no, size : .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mBoardLimitsGridStep, root.mBoardLimitsGridStepUnit
        }
      }
      hStack {
        StaticLabel (title: "Display Grid", bold: no, size : .small, alignment: .right)
        gutter
        EnumPopUpButton (titles: enum GridStyle.popupTitles, size: .small) {
          expandableWidth ()
          $selectedIndex root.mBoardLimitsGridStyle
        }
      }
      hStack {
        StaticLabel (title: "Grid Display", bold: no, size : .small, alignment: .right)
        gutter
        TaggedPopUpButton (size: .small) {
          expandableWidth ()
          add (title: "1 Step",   withTag:  1)
          add (title: "2 Steps",  withTag:  2)
          add (title: "4 Steps",  withTag:  4)
          add (title: "5 Steps",  withTag:  5)
          add (title: "8 Steps",  withTag:  8)
          add (title: "10 Steps", withTag: 10)
          $selectedTag root.mBoardLimitsGridDisplayFactor
        }
      }
      hStack {
        StaticLabel (title: "Flip", bold: no, size : .small, alignment: .right)
        gutter
        Checkbox (title: "Horizontal", size : .small) { expandableWidth () $value root.mBoardLimitsHorizontalFlip }
      }
      hStack {
        space
        gutter
        Checkbox (title: "Vertical", size : .small) { expandableWidth () $value root.mBoardLimitsVerticalFlip }
      }
      separator
      StaticLabel (title: "Board Contents Opacity", bold: yes, size: .small, alignment: .center)
      LinearSlider (min: 0, max: 1, ticks: 11) { $doubleValue root.mContentOpacityInBoardOutline (sendContinously : yes) }      
      StaticLabels (left: "Transparent", right: "Opaque", bold: no, size: .mini)
    }   
    separator
    GraphicView (minZoom: 10, maxZoom: 20_000) [configurator boardOutlineView] {
      $underObjectsDisplay root.borderViewBackground
      $horizontalFlip root.mBoardLimitsHorizontalFlip
      $verticalFlip root.mBoardLimitsVerticalFlip
      $graphicController #boardCurveObjectsController
      $gridStyle root.mBoardLimitsGridStyle
      $gridDisplayFactor root.mBoardLimitsGridDisplayFactor
      $gridLineColor prefs.lineColorGridForBoard
      $gridCrossColor prefs.crossColorGridForBoard
      $workingAreaColor prefs.workingAreaColorForBoard
      $workingAreaRectString root.mWorkingAreaRectString
      $zoom root.mBoardLimitsZoom
      $backColor prefs.boardBackgroundColorForBoard
      $mouseGrid root.mBoardLimitsGridStep
      $gridStep root.mBoardLimitsGridStep
      $arrowKeyMagnitude root.mBoardLimitsGridStep
      $shiftArrowKeyMagnitude root.boardLimitsGridStepMultipliedByDisplayFactor
      $xPlacardUnit root.mBoardLimitsGridStepUnit
      $yPlacardUnit root.mBoardLimitsGridStepUnit
    }
  }

  arrayController #boardCurveObjectsController : root.mBorderCurves ;
  selectionController BorderCurve #boardCurveSelectionController :
    #boardCurveObjectsController.selectedArray
  ;

  stackView \BoardShapeBaseView vStack {}
  
  stackView \BoardRectangularOutlineView vStack {
    hStack {
      StaticLabel (title: "Board Width", bold: no, size : .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size : .small) {
        $dimensionAndUnit root.mRectangularBoardWidth, root.mRectangularBoardWidthUnit
      }
    }
    hStack {
      StaticLabel (title: "Board Height", bold: no, size : .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size : .small) {
        $dimensionAndUnit root.mRectangularBoardHeight, root.mRectangularBoardHeightUnit
      }
    }
  }
  
  stackView \BoardBezierPathOutlineView vStack {
    Label (bold: yes, size : .small) { $title root.borderElementCountString }
    StaticLabel (title: "For editing Board limits, click on a line, use contextual click on a line.", 
                 bold: no,
                 size : .small,
                 alignment: .center) {
      expandableHeight ()
    }
    StaticLabel (title: "Selected Board Limit Element", bold: yes, size : .small, alignment: .center) {
      $hidden #boardCurveObjectsController.selectedArray.count == 0
    }
    hStack $hidden #boardCurveObjectsController.selectedArray.count == 0 {
      StaticLabel (title: "Shape", bold: yes, size : .small, alignment: .left)
      gutter
      EnumPopUpButton (titles: enum BorderCurveShape.popupTitles, size: .small) {
        $selectedIndex #boardCurveSelectionController.mShape
      }
    }
    hStack $hidden #boardCurveObjectsController.selectedArray.count == 0 {
      StaticLabel (title: "End Points", bold: yes, size : .small, alignment: .left)
      gutter
      CanariUnitPopUpButton (size: .small) {
        $unit root.mBoardSelectedCurveDisplayUnit
      }
    }
    hStack $hidden (#boardCurveObjectsController.selectedArray.count == 0) | !#boardCurveSelectionController.isLine {
      StaticLabel (title: "X", bold: no, size : .small, alignment: .right)
      CanariDimensionField (size: .small) {
        $dimensionAndUnit #boardCurveSelectionController.mX, root.mBoardSelectedCurveDisplayUnit
      }
      gutter
      StaticLabel (title: "Y", bold: no, size : .small, alignment: .right)
      CanariDimensionField (size: .small) {
        $dimensionAndUnit #boardCurveSelectionController.mY, root.mBoardSelectedCurveDisplayUnit
      }
    }
    hStack $hidden (#boardCurveObjectsController.selectedArray.count == 0) | #boardCurveSelectionController.isLine {
      StaticLabel (title: "X", bold: no, size : .small, alignment: .right)
      DoubleObserverField (width: 72, bold: yes, size: .small) {
        $observedValue #boardCurveSelectionController.p2Xvalue
      }
      gutter
      StaticLabel (title: "Y", bold: no, size : .small, alignment: .right)
      DoubleObserverField (width: 72, bold: yes, size: .small) {
        $observedValue #boardCurveSelectionController.p2Yvalue
      }
    }
    hStack $hidden (#boardCurveObjectsController.selectedArray.count == 0) | #boardCurveSelectionController.isLine {
      StaticLabel (title: "Control Points", bold: yes, size : .small, alignment: .left)
      gutter
      CanariUnitPopUpButton (size: .small) {
        $unit root.mBoardLimitControlPointsDisplayUnit
      }
    }
    hStack $hidden (#boardCurveObjectsController.selectedArray.count == 0) | #boardCurveSelectionController.isLine {
      space
      StaticLabel (title: "X", bold: no, size : .small, alignment: .right)
      CanariDimensionField (size: .small) {
        $dimensionAndUnit #boardCurveSelectionController.mCPX1, root.mBoardLimitControlPointsDisplayUnit
      }
      gutter
      space
      StaticLabel (title: "Y", bold: no, size : .small, alignment: .right)
      CanariDimensionField (size: .small) {
        $dimensionAndUnit #boardCurveSelectionController.mCPY1, root.mBoardLimitControlPointsDisplayUnit
      }
    }
    hStack $hidden (#boardCurveObjectsController.selectedArray.count == 0) | #boardCurveSelectionController.isLine {
      space
      StaticLabel (title: "X", bold: no, size : .small, alignment: .right)
      CanariDimensionField (size: .small) {
        $dimensionAndUnit #boardCurveSelectionController.mCPX2, root.mBoardLimitControlPointsDisplayUnit
      }
      gutter
      space
      StaticLabel (title: "Y", bold: no, size : .small, alignment: .right)
      CanariDimensionField (size: .small) {
        $dimensionAndUnit #boardCurveSelectionController.mCPY2, root.mBoardLimitControlPointsDisplayUnit
      }
    }
  }

//----------------- Board Contents tab

  arrayController #boardObjectsController : root.mBoardObjects ;  
  transient EBShape boardOutlineOverDisplay dependsFrom
    self.rastnetShape, root.boardIssues ;
  transient EBShape rastnetShape dependsFrom
    root.mRastnetDisplay,
    root.mRastnetDisplayedNetName,
    root.mRastnetDisplayedComponentName,
    root.mBoardObjects.all.netNameAndPadLocation,
    prefs.rastnetColorForBoard,
    #boardObjectsController.selectedArray.all.componentName
  ;
  transient Int unplacedPackageCount dependsFrom root.unplacedPackages ;
  transient String unplacedPackagesCountString dependsFrom self.unplacedPackageCount ;
  transient NSImage unplacedPackagesSegmentImage dependsFrom self.unplacedPackageCount ;
  transient String unplacedPackagesMessageString dependsFrom self.unplacedPackageCount ;

  stackView \boardContentsPage hStack {
    newView boardInspectorView = \BoardInspectorView ()
    newView selectedElementInspectorView = \selectedElementInspectorView ()
    newView insertComponentInBoardView = \insertComponentInBoardView ()
    newView boardDisplayInspectorView = \boardDisplayInspectorView ()
    newView boardRouterInspectorView = \boardRouterInspectorView ()
    newView boardERCInspectorView = \boardERCInspectorView ()
    vStack set (width: 250) {
      hStack set (margins: .regular) set (spacing: .small) {
        DragSourceButtonWithMenus (tooltip: "Add Image; the layer is set by the contextual menu.") [configurator addBoardImageButton]
        space
        DragSourceButtonWithMenus (tooltip: "Add QR Code; the layer is set by the contextual menu.") [configurator addQRCodeButton]
        space
        DragSourceButtonWithMenus (tooltip: "Add Restrict Rectangle;  the layers are set by the contextual menu.") [configurator addRestrictRectangleButton]
        space
        DragSourceButtonWithMenus (tooltip: "Add Line;  the layer is set by the contextual menu.") [configurator addLineButton]
        space
        DragSourceButtonWithMenus (tooltip: "Add Text; the layer is set by the contextual menu.") [configurator addTextButton]
        space
        DragSourceButtonWithMenus (tooltip: "Add Track; hint:\n  - option + click starts a new track.\n\nThe new track side is set by the right contextual menu. The direction constraint on creation is set by the left contextual menu.") [configurator addTrackButton]
      }
      vStack {
        hStack set (leftMargin: .regular) set (rightMargin: .regular) {
          SegmentedControlWithPages (documentView: view boardInspectorView, equalWidth: no, size : .small) {
            expandableWidth ()
            addPage (title: "🛠", tooltip: "Selected Element Inspector", pageView: view selectedElementInspectorView)
            addPage (title: "", tooltip: "Insert Component in Board", pageView: view insertComponentInBoardView)
            addPage (title: "🔍", tooltip: "Display Inspector", pageView: view boardDisplayInspectorView)
            addPage (image: "autorouter", title: "", tooltip: "Router Inspector", pageView: view boardRouterInspectorView)
            addPage (title: "ERC", tooltip: "Electric Rule Check Inspector", pageView: view boardERCInspectorView)
            $selectedPage root.mBoardSelectedInspector
            $segmentTitle self.unplacedPackagesCountString (segmentIndex: 1)
            $segmentImage self.unplacedPackagesSegmentImage (segmentIndex : 1)
            $segmentImage root.ercStatusImageOrNoneOnSuccess (segmentIndex: 4)
          }
        }
        view boardInspectorView
      }
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 20_000) [outlet mBoardView configurator boardView] {
      prepend (toTopHStack: CanariBoardOperationPullDownButton (size: .small) [configurator boardOperationPullDownButtonConfigurator])
      $underObjectsDisplay root.borderOutlineBackground
      $overObjectsDisplay self.boardOutlineOverDisplay
      $horizontalFlip root.mBoardHorizontalFlip
      $verticalFlip root.mBoardVerticalFlip
      $graphicController #boardObjectsController
      $gridStyle root.mBoardGridStyle
      $gridDisplayFactor root.mBoardGridDisplayFactor
      $gridLineColor prefs.lineColorGridForBoard
      $gridCrossColor prefs.crossColorGridForBoard
      $workingAreaColor prefs.workingAreaColorForBoard
      $workingAreaRectString root.mWorkingAreaRectString
      $zoom root.mBoardZoom
      $backColor prefs.boardBackgroundColorForBoard
      $mouseGrid root.mBoardGridStep
      $gridStep root.mBoardGridStep
      $arrowKeyMagnitude root.mBoardGridStep
      $shiftArrowKeyMagnitude root.boardGridStepMultipliedByDisplayFactor
      $xPlacardUnit root.mBoardGridStepUnit
      $yPlacardUnit root.mBoardGridStepUnit
    }
  }

  stackView \BoardInspectorView vStack {}

  action appendNewInsertComponentInBoardInspectorAction ;
  action prependNewInsertComponentInBoardInspectorAction ;
  
  stackView \insertComponentInBoardView vStack set (margins: .regular) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewInsertComponentInBoardInspectorAction }
      space
      Label (bold: yes, size: .small) { $title self.unplacedPackagesMessageString }
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewInsertComponentInBoardInspectorAction }
    }
    CanariDragSourceTableView 
    [outletArray mUnplacedPackageTableViewArray configurator packageDragSourceTableViewConfigurator] {
      $models root.unplacedPackages
    }
  }
  
  transient Bool rastnetDisplayOneNet dependsFrom root.mRastnetDisplay ;
  transient Bool rastnetDisplayComponentNet dependsFrom root.mRastnetDisplay ;
  action prependNewBoardDisplayInspectorAction ;
  action appendNewBoardDisplayInspectorAction ;

  stackView \boardDisplayInspectorView vStack set (margins: .regular) set (rightMargin: .zero) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewBoardDisplayInspectorAction }
      space
      StaticLabel (title: "Board Display", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewBoardDisplayInspectorAction }
    }
    vStack withVScroller set (rightMargin: .small) {
      StaticLabel (title: "Grid and Flip", bold: yes, size: .small, alignment: .left)
      hStack {
        StaticLabel (title: "Grid Step", bold: no, size: .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size : .small)  {
          $dimensionAndUnit root.mBoardGridStep, root.mBoardGridStepUnit
        }
      }
      hStack {
        StaticLabel (title: "Display", bold: no, size: .small, alignment: .right)
        gutter
        EnumPopUpButton (titles: enum GridStyle.popupTitles, size : .small)  {
          $selectedIndex root.mBoardGridStyle
        }
      }
      hStack {
        StaticLabel (title: "Every", bold: no, size: .small, alignment: .right)
        gutter
        TaggedPopUpButton (size: .small) {
          add (title: "1 Step",   withTag:  1)
          add (title: "2 Steps",  withTag:  2)
          add (title: "4 Steps",  withTag:  4)
          add (title: "5 Steps",  withTag:  5)
          add (title: "8 Steps",  withTag:  8)
          add (title: "10 Steps", withTag: 10)
          $selectedTag root.mBoardGridDisplayFactor
        }
      }
      hStack {
        StaticLabel (title: "Flip", bold: no, size: .small, alignment: .right)
        gutter
        Checkbox (title: "Horizontal", size : .small)  { set (width: 125) $value root.mBoardHorizontalFlip}
      }
      hStack {
        space
        gutter
        Checkbox (title: "Vertical", size : .small)  { $value root.mBoardVerticalFlip }
      }
      hStack {
        StaticLabel (title: "Cross Grid", bold: no, size: .small, alignment: .right)
        gutter
        ColorWell {
          expandableWidth () set (toolTip: "Stored in Preferences") $color prefs.crossColorGridForBoard
        }
      }
      hStack {
        StaticLabel (title: "Line Grid", bold: no, size: .small, alignment: .right)
        gutter
        ColorWell {
           expandableWidth () set (toolTip: "Stored in Preferences") $color prefs.lineColorGridForBoard
        }
      }
      StaticLabel (title: "Rastnet", bold: yes, size: .small, alignment: .left)
      EnumPopUpButton (titles: enum RastnetDisplay.popupTitles, size: .small) {
        $selectedIndex root.mRastnetDisplay
      }
      CanariSelectionPopUpButton (size: .small) {
        $selectedNameInArray root.mRastnetDisplayedNetName, root.netNamesArray
        $hidden !self.rastnetDisplayOneNet
      }
      CanariSelectionPopUpButton (size: .small) {
        $selectedNameInArray root.mRastnetDisplayedComponentName, root.placedComponentNameArray
        $hidden !self.rastnetDisplayComponentNet
      }
      StaticLabel (title: "Warning and Error Circle", bold: yes, size: .small, alignment: .left)
      LinearSlider (min: 0, max: 24, ticks: 13) {
         $doubleValue root.mErrorOrWarningIssueSize (sendContinously : yes)
      }
      StaticLabel (title: "Contextual Click Diameter", bold: yes, size: .small, alignment: .left)
      LinearSlider (min: 10, max: 200, ticks: 10) {
        $doubleValue root.mControlKeyHiliteDiameter (sendContinously : yes)
      }
      StaticLabel (title: "Pad Number", bold: yes, size: .small, alignment: .left)
      FontButton (width: 125, size: .small) { $fontValue prefs.padNumberFontForBoard }
      StaticLabel (title: "Package Width", bold: yes, size: .small, alignment: .left)
      TaggedPopUpButton (size: .small) {
        add (title: "0.5 Point",   withTag:  5)
        add (title: "1.0 Point",  withTag:  10)
        add (title: "1.5 Point",  withTag:  15)
        add (title: "2.0 Point",  withTag:  20)
        add (title: "2.5 Point",  withTag:  25)
        $selectedTag root.packageDrawingWidthMultpliedByTenForBoard
      }
      hStack {
        DisclosureTriangle (size: .small) { $expanded root.mExpandFrontSideBoardSettings }
        StaticLabel (title: "Front side Display", bold: yes, size: .small, alignment: .left)
        space
      }
      hStack $hidden !root.mExpandFrontSideBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.frontSidePadColorForBoard }
        gutter
        Checkbox (title: "Pads", size : .small)  {
          $value root.displayFrontPadsForBoard
        }
      }
      hStack $hidden !root.mExpandFrontSideBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.frontSideLegendColorForBoard }
        gutter
        Checkbox (title: "Component + Legend", size : .small)  {
          $value root.displayFrontLegendForBoard
        }
      }
      hStack $hidden !root.mExpandFrontSideBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.frontSideLayoutColorForBoard }
        gutter
        Checkbox (title: "Layout", size : .small)  {
          $value root.displayFrontLayoutForBoard
        }
      }
      hStack $hidden !root.mExpandFrontSideBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.frontSideRestrictRectangleColorForBoard }
        gutter
        Checkbox (title: "Restrict Rectangle", size : .small) {
          $value root.displayFrontRestrictRectangles
        }
      }
      hStack {
        DisclosureTriangle (size: .small) { $expanded root.mExpandBackSideBoardSettings }
        StaticLabel (title: "Back Side Display", bold: yes, size: .small, alignment: .left)
        space
      }
      hStack $hidden !root.mExpandBackSideBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.backSidePadColorForBoard }
        gutter
        Checkbox (title: "Pads", size : .small)  {
          $value root.displayBackPadsForBoard
        }
      }
      hStack $hidden !root.mExpandBackSideBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.backSideLegendColorForBoard }
        gutter
        Checkbox (title: "Component + Legend", size : .small)  {
          $value root.displayBackLegendForBoard
        }
      }
      hStack $hidden !root.mExpandBackSideBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.backSideLayoutColorForBoard }
        gutter
        Checkbox (title: "Layout", size : .small)  {
          $value root.displayBackLayoutForBoard 
        }
      }
      hStack $hidden !root.mExpandBackSideBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.backSideRestrictRectangleColorForBoard }
        gutter
        Checkbox (title: "Restrict Rectangle", size : .small)  {
          $value root.displayBackRestrictRectangles
        }
      }
      hStack {
        DisclosureTriangle (size: .small) { $expanded root.mExpandInner1BoardSettings }
        StaticLabel (title: "Inner 1 Layer Display", bold: yes, size: .small, alignment: .left)
        space
      }
      hStack $hidden !root.mExpandInner1BoardSettings {
        space
        ColorWell {
          set (toolTip: "Stored in Preferences")
          $color prefs.inner1LayoutColorForBoard
        }
        gutter
        Checkbox (title: "Layout", size : .small)  {
           $value root.displayInner1LayoutForBoard
        }
      }
      hStack $hidden !root.mExpandInner1BoardSettings {
        space
        ColorWell {
          set (toolTip: "Stored in Preferences")
          $color prefs.inner1SideRestrictRectangleColorForBoard
        }
        gutter
        Checkbox (title: "Restrict Rectangle", size : .small) {
          $value root.displayInner1RestrictRectangles
        }
      }
      hStack {
        DisclosureTriangle (size: .small) { $expanded root.mExpandInner2BoardSettings }
        StaticLabel (title: "Inner 2 Layer Display", bold: yes, size: .small, alignment: .left)
        space
      }
      hStack $hidden !root.mExpandInner2BoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner2LayoutColorForBoard }
        gutter
        Checkbox (title: "Layout", size : .small) {
          $value root.displayInner2LayoutForBoard
        }
      }
      hStack $hidden !root.mExpandInner2BoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner2SideRestrictRectangleColorForBoard }
        gutter
        Checkbox (title: "Restrict Rectangle", size : .small)  {
          $value root.displayInner2RestrictRectangles
        }
      }
      hStack {
        DisclosureTriangle (size: .small) { $expanded root.mExpandInner3BoardSettings }
        StaticLabel (title: "Inner 3 Layer Display", bold: yes, size: .small, alignment: .left)
        space
      }
      hStack $hidden !root.mExpandInner3BoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner3LayoutColorForBoard }
        gutter
        Checkbox (title: "Layout", size : .small)  {
          $value root.displayInner3LayoutForBoard
        }
      }
      hStack $hidden !root.mExpandInner3BoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner3SideRestrictRectangleColorForBoard }
        gutter
        Checkbox (title: "Restrict Rectangle", size : .small)  {
          $value root.displayInner3RestrictRectangles
        }
      }
      hStack {
        DisclosureTriangle (size: .small) { $expanded root.mExpandInner4BoardSettings }
        StaticLabel (title: "Inner 4 Layer Display", bold: yes, size: .small, alignment: .left)
        space
      }
      hStack $hidden !root.mExpandInner4BoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") }
        gutter
        Checkbox (title: "Layout", size : .small) {
          $value root.displayInner4LayoutForBoard
        }
      }
      hStack $hidden !root.mExpandInner4BoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.inner4SideRestrictRectangleColorForBoard }
        gutter
        Checkbox (title: "Restrict Rectangle", size : .small) {
          $value root.displayInner4RestrictRectangles
        }
      }
      hStack {
        DisclosureTriangle (size: .small) { $expanded root.mExpandOtherBoardSettings }
        StaticLabel (title: "Other", bold: yes, size: .small, alignment: .left)
        space
      }
      hStack $hidden !root.mExpandOtherBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.padNumberColorForBoard }
        gutter
        Checkbox (title: "Pad Numbers", size : .small)  {
          $value root.displayPadNumbersForBoard 
        }
      }
      hStack $hidden !root.mExpandOtherBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.boardLimitsColorForBoard }
        gutter
        StaticLabel (title: "Board Limits", bold: no, size : .small, alignment: .left)
      }
      hStack $hidden !root.mExpandOtherBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.boardClearanceColorForBoard }
        gutter
        StaticLabel (title: "Board Clearance", bold: no, size : .small, alignment: .left)
      }
      hStack $hidden !root.mExpandOtherBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.rastnetColorForBoard }
        gutter
        StaticLabel (title: "Rastnet", bold: no, size : .small, alignment: .left)
      }
      hStack $hidden !root.mExpandOtherBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.workingAreaColorForBoard }
        gutter
        StaticLabel (title: "Working Area", bold: no, size : .small, alignment: .left)
      }
      hStack $hidden !root.mExpandOtherBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.boardBackgroundColorForBoard }
        gutter
        StaticLabel (title: "Background", bold: no, size : .small, alignment: .left)
      }
      hStack $hidden !root.mExpandOtherBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.errorBackgroundColorForBoard }
        gutter
        Checkbox (title: "Error Background", size : .small)  {
          $value root.drawErrorBackgroundForBoard
        }
      }
      hStack $hidden !root.mExpandOtherBoardSettings {
        space
        ColorWell { set (toolTip: "Stored in Preferences") $color prefs.warningBackgroundColorForBoard }
        gutter
        Checkbox (title: "Warning Background", size : .small)  {
          $value prefs.drawWarningBackgroundForBoard
        }
      }
    }
  }

  action prependNewBoardSettingsInspectorAction ;
  action appendNewBoardSettingsInspectorAction ;
  
  stackView \boardRouterInspectorView vStack set (margins: .regular) {
    hStack {
      Button (title: "◀︎+", size: .regular) { $run prependNewBoardSettingsInspectorAction }
      space
      StaticLabel (title: "Autorouter Settings", bold: yes, size: .small, alignment: .center)
      space
      Button (title: "+▶︎", size: .regular) { $run appendNewBoardSettingsInspectorAction }
    }
    vStack withVScroller {
      hStack {
        StaticLabel (title: "Layers", bold: no, size: .small, alignment: .right)
        gutter
        EnumPopUpButton (titles: enum LayerConfiguration.popupTitles, size: .small) {
          $selectedIndex root.mLayerConfiguration
          $run changeLayerConfigurationAction
        }
      }
      hStack {
        StaticLabel (title: "Clearance", bold: no, size: .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit root.mLayoutClearance, root.mLayoutClearanceUnit }
      }
      EnumPopUpButton (titles: enum AutorouterPreferredDirections.popupTitles, size: .small) {
        $selectedIndex root.mAutoRouterPreferredDirections
      }
      EnumPopUpButton (titles: enum AutorouterSnapAngle.popupTitles, size: .small) {
        $selectedIndex root.mAutorouterSnapAngle
      }
      hStack {
        StaticLabel (title: "Route", bold: no, size: .small, alignment: .center)
        space
        EnumPopUpButton (titles: enum RouteDirection.popupTitles, size: .small) {
          $selectedIndex root.mRouteDirection
        }
        space
        EnumPopUpButton (titles: enum RouteOrigin.popupTitles, size: .small) {
          $selectedIndex root.mRouteOrigin
        }
      }
      Checkbox (title: "Allow Via at SMD", size: .small) {
        expandableWidth () $value root.mAllowViaAtSMD
      }
      TabView (size: .small) {
        addTab (title: "Basic", tooltip: "Autorouter Basic Configuration", contentView :
          vStack set (margins: .large) {
            Checkbox (title: "Export Tracks and Vias", size: .small) {
              expandableWidth () $value root.mExportExistingTracksAndVias
            }
            hStack {
              space
              ImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 150, height: 48) {
                $run launchFreeRouterWithRouterDocument
              }
              space
            }
            hStack {
              space
              Button (title: "Import SES File", size: .small) { $run importSESFromBasicTabAction }
              space
            }
          }
        )
        addTab (title: "Advanced", tooltip: "Autorouter Advanced Configuration", contentView :
          vStack set (margins: .large) {
            Checkbox (title: "Export Tracks and Vias", size: .small) {
              expandableWidth () $value root.mExportExistingTracksAndVias
            }
            hStack {
              space
              Button (title: "Export DSN File…", size: .small) { $run exportDSNFileAction }
              space
            }
            hStack {
              space
              ImageButton (imageName: "freeRoutingLogo", tooltip: "Launch Free Router…", width: 150, height: 48) {
                $run launchFreeRouterWithoutAnyDocument
              }
              space
            }
            hStack {
              space
              Button (title: "Import SES File…", size: .small) { $run importSESFromExtendedTabAction }
              space
            }
          }
        )
        $selectedPage root.mAutorouterInterfaceMode
      }
      StaticLabel (title: "Tracks", bold: yes, size: .small, alignment: .left)
      hStack {
        StaticLabel (title: "Top Layer Tracks", bold: no, size: .small, alignment: .right)
        gutter
        Label (bold: yes, size : .small) { $title root.topSideTrackCountString }
      }
      hStack {
        StaticLabel (title: "Inner 1 Layer Tracks", bold: no, size: .small, alignment: .right)
        gutter
        Label (bold: yes, size : .small) { $title root.inner1LayerTrackCountString }
      }
      hStack {
        StaticLabel (title: "Inner 2 Layer Tracks", bold: no, size: .small, alignment: .right)
        gutter
        Label (bold: yes, size : .small) { $title root.inner2LayerTrackCountString }
      }
      hStack {
        StaticLabel (title: "Inner 3 Layer Tracks", bold: no, size: .small, alignment: .right)
        gutter
        Label (bold: yes, size : .small) { $title root.inner3LayerTrackCountString }
      }
      hStack {
        StaticLabel (title: "Inner 4 Layer Tracks", bold: no, size: .small, alignment: .right)
        gutter
        Label (bold: yes, size : .small) { $title root.inner4LayerTrackCountString }
      }
      hStack {
        StaticLabel (title: "Back Layer Tracks", bold: no, size: .small, alignment: .right)
        gutter
        Label (bold: yes, size : .small) { $title root.backSideTrackCountString }
      }
      hStack {
        StaticLabel (title: "Total", bold: no, size: .small, alignment: .right)
        gutter
        Label (bold: yes, size : .small) { $title root.trackCountString }
      }
      hStack {
        StaticLabel (title: "Trace Length", bold: no, size: .small, alignment: .right)
        gutter
        Label (bold: yes, size : .small) { $title root.trackLengthString }
        CanariUnitPopUpButton (size : .small) { $unit root.mTrackLengthUnit }
        space
      }
      hStack {
        StaticLabel (title: "Via Count", bold: no, size: .small, alignment: .right)
        gutter
        Label (bold: yes, size : .small) { $title root.viaCountString }
      }
      Button (title: "Design Rule Check", size: .small) { $run performERCCheckingAction }
    }
  }
  
  action changeLayerConfigurationAction ;
  action launchFreeRouterWithRouterDocument ;
  action launchFreeRouterWithoutAnyDocument ;
  action importSESFromBasicTabAction ;
  action importSESFromExtendedTabAction ;
  action exportDSNFileAction ;
  action prependNewBoardERCCheckingInspectorAction ;
  action appendNewBoardERCCheckingInspectorAction ;
  
  stackView \boardERCInspectorView vStack set (margins: .regular) {
    StaticLabel (title: "ERC Checking", bold: yes, size: .small, alignment: .center)
    Checkbox (title: "Check Clearance\nbetween Pads of the same Net", size: .small) {
      set (width: 200)
      $value root.mCheckClearanceBetweenPadsOfSameNet
    }
    Button (title: "Design Rule Check", size: .small) { $run performERCCheckingAction }
    vStack {
      TextObserverView (size: .small) [outletArray mERCLogTextViewArray] { set (minHeight: 100) }
      divider
      CanariIssueTableView (hasHideIssueButton : yes) [
        outletArray mERCIssueTableViewArray configurator ercIssueTableViewConfigurator
      ]
    }
  }

  action performERCCheckingAction ;
  
//----------------------------------------------------------------------------------------------------------------------
//   Board selected objects inspector
//----------------------------------------------------------------------------------------------------------------------

  stackView \selectedElementInspectorView vStack set (margins: .regular) {
    newView boardTrackInspectorView = \BoardTrackInspectorView ()
    newView boardConnectorInspectorView = \BoardConnectorInspectorView ()
    newView boardLineInspectorView = \BoardLineInspectorView ()
    newView restrictRectangleInspectorView = \RestrictRectangleInspectorView ()
    newView boardTextInspectorView = \BoardTextInspectorView ()
    newView boardQRCodeInspectorView = \BoardQRCodeInspectorView ()
    newView boardImageInspectorView = \BoardImageInspectorView ()
    newView componentInBoardInspectorView = \ComponentInBoardInspectorView ()
    ObjectInspectorView {
      addObjectInspector (forEntity: entity BoardTrack, inspectorView: view boardTrackInspectorView)
      addObjectInspector (forEntity: entity BoardConnector, inspectorView: view boardConnectorInspectorView)
      addObjectInspector (forEntity: entity BoardLine, inspectorView: view boardLineInspectorView)
      addObjectInspector (forEntity: entity BoardRestrictRectangle, inspectorView: view restrictRectangleInspectorView)
      addObjectInspector (forEntity: entity BoardText, inspectorView: view boardTextInspectorView)
      addObjectInspector (forEntity: entity BoardQRCode, inspectorView: view boardQRCodeInspectorView)
      addObjectInspector (forEntity: entity BoardImage, inspectorView: view boardImageInspectorView)
      addObjectInspector (forEntity: entity ComponentInProject, inspectorView: view componentInBoardInspectorView)
      $graphicController #boardObjectsController
    }
  }

//--- Board track
  selectionController BoardTrack #boardTrackSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \BoardTrackInspectorView vStack {
    StaticLabel (title: "Board Track", bold: yes, size: .small, alignment: .center)
    hStack {
      StaticLabel (title: "Net Name", bold: no, size: .small, alignment: .left)
      gutter
      Label (bold: yes, size: .small) {
        set (alignment: .left)
        expandableWidth ()
        $title #boardTrackSelectionController.netName
      }
    }
    hStack {
      StaticLabel (title: "Net Class Name", bold: no, size: .small, alignment: .left)
      gutter
      Label (bold: yes, size: .small) {
        set (alignment: .left)
        expandableWidth ()
        $title #boardTrackSelectionController.netClassName
      }
    }
    hStack {
      StaticLabel (title: "Side", bold: no, size: .small, alignment: .left)
      gutter
      EnumPopUpButton (titles: enum TrackSide.popupTitles, size: .small) {
        $selectedIndex #boardTrackSelectionController.mSide
      }
    }
    Checkbox (title: "Expose Copper (as Pad)", size : .small) {
      $enabled #boardTrackSelectionController.trackIsOnFrontOrBackLayer
      $value #boardTrackSelectionController.mAddedToSolderMask
    }
    Checkbox (title: "Is Preserved by Auto Router", size : .small) {
      $value #boardTrackSelectionController.mIsPreservedByAutoRouter
    }
    separator 
    CanariTrackLockView {
      $angle #boardTrackSelectionController.trackDirectionInDegrees
      $manualLockP1 #boardTrackSelectionController.mManualLockP1
      $manualLockP2 #boardTrackSelectionController.mManualLockP2
      $p1ConnectedToSomePad #boardTrackSelectionController.p1ConnectedToSomePad
      $p2ConnectedToSomePad #boardTrackSelectionController.p2ConnectedToSomePad
    }
    hStack {
      StaticLabel (title: "On Knob Dragging", bold: no, size: .small, alignment: .left)
      gutter
      EnumPopUpButton (titles: enum TrackLockDirection.popupTitles, size: .small) {
        $selectedIndex #boardTrackSelectionController.mDirectionLockOnKnobDragging
      }
    }
    hStack {
      StaticLabel (title: "Track Angle", bold: no, size: .small, alignment: .left)
      gutter
      CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
        $angle #boardTrackSelectionController.trackDirectionInDegrees
        $enabled #boardTrackSelectionController.trackCanRotate
      }
    }
    separator
    CanariDimensionUnitSetterPullDownButton (size : .small) { $setter6
      #boardTrackSelectionController.mP1XUnit, #boardTrackSelectionController.mP1YUnit,
      #boardTrackSelectionController.mP2XUnit, #boardTrackSelectionController.mP2YUnit,
      #boardTrackSelectionController.mDefaultTrackWidthUnit, 
      #boardTrackSelectionController.mCustomTrackWidthUnit
    }
    separator
    hStack {
      StaticLabel (title: "Track Width", bold: no, size: .small, alignment: .left)
      gutter
      Checkbox (title: "Use Custom", size: .small) {
        $value #boardTrackSelectionController.mUsesCustomTrackWidth
      }
    }
    hStack $hidden #boardTrackSelectionController.mUsesCustomTrackWidth {
      StaticLabel (title: "From Net Class", bold: no, size: .small, alignment: .left)
      gutter
      CanariObservedDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardTrackSelectionController.netClassTrackWidth, #boardTrackSelectionController.mDefaultTrackWidthUnit
      }
    }
    hStack $hidden !#boardTrackSelectionController.mUsesCustomTrackWidth {
      StaticLabel (title: "Custom Width", bold: no, size: .small, alignment: .left)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardTrackSelectionController.mCustomTrackWidth, #boardTrackSelectionController.mCustomTrackWidthUnit
      }
    }
    hStack {
      StaticLabel (title: "End Style", bold: no, size: .small, alignment: .left)
      gutter
      EnumPopUpButton (titles: enum TrackEndStyle.popupTitles, size: .small) {
        $selectedIndex #boardTrackSelectionController.mEndStyle
      }
    }
    separator
    hStack {
      StaticLabels (left: "P1", right: "X", bold: no, size: .small)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardTrackSelectionController.computedP1X, #boardTrackSelectionController.mP1XUnit
        $enabled #boardTrackSelectionController.p1CanMove
      }
    }
    hStack {
      StaticLabel (title: "Y", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardTrackSelectionController.computedP1Y, #boardTrackSelectionController.mP1YUnit
        $enabled #boardTrackSelectionController.p1CanMove
      }
    }
    hStack {
      StaticLabels (left: "P2", right: "X", bold: no, size: .small)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardTrackSelectionController.computedP2X, #boardTrackSelectionController.mP2XUnit
        $enabled #boardTrackSelectionController.p2CanMove
      }
    }
    hStack {
      StaticLabel (title: "Y", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardTrackSelectionController.computedP2Y, #boardTrackSelectionController.mP2YUnit
        $enabled #boardTrackSelectionController.p2CanMove
      }
    }
    space
  }

//--- Board Connector inspector
  selectionController BoardConnector #boardConnectorSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \BoardConnectorInspectorView vStack {
    StaticLabel (title: "Via Inspector", bold: yes, size: .small, alignment: .center)
    hStack {
      StaticLabel (title: "Net Name", bold: no, size: .small, alignment: .center)
      gutter
      Label (bold: yes, size: .small) {
        set (alignment: .left)
        expandableWidth ()
        $title #boardConnectorSelectionController.netNameFromTracks
      }
    }
    hStack {
      StaticLabel (title: "Net Class Name", bold: no, size: .small, alignment: .center)
      gutter
      Label (bold: yes, size: .small) {
        set (alignment: .left)
        expandableWidth ()
        $title #boardConnectorSelectionController.netClassName
      }
    }
    separator 
    hStack {
      StaticLabel (title: "Hole Diameter", bold: no, size: .small, alignment: .left)
      gutter
      Checkbox (title: "Use Custom", size: .small) { $value #boardConnectorSelectionController.mUsesCustomHoleDiameter }
    }
    hStack $hidden #boardConnectorSelectionController.mUsesCustomHoleDiameter {
      StaticLabel (title: "From Net Class", bold: no, size: .small, alignment: .center)
      gutter
      CanariObservedDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardConnectorSelectionController.viaDefaultHoleDiameter, #boardConnectorSelectionController.mDefaultHoleDiameterUnit
      }
    }
    hStack $hidden !#boardConnectorSelectionController.mUsesCustomHoleDiameter {
      StaticLabel (title: "Custom", bold: no, size: .small, alignment: .center)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardConnectorSelectionController.mCustomHoleDiameter, #boardConnectorSelectionController.mCustomHoleDiameterUnit
      }
    }
    separator
    hStack {
      StaticLabel (title: "Pad Diameter", bold: no, size: .small, alignment: .left)
      gutter
      Checkbox (title: "Use Custom", size: .small) { $value #boardConnectorSelectionController.mUsesCustomPadDiameter }
    }
    hStack $hidden #boardConnectorSelectionController.mUsesCustomPadDiameter {
      StaticLabel (title: "From Net Class", bold: no, size: .small, alignment: .center)
      gutter
      CanariObservedDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardConnectorSelectionController.viaDefaultPadDiameter, #boardConnectorSelectionController.mDefaultPadDiameterUnit
      }
    }
    hStack $hidden !#boardConnectorSelectionController.mUsesCustomPadDiameter {
      StaticLabel (title: "Custom", bold: no, size: .small, alignment: .center)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardConnectorSelectionController.mCustomPadDiameter, #boardConnectorSelectionController.mCustomPadDiameterUnit
      }
    }
    space
  }

//--- Board line inspector
  selectionController BoardLine #boardLineSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \BoardLineInspectorView vStack {
    StaticLabel (title: "Line Inspector", bold: yes, size: .small, alignment: .center)
    hStack {
      space
      StaticLabel (title: "Width", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardLineSelectionController.mWidth, #boardLineSelectionController.mWidthUnit
      }
    }
    hStack {
      space
      StaticLabel (title: "Side", bold: no, size: .small, alignment: .right)
      gutter
      EnumPopUpButton (titles: enum BoardLineLayer.popupTitles, size: .small) {
        $selectedIndex #boardLineSelectionController.mLayer
      }
    }
    separator
    hStack {
      StaticLabels (left: "P1", right: "X", bold: no, size: .small)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardLineSelectionController.mX1, #boardLineSelectionController.mX1Unit
      }
    }
    hStack {
      StaticLabel (title: "Y", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardLineSelectionController.mY1, #boardLineSelectionController.mY1Unit
      }
    }
    hStack {
      StaticLabels (left: "P2", right: "X", bold: no, size: .small)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardLineSelectionController.mX2, #boardLineSelectionController.mX2Unit
      }
    }
    hStack {
      StaticLabel (title: "Y", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardLineSelectionController.mY2, #boardLineSelectionController.mY2Unit
      }
    }
    space
  }

//--- Restrict rectangle inspector
  selectionController BoardRestrictRectangle #restrictRectSelController :
    #boardObjectsController.selectedArray
  ;

  stackView \RestrictRectangleInspectorView vStack {
    StaticLabel (title: "Restrict Rectangle Inspector", bold: yes, size: .small, alignment: .center)
    CanariRestrictRectangleView {
      $frontBackInner1Inner2Inner3Inner4 
        #restrictRectSelController.mIsInFrontLayer, #restrictRectSelController.mIsInBackLayer,
        #restrictRectSelController.mIsInInner1Layer, #restrictRectSelController.mIsInInner2Layer,
        #restrictRectSelController.mIsInInner3Layer, #restrictRectSelController.mIsInInner4Layer
    }
    CanariDimensionUnitSetterPullDownButton (size : .small) { $setter4
      #restrictRectSelController.mXUnit, #restrictRectSelController.mYUnit,
      #restrictRectSelController.mWidthUnit, #restrictRectSelController.mHeightUnit
    }
    hStack {
      StaticLabel (title: "Left", bold: no, size: .small, alignment: .left)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #restrictRectSelController.mX, #restrictRectSelController.mXUnit
      }
    }
    hStack {
      StaticLabel (title: "Bottom", bold: no, size: .small, alignment: .left)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #restrictRectSelController.mY, #restrictRectSelController.mYUnit
      }
    }
    hStack {
      StaticLabel (title: "Width", bold: no, size: .small, alignment: .left)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #restrictRectSelController.mWidth, #restrictRectSelController.mWidthUnit
      }
    }
    hStack {
      StaticLabel (title: "Height", bold: no, size: .small, alignment: .left)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #restrictRectSelController.mHeight, #restrictRectSelController.mHeightUnit
      }
    }
    space
  }

//--- Board Image inspector
  selectionController BoardImage #boardImageSelectionController :
    #boardObjectsController.selectedArray
  ;
  
  stackView \BoardImageInspectorView vStack {
    StaticLabel (title: "Image Inspector", bold: yes, size: .small, alignment: .center)
    hStack {
      StaticLabel (title: "Display", bold: no, size: .small, alignment: .right)
      EnumPopUpButton (titles: enum BoardImageDisplay.popupTitles, size: .small) {
        $selectedIndex #boardImageSelectionController.mImageDisplay
      } 
    }
    DroppableImageView (removeButton : no) {
      set (maxWidth: 220)
      set (maxHeight: 350)
      $imageData #boardImageSelectionController.computedDataImage
    }
    hStack {
      StaticLabel (title: "Image Data", bold: no, size: .small, alignment: .right)
      gutter
      Label (bold: yes, size: .small) {
        set (alignment: .left)
        $title #boardImageSelectionController.imageDataByteCount
      } 
    }
    hStack {
      StaticLabel (title: "Image Width", bold: no, size: .small, alignment: .right)
      gutter
      Label (bold: yes, size: .small) {
        set (alignment: .left)
        $title #boardImageSelectionController.boardOriginalImageWidth
      }
    }
    hStack {
      StaticLabel (title: "Image Height", bold: no, size: .small, alignment: .right)
      gutter
      Label (bold: yes, size: .small) {
        set (alignment: .left)
        $title #boardImageSelectionController.boardOriginalImageHeight
      }
    }
    separator
    hStack {
      StaticLabel (title: "Scale", bold: no, size: .small, alignment: .right)
      gutter
      DoubleField (width: 64, size: .small) {
        $value #boardImageSelectionController.mScale (sendContinously: no)
      }
    }
    hStack {
      StaticLabel (title: "Scaled Image Width", bold: no, size: .small, alignment: .right)
      gutter
      Label (bold: yes, size: .small) {
        set (alignment: .left)
        $title #boardImageSelectionController.boardScaledImageWidth
      }
    }
    hStack {
      StaticLabel (title: "Scaled Image Height", bold: no, size: .small, alignment: .right)
      gutter
      Label (bold: yes, size: .small) {
        set (alignment: .left)
        $title #boardImageSelectionController.boardScaledImageHeight
      }
    }
    separator
    hStack {
      StaticLabel (title: "Threshold", bold: no, size: .small, alignment: .right)
      gutter
      LinearSlider (min: 0, max: 255, ticks: 9) {
        $intValue #boardImageSelectionController.mThreshold (sendContinously:yes)
      }
    }
    hStack {
      space
      gutter
      Checkbox (title: "Invert", size: .small) { $value #boardImageSelectionController.mInvert }
    }
    hStack {
      StaticLabel (title: "Flip", bold: no, size: .small, alignment: .right)
      gutter
      Checkbox (title: "Horizontal", size: .small) {
        $value #boardImageSelectionController.mHorizontalFlip
      }
    }
    hStack {
      space
      gutter
      Checkbox (title: "Vertical", size: .small) {
        $value #boardImageSelectionController.mVerticalFlip
      }
    }
    separator
    hStack {
      StaticLabel (title: "Pixel Size", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardImageSelectionController.mPixelSize, #boardImageSelectionController.mPixelSizeUnit
      }
    }
    hStack {
      StaticLabel (title: "Actual Image Width", bold: no, size: .small, alignment: .right)
      gutter
      CanariObservedDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardImageSelectionController.boardActualImageWidth, #boardImageSelectionController.mActualWidthUnit
      }
    }
    hStack {
      StaticLabel (title: "Actual Image Height", bold: no, size: .small, alignment: .right)
      gutter
      CanariObservedDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardImageSelectionController.boardActualImageHeight, #boardImageSelectionController.mActualHeightUnit
      }
    }
    separator
    hStack {
      StaticLabel (title: "Layer", bold: no, size: .small, alignment: .right)
      gutter
      EnumPopUpButton (titles: enum BoardQRCodeLayer.popupTitles, size: .small) {
        $selectedIndex #boardImageSelectionController.mLayer
      } 
    }
    hStack {
      StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right)
      gutter
      CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
        $angle #boardImageSelectionController.mRotation
      }
    }
    hStack {
      StaticLabel (title: "Center X", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardImageSelectionController.mCenterX, #boardImageSelectionController.mXUnit
      }
    }
    hStack {
      StaticLabel (title: "Center Y", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardImageSelectionController.mCenterY, #boardImageSelectionController.mYUnit
      }
    }
    space
  }
 
 //--- QRCode inspector
  selectionController BoardQRCode #boardQRCodeSelectionController :
    #boardObjectsController.selectedArray
  ;
 
  stackView \BoardQRCodeInspectorView vStack {
    StaticLabel (title: "QRCode Inspector", bold: yes, size: .small, alignment: .center)
    StaticLabel (title: "Contents", bold: no, size: .small, alignment: .center)
    TextField (minWidth: 150, size: .small) {
      automaticallyAdjustHeight (maxWidth: 150)
      $value #boardQRCodeSelectionController.mText (sendContinously : yes)
    }
    hStack {
      StaticLabel (title: "Correction Level", bold: no, size: .small, alignment: .right)
      gutter
      EnumPopUpButton (titles: enum QRCodeCorrectionLevel.popupTitles, size: .small) {
        $selectedIndex #boardQRCodeSelectionController.mCorrectionLevel
      } 
    }
    hStack {
      space
      gutter
      Checkbox (title: "Draw Frame", size: .small) { $value #boardQRCodeSelectionController.mDrawFrame }
    }
    separator
    hStack {
      StaticLabel (title: "Module Count", bold: no, size: .small, alignment: .right)
      gutter
      IntObserverField (bold: yes, size: .small) {
        $observedValue #boardQRCodeSelectionController.moduleCount
      }
    }
    hStack {
      StaticLabel (title: "Module Size", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardQRCodeSelectionController.mModuleSize, #boardQRCodeSelectionController.mModuleSizeUnit
      }
    }
    hStack {
      StaticLabel (title: "Actual Image Size", bold: no, size: .small, alignment: .right)
      gutter
      CanariObservedDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardQRCodeSelectionController.actualImageSize, #boardQRCodeSelectionController.mActualSizeUnit
      }
    }
    separator
    hStack {
      StaticLabel (title: "Layer", bold: no, size: .small, alignment: .right)
      gutter
      EnumPopUpButton (titles: enum BoardQRCodeLayer.popupTitles, size: .small) {
        $selectedIndex #boardQRCodeSelectionController.mLayer
      } 
    }
    hStack {
      StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right)
      gutter
      CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
        $angle #boardQRCodeSelectionController.mRotation
      }
    }
    separator
    hStack {
      StaticLabel (title: "Center X", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardQRCodeSelectionController.mCenterX, #boardQRCodeSelectionController.mXUnit
      }
    }
    hStack {
      StaticLabel (title: "Center Y", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardQRCodeSelectionController.mCenterY, #boardQRCodeSelectionController.mYUnit
      }
    }
    space
  }

//--- Text inspector
  selectionController BoardText #boardTextSelectionController :
    #boardObjectsController.selectedArray
  ;
  
  stackView \BoardTextInspectorView vStack {
    StaticLabel (title: "Text Inspector", bold: yes, size: .small, alignment: .center)
    TextField (minWidth: 150, size: .small) {
      automaticallyAdjustHeight (maxWidth: 150)
      $value #boardTextSelectionController.mText (sendContinously : yes)
    }
    separator
    hStack {
      StaticLabels (left: "Origin", right:"X", bold: no, size: .small)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardTextSelectionController.mX, #boardTextSelectionController.mXUnit
      }
    }
    hStack {
      StaticLabel (title: "Y", bold: no, size: .small, alignment: .right)
      gutter
      CanariDimensionAndPopUp (size: .small) {
        $dimensionAndUnit #boardTextSelectionController.mY, #boardTextSelectionController.mYUnit
      }
    }
    separator
    hStack {
      StaticLabel (title: "Font", bold: no, size: .small, alignment: .right)
      gutter
      CanariBoardFontPopUpButton {
        $currentFontName #boardTextSelectionController.fontName
        $fontNames root.fontNameArray
        $run setBoardTextFontAction
      }
    }
    hStack {
      StaticLabel (title: "Size", bold: no, size: .small, alignment: .right)
      gutter
      DoubleField (width: 64, size: .small) {
        $value #boardTextSelectionController.mFontSize (sendContinously: yes)
      }
    }
    hStack {
      StaticLabel (title: "Weight", bold: no, size: .small, alignment: .right)
      gutter
      DoubleField (width: 64, size: .small) {
        $value #boardTextSelectionController.mWeight (sendContinously: yes)
      }
    }
    hStack {
      space
      gutter
      Checkbox (title: "Oblique", size: .small) { $value #boardTextSelectionController.mOblique }
    }
    separator
    hStack {
      StaticLabel (title: "Horizontal", bold: no, size: .small, alignment: .right)
      gutter
      CanariHorizontalAlignmentSegmentedControl (size: .small) { $alignment #boardTextSelectionController.mHorizontalAlignment }
    }
    hStack {
      StaticLabel (title: "Vertical", bold: no, size: .small, alignment: .right)
      gutter
      CanariVerticalAlignmentSegmentedControl (size: .small) { $alignment #boardTextSelectionController.mVerticalAlignment }
    }
    separator
    hStack {
      StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right)
      gutter
      CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) { $angle #boardTextSelectionController.mRotation }
    }
    hStack {
      StaticLabel (title: "Side", bold: no, size: .small, alignment: .right)
      gutter
      EnumPopUpButton (titles: enum BoardTextLayer.popupTitles, size: .small) { $selectedIndex #boardTextSelectionController.mLayer } 
    }
    Checkbox (title: "Show Rotation Knob", size: .small) {
      set (toolTip: "Common to all texts, stored in Preferences")
      $value prefs.mShowTextRotationKnobInBoard
    }
    space
  }

  action setBoardTextFontAction ;
  
//--- Component inspector
  selectionController ComponentInProject #componentInBoardSelectionController :
    #boardObjectsController.selectedArray
  ;

  stackView \ComponentInBoardInspectorView vStack {
    StaticLabel (title: "Component Inspector", bold: yes, size: .small, alignment: .center)
    hStack {
      vStack {
        Checkbox (title: "Display Name", size: .small) {
          expandableWidth ()
          $value #componentInBoardSelectionController.mNameIsVisibleInBoard
        }
        Checkbox (title: "Display Value", size: .small) {
          expandableWidth ()
          $value #componentInBoardSelectionController.mValueIsVisibleInBoard
        }
        Checkbox (title: "Display Legend", size: .small) {
          expandableWidth ()
          $value #componentInBoardSelectionController.mDisplayLegend
        }
      }
      StaticLabel (
        title: "Name, value and legend are actually displayed if \"Component + Legend\" check box is checked (see 🔍 inspector).",
        bold: no,
        size: .mini,
        alignment: .left
      )
    }
    Checkbox (title: "Show Rotation Knob", size: .small) {
      expandableWidth ()
      set (toolTip: "Common to all packages, stored in Preferences")
      $value prefs.mShowComponentRotationKnobInBoard
    }
    CanariDimensionUnitSetterPullDownButton (size : .small) { $setter6
      #componentInBoardSelectionController.mXUnit, #componentInBoardSelectionController.mYUnit,
      #componentInBoardSelectionController.mXNameUnit, #componentInBoardSelectionController.mYNameUnit,
      #componentInBoardSelectionController.mXValueUnit, #componentInBoardSelectionController.mYValueUnit
    }
    separator
    vStack withVScroller {
      StaticLabel (title: "Package", bold: yes, size: .small, alignment: .left)
      hStack {
        StaticLabels (left: "Center", right:"X", bold: no, size: .small)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #componentInBoardSelectionController.mX, #componentInBoardSelectionController.mXUnit
        }
      }
      hStack {
        StaticLabel (title: "Y", bold: no, size: .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #componentInBoardSelectionController.mY, #componentInBoardSelectionController.mYUnit
        }
      }
      CanariBoardComponentPackagePopUpButton [configurator componentPackagePopUpButtonConfigurator]
      hStack {
        StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right)
        gutter
        CanariPreferredDirectionSegmentedControl { $angle #componentInBoardSelectionController.mRotation }
      }
      hStack {
        space
        gutter
        CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
          $angle #componentInBoardSelectionController.mRotation
        }
      }
      separator
      hStack {
        StaticLabel (title: "Name", bold: yes, size: .small, alignment: .left)
        gutter
        Label (bold: yes, size: .small) { set (alignment: .left) $title #componentInBoardSelectionController.componentName }
      }
      hStack {
        StaticLabels (left: "Center", right:"∆X", bold: no, size: .small)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #componentInBoardSelectionController.mXName, #componentInBoardSelectionController.mXNameUnit
        }
      }
      hStack {
        StaticLabel (title: "∆Y", bold: no, size: .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #componentInBoardSelectionController.mYName, #componentInBoardSelectionController.mYNameUnit
        }
      }
      hStack {
        StaticLabel (title: "Size", bold: no, size: .small, alignment: .right)
        gutter
        DoubleField (width: 64, size: .small) {
          $value #componentInBoardSelectionController.mNameFontSize (sendContinously : no)
          // $enabled #componentInBoardSelectionController.mNameIsVisibleInBoard
        }
      }
      hStack {
        StaticLabel (title: "Font", bold: no, size: .small, alignment: .right)
        gutter
        CanariBoardFontPopUpButton {
          $currentFontName #componentInBoardSelectionController.componentNameFontName
          $fontNames root.fontNameArray
          $run setComponentNameFontAction
        }
      }
      hStack {
        StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right)
        CanariPreferredDirectionSegmentedControl { $angle #componentInBoardSelectionController.mNameRotation }
      }
      hStack {
        space
        gutter
        CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
          $angle #componentInBoardSelectionController.mNameRotation
          $enabled #componentInBoardSelectionController.mNameIsVisibleInBoard
        }
      }
      separator
      hStack {
        StaticLabel (title: "Value", bold: yes, size: .small, alignment: .left)
        gutter
        TextField (minWidth: 150, size: .small) {
          automaticallyAdjustHeight (maxWidth: 150)
          $value #componentInBoardSelectionController.mComponentValue (sendContinously : yes)
    //    $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
        }
      }
      hStack {
        StaticLabels (left: "Center", right:"∆X", bold: no, size: .small)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #componentInBoardSelectionController.mXValue, #componentInBoardSelectionController.mXValueUnit
        }
      }
      hStack {
        StaticLabel (title: "∆Y", bold: no, size: .small, alignment: .right)
        gutter
        CanariDimensionAndPopUp (size: .small) {
          $dimensionAndUnit #componentInBoardSelectionController.mYValue, #componentInBoardSelectionController.mYValueUnit
        }
      }
      hStack {
        StaticLabel (title: "Size", bold: no, size: .small, alignment: .right)
        gutter
        DoubleField (width: 64, size: .small) {
          $value #componentInBoardSelectionController.mValueFontSize (sendContinously : no)
        }
      }
      hStack {
        StaticLabel (title: "Font", bold: no, size: .small, alignment: .right)
        gutter
        CanariBoardFontPopUpButton {
          $currentFontName #componentInBoardSelectionController.componentValueFontName
          $fontNames root.fontNameArray
          $run setComponentValueFontAction
        }
      }
      hStack {
        StaticLabel (title: "Rotation", bold: no, size: .small, alignment: .right)
        gutter
        CanariPreferredDirectionSegmentedControl { $angle #componentInBoardSelectionController.mValueRotation }
      }
      hStack {
        space
        gutter
        CanariAngleFieldAndSlider (fieldMinWidth: 64, size: .small) {
          $angle #componentInBoardSelectionController.mValueRotation
          $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
        }
      }
      separator
      hStack {
        StaticLabel (title: "Slave Pads", bold: yes, size: .small, alignment: .left)
        gutter
        BoolPopUpButton (title0: "should be insulated", title1: "should be routed") {
          $value #componentInBoardSelectionController.mSlavePadsShouldBeRouted
          $enabled #componentInBoardSelectionController.hasSlavePads
        }
      }
      separator
      hStack {
        StaticLabel (title: "Side", bold: yes, size: .small, alignment: .left)
        gutter
        EnumPopUpButton (titles: enum ComponentSide.popupTitles, size: .small) {
          $selectedIndex #componentInBoardSelectionController.mSide
        }
      }
    }
  }

  action setComponentNameFontAction ;
  action setComponentValueFontAction ;
   
  //············································································
  //     Product Page
  //············································································

  stackView \productPage vStack set (margins: .regular) {
    newView artworkDescriptionPage = \ArtworkDescriptionPage ()
    newView artworkMinimaPage = \ArtworkMinimaPage ()
    newView artworkDataPage = \ArtworkDataPage ()
    newView pdfSettingsPage = \PDFSettingsPage ()
    newView generationLogPage = \GenerationLogPage ()
    hStack {
      vStack {
        Button (title: "Import Artwork…", size : .regular) {
          $hidden !root.mArtwork.none
          $run importArtworkAction 
        }
        hStack $hidden root.mArtwork.none {
          StaticLabel (title: "Artwork", bold: no, size : .regular, alignment: .center)
          Label (bold: yes, size : .regular) { $title root.mArtworkName }
          separator
          StaticLabel (title: "Version", bold: no, size : .regular, alignment: .center)
          IntObserverField (bold: yes, size : .regular) {
            $observedValue root.mArtworkVersion
          }
          separator
          ImageObserverView (size: .small) { $image root.segmentedControlArtworkAttentionImage }
          Label (bold: yes, size : .regular) { $title root.mArtworkFileSystemLibraryStatus }
          separator
          Button (title: "Update", size : .regular) {
            $enabled root.mArtworkIsUpdatable
            $run updateArtworkAction
          }
          Button (title: "Detach Artwork", size : .regular) {
            expandableWidth ()
            $hidden root.mArtwork.none
            $run detachArtworkAction 
          }
        }
        hStack {
          Checkbox (title: "Merger Archive", size : .regular) { $value root.mGenerateMergerArchive }
          Checkbox (title: "Gerber, PDF", size : .regular) { $value root.mGenerateGerberAndPDF }
          Checkbox (title: "BOM", size : .regular) { $value root.mGenerateBOM }
          Button (title: "Generate Files", size : .regular) {
            expandableWidth ()
            $enabled !root.mArtwork.none & !self.documentIsUnnamed
            $run generateProductFilesAction
          }
        }
      }
      vStack {
        Label (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $title self.documentFileShouldBeRenamedErrorMessage
        }
        TextObserverView (size: .small) {
          expandableWidth ()
          setNoBackground ()
          setNoVerticalScroller ()
          setNoHorizontalScroller ()
          $observedValue self.incorrectDocumentFileDetailedErrorMessage
        }
        space
      }
      space    
    }
    separator
    hStack $hidden !root.mArtwork.none {
      space
      vStack {
        space
        StaticLabel (title: "No Artwork", bold: yes, size : .regular, alignment: .center)
        space 
      }
      space
    }
    vStack $hidden root.mArtwork.none {
      TabView (size : .regular) [outlet mProductPageSegmentedControl] { 
        addTab (title: "Gerber and PDF Settings", tooltip: "", contentView: view pdfSettingsPage)
        addTab (title: "Artwork Description", tooltip: "", contentView: view artworkDescriptionPage)
        addTab (title: "Artwork Minima", tooltip: "", contentView: view artworkMinimaPage)
        addTab (title: "Artwork Data", tooltip: "", contentView: view artworkDataPage)
        addTab (title: "Generation Log", tooltip: "", contentView: view generationLogPage)
      }
    }
 }

  action importArtworkAction ;
  action detachArtworkAction ;
  action updateArtworkAction ;
  action generateProductFilesAction ;
  transient Bool documentIsUnnamed dependsFrom self.documentFileName ;
  transient String incorrectDocumentFileDetailedErrorMessage dependsFrom self.documentFileName ;
  transient String documentFileShouldBeRenamedErrorMessage dependsFrom self.documentFileName ;

  //············································································

  stackView \ProductMasterView vStack { }

  //············································································

  stackView \ArtworkDescriptionPage vStack {
    hStack {
      StaticLabel (title: "Layer Description", bold: no, size: .regular, alignment: .center)
      gutter
      Label (bold: yes, size: .regular) {
        set (alignment: .left)
        expandableWidth ()
        $title root.layerConfigurationString
      }
    }
    hStack {
      StaticLabel (title: "Artwork Version", bold: no, size: .regular, alignment: .center)
      gutter
      IntObserverField (bold: yes, size: .regular) {
        set (alignment: .left)
        expandableWidth ()
        $observedValue root.mArtworkVersion
      }
    }
    hStack {
      StaticLabel (title: "Comment", bold: no, size: .regular, alignment: .left)
      gutter
      TextObserverView (size: .small) { expandableWidth () $observedValue root.artworkComments }
    }
  }

  //············································································

  stackView \ArtworkDataPage hStack set (margins: .zero) {
    space
    vStack set (spacing: .zero) set (margins: .zero) {
      hStack set (margins: .regular) {
        StaticLabel (title: "Drill File Extension", bold: no, size : .small, alignment: .center)
        Label (bold: yes, size : .small) { $title root.drillDataFileExtension }
        ImageObserverView (size: .mini) { $image self.emptyDrillFileExtensionImage }
        space
      }
      hStack set (leftMargin: .regular) set (rightMargin: .regular) set (topMargin: .zero) {
        vStack set (topMargin: .regular) {
          Label (bold: yes, size : .small) { $title self.generatedFileCountString }
          TableView (size : .small, addControlButtons: no) { $tableValue #mDataController }
        }
        separator
        vStack set (topMargin: .regular) {
          hStack {
            hStack set (topMargin: .zero) {
              StaticLabel (title: "File Extension", bold: yes, size : .small, alignment: .center)
              Label (bold: yes, size : .small) { $title #mDataSelection.fileExtension }
            }
            ImageObserverView (size: .mini) { $image #mDataSelection.emptyFileExtensionImage }
            space
            StaticLabel (title: "Empty Data File", bold: yes, size : .small, alignment: .center) {
              setOrangeTextColor () $hidden !#mDataSelection.hasNoData
            }
          }
          StaticLabel (title: "Front Side Elements", bold: yes, size : .small, alignment: .left)
          hStack {
            vStack set (leftMargin: .large) {
              hStack {
                Checkbox (title: "Front Side Images", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawImagesTopSide
                }
                gutter
                Checkbox (title: "Front Side QRCodes", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawQRCodesTopSide
                }
              }
              hStack {
                Checkbox (title: "Legend Front Side Texts", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTextsLegendTopSide
                }
                gutter
                Checkbox (title: "Layout Front Side Texts", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTextsLayoutTopSide
                }
              }
              hStack {
                Checkbox (title: "Front Side Tracks", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTracksTopSide
                }
                gutter
                Checkbox (title: "Front Side Pads", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawPadsTopSide
                }
              }
            }
            space
          }
          hStack set (leftMargin: .large) {
            Checkbox (title: "Front Side Component Names", size : .small) {
              set (enabled: no)
              $value #mDataSelection.drawComponentNamesTopSide
            } space
          }
          hStack set (leftMargin: .large) {
            Checkbox (title: "Front Side Component Values", size : .small) {
              set (enabled: no)
              $value #mDataSelection.drawComponentValuesTopSide
            }
            space
          }
          hStack set (leftMargin: .large) {
            Checkbox (title: "Front Side Package Legends", size : .small) {
              set (enabled: no)
              $value #mDataSelection.drawPackageLegendTopSide
            }
            space
          }
          StaticLabel (title: "Inner Elements", bold: yes, size : .small, alignment: .left)
          hStack {
           vStack set (leftMargin: .large) {
              hStack $hidden !root.hasInnerElements {
                Checkbox (title: "Traversing Pads", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTraversingPads
                }
                gutter
                space
              }
              hStack $hidden root.hasInnerElements {
                Checkbox (title: "Traversing Pads", size : .small) {
                  set (enabled: no)
                }
                gutter
                space
              }
              hStack $hidden !root.hasInnerElements {
                Checkbox (title: "Inner 1 Layer Tracks", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTracksInner1Layer
                }
                gutter
                Checkbox (title: "Inner 2 Layer Tracks", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTracksInner2Layer
                }
              }
              hStack $hidden root.hasInnerElements {
                Checkbox (title: "Inner 1 Layer Tracks", size : .small) {
                  set (enabled: no)
                }
                gutter
                Checkbox (title: "Inner 2 Layer Tracks", size : .small) {
                  set (enabled: no)
                }
              }
              hStack $hidden !root.hasSixLayers {
                Checkbox (title: "Inner 3 Layer Tracks", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTracksInner3Layer
                }
                gutter
                Checkbox (title: "Inner 4 Layer Tracks", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTracksInner4Layer
                }
              }
              hStack $hidden root.hasSixLayers {
                Checkbox (title: "Inner 3 Layer Tracks", size : .small) {
                  set (enabled: no)
                }
                gutter
                Checkbox (title: "Inner 4 Layer Tracks", size : .small) {
                  set (enabled: no)
                }
              }
            }
            space
          }
          StaticLabel (title: "Back Side Elements", bold: yes, size : .small, alignment: .left)
          hStack {
            vStack set (leftMargin: .large) {
              hStack {
                Checkbox (title: "Back Side Images", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawImagesBottomSide
                }
                gutter
                Checkbox (title: "Back Side QRCodes", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawQRCodesBottomSide
                }
              }
              hStack {
                Checkbox (title: "Legend Back Side Texts", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTextsLegendBottomSide
                }
                gutter
                Checkbox (title: "Layout Back Side Texts", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTextsLayoutBottomSide
                }
              }
              hStack {
                Checkbox (title: "Back Side Tracks", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawTracksBottomSide
                }
                gutter
                Checkbox (title: "Back Side Pads", size : .small) {
                  set (enabled: no)
                  $value #mDataSelection.drawPadsBottomSide
                }
              }
            }
            space
          }
          hStack set (leftMargin: .large) {
            Checkbox (title: "Back Side Component Names", size : .small) {
              set (enabled: no)
              $value #mDataSelection.drawComponentNamesBottomSide
            } space
          }
          hStack set (leftMargin: .large) {
            Checkbox (title: "Back Side Component Values", size : .small) {
              set (enabled: no)
              $value #mDataSelection.drawComponentValuesBottomSide
            } space
          }
          hStack set (leftMargin: .large) {
            Checkbox (title: "Back Side Package Legends", size : .small) {
              set (enabled: no)
              $value #mDataSelection.drawPackageLegendBottomSide
             } space
          }
          StaticLabel (title: "Other Elements", bold: yes, size : .small, alignment: .left)
          hStack set (leftMargin: .large) {
            Checkbox (title: "Vias", size : .small) {
              set (enabled: no)
              $value #mDataSelection.drawVias
            }
            Checkbox (title: "Internal Board Limits", size : .small) {
              set (enabled: no)
              $value #mDataSelection.drawInternalBoardLimits
            }
            Checkbox (title: "Board Limits", size : .small) {
              set (enabled: no)
              $value #mDataSelection.drawBoardLimits
            }
            space
          }
          StaticLabel (title: "Option", bold: yes, size : .small, alignment: .left)
          hStack set (leftMargin: .large) {
            Checkbox (title: "Horizontal Mirror", size : .small) {
              set (enabled: no)
              $value #mDataSelection.horizontalMirror
            }
            space 
          }
        }
        space
      }
      space
    }
    space
  }

  transient NSImage emptyDrillFileExtensionImage dependsFrom self.emptyDrillFileExtension ;
  transient Bool emptyDrillFileExtension dependsFrom root.drillDataFileExtension ;
  transient String generatedFileCountString dependsFrom #mDataController.sortedArray.count ;

  tableViewController #mDataController (allowsEmptySelection:no, allowsMultipleSelection:no) root.fileGenerationParameterArray {
    editableColumn name (title: "Name", minWidth: 60, maxWidth: 200, headerAlignment: .left, contentAlignment: .left) sortkey name
    column parameterStatusImage (title: "", minWidth: 30, maxWidth: 30, headerAlignment: .center, contentAlignment: .center)
  }
  selectionController ArtworkFileGenerationParameters #mDataSelection : #mDataController.selectedArray ;

  //············································································

  stackView \ArtworkMinimaPage vStack set (margins: .large) {
    hStack {
      space
      vStack {
        space
        StaticLabel (title: "PP: Pad to Pad Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TP: Track to Pad Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TT: Track to Track Distance", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "TW: Track Width", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "OAR: Outer Annular Ring", bold: no, size : .small, alignment: .left)
        StaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: no, size : .small, alignment: .left)
        space
      }
      StaticImageView (name: "artwork")
      space
    }
    hStack {
      space
      vStack set (leftMargin: .large) set (rightMargin: .large) set (topMargin: .regular) {
        hStack {
          StaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: no, size : .regular, alignment: .center)
          gutter
          CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minPPTPTTTW, root.minPPTPTTTWdisplayUnit }
        }
        hStack {
          StaticLabel (title: "Minimum Value for PHD", bold: no, size : .regular, alignment: .center)
          gutter
          CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForPHDinEBUnit, root.minValueForPHDdisplayUnit }
        }
        hStack {
          StaticLabel (title: "Minimum Value for OAR", bold: no, size : .regular, alignment: .center)
          gutter
          CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForOARinEBUnit, root.minValueForOARdisplayUnit }
        }
        hStack {
          StaticLabel (title: "Minimum Value for Board Limit Width", bold: no, size : .regular, alignment: .center)
          gutter
          CanariObservedDimensionAndPopUp (size : .small) {
            $dimensionAndUnit root.minValueForBoardLimitWidth, root.minValueForBoardLimitWidthDisplayUnit
          }
        }
      }
      space
    }
    space
  }

  //············································································

  stackView \PDFSettingsPage hStack set (margins: .large) {
    vStack {
      StaticLabel (title: "Gerber Settings", bold: yes, size: .regular, alignment: .left)
      vStack set (leftMargin: .large) {
        EnumPopUpButton (titles: enum GerberUnit.popupTitles, size: .regular) {
          $selectedIndex root.mGerberProductUnit
        }
      }
      StaticLabel (title: "PDF Settings", bold: yes, size: .regular, alignment: .left)
      vStack set (leftMargin: .large) {
        hStack {
          ColorWell { $color root.mPDFBoardBackgroundColor }
          StaticLabel (title: "Board Background Color", bold: no, size: .regular, alignment: .center)
          space
        }
        EnumPopUpButton (titles: enum PDFProductGrid.popupTitles, size: .regular) {
          $selectedIndex root.mPDFProductGrid
        }
      }
      space
    }
    space
  }

  //············································································

  stackView \GenerationLogPage vStack set (margins: .large) {
    TextObserverView (size: .regular) [outlet mProductFileGenerationLogTextView]
  }

  //············································································

}

//------------------------------------------------------------------------------
