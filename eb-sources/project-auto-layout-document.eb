//------------------------------------------------------------------------------
//     P R O J E C T    D O C U M E N T
//------------------------------------------------------------------------------

autoLayoutDocument AutoLayoutProjectDocument root ProjectRoot stackView mDocumentMainView {

  stackView mPageMasterView vStack { }

  stackView mDocumentMainView vStack set (spacing: 0) {
    hStack set (margins: 8) {
      vStack {
        SegmentedControlWithPages (documentView: stackView mPageMasterView, equalWidth: no, size : .regular) {
          addPage (title: "Components", tooltip: "", pageView: stackView mComponentsPage)
          addPage (title: "Library", tooltip: "", pageView: stackView mLibraryPage)
          addPage (title: "Schematic", tooltip: "", pageView: stackView mSchematicPage)
          addPage (title: "Net Classes", tooltip: "", pageView: stackView mNetClassesPage)
          addPage (title: "Net List", tooltip: "", pageView: stackView mNetListPage)
          addPage (title: "Board Outline", tooltip: "", pageView: stackView mBoardOutlinePage)
          addPage (title: "Board Contents", tooltip: "", pageView: stackView mBoardContentsPage)
          addPage (title: "Product", tooltip: "", pageView: stackView mProductPage)
          $selectedPage root.mSelectedPageIndex
        }
        hStack { space StaticLabel (title: "Page", bold: no, size : .small) space }
      }
      space
      vStack {
        hStack {
          space
          ImageObserverView (size : .regular) {
            $image root.schematicStatusImage $tooltip root.schematicStatusMessage
          }
          space
        }
        StaticLabel (title: "Schematic", bold: no, size : .small) { set (alignment: .center) }
      }
      vStack {
        hStack {
          space
          ImageObserverView (size : .regular) {
            $image root.boardStatusImage $tooltip root.boardStatusMessage
          }
          space
        }
        StaticLabel (title: "Board", bold: no, size : .small) { set (alignment: .center) }
      }
      vStack {
        hStack {
          space
          ImageObserverView (size : .regular) {
            $image root.ercStatusImage $tooltip root.ercStatusMessage
          }
          space
        }
        StaticLabel (title: "ERC", bold: no, size : .small) { set (alignment: .center) }
      }
    }
    separator
    stackViewRef mPageMasterView
  }
  
//---------------------- Components Tab

  stackView mComponentsPage hStack set (margins: 8) {
    vStack {
      Label (bold: yes, size : .small) { expandableWidth () set (alignment: .center) $title self.componentCount }
      separator
      StaticLabel (title: "Add Component from:", bold: yes, size : .small) { expandableWidth () set (alignment: .left) }
      Button (title: "File Library…", size: .small) { expandableWidth () $run addComponentFromFileLibraryAction }
      PullDownButton (title: "Embedded Library…", size: .small) {
         expandableWidth () $items root.deviceNames $run addComponentFromEmbeddedLibraryAction
      }
      separator
      StaticLabel (title: "On Selected Components", bold: yes, size : .small) { expandableWidth () set (alignment: .left) }
      Button (title: "Duplicate", size: .small) {
        expandableWidth ()
        $run duplicateSelectedComponentsAction
        $enabled #componentController.selectedArray.count > 0
      }
      Button (title: "Rename…", size: .small) {
        expandableWidth ()
        $run renameSelectedComponentsAction
        $enabled #componentController.selectedArray.count == 1
      }
      Button (title: "Remove", size: .small) {
        expandableWidth ()
        $run removeSelectedComponentsAction
        $enabled #componentController.selectedArray.count > 0
      }
      Button (title: "Change Package…", size: .small) {
        expandableWidth ()
        $run changePackageOfSelectedComponentsAction
        $enabled self.canChangePackage
      }
      Button (title: "Change Value…", size: .small) {
        expandableWidth ()
        $run changeValueOfSelectedComponentsAction
        $enabled #componentController.selectedArray.count > 0
      }
      Button (title: "Reveal in Board", size: .small) {
        expandableWidth ()
        $run revealPackageOfSelectedComponentsAction
        // $enabled (#componentController.selectedArray.count == 1) & #componentController.selectedArray.all.isPlacedInBoard
        $enabled #componentController.selectedArray.count == 1
      }
      separator
      space
    }
    TableView (size : .regular, addControlButtons: no) { $tableValue #componentController }
  }

  transient String componentCount dependsFrom root.mComponents.count ;
//  transient Bool selectedComponentsArePlacedInBoard dependsFrom #componentController.selectedArray.all.isPlacedInBoard ;
  action addComponentFromFileLibraryAction ;
  action addComponentFromEmbeddedLibraryAction ;
  action duplicateSelectedComponentsAction ;
  action renameSelectedComponentsAction ;
  action removeSelectedComponentsAction ;
  action changePackageOfSelectedComponentsAction ;
  transient Bool canChangePackage dependsFrom #componentController.selectedArray.all.availablePackages ;
  action changeValueOfSelectedComponentsAction ;
  action revealPackageOfSelectedComponentsAction ;

  autolayout tableViewController #componentController (allowsEmptySelection:yes, allowsMultipleSelection:yes) root.mComponents {
     column componentName (title: "Name", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey componentName
     column deviceName (title: "Device", minWidth: 60, maxWidth: 300, headerAlignment: .left, contentAlignment: .left)
       sortkey deviceName
     column selectedPackageName (title: "Package", minWidth: 60, maxWidth: 300, headerAlignment: .left, contentAlignment: .left)
       sortkey selectedPackageName
     editableColumn mComponentValue (title: "Value", minWidth: 60, maxWidth: 200, headerAlignment: .left, contentAlignment: .left)
       sortkey mComponentValue
     column placementInSchematic (title: "inSchematics", minWidth: 60, maxWidth: 200, headerAlignment: .center, contentAlignment: .center)
       sortkey placementInSchematic
     column componentIsPlacedInBoardString (title: "inBoard", minWidth: 60, maxWidth: 200, headerAlignment: .center, contentAlignment: .center)
       sortkey componentIsPlacedInBoardString
  }

//---------------------- Library Tab

  stackView mLibraryPage vStack set (margins: 8) {
    hStack {
      Button (title: "Remove Embedded Devices", size: .regular) {
        expandableWidth ()
        $run removeEmbeddedDevicesAction
        $enabled root.mDevices.count > 0
      }
      Button (title: "Reset Device and Font Versions", size: .regular) {
        expandableWidth ()
        $run resetDevicesAndFontsVersionAction
        $enabled (root.mDevices.count > 0) | (root.mFonts.count > 0)
      }
      Button (title: "Update Devices and Fonts", size: .regular) {
        expandableWidth ()
        $run updateDevicesAndFontsAction
        $enabled (root.mDevices.count > 0) | (root.mFonts.count > 0)
      }
      space   
    }
    hStack {
      space
      SegmentedControlWithPages (documentView: stackView mLibraryContentView, equalWidth: no, size : .regular) {
        addPage (title: "Devices", tooltip: "", pageView: stackView mDevicesInLibraryPage)
        addPage (title: "Fonts", tooltip: "", pageView: stackView mFontsInLibraryPage)
      }
      space
    }
    stackViewRef mLibraryContentView
  }
  
  stackView mLibraryContentView vStack { }
  
  stackView mDevicesInLibraryPage vStack set (margins: 8) {
     hStack {
      Button (title: "Edit Selected Device", size: .regular) {
        $run editSelectedDeviceAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      Button (title: "Reset Selected Device Version", size: .regular) {
        $run resetSelectedDeviceVersionAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      Button (title: "Remove Selected Device", size: .regular) {
        $run removeSelectedDeviceAction
        $enabled self.canRemoveSelectedDevices
      }
      Button (title: "Export Selected Device", size: .regular) {
        $run exportSelectedDeviceAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      Button (title: "Update Selected Device…", size: .regular) {
        $run updateSelectedDeviceAction
        $enabled #projectDeviceController.selectedArray.count > 0
      }
      space
    }
    hSplit { // hSplit
      TableView (size : .regular, addControlButtons: no) {
        set (width: 400)
        $tableValue #projectDeviceController
      }
      vStack {
        hStack { space StaticLabel (title: "Selected Device", bold: no, size: .regular) space }
        hSplit {  // hSplit
          CanariProjectDeviceTableView (size : .regular) {
            set (width: 150)
            $array self.selectedDeviceNames
          }
          vSplit { // vSplit
            CanariProjectDeviceSymbolTypeAndNameTableView (size : .regular) {
              set (width: 250)
              set (height: 200)
              $array self.selectedDeviceSymbolNames
            }
            CanariProjectDevicePackageTableView (size : .regular) {
              set (height: 200)
              $array self.selectedDevicePackageNames
            }
          }
          CanariProjectPinPadAssignmentTableView (size : .regular) {
            set (width: 200)
            $array self.pinPadAssignments
          }
        }
      }
    }
  }

  stackView mFontsInLibraryPage vStack set (margins: 8) {
    hStack {
      Button (title: "Add Font…", size: .regular) { $run addFontAction }
      Button (title: "Edit Selected Font", size: .regular) {
        $run editFontAction
        $enabled #projectFontController.selectedArray.count > 0
      }
      Button (title: "Reset Selected Font Version", size: .regular) {
        $run resetFontVersionAction
        $enabled #projectFontController.selectedArray.count > 0
      }
      Button (title: "Update Selected Fonts", size: .regular) {
        $run updateFontAction
        $enabled #projectFontController.selectedArray.count > 0
      }
      Button (title: "Remove Selected Font", size: .regular) {
        $run removeFontAction
        $enabled #projectFontController.selectedArray.count > 0 & self.canRemoveSelectedFonts
      }
      space
    }
    TableView (size : .regular, addControlButtons: no) { $tableValue #projectFontController }
  }
 
  action removeEmbeddedDevicesAction ;
  action resetDevicesAndFontsVersionAction ;
  action updateDevicesAndFontsAction ;
  action addFontAction ;
  action editFontAction ;
  action resetFontVersionAction ;
  action updateFontAction ;
  action removeFontAction ;
  transient Bool canRemoveSelectedFonts
    dependsFrom #projectFontController.selectedArray.all.canRemoveFont ;
  action editSelectedDeviceAction ;
  action resetSelectedDeviceVersionAction ;
  action removeSelectedDeviceAction ;
  transient Bool canRemoveSelectedDevices
    dependsFrom #projectDeviceController.selectedArray.all.canRemove ;
  action exportSelectedDeviceAction ;
  action updateSelectedDeviceAction ;
  transient ThreeStringArray pinPadAssignments
    dependsFrom #projectDeviceController.selectedArray.all.pinPadAssignments ;
  transient TwoStringArray selectedDeviceSymbolNames dependsFrom
    #projectDeviceController.selectedArray.all.symbolAndTypesNames ;
  transient StringArray selectedDevicePackageNames dependsFrom #projectDeviceController.selectedArray.all.packageNames ;
  transient StringArray selectedDeviceNames dependsFrom
    #projectDeviceController.selectedArray.all.symbolAndTypesNames ;
 
  autolayout tableViewController #projectFontController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mFonts {
     column mFontName (title: "Font Name", minWidth: 60, maxWidth: 550, headerAlignment: .left, contentAlignment: .left)
       sortkey mFontName
     column versionString (title: "Version", minWidth: 60, maxWidth: 100, headerAlignment: .center, contentAlignment: .center)
       sortkey versionString
     column sizeString (title: "Size", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey sizeString
     column textCount (title: "# Texts", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey textCount
     column componentNamesCount (title: "# Component Names", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey componentNamesCount
     column componentValuesCount (title: "# Component Values", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey componentValuesCount
  }

  autolayout tableViewController #projectDeviceController (allowsEmptySelection:yes, allowsMultipleSelection:yes) root.mDevices {
     column mDeviceName (title: "Name", minWidth: 60, maxWidth: 600, headerAlignment: .left, contentAlignment: .left)
       sortkey mDeviceName
     column versionString (title: "Version", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey versionString
    column sizeString (title: "Size", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey sizeString
    column deviceComponentCountString (title: "Components", minWidth: 60, maxWidth: 150, headerAlignment: .center, contentAlignment: .center)
       sortkey deviceComponentCountString
  } 

//---------------------- Net Class Tab

  stackView mNetClassesPage vStack set (margins: 8) {
    hStack {
      Button (title: "New Net Class", size: .regular) {
        $run addNetClassAction
      }
      Button (title: "Edit Selected Net Class", size: .regular) {
        $run editNetClassAction
        $enabled #netClassController.selectedArray.count == 1
      }
      Button (title: "Remove Selected Net Class", size: .regular) {
        $run removeNetClassAction
        $enabled self.canRemoveNetClasses
      }
      space
    }
    TableView (size: .regular, addControlButtons: no) { $tableValue #netClassController }
  }

  action addNetClassAction ;
  action editNetClassAction ;
  action removeNetClassAction ;
  transient Bool canRemoveNetClasses dependsFrom root.mNetClasses.count, #netClassController.selectedArray.all.canRemove ;
  
  autolayout tableViewController #netClassController (allowsEmptySelection:yes, allowsMultipleSelection:yes) root.mNetClasses {
    column mNetClassName (title: "Name", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey mNetClassName
//    column "netcolor" EBTextObserverField $backColor self.mNetClassColor
    column trackWidthString (title: "Width", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey trackWidthString // mTrackWidth
    column viaHoleDiameter (title: "Via Hole Diameter", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey viaHoleDiameter // mViaHoleDiameter
    column viaPadDiameter (title: "Via Pad Diameter", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey viaPadDiameter // mViaPadDiameter
    column allowTracksOnFrontSideString (title: "Front Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnFrontSideString
    column allowTracksOnBackSideString (title: "Back Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnBackSideString
    column allowTracksOnInner1LayerString (title: "Inner 1 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner1LayerString
    column allowTracksOnInner2LayerString (title: "Inner 2 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner3LayerString
    column allowTracksOnInner1LayerString (title: "Inner 3 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner3LayerString
    column allowTracksOnInner4LayerString (title: "Inner 4 Tracks", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey allowTracksOnInner4LayerString
    column netUsage (title: "Used by…", minWidth: 60, maxWidth: 150, headerAlignment: .left, contentAlignment: .left)
       sortkey netUsage
  }

//---------------------- Net Tab

  stackView mNetListPage vStack set (margins: 8) {
    hStack {
      Label (bold: yes, size: .regular) { $title self.netCountString }
      Button (title: "Rename Net…", size: .regular) {
        $run renameNetAction
        $enabled self.netCount > 0
      }
      Button (title: "Select Net Class…", size: .regular) {
        $run selectNetClassAction
        $enabled self.netCount > 0
      }
      WarningImageView { $hidden root.netWarningCount == 0 }
      IntObserverField (bold: yes, size: .regular) {
        $observedValue root.netWarningCount
        $hidden root.netWarningCount == 0
      }
      space
    }
    hSplit {
      CanariNetDescriptionTableView [outlet mNetInfoTableView] { $netInfo root.netsDescription }
      vStack {
        StaticLabel (title: "Pins of Selected Net", bold: no, size: .regular){ set (alignment: .center) set (width: 300) }
        TableView (size: .regular, addControlButtons: no) [configurator pinsOfSelectedNetTableViewConfigurator]
      }
    }
  }

  transient String netCountString dependsFrom root.netsDescription ;
  transient Int netCount dependsFrom root.netsDescription ;
  action renameNetAction ;
  action selectNetClassAction ;

//---------------------- Schematics Tab

  arrayController #schematicObjectsController : root.selectedSheetObjects ;

  stackView mSchematicPage vStack set (margins: 8) {
    hStack {
      vStack {
        StaticLabel (title: "TEMPORARY", bold: no, size: .regular)
        space
      }
      separator
      GraphicView (minZoom: 50, maxZoom: 1_000) [outlet mSchematicsView] {
        $underObjectsDisplay root.schematicBackgroundDisplay
        $overObjectsDisplay root.connectedPoints
        $horizontalFlip root.mSchematicHorizontalFlip
        $verticalFlip root.mSchematicVerticalFlip
        $graphicController #schematicObjectsController
        $gridStyle root.mSchematicGridStyle
        $gridDisplayFactor root.mSchematicGridDisplayFactor
        $gridLineColor prefs.lineColorGridForSchematic
        $gridCrossColor prefs.dotColorGridForSchematic
        $zoom root.mSchematicZoom
        $backColor prefs.schematicBackColor
      }
    }
  }
  
//  outlet CanariSegmentedControl mSchematicsInspectorSegmentedControl $selectedPage root.mSelectedSchematicInspector ;
//  outlet NSView mBaseSchematicsInspectorView ;
//  outlet CanariViewWithKeyView mSelectedObjectsSchematicsInspectorView ;
//  outlet CanariViewWithKeyView mHotKeysSchematicInspectorView ;
//  outlet CanariViewWithKeyView mGridZoomSchematicsInspectorView ;
//  outlet CanariViewWithKeyView mUnplacedSymbolsSchematicsInspectorView ;
//  outlet CanariViewWithKeyView mSchematicsSheetsInspectorView ;
//
//  outlet CanariDragSourceButton mAddCommentButton ;
//  outlet CanariDragSourceButton mAddWireButton ;
//  outlet CanariDefaultNetClassPopUpButton mCanariDefaultNetClassPopUpButton
//    $netClasses root.mDefaultNetClassName, root.allClassNames ;
//
////--- Hot keys inspector
//  outlet NSTextField mConnectSchematicHotKeyTextField ;
//  outlet NSTextField mDisconnectSchematicHotKeyTextField ;
//  outlet NSTextField mAddWirePointSchematicHotKeyTextField ;
//  outlet NSTextField mRemoveWirePointSchematicHotKeyTextField ;
//  outlet NSTextField mAddLeftLabelSchematicHotKeyTextField ;
//  outlet NSTextField mAddRightLabelSchematicHotKeyTextField ;
//  outlet NSTextField mAddTopLabelSchematicHotKeyTextField ;
//  outlet NSTextField mAddBottomSchematicHotKeyTextField ;
//  outlet NSTextField mAddNCSchematicHotKeyTextField ;
//  outlet NSTextField mDisconnectAllSymbolPinsSchematicHotKeyTextField ;
//  outlet NSTextField mConnectAllSymbolPinsSchematicHotKeyTextField ;
//  outlet NSTextField mAddNCToAllSymbolPinsSchematicHotKeyTextField ;
//  outlet NSTextField mExchangeSymbolSchematicHotKeyTextField ;
//   
////--- Unplaced symbols inspector
//  outlet CanariDragSourceTableView mUnplacedSymbolsTableView $models root.unplacedSymbols ;
//  transient Int unplacedSymbolsCount dependsFrom root.unplacedSymbols ;
//  transient String unplacedSymbolsCountString dependsFrom self.unplacedSymbolsCount ;
//  outlet EBTextObserverField mUnplacedSymbolsTextField $valueObserver self.unplacedSymbolsCountString ;
//
////--- Grid and Flip inspector
//  outlet EBSwitch mSchematicsHorizontalFlipSwitch $value root.mSchematicHorizontalFlip ;
//  outlet EBSwitch mSchematicsVerticalFlipSwitch $value root.mSchematicVerticalFlip ;
//  outlet EBPopUpButton mSchematicsGridStylePopUpButton $selectedIndex root.mSchematicGridStyle ;
//  outlet EBPopUpButton mSchematicsGridDisplayFactorPopUpButton $selectedTag root.mSchematicGridDisplayFactor ;
//  outlet EBColorWell mDotColorGridForSchematicColorWell $color prefs.dotColorGridForSchematic (sendContinously:yes) ;
//  outlet EBColorWell mLineColorGridForSchematicColorWell $color prefs.lineColorGridForSchematic (sendContinously:yes) ;
//  outlet EBColorWell mSchematicBackColorColorWell $color prefs.schematicBackColor (sendContinously: yes) ;
//  outlet EBColorWell mSchematicFrameColorColorWell $color prefs.schematicFrameColor (sendContinously: yes) ;
//
////----------------- Color and Font inspector
//
////--- Symbol color for placed components
//  outlet EBColorWell mSymbolColorForSchematicColorWell $color prefs.symbolColorForSchematic (sendContinously:yes) ;
////--- Symbol color for unplaced components
//  outlet EBColorWell mUnplacedComponentsColorForSchematicColorWell $color prefs.symbolColorForUnplacedComponentsForSchematic (sendContinously:yes) ;
////--- Symbol drawing line width
//  outlet EBPopUpButton mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton $selectedTag prefs.symbolDrawingWidthMultipliedByTenForSchematic ;
////--- Component Name Color
//  outlet EBColorWell mComponentNameColorForSchematicColorWell $color prefs.componentNameColorForSchematic (sendContinously:yes) ;
////--- Component Name Font
//  outlet EBFontButton mComponentNameFontForSchematicFontButton $fontValue prefs.componentNameFontForSchematic ;
////--- Component Value Color
//  outlet EBColorWell mComponentValueColorForSchematicColorWell $color prefs.componentValueColorForSchematic (sendContinously:yes) ;
////--- Component Value Font
//  outlet EBFontButton mComponentValueFontForSchematicFontButton $fontValue prefs.componentValueFontForSchematic ;
////--- Pin Name Color
//  outlet EBColorWell mPinNameColorForSchematicColorWell $color prefs.pinNameColorForSchematic (sendContinously:yes) ;
////--- Pin Name Font
//  outlet EBFontButton mPinNameFontForSchematicFontButton $fontValue prefs.pinNameFontForSchematic ;
////--- Pin Number Color
//  outlet EBColorWell mPinNumberColorForSchematicColorWell $color prefs.pinNumberColorForSchematic (sendContinously:yes) ;
////--- Pin Number Font
//  outlet EBFontButton mPinNumberFontForSchematicFontButton $fontValue prefs.pinNumberFontForSchematic ;
////--- Connection Color
//  outlet EBColorWell mConnectionColorForSchematicColorWell $color prefs.connectionColorForSchematic (sendContinously:yes) ;
//
//
////--- Sheet inspector
//  outlet EBTextField mSchematicsTitleTextField $value root.mSchematicTitle (sendContinously : yes) ;
//  outlet EBTextField mSchematicsVersionTextField $value root.mSchematicVersion (sendContinously : yes) ;
//  outlet CanariEnumSegmentedControl mSchematicsSheetOrientationSegmentedControl
//    $selectedSegment root.mSchematicSheetOrientation
//  ;
//
//  outlet EBPopUpButton mSchematicCustomWidthUnitPopUp $selectedTag root.mSchematicCustomWidthUnit ;
//  outlet CanariDimensionTextField mSchematicCustomWidthTextField
//     $dimensionAndUnit root.mSchematicCustomWidth, root.mSchematicCustomWidthUnit
//  ;
//
//  outlet EBPopUpButton mSchematicCustomHeightUnitPopUp $selectedTag root.mSchematicCustomHeightUnit ;
//  outlet CanariDimensionTextField mSchematicCustomHeightTextField
//     $dimensionAndUnit root.mSchematicCustomHeight, root.mSchematicCustomHeightUnit
//  ;
//
//  transient Bool schematicSheetOrientationIsCustom dependsFrom root.mSchematicSheetOrientation ;
//  outlet NSView mSchematicCustomSizeView $hidden !self.schematicSheetOrientationIsCustom ;
//  
//  outlet EBTextField mSelectedSheetTitleTextField $value root.selectedSheetTitle (sendContinously : yes) ;
//
//  outlet EBPopUpButton mSheetPopUpButton ; // All bindings done programmatically
//  outlet EBButton mSheetUpButton ; // All bindings done programmatically
//  outlet EBButton mSheetDownButton ; // All bindings done programmatically
//
//  action newSheetAction ;
//  outlet EBButton mNewSheetButton $run newSheetAction ;
//
//  action removeSheetAction ;
//  outlet EBButton mRemoveSheetButton $run removeSheetAction $enabled root.mSheets.count > 1 ;
//
//
//  action setDateToNowAction ;
//  outlet EBButton mSetDateToNowButton $run setDateToNowAction ;
//
//  action openSetDateDialogAction ;
//  outlet EBButton mOpenSetDateDialogButton $run openSetDateDialogAction ;
//

////--- Selected Wire In schematics
//  outlet CanariViewWithKeyView mSchematicsWireInspectorView ;
//  selectionController WireInSchematic #wireInSchematicSelectionController :
//    #schematicObjectsController.selectedArray
//  ;
//
//  outlet EBTextObserverField mWireNetNameTextField
//    $valueObserver #wireInSchematicSelectionController.netName
//  ;
//
//  outlet EBButton mWireRenameNetButton // Action set in IB
//    $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
//  ;
//
//  outlet EBButton mWireRenameNetWithUniqueNewNameButton // Action set in IB
//    $enabled (#wireInSchematicSelectionController.selectedArray.count > 0) & #wireInSchematicSelectionController.hasNet
//  ;
//  
//  outlet EBButton mSchematicWireMergeSubnetButton  // Action set in IB
//    $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
//  ;
//
//  outlet EBButton mSchematicWireInsulateSubnetButton  // Action set in IB
//    $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
//  ;
//  
//  outlet EBPopUpButton mSchematicWireNetClassButton ;
//
////--- Selected NC In schematics
//  outlet CanariViewWithKeyView mNCInSchematicsInspectorView ;
//  selectionController NCInSchematic #ncInSchematicSelectionController :
//    #schematicObjectsController.selectedArray
//  ;
//
//  outlet CanariQuadrantSegmentedControl mNCRotationSegmentedControl
//     $quadrant #ncInSchematicSelectionController.mOrientation ;
//
////--- Selected comment in schematic inspector
//  outlet CanariViewWithKeyView mCommentInSchematicsInspectorView ;
//  selectionController CommentInSchematic #commentInSchematicSelectionController :
//    #schematicObjectsController.selectedArray
//  ;
//
//  outlet EBTextField mCommentInSchematicsTextField
//    $value #commentInSchematicSelectionController.mComment (sendContinously : yes)
//  ;
//
//  outlet EBDoubleField mCommentSizeInSchematicsTextField
//    $value #commentInSchematicSelectionController.mSize (sendContinously : no, autoFormatter : no)
//  ;
//
//  outlet EBSlider mCommentSizeInSchematicsSlider
//    $doubleValue #commentInSchematicSelectionController.mSize (sendContinously : yes)
//  ;
//
//  outlet EBColorWell mCommentColorInSchematicsTextField
//    $color #commentInSchematicSelectionController.mColor (sendContinously : yes)
//  ;
//
//  outlet CanariEnumSegmentedControl mCommentInSchematicsHorizontalAlignmentSegmentedControl
//    $selectedSegment #commentInSchematicSelectionController.mHorizontalAlignment
//  ;
//
//  outlet CanariEnumSegmentedControl mCommentInSchematicsVerticalAlignmentSegmentedControl
//    $selectedSegment #commentInSchematicSelectionController.mVerticalAlignment
//  ;
//
////--- Selected label in schematic inspector
//  outlet CanariViewWithKeyView mSchematicsLabelInspectorView ;
//  selectionController LabelInSchematic #schematicLabelSelectionController :
//    #schematicObjectsController.selectedArray
//  ;
//
//  outlet CanariQuadrantSegmentedControl mSchematicsLabelRotationSegmentedControl
//     $quadrant #schematicLabelSelectionController.mOrientation ;
//
//  outlet EBTextObserverField mSchematicsLabelNetNameTextField
//    $valueObserver #schematicLabelSelectionController.netName
//  ;
//
//  outlet EBButton mSchematicsLabelRenameNetButton // Action set in IB
//    $enabled #schematicLabelSelectionController.selectedArray.count == 1
//  ;
//  
//  outlet EBButton mSchematicLabelMergeSubnetButton  // Action set in IB
//    $enabled #schematicLabelSelectionController.selectedArray.count == 1
//  ;

//  outlet EBButton mSchematicLabelInsulateSubnetButton  // Action set in IB
//    $enabled #schematicLabelSelectionController.selectedArray.count == 1
//  ;
//  
//  outlet EBPopUpButton mSchematicLabelNetClassButton ;
//
////--- Selected symbol in schematic inspector
//  outlet CanariViewWithKeyView mComponentSymbolInspectorView ;
//  selectionController ComponentSymbolInProject #componentSymbolSelectionController :
//    #schematicObjectsController.selectedArray
//  ;
//
//  outlet EBSwitch mComponentSymbolShowComponentValueSwitch
//    $value #componentSymbolSelectionController.mDisplayComponentValue
//  ;
//  outlet EBTextObserverField mComponentSymbolComponentNameTextField
//    $valueObserver #componentSymbolSelectionController.componentName
//  ;
//
//  outlet EBButton mRenameComponentFromComponentSymbolButton // Action set in IB
//    $enabled #schematicObjectsController.selectedArray.count == 1
//  ;
//
//  outlet EBTextField mComponentSymbolValueTextField
//    $value #componentSymbolSelectionController.componentValueProxy (sendContinously : yes)
//  ;
//
//  outlet EBTextObserverField mComponentSymbolDeviceNameTextField
//    $valueObserver #componentSymbolSelectionController.deviceName
//  ;
//
//  outlet EBTextObserverField mComponentSymbolTypeNameTextField
//    $valueObserver #componentSymbolSelectionController.mSymbolTypeName
//  ;
//
//  outlet EBTextObserverField mComponentSymbolInstanceNameTextField
//    $valueObserver #componentSymbolSelectionController.mSymbolInstanceName
//  ;
//
//  outlet CanariQuadrantSegmentedControl mSymbolRotationSegmentedControl
//     $quadrant #componentSymbolSelectionController.mRotation ;
//
//  outlet EBSwitch mSymbolMirrorSwitch $value #componentSymbolSelectionController.mMirror ;

//----------------- Board limits tab
  stackView mBoardOutlinePage hStack {
    vStack set (width: 250) set (margins: 8) {
      SegmentedControlWithPages (documentView: stackView mBoardOutlineBaseView, equalWidth: yes, size : .small)
        [configurator boardOutlineBaseConfigurator]  {
        addPage (title: "", tooltip: "", pageView: stackView mBoardOutlineInspectorView)
        addPage (title: "", tooltip: "", pageView: stackView mBoardOutlineGridAndFlipView)
        $selectedPage root.mBoardLimitsSelectedInspector
      }
      stackViewRef mBoardOutlineBaseView
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 20_000) {
      $underObjectsDisplay root.borderViewBackground
      $horizontalFlip root.mBoardLimitsHorizontalFlip
      $verticalFlip root.mBoardLimitsVerticalFlip
      $graphicController #boardCurveObjectsController
      $gridStyle root.mBoardLimitsGridStyle
      $gridDisplayFactor root.mBoardLimitsGridDisplayFactor
      $gridLineColor prefs.lineColorGridForBoard
      $gridCrossColor prefs.crossColorGridForBoard
      $zoom root.mBoardLimitsZoom
      $backColor prefs.boardBackgroundColorForBoard
      $mouseGrid root.mBoardLimitsGridStep
      $gridStep root.mBoardLimitsGridStep
      $arrowKeyMagnitude root.mBoardLimitsGridStep
      $shiftArrowKeyMagnitude root.boardLimitsGridStepMultipliedByDisplayFactor
      $xPlacardUnit root.mBoardLimitsGridStepUnit
      $yPlacardUnit root.mBoardLimitsGridStepUnit
    }
  }

  arrayController #boardCurveObjectsController : root.mBorderCurves ;
  selectionController BorderCurve #boardCurveSelectionController :
    #boardCurveObjectsController.selectedArray
  ;

  stackView mBoardOutlineBaseView vStack {
    space
  }

  stackView mBoardOutlineGridAndFlipView vStack {
    hStack { space StaticLabel (title: "Grid and Flip Inspector", bold: yes, size: .small) space }
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Step", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mBoardLimitsGridStep, root.mBoardLimitsGridStepUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Display Grid", bold: no, size : .small),
        right: EnumPopUpButton (titles: enum GridStyle.popupTitles, size: .small) { $selectedIndex root.mBoardLimitsGridStyle }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Display", bold: no, size : .small),
        right: TaggedPopUpButton {
          add (title: "1 Step",   withTag:  1)
          add (title: "2 Steps",  withTag:  2)
          add (title: "4 Steps",  withTag:  4)
          add (title: "5 Steps",  withTag:  5)
          add (title: "8 Steps",  withTag:  8)
          add (title: "10 Steps", withTag: 10)
          $selectedTag root.mBoardLimitsGridDisplayFactor
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Flip", bold: no, size : .small),
        right: Checkbox (title: "Horizontal", size : .small) { $value root.mBoardLimitsHorizontalFlip }
      )
      addFirstBaseLineAligned (
        left: FlexibleSpace,
        right: Checkbox (title: "Vertical", size : .small) { $value root.mBoardLimitsVerticalFlip }
      )
    }
    space
  }

  stackView mBoardOutlineInspectorView vStack {
    hStack { space StaticLabel (title: "Board Shape", bold: yes, size : .small) space }
    SegmentedControlWithPages (documentView: stackView mBoardShapeBaseView, equalWidth: yes, size : .small) {
      addPage (title: "Rectangular", tooltip: "", pageView: stackView mBoardRectangularOutlineView)
      addPage (title: "Bezier Pathes", tooltip: "", pageView: stackView mBoardBezierPathOutlineView)
      $selectedSegment root.mBoardShape
    }
    stackViewRef mBoardShapeBaseView
    separator
    hStack { space StaticLabel (title: "Outlines", bold: yes, size : .small) space }
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Board Limit Width", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mBoardLimitsWidth, root.mBoardLimitsWidthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Board Clearance", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mBoardClearance, root.mBoardClearanceUnit
        }
      )
    }
    separator
    hStack { space StaticLabel (title: "Interior Bounding Box", bold: yes, size : .small) space }
    CanariBoardRectangleView {
      $top root.boardInteriorTop
      $bottom root.boardInteriorBottom 
      $left root.boardInteriorLeft
      $right root.boardInteriorRight
      $unit root.mBoardPointsBoundingBoxUnit
    }
    separator
    hStack { space StaticLabel (title: "Board Bounding Box", bold: yes, size : .small) space }
    CanariBoardRectangleView {
      $top root.boardLimitBorderTop
      $bottom root.boardLimitBorderBottom 
      $left root.boardLimitBorderLeft
      $right root.boardLimitBorderRight
      $unit root.mBoardLimitsBoundingBoxUnit
    }
    space
  }

  stackView mBoardShapeBaseView vStack {
  }
  
  stackView mBoardRectangularOutlineView vStack {
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Board Width", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mRectangularBoardWidth, root.mRectangularBoardWidthUnit
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Board Height", bold: no, size : .small),
        right: CanariDimensionAndPopUp (size : .small) {
          $dimensionAndUnit root.mRectangularBoardHeight, root.mRectangularBoardHeightUnit
        }
      )
    }
  }
  
  stackView mBoardBezierPathOutlineView vStack {
    hStack $hidden #boardCurveObjectsController.selectedArray.count != 0 {
      space
      StaticLabel (title: "No Selected Board Limit Element", bold: no, size : .regular)
      space
    }
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Shape", bold: yes, size : .small) {
          set (alignment: .left)
        },
        right: EnumPopUpButton (titles: enum BorderCurveShape.popupTitles, size: .small) {
          $selectedIndex #boardCurveSelectionController.mShape
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "End Points", bold: yes, size : .small) {
          set (alignment: .left)
        },
        right: CanariUnitPopUpButton (size: .small) {
          $unit root.mBoardSelectedCurveDisplayUnit
        }
      )
      addFirstBaseLineAligned (
        left: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "X", bold: no, size : .small) { expandableWidth () }
          CanariDimensionField (width: 80, size: .small) {
            $dimensionAndUnit #boardCurveSelectionController.mX, root.mBoardSelectedCurveDisplayUnit
          }
        },
        right: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "Y", bold: no, size : .small) { expandableWidth () }
          CanariDimensionField (width: 80, size: .small) {
            $dimensionAndUnit #boardCurveSelectionController.mY, root.mBoardSelectedCurveDisplayUnit
          }
        }
      )
      addFirstBaseLineAligned (
        left: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "X", bold: no, size : .small) { expandableWidth () }
          Label (bold: yes, size: .small) {
            set (width: 80) set (alignment: .center)
            $title #boardCurveSelectionController.p2Xstring
          }
        },
        right: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "Y", bold: no, size : .small) { expandableWidth () }
          Label (bold: yes, size: .small) {
            set (width: 80) set (alignment: .center)
            $title #boardCurveSelectionController.p2Ystring
          }
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Control Points", bold: yes, size : .small) {
          set (alignment: .left)
          $hidden #boardCurveSelectionController.isLine
        },
        right: CanariUnitPopUpButton (size: .small) {
          $hidden #boardCurveSelectionController.isLine
          $unit root.mBoardLimitControlPointsDisplayUnit
        }
      )
      addFirstBaseLineAligned (
        left: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "X", bold: no, size : .small) {
            expandableWidth ()
            $hidden #boardCurveSelectionController.isLine
          }
          CanariDimensionField (width: 80, size: .small) {
            $hidden #boardCurveSelectionController.isLine
            $dimensionAndUnit #boardCurveSelectionController.mCPX1, root.mBoardLimitControlPointsDisplayUnit
          }
        },
        right: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "Y", bold: no, size : .small) {
            expandableWidth ()
            $hidden #boardCurveSelectionController.isLine
          }
          CanariDimensionField (width: 80, size: .small) {
            $hidden #boardCurveSelectionController.isLine
            $dimensionAndUnit #boardCurveSelectionController.mCPY1, root.mBoardLimitControlPointsDisplayUnit
          }
        }
      )
      addFirstBaseLineAligned (
        left: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "X", bold: no, size : .small) {
            expandableWidth ()
            $hidden #boardCurveSelectionController.isLine
          }
          CanariDimensionField (width: 80, size: .small) {
            $hidden #boardCurveSelectionController.isLine
            $dimensionAndUnit #boardCurveSelectionController.mCPX2, root.mBoardLimitControlPointsDisplayUnit
          }
        },
        right: hStack setFirstBaselineAlignment () {
          StaticLabel (title: "Y", bold: no, size : .small) {
            expandableWidth ()
            $hidden #boardCurveSelectionController.isLine
          }
          CanariDimensionField (width: 80, size: .small) {
            $hidden #boardCurveSelectionController.isLine
            $dimensionAndUnit #boardCurveSelectionController.mCPY2, root.mBoardLimitControlPointsDisplayUnit
          }
        }
      )
      $hidden #boardCurveObjectsController.selectedArray.count == 0
    }
    space
  }

//----------------- Board Contents tab

  arrayController #boardObjectsController : root.mBoardObjects ;  
  transient EBShape overDisplay dependsFrom self.rastnetShape, root.boardIssues ;
  transient EBShape rastnetShape dependsFrom
    root.mRastnetDisplay,
    root.mRastnetDisplayedNetName,
    root.mRastnetDisplayedComponentName,
    root.mBoardObjects.all.netNameAndPadLocation,
    #boardObjectsController.selectedArray.all.componentName
  ;

  stackView mBoardContentsPage hStack set (margins: 8) {
    vStack {
      hStack set (spacing: 0) {
        CanariBoardOperationPullDownButton [configurator boardOperationPullDownButtonConfigurator]
        space
        DragSourceButton (tooltip: "Add Restrict Rectangle;  the layers are set by the contextual menu.") [configurator addRestrictRectangleButton]
        space
        DragSourceButton (tooltip: "Add Line in Board;  the layer is set by the contextual menu.") [configurator addLineButton]
        space
        DragSourceButton (tooltip: "Add Text in Board; the layer is set by the contextual menu.") [configurator addTextButton]
        space
        DragSourceButton (tooltip: "Add Track; hint:\n  - option + click starts a new track.\n\nThe new track side is set by the right contextual menu. The direction constraint on creation is set by the left contextual menu.") [configurator addTrackButton]
      }
      StaticLabel (title: "TEMPORARY", bold: no, size : .small)
      space
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 20_000) [outlet mBoardView configurator boardView] {
      $underObjectsDisplay root.borderOutlineBackground
      $overObjectsDisplay self.overDisplay
      $horizontalFlip root.mBoardHorizontalFlip
      $verticalFlip root.mBoardVerticalFlip
      $graphicController #boardObjectsController
      $gridStyle root.mBoardGridStyle
      $gridDisplayFactor root.mBoardGridDisplayFactor
      $gridLineColor prefs.lineColorGridForBoard
      $gridCrossColor prefs.crossColorGridForBoard
      $zoom root.mBoardZoom
      $backColor prefs.boardBackgroundColorForBoard
      $mouseGrid root.mBoardGridStep
      $gridStep root.mBoardGridStep
      $arrowKeyMagnitude root.mBoardGridStep
      $shiftArrowKeyMagnitude root.boardGridStepMultipliedByDisplayFactor
      $xPlacardUnit root.mBoardGridStepUnit
      $yPlacardUnit root.mBoardGridStepUnit
    }
  }

//  outlet CanariSegmentedControl mBoardInspectorSegmentedControl $selectedPage root.mBoardSelectedInspector ;
//  outlet NSView mBaseBoardInspectorView ;
//  outlet CanariViewWithKeyView mSelectedObjectsBoardInspectorView ;
//  outlet CanariViewWithKeyView mUnplacedPackagesBoardInspectorView ;
//  outlet CanariViewWithKeyView mGridZoomBoardInspectorView ;
//  outlet CanariViewWithKeyView mDisplayBoardInspectorView ;
//  outlet CanariViewWithKeyView mRouterBoardInspectorView ;
//  outlet CanariViewWithKeyView mERCBoardInspectorView ;
//
//  outlet CanariDragSourceButton mAddRestrictRectangleButton ;
//  outlet CanariDragSourceImageButton mAddTextInBoardButton ;
//  outlet CanariChoiceMenu mLayerForNewTextMenu $selectedIndex root.mBoardLayerForNewText ;
//  outlet CanariChoiceMenu mLayerForNewLineMenu $selectedIndex root.mBoardLayerForNewLine ;
//  outlet CanariChoiceMenu mBoardSideForNewRestrictRectangleMenu $selectedIndex root.mBoardSideForNewRestrictRectangle ;
//  outlet CanariDragSourceButton mAddLineInBoardButton ;
//  outlet CanariDragSourceImageButton mAddTrackInBoardButton ;
//  outlet CanariChoiceMenu mBoardSideForNewTrackMenu $selectedIndex root.mBoardSideForNewTrack ;
//  outlet CanariChoiceMenu mBoardDirectionForNewTrackMenu $selectedIndex root.mDirectionForNewTrack ;
//  
//  outlet CanariDragSourceTableView mUnplacedPackageTableView $models root.unplacedPackages ;
//  transient Int unplacedPackageCount dependsFrom root.unplacedPackages ;
//  transient String unplacedPackagesCountString dependsFrom self.unplacedPackageCount ;
//  outlet EBTextObserverField mUnplacedPackagesCountTextField $valueObserver self.unplacedPackagesCountString ;
//
//
//
////--- Menu items
//  outlet CanariComponentsMenuItem mSelectComponentsMenuItem $components root.componentsPlacedInBoard ;
//  outlet CanariNetsMenuItem mSelectNetsMenuItem $nets root.netNamesArray ;
//
////--- Grid and Flip inspector
//  outlet EBSwitch mBoardHorizontalFlipSwitch $value root.mBoardHorizontalFlip ;
//  outlet EBSwitch mBoardVerticalFlipSwitch $value root.mBoardVerticalFlip ;
//  outlet EBPopUpButton mBoardGridStylePopUpButton $selectedIndex root.mBoardGridStyle ;
//  outlet EBPopUpButton mBoardGridDisplayFactorPopUpButton $selectedTag root.mBoardGridDisplayFactor ;
//  
//  outlet EBPopUpButton mBoardGridUnitPopUp $selectedTag root.mBoardGridStepUnit ;
//  outlet CanariDimensionTextField mBoardGridTextField
//     $dimensionAndUnit root.mBoardGridStep, root.mBoardGridStepUnit
//  ;
//
////--- Router inspector
//  action changeLayerConfigurationAction ;
//  outlet CanariLayerPopUpButton mLayerConfigurationPopUp
//    $layerConfiguration root.mLayerConfiguration
//    $run changeLayerConfigurationAction
//  ;
//
//  outlet EBPopUpButton mLayoutClearancePopUp $selectedTag root.mLayoutClearanceUnit ;
//  outlet CanariDimensionTextField mLayoutClearanceTextField
//     $dimensionAndUnit root.mLayoutClearance, root.mLayoutClearanceUnit
//  ;
//
//  outlet EBSwitch mCheckClearanceBetweenPadsOfSameNetSwitch $value root.mCheckClearanceBetweenPadsOfSameNet ;
//
//  outlet NSView mSaveDSNFileAuxiliaryView ;
//  outlet EBSwitch mExportTrackAndViasToDSNSwitch ;
//
//  outlet IssueTableView mERCIssueTableView ;
//  outlet EBButton mHideERCIssueButton ;
//
//  outlet EBPopUpButton mAutoRouterPreferredDirectionPopUp $selectedIndex root.mAutoRouterPreferredDirections ;
//  outlet EBPopUpButton mAutorouterSnapAnglePopUp $selectedIndex root.mAutorouterSnapAngle ;
//  outlet EBPopUpButton mAutoRouterRouteDirectionPopUp $selectedIndex root.mRouteDirection ;
//  outlet EBPopUpButton mAutoRouterRouteOriginPopUp $selectedIndex root.mRouteOrigin ;
//  
//  action launchFreeRouterWithoutAnyDocument ;
//  outlet EBButton mLaunchFreeRouterWithoutDocumentButton $run launchFreeRouterWithoutAnyDocument ;
//
//  outlet EBTextObserverField mTopSideTrackCountTextField $valueObserver root.topSideTrackCountString ;
//  outlet EBTextObserverField mInner1LayerTrackCountTextField $valueObserver root.inner1LayerTrackCountString ;
//  outlet EBTextObserverField mInner2LayerTrackCountTextField $valueObserver root.inner2LayerTrackCountString ;
//  outlet EBTextObserverField mInner3LayerTrackCountTextField $valueObserver root.inner3LayerTrackCountString ;
//  outlet EBTextObserverField mInner4LayerTrackCountTextField $valueObserver root.inner4LayerTrackCountString ;
//  outlet EBTextObserverField mBackSideTrackCountTextField $valueObserver root.backSideTrackCountString ;
//  outlet EBTextObserverField mTrackCountTextField $valueObserver root.trackCountString ;
//  outlet EBTextObserverField mViaCountTextField $valueObserver root.viaCountString ;
//  outlet EBTextObserverField mTrackLengthTextField $valueObserver root.trackLengthString ;
//  outlet EBPopUpButton mTrackLengthUnitPopUp $selectedTag root.mTrackLengthUnit ;
//
////--- Autorouter Interface
//  outlet CanariTabView mAutorouterInterfaceModeTabVView $selectedTabIndex root.mAutorouterInterfaceMode ;
//  outlet EBSwitch mExportExistingTracksAndViasSwitch $value root.mExportExistingTracksAndVias ;
//  action launchFreeRouterWithRouterDocument ;
//  outlet EBButton mLaunchFreeRouterWithDocumentButton $run launchFreeRouterWithRouterDocument ;
//  action importSESFromBasicTabAction ;
//  outlet EBButton mImportSESFromBasicTabButton $run importSESFromBasicTabAction ;
//
////--- ERC Inspector
//  outlet NSTextView mERCLogTextView ;
//
////--- Board track inspector
//  outlet CanariViewWithKeyView mBoardTrackInspectorView ;
//  selectionController BoardTrack #boardTrackSelectionController :
//    #boardObjectsController.selectedArray
//  ;
//
//  outlet EBSwitch mIsPreservedByAutoRouterSwitch $value #boardTrackSelectionController.mIsPreservedByAutoRouter ;
//
//  outlet EBPopUpButton mBoardTrackSidePopUpButton $selectedIndex #boardTrackSelectionController.mSide ;
//
//  outlet EBTextObserverField mTrackNetNameTextField $valueObserver #boardTrackSelectionController.netName ;
//
//  outlet EBTextObserverField mTrackNetClassNameTextField $valueObserver #boardTrackSelectionController.netClassName ;
//
//  outlet EBPopUpButton mTrackDefaultWidthUnitPopUp $selectedTag #boardTrackSelectionController.mDefaultTrackWidthUnit ;
//  outlet CanariDimensionObserverTextField mTrackDefaultWidthTextField
//     $dimensionAndUnit #boardTrackSelectionController.netClassTrackWidth, #boardTrackSelectionController.mDefaultTrackWidthUnit
//  ;
//
//  outlet EBPopUpButton mTrackCustomWidthUnitPopUp $selectedTag #boardTrackSelectionController.mCustomTrackWidthUnit ;
//  outlet CanariDimensionTextField mTrackCustomWidthTextField
//     $dimensionAndUnit #boardTrackSelectionController.mCustomTrackWidth, #boardTrackSelectionController.mCustomTrackWidthUnit
//  ;
//
//  outlet EBSwitch mUsesCustomTrackWidthSwitch $value #boardTrackSelectionController.mUsesCustomTrackWidth ;
//
//  outlet CanariAngleTextField mTrackInBoardRotationTextField
//    $angle #boardTrackSelectionController.trackDirectionInDegrees
//    $enabled #boardTrackSelectionController.trackCanRotate
//  ;
//
//  outlet CanariAngleSlider mTrackInBoardRotationSlider
//    $angle #boardTrackSelectionController.trackDirectionInDegrees
//    $enabled #boardTrackSelectionController.trackCanRotate
//  ;
//
//  outlet CanariTrackLockView mTrackLockView
//    $angle #boardTrackSelectionController.trackDirectionInDegrees
//    $manualLockP1 #boardTrackSelectionController.mManualLockP1
//    $manualLockP2 #boardTrackSelectionController.mManualLockP2
//    $p1ConnectedToSomePad #boardTrackSelectionController.p1ConnectedToSomePad
//    $p2ConnectedToSomePad #boardTrackSelectionController.p2ConnectedToSomePad
//  ;
//
//  outlet EBPopUpButton mDirectionLockOnKnobDraggingPopUpButton
//    $selectedIndex #boardTrackSelectionController.mDirectionLockOnKnobDragging
//  ;
//  
//  outlet CanariDimensionTextField mBoardTrackP1xTextField
//     $dimensionAndUnit #boardTrackSelectionController.computedP1X, #boardTrackSelectionController.mP1XUnit
//    $enabled #boardTrackSelectionController.p1CanMove
//  ;
//  outlet EBPopUpButton mBoardTrackP1xUnitPopUp $selectedTag #boardTrackSelectionController.mP1XUnit ;
//
//  outlet CanariDimensionTextField mBoardTrackP1yTextField
//    $dimensionAndUnit #boardTrackSelectionController.computedP1Y, #boardTrackSelectionController.mP1YUnit
//    $enabled #boardTrackSelectionController.p1CanMove
//  ;
//  outlet EBPopUpButton mBoardTrackP1yUnitPopUp $selectedTag #boardTrackSelectionController.mP1YUnit ;
//
//  outlet CanariDimensionTextField mBoardTrackP2xTextField
//    $dimensionAndUnit #boardTrackSelectionController.computedP2X, #boardTrackSelectionController.mP2XUnit
//    $enabled #boardTrackSelectionController.p2CanMove
//  ;
//  outlet EBPopUpButton mBoardTrackP2xUnitPopUp $selectedTag #boardTrackSelectionController.mP2XUnit ;
//
// outlet CanariDimensionTextField mBoardTrackP2yTextField
//    $dimensionAndUnit #boardTrackSelectionController.computedP2Y, #boardTrackSelectionController.mP2YUnit
//    $enabled #boardTrackSelectionController.p2CanMove
//  ;
//  outlet EBPopUpButton mBoardTrackP2yUnitPopUp $selectedTag #boardTrackSelectionController.mP2YUnit ;
//
//
//
////--- Board Connector inspector
//  outlet CanariViewWithKeyView mBoardConnectorInspectorView ;
//  selectionController BoardConnector #boardConnectorSelectionController :
//    #boardObjectsController.selectedArray
//  ;
//
//  outlet EBTextObserverField mViaNetNameTextField $valueObserver #boardConnectorSelectionController.netNameFromTracks ;
//
//  outlet EBTextObserverField mViaNetClassNameTextField $valueObserver #boardConnectorSelectionController.netClassName ;
//
//  outlet EBPopUpButton mViaDefaultHoleDiameterUnitPopUp
//    $selectedTag #boardConnectorSelectionController.mDefaultHoleDiameterUnit ;
//  outlet CanariDimensionObserverTextField mViaDefaultHoleDiameterTextField
//     $dimensionAndUnit #boardConnectorSelectionController.viaDefaultHoleDiameter,
//     #boardConnectorSelectionController.mDefaultHoleDiameterUnit
//  ;
//  outlet EBPopUpButton mViaCustomHoleDiameterUnitPopUp
//    $selectedTag #boardConnectorSelectionController.mCustomHoleDiameterUnit ;
//  outlet CanariDimensionTextField mViaCustomHoleDiameterTextField
//     $dimensionAndUnit #boardConnectorSelectionController.mCustomHoleDiameter,
//     #boardConnectorSelectionController.mCustomHoleDiameterUnit
//  ;
//  outlet EBSwitch mUsesCustomHoleDiameterSwitch $value #boardConnectorSelectionController.mUsesCustomHoleDiameter ;
//
//  outlet EBPopUpButton mViaDefaultPadDiameterUnitPopUp
//    $selectedTag #boardConnectorSelectionController.mDefaultPadDiameterUnit ;
//  outlet CanariDimensionObserverTextField mViaDefaultPadDiameterTextField
//     $dimensionAndUnit #boardConnectorSelectionController.viaDefaultPadDiameter,
//     #boardConnectorSelectionController.mDefaultPadDiameterUnit
//  ;
//  outlet EBPopUpButton mViaCustomPadDiameterUnitPopUp
//    $selectedTag #boardConnectorSelectionController.mCustomPadDiameterUnit ;
//  outlet CanariDimensionTextField mViaCustomPadDiameterTextField
//     $dimensionAndUnit #boardConnectorSelectionController.mCustomPadDiameter,
//     #boardConnectorSelectionController.mCustomPadDiameterUnit
//  ;
//  outlet EBSwitch mUsesCustomPadDiameterSwitch $value #boardConnectorSelectionController.mUsesCustomPadDiameter ;
//
//
////--- Board line inspector
//  outlet CanariViewWithKeyView mBoardLineInspectorView ;
//  selectionController BoardLine #boardLineSelectionController :
//    #boardObjectsController.selectedArray
//  ;
//
//  outlet EBPopUpButton mBoardLineWidthUnitPopUp $selectedTag #boardLineSelectionController.mWidthUnit ;
//  outlet CanariDimensionTextField mBoardLineWidthTextField
//     $dimensionAndUnit #boardLineSelectionController.mWidth, #boardLineSelectionController.mWidthUnit
//  ;
//
//  outlet EBPopUpButton mBoardLineLayerPopUpButton $selectedIndex #boardLineSelectionController.mLayer ;
//
//  outlet EBPopUpButton mBoardLineX1UnitPopUp $selectedTag #boardLineSelectionController.mX1Unit ;
//  outlet CanariDimensionTextField mBoardLineX1TextField
//     $dimensionAndUnit #boardLineSelectionController.mX1, #boardLineSelectionController.mX1Unit
//  ;
//
//  outlet EBPopUpButton mBoardLineY1UnitPopUp $selectedTag #boardLineSelectionController.mY1Unit ;
//  outlet CanariDimensionTextField mBoardLineY1TextField
//     $dimensionAndUnit #boardLineSelectionController.mY1, #boardLineSelectionController.mY1Unit
//  ;
//
//  outlet EBPopUpButton mBoardLineX2UnitPopUp $selectedTag #boardLineSelectionController.mX2Unit ;
//  outlet CanariDimensionTextField mBoardLineX2TextField
//     $dimensionAndUnit #boardLineSelectionController.mX2, #boardLineSelectionController.mX2Unit
//  ;
//
//  outlet EBPopUpButton mBoardLineY2UnitPopUp $selectedTag #boardLineSelectionController.mY2Unit ;
//  outlet CanariDimensionTextField mBoardLineY2TextField
//     $dimensionAndUnit #boardLineSelectionController.mY2, #boardLineSelectionController.mY2Unit
//  ;
//
//
//
//
////--- Restrict rectangle inspector
//  outlet CanariViewWithKeyView mRestrictRectangleInspectorView ;
//  selectionController BoardRestrictRectangle #restrictRectangleSelectionController :
//    #boardObjectsController.selectedArray
//  ;
//
//  outlet EBSwitch mFrontRestrictRectangleSwitch
//    $value #restrictRectangleSelectionController.mIsInFrontLayer
//    $enabled #restrictRectangleSelectionController.mIsInBackLayer
//  ;
//
//  outlet EBSwitch mBackRestrictRectangleSwitch
//    $value #restrictRectangleSelectionController.mIsInBackLayer
//    $enabled #restrictRectangleSelectionController.mIsInFrontLayer
//  ;
//
////--- Text inspector
//  outlet CanariViewWithKeyView mBoardTextInspectorView ;
//  selectionController BoardText #boardTextSelectionController :
//    #boardObjectsController.selectedArray
//  ;
//
//  outlet EBTextField mBoardTextTextField $value #boardTextSelectionController.mText (sendContinously : yes) ;
//
//  outlet EBDoubleField mBoardTextFontSizeField
//    $value #boardTextSelectionController.mFontSize (sendContinously : no, autoFormatter : no)
//  ;
//
//  outlet EBPopUpButton mBoardTextLayerPopUpButton $selectedIndex #boardTextSelectionController.mLayer ;
//
//  outlet CanariEnumSegmentedControl mBoardTextHorizontalAlignmentSegmentedControl
//    $selectedSegment #boardTextSelectionController.mHorizontalAlignment
//  ;
//
//  outlet CanariEnumSegmentedControl mBoardTextVerticalAlignmentSegmentedControl
//    $selectedSegment #boardTextSelectionController.mVerticalAlignment
//  ;
//  
//  outlet CanariAngleTextField mBoardTextRotationTextField $angle #boardTextSelectionController.mRotation ;
//  outlet CanariAngleSlider mBoardTextRotationSlider $angle #boardTextSelectionController.mRotation ;
//  
//  outlet CanariBoardTextFontPopUpButton mBoardTextFontPopUpButton ;
//  
//  outlet EBDoubleField mBoardTextWeightTextField
//    $value #boardTextSelectionController.mWeight ( sendContinously : no, autoFormatter: no)
//  ;
//  
//  outlet EBSwitch mBoardTextObliqueSwitch $value #boardTextSelectionController.mOblique ;
//
////--- Component inspector
//  outlet CanariViewWithKeyView mComponentInBoardInspectorView ;
//  selectionController ComponentInProject #componentInBoardSelectionController :
//    #boardObjectsController.selectedArray
//  ;
//
//  outlet CanariBoolPopUpButton mSlavePadsShouldBeRoutedPopUpButton
//    $value #componentInBoardSelectionController.mSlavePadsShouldBeRouted (
//      item0: "should be insulated",
//      item1: "should be routed"
//    )
//    $enabled #componentInBoardSelectionController.hasSlavePads
//  ;
//
//
//  outlet EBSwitch mDisplayLegendSwitch $value #componentInBoardSelectionController.mDisplayLegend ;
//
//  outlet EBSwitch mShowRotationKnobInBoardSwitch $value prefs.mShowRotationKnobInBoard ;
//
//  outlet EBPopUpButton mComponentInBoardCenterXPopUp $selectedTag #componentInBoardSelectionController.mXUnit ;
//  outlet CanariDimensionTextField mComponentInBoardCenterXTextField
//     $dimensionAndUnit #componentInBoardSelectionController.mX, #componentInBoardSelectionController.mXUnit
//  ;
//
//  outlet EBPopUpButton mComponentInBoardCenterYPopUp $selectedTag #componentInBoardSelectionController.mYUnit ;
//  outlet CanariDimensionTextField mComponentInBoardCenterYTextField
//     $dimensionAndUnit #componentInBoardSelectionController.mY, #componentInBoardSelectionController.mYUnit
//  ;
//
//  outlet CanariBoardComponentPackagePopUpButton mComponentPackagePopUpButton ;
//
//  outlet CanariAngleTextField mBoardComponentRotationTextField $angle #componentInBoardSelectionController.mRotation ;
//  outlet CanariAngleSlider mBoardComponentRotationSlider $angle #componentInBoardSelectionController.mRotation ;
//  outlet CanariOrientationSegmentedControl mBoardComponentRotationSegmentedControl
//    $angle #componentInBoardSelectionController.mRotation
//  ;
//
//  outlet EBPopUpButton mBoardComponentSidePopUpButton $selectedIndex #componentInBoardSelectionController.mSide ;
//
//  outlet EBSwitch mDisplayComponentNameSwitch
//    $value #componentInBoardSelectionController.mNameIsVisibleInBoard
//  ;
//  outlet EBDoubleField mComponentNameFontSizeField
//    $value #componentInBoardSelectionController.mNameFontSize (sendContinously : no, autoFormatter : no)
//    $enabled #componentInBoardSelectionController.mNameIsVisibleInBoard
//  ;
//  
//  outlet CanariAngleTextField mComponentNameRotationTextField
//    $angle #componentInBoardSelectionController.mNameRotation
//    $enabled #componentInBoardSelectionController.mNameIsVisibleInBoard
//  ;
//  outlet CanariAngleSlider mComponentNameRotationSlider
//    $angle #componentInBoardSelectionController.mNameRotation
//    $enabled #componentInBoardSelectionController.mNameIsVisibleInBoard
//  ;
//  outlet CanariOrientationSegmentedControl mComponentNameRotationSegmentedControl
//    $angle #componentInBoardSelectionController.mNameRotation
//    $enabled #componentInBoardSelectionController.mNameIsVisibleInBoard
//  ;
//
//  outlet EBTextObserverField mBoardComponentNameTextField
//    $valueObserver #componentInBoardSelectionController.componentName
//  ;
//
//  outlet CanariBoardComponentNameFontPopUpButton mBoardComponentNameFontPopUpButton
//    $enabled #componentInBoardSelectionController.mNameIsVisibleInBoard
//  ;
//
//
//  outlet EBSwitch mDisplayComponentValueSwitch $value #componentInBoardSelectionController.mValueIsVisibleInBoard ;
//  outlet EBDoubleField mComponentValueFontSizeField
//    $value #componentInBoardSelectionController.mValueFontSize (sendContinously : no, autoFormatter : no)
//    $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
//  ;
//
//  outlet CanariAngleTextField mComponentValueRotationTextField
//    $angle #componentInBoardSelectionController.mValueRotation
//    $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
//  ;
//  outlet CanariAngleSlider mComponentValueRotationSlider
//    $angle #componentInBoardSelectionController.mValueRotation
//    $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
//  ;
//  outlet CanariOrientationSegmentedControl mComponentValueRotationSegmentedControl
//    $angle #componentInBoardSelectionController.mValueRotation
//    $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
//  ;
//
//  outlet EBTextField mBoardComponentValueTextField
//    $value #componentInBoardSelectionController.mComponentValue (sendContinously : yes)
//    $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
//  ;
//
//  outlet CanariBoardComponentValueFontPopUpButton mBoardComponentValueFontPopUpButton
//    $enabled #componentInBoardSelectionController.mValueIsVisibleInBoard
//  ;
 
  //············································································
  //     Product Page
  //············································································

  stackView mProductPage vStack set (margins: 8) {
    hStack {
      vStack {
        Button (title: "Import Artwork…", size : .regular) {
          expandableWidth ()
          $hidden !root.mArtwork.none
          $run importArtworkAction 
        }
        Button (title: "Detach Artwork", size : .regular) {
          expandableWidth ()
          $hidden root.mArtwork.none
          $run detachArtworkAction 
        }
        Label (bold: yes, size : .regular) { expandableWidth () set (alignment: .center) $title root.mArtworkName }
        Button (title: "Generate Files", size : .regular) {
          expandableWidth ()
          $enabled !root.mArtwork.none & !self.documentIsUnnamed
          $run generateProductFilesAction
        }
      }
      vStack {
        Label (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $title self.documentFileShouldBeRenamedErrorMessage
        }
        TextObserverView () {
          expandableWidth ()
          setNoBackground ()
          setNoVerticalScroller ()
          setNoHorizontalScroller ()
          $observedValue self.incorrectDocumentFileDetailedErrorMessage
        }
        space
      }
    }
    hStack $hidden !root.mArtwork.none {
      space
      vStack { space StaticLabel (title: "No Artwork", bold: yes, size : .regular) space }
      space
    }
    vStack $hidden root.mArtwork.none {
      hStack {
        space
        SegmentedControlWithPages (documentView: stackView mProductMasterView, equalWidth: yes, size : .regular)
          [outlet mProductPageSegmentedControl] { //  configurator boardPageSegmentedControl] 
          addPage (title: "Artwork Description", tooltip: "", pageView: stackView mArtworkDescriptionPage)
          addPage (title: "Artwork Minima", tooltip: "", pageView: stackView mArtworkMinimaPage)
          addPage (title: "Artwork Data", tooltip: "", pageView: stackView mArtworkDataPage)
          addPage (title: "PDF Settings", tooltip: "", pageView: stackView mPDFSettingsPage)
          addPage (title: "Generation Log", tooltip: "", pageView: stackView mGenerationLogPage)
        }
        space
      }
      stackViewRef mProductMasterView
    }
 }

  action importArtworkAction ;
  action detachArtworkAction ;
  action generateProductFilesAction ;
  transient Bool documentIsUnnamed dependsFrom self.documentFileName ;
  transient String incorrectDocumentFileDetailedErrorMessage dependsFrom self.documentFileName ;
  transient String documentFileShouldBeRenamedErrorMessage dependsFrom self.documentFileName ;

  //············································································

  stackView mProductMasterView vStack { }

  //············································································

  stackView mArtworkDescriptionPage vStack {
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Layer Description", bold: no, size: .regular),
        right: Label (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $title root.layerConfigurationString
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Artwork Version", bold: no, size: .regular),
        right: IntObserverField (bold: yes, size: .regular) {
          set (alignment: .left)
          expandableWidth ()
          $observedValue root.mArtworkVersion
        }
      )
      addCenterYAligned (
        left: vStack { StaticLabel (title: "Comment", bold: no, size: .regular) space},
        right: TextObserverView () { expandableWidth () $observedValue root.artworkComments }
      )
    }
  }

  //············································································

  stackView mArtworkDataPage vStack set (spacing: 0) {
    hStack set (margins: 8) {
      hStack setFirstBaselineAlignment ()  {
        StaticLabel (title: "Drill File Extension", bold: no, size : .small)
        TextField (width: 56, size : .small) { $value root.drillDataFileExtension (sendContinously: yes) }
      }
      ImageObserverView (size: .small) { $image self.emptyDrillFileExtensionImage }
      space
    }
    hStack set (leftMargin: 8) set (rightMargin: 8) {
      vStack set (topMargin: 8) {
        Label (bold: yes, size : .small) { $title self.generatedFileCountString }
        TableView (size : .small, addControlButtons: yes) { $tableValue #mDataController }
      }
      separator
      vStack set (topMargin: 8) {
        hStack {
          hStack setFirstBaselineAlignment () {
            StaticLabel (title: "File Extension", bold: yes, size : .small)
            TextField (width: 56, size : .small) { $value #mDataSelection.fileExtension (sendContinously: yes) }
          }
          ImageObserverView (size: .small) { $image #mDataSelection.emptyFileExtensionImage }
         space
         StaticLabel (title: "Empty Data File", bold: yes, size : .small) { setOrangeTextColor () $hidden !#mDataSelection.hasNoData}
       }
        space
        hStack { StaticLabel (title: "Front Side Elements", bold: yes, size : .small) space }
        hStack {
          GridView2 {
            set (leftMargin: 20)
            addFirstBaseLineAligned (
              left: Checkbox (title: "Legend Front Side Texts", size : .small) { $value #mDataSelection.drawTextsLegendTopSide },
              right: Checkbox (title: "Layout Front Side Texts", size : .small) { $value #mDataSelection.drawTextsLayoutTopSide }
            )
            addFirstBaseLineAligned (
              left: Checkbox (title: "Front Side Tracks", size : .small) { $value #mDataSelection.drawTracksTopSide },
              right: Checkbox (title: "Front Side Pads", size : .small) { $value #mDataSelection.drawPadsTopSide }
            )
          }
          space
        }
        hStack set (leftMargin: 20) { Checkbox (title: "Front Side Component Names", size : .small) { $value #mDataSelection.drawComponentNamesTopSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Front Side Component Values", size : .small) { $value #mDataSelection.drawComponentValuesTopSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Front Side Package Legends", size : .small) { $value #mDataSelection.drawPackageLegendTopSide } space }
        hStack { StaticLabel (title: "Inner Elements", bold: yes, size : .small) space }
        hStack {
          GridView2 {
            set (leftMargin: 20)
            addFirstBaseLineAligned (
              left:  Checkbox (title: "Traversing Pads", size : .small) { $value #mDataSelection.drawTraversingPads $hidden !root.hasInnerElements },
              right: space
            )
            addFirstBaseLineAligned (  // Always disabled items
              left:  Checkbox (title: "Traversing Pads", size : .small) { $enabled root.hasInnerElements $hidden root.hasInnerElements },
              right: space
            )
           addFirstBaseLineAligned (
              left:  Checkbox (title: "Inner 1 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner1Layer $hidden !root.hasInnerElements },
              right: Checkbox (title: "Inner 2 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner2Layer $hidden !root.hasInnerElements }
            )
            addFirstBaseLineAligned (  // Always disabled items
              left:  Checkbox (title: "Inner 1 Layer Tracks", size : .small) { $enabled root.hasInnerElements $hidden root.hasInnerElements },
              right: Checkbox (title: "Inner 2 Layer Tracks", size : .small) { $enabled root.hasInnerElements $hidden root.hasInnerElements }
            )
            addFirstBaseLineAligned (
              left:  Checkbox (title: "Inner 3 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner3Layer $hidden !root.hasSixLayers },
              right: Checkbox (title: "Inner 4 Layer Tracks", size : .small) { $value #mDataSelection.drawTracksInner4Layer $hidden !root.hasSixLayers }
            )
            addFirstBaseLineAligned ( // Always disabled items
              left:  Checkbox (title: "Inner 3 Layer Tracks", size : .small) { $enabled root.hasSixLayers $hidden root.hasSixLayers },
              right: Checkbox (title: "Inner 4 Layer Tracks", size : .small) { $enabled root.hasSixLayers $hidden root.hasSixLayers }
            )
          }
          space
        }
        hStack { StaticLabel (title: "Back Side Elements", bold: yes, size : .small) space }
        hStack {
          GridView2 {
            set (leftMargin: 20)
            addFirstBaseLineAligned (
              left: Checkbox (title: "Legend Back Side Texts", size : .small) { $value #mDataSelection.drawTextsLegendBottomSide },
              right: Checkbox (title: "Layout Back Side Texts", size : .small) { $value #mDataSelection.drawTextsLayoutBottomSide }
            )
            addFirstBaseLineAligned (
              left: Checkbox (title: "Back Side Tracks", size : .small) { $value #mDataSelection.drawTracksBottomSide },
              right: Checkbox (title: "Back Side Pads", size : .small) { $value #mDataSelection.drawPadsBottomSide }
            )
          }
          space
        }
        hStack set (leftMargin: 20) { Checkbox (title: "Back Side Component Names", size : .small) { $value #mDataSelection.drawComponentNamesBottomSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Back Side Component Values", size : .small) { $value #mDataSelection.drawComponentValuesBottomSide } space }
        hStack set (leftMargin: 20) { Checkbox (title: "Back Side Package Legends", size : .small) { $value #mDataSelection.drawPackageLegendBottomSide } space }
        hStack { StaticLabel (title: "Other Elements", bold: yes, size : .small) space }
        hStack set (leftMargin: 20) {
          Checkbox (title: "Vias", size : .small) { $value #mDataSelection.drawVias }
          Checkbox (title: "Internal Board Limits", size : .small) { $value #mDataSelection.drawInternalBoardLimits }
          Checkbox (title: "Board Limits", size : .small) { $value #mDataSelection.drawBoardLimits }
          space
        }
        hStack set (leftMargin: 20) setFirstBaselineAlignment () {
          Checkbox (title: "Pad Holes in PDF file, with diameter", size : .small) { $value #mDataSelection.drawPadHolesInPDF }
          CanariDimensionAndPopUp (size : .small) { $dimensionAndUnit #mDataSelection.padHoleDiameterInPDF, #mDataSelection.measurementUnitForPadHoleInPDF $enabled #mDataSelection.drawPadHolesInPDF }
          space
        }
        hStack { StaticLabel (title: "Option", bold: yes, size : .small) space }
        hStack set (leftMargin: 20) { Checkbox (title: "Horizontal Mirror", size : .small) { $value #mDataSelection.horizontalMirror } space }
        space
      }
    }
  }

  transient NSImage emptyDrillFileExtensionImage dependsFrom self.emptyDrillFileExtension ;
  transient Bool emptyDrillFileExtension dependsFrom root.drillDataFileExtension ;
  transient String generatedFileCountString dependsFrom #mDataController.sortedArray.count ;

  autolayout tableViewController #mDataController (allowsEmptySelection:no, allowsMultipleSelection:no) root.fileGenerationParameterArray {
    editableColumn name (title: "Name", minWidth: 60, maxWidth: 200, headerAlignment: .left, contentAlignment: .left) sortkey name
    column parameterStatusImage (title: "", minWidth: 30, maxWidth: 30, headerAlignment: .center, contentAlignment: .center)
  }
  selectionController ArtworkFileGenerationParameters #mDataSelection : #mDataController.selectedArray ;

  //············································································

  stackView mArtworkMinimaPage vStack {
    space
    hStack {
      space
      vStack {
        space
        StaticLabel (title: "PP: Pad to Pad Distance", bold: no, size : .small) { set (alignment: .left) expandableWidth () }
        StaticLabel (title: "TP: Track to Pad Distance", bold: no, size : .small) { set (alignment: .left) expandableWidth () }
        StaticLabel (title: "TT: Track to Track Distance", bold: no, size : .small) { set (alignment: .left) expandableWidth () }
        StaticLabel (title: "TW: Track Width", bold: no, size : .small) { set (alignment: .left) expandableWidth () }
        StaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: no, size : .small) { set (alignment: .left) expandableWidth () }
        StaticLabel (title: "OAR: Outer Annular Ring", bold: no, size : .small) { set (alignment: .left) expandableWidth () }
        StaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: no, size : .small) { set (alignment: .left) expandableWidth () }
        space
      }
      space
      StaticImageView (name: "artwork")
      space
    }
    space
    hStack {
      space
      GridView2 {
        set (leftMargin: 20) set (rightMargin: 20) set (topMargin: 8)
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: no, size : .regular),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minPPTPTTTW, root.minPPTPTTTWdisplayUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for PHD", bold: no, size : .regular),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForPHDinEBUnit, root.minValueForPHDdisplayUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for OAR", bold: no, size : .regular),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForOARinEBUnit, root.minValueForOARdisplayUnit }
        )
        addFirstBaseLineAligned (
          left: StaticLabel (title: "Minimum Value for Board Limit Width", bold: no, size : .regular),
          right: CanariObservedDimensionAndPopUp (size : .small) { $dimensionAndUnit root.minValueForBoardLimitWidth, root.minValueForBoardLimitWidthDisplayUnit }
        )
      }
      space
    }
    space
  }

  //············································································

  stackView mPDFSettingsPage vStack set (margins: 20) {
    hStack setFirstBaselineAlignment () {
      space
      ColorWell { $color root.mPDFBoardBackgroundColor (sendContinously : no) }
      StaticLabel (title: "Board Background Color", bold: no, size: .regular)
      space
    }
    space
  }

  //············································································

  stackView mGenerationLogPage vStack {
    TextObserverView () [outlet mProductFileGenerationLogTextView]
  }

  //············································································

}

//------------------------------------------------------------------------------
