//‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

autoLayoutDocument AutoLayoutSymbolDocument root SymbolRoot stackView \DocumentMainView {

//----------------------------------------------------------------------------------------------------------------------
//   MAIN VIEW
//----------------------------------------------------------------------------------------------------------------------
 
  stackView \PageMasterView vStack { }
 
  stackView \DocumentMainView vStack {
    newView pageMasterView = \PageMasterView ()
    newView symbolPage = \SymbolPage ()
    newView infosPage = \InfosPage ()
    ToolBar () {
      add (
        title: "Page",
        item : SegmentedControlWithPages (documentView: view pageMasterView, equalWidth: no, size: .regular) {
          addPage (title: "Symbol", tooltip: "Symbol Editor", pageView: view symbolPage)
          addPage (title: "Infos", tooltip: "Symbol Informations", pageView: view infosPage)
          $selectedPage root.selectedPageIndex
        }
      )
      add (
        title: "Signature",
        item : SignatureField (size : .regular) { $signature signature }
      )
      add (
        title: "Version",
        item : VersionField (size : .regular) { $version version $versionShouldChange versionShouldChange }
      )
      addFlexibleSpace ()
      add (
        title: "Status",
        item : StatusBadgeView () {
          $tooltip self.statusMessage
          $errorCount self.statusErrorCount
          $warningCount self.statusWarningCount
        }
      )
    }


//    hStack set (margins: .regular) {
//      vStack {
//        SegmentedControlWithPages (documentView: view pageMasterView, equalWidth: no, size: .regular) {
//          addPage (title: "Symbol", tooltip: "Symbol Editor", pageView: view symbolPage)
//          addPage (title: "Infos", tooltip: "Symbol Informations", pageView: view infosPage)
//          $selectedPage root.selectedPageIndex
//        }
//        StaticLabel (title: "Page", bold: no, size: .small, alignment: .center)
//      }
//      vStack {
//        SignatureField (size : .regular) { $signature signature }
//        StaticLabel (title: "Signature", bold: no, size: .small, alignment: .center)
//      }
//      vStack {
//        VersionField (size : .regular) { $version version $versionShouldChange versionShouldChange }
//        StaticLabel (title: "Version", bold: no, size: .small, alignment: .center)
//      }
//      space
//      vStack {
//        hStack {
//          space
//          StatusBadgeView () {
//            $tooltip self.statusMessage
//            $errorCount self.statusErrorCount
//            $warningCount self.statusWarningCount
//          }
//          space
//        }
//        StaticLabel (title: "Status", bold: no, size : .small, alignment: .center)
//      }
//    }
    separator
    view pageMasterView
  }

  transient CanariIssueArray symbolIssues dependsFrom root.issues, self.documentFileName ;
  transient String statusMessage dependsFrom self.symbolIssues ;
  transient Int statusErrorCount dependsFrom self.symbolIssues ;
  transient Int statusWarningCount dependsFrom self.symbolIssues ;
  transient MetadataStatus metadataStatus dependsFrom self.symbolIssues ;

  transient Bool noSymbolIssue dependsFrom self.symbolIssues ;
  transient NSImage segmentedControlSegmentIssueImage dependsFrom self.symbolIssues ;
  transient String segmentedControlSegmentIssueString dependsFrom self.symbolIssues ;

//----------------------------------------------------------------------------------------------------------------------
//   PAGE   SYMBOL
//----------------------------------------------------------------------------------------------------------------------

  arrayController #mSymbolObjectsController : root.symbolObjects ;

  transient NSImage addSegmentButtonImage dependsFrom prefs.symbolColor ;
  transient NSImage addBezierButtonImage dependsFrom prefs.symbolColor ;
  transient NSImage addOvalButtonImage dependsFrom prefs.symbolColor ;
  transient NSImage addSolidOvalButtonImage dependsFrom prefs.symbolColor ;
  transient NSImage addSolidRectButtonImage dependsFrom prefs.symbolColor ;
  transient NSImage addTextButtonImage dependsFrom prefs.symbolColor ;
  transient NSImage addPinButtonImage dependsFrom prefs.symbolColor ;

  stackView \SymbolPageInspectorMasterView vStack {}

  stackView \SymbolPage hStack {
    newView symbolPageInspectorMasterView = \SymbolPageInspectorMasterView ()
    newView selectedObjectsInspectorView = \SelectedObjectsInspectorView ()
    newView gridZoomInspectorView = \GridZoomInspectorView ()
    newView displayInspectorView = \DisplayInspectorView ()
    newView issuesInspectorView = \IssuesInspectorView ()
    vStack set (width: 250) {
      vStack set (leftMargin: .large) set (rightMargin: .large) set (topMargin: .regular) set (spacing: .large) {
        hStack {
          DragSourceButton (tooltip: "Add Segment") [configurator addSymbolSegment] { $image self.addSegmentButtonImage }
          space
          DragSourceButton (tooltip: "Add Bezier") [configurator addSymbolBezier] { $image self.addBezierButtonImage }
          space
          DragSourceButton (tooltip: "Add Solid Oval") [configurator addSymbolSolidOval] { $image self.addSolidOvalButtonImage }
          space
          DragSourceButton (tooltip: "Add Oval") [configurator addSymbolOval] { $image self.addOvalButtonImage }
          space
          DragSourceButton (tooltip: "Add Solid Rect") [configurator addSymbolSolidRect] { $image self.addSolidRectButtonImage }
          space
          DragSourceButton (tooltip: "Add Text") [configurator addSymbolText] { $image self.addTextButtonImage }
          space
          DragSourceButton (tooltip: "Add Pin") [configurator addSymbolPin] { $image self.addPinButtonImage }
        }
     }
     separator
     vStack set (leftMargin: .large) set (rightMargin: .large) {
       SegmentedControlWithPages (documentView: view symbolPageInspectorMasterView, equalWidth: yes, size: .small)
          [outlet mSymbolInspectorSegmentedControl configurator symbolPageSegmentedControl] {
          expandableWidth ()
          addPage (title: "üõ†", tooltip: "Selected Object Inspector", pageView: view selectedObjectsInspectorView)
          addPage (title: "üîç", tooltip: "Grid / Zoom Inspector", pageView: view gridZoomInspectorView)
          addPage (title: "üîçP", tooltip: "Display Inspector (values stored in Application Preferences)", pageView: view displayInspectorView)
          addPage (title: "", tooltip: "Issue Inspector", pageView: view issuesInspectorView)
          $selectedPage root.selectedInspector
          $segmentImage self.segmentedControlSegmentIssueImage (segmentIndex : 3)
          $segmentTitle self.segmentedControlSegmentIssueString (segmentIndex : 3)
         }
      }
      vStack set (leftMargin: .large) set (rightMargin: .large) set (bottomMargin: .large) set (spacing: .large) {
        view symbolPageInspectorMasterView
      }
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 4000) [outlet mSymbolGraphicView configurator symbolGraphicView] {
      $horizontalFlip root.horizontalFlip
      $verticalFlip root.verticalFlip
      $graphicController #mSymbolObjectsController
      $gridStyle root.gridStyle
      $gridDisplayFactor root.gridDisplay
      $gridLineColor prefs.lineColorOfSymbolGrid
      $gridCrossColor prefs.crossColorOfSymbolGrid
      $zoom root.zoom
      $backColor prefs.symbolBackgroundColor
      $xPlacardUnit root.xPlacardUnit
      $yPlacardUnit root.yPlacardUnit
    }
  }
  
//----------------------------------------------------------------------------------------------------------------------
//   Selected objects inspector
//----------------------------------------------------------------------------------------------------------------------

  stackView \SelectedObjectsInspectorView vStack {
    newView symbolTextInspectorView = \SymbolTextInspectorView ()
    newView symbolPinInspectorView = \SymbolPinInspectorView ()
    ObjectInspectorView {
      addObjectInspector (forEntity: entity SymbolText, inspectorView: view symbolTextInspectorView)
      addObjectInspector (forEntity: entity SymbolPin, inspectorView: view symbolPinInspectorView)
      $graphicController #mSymbolObjectsController
    }
    space
  }

//--- Symbol Text inspector
  selectionController SymbolText #mSymbolTextSelectionController : #mSymbolObjectsController.selectedArray ;

  stackView \SymbolTextInspectorView vStack {
    StaticLabel (title: "Text Inspector", bold: yes, size: .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Pin Name", bold: no, size: .small, alignment: .center),
        right: TextField (minWidth: 56, size: .small) { expandableWidth () $value #mSymbolTextSelectionController.text (sendContinously : yes) }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Alignment", bold: no, size: .small, alignment: .center),
        right: CanariHorizontalAlignmentSegmentedControl (size: .small) { expandableWidth () $alignment #mSymbolTextSelectionController.horizontalAlignment}
      )
    }
  }


//--- Symbol Pin inspector
  selectionController SymbolPin #mSymbolPinSelectionController : #mSymbolObjectsController.selectedArray ;

  stackView \SymbolPinInspectorView vStack {
    StaticLabel (title: "Pin Inspector", bold: yes, size: .small, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Value", bold: no, size: .small, alignment: .right) {
          expandableHeight ()
        },
        right: TextField (minWidth: 56, size: .small) {
          automaticallyAdjustHeight (maxWidth: 100)
          $value #mSymbolPinSelectionController.name (sendContinously : yes)
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Name Alignment", bold: no, size: .small, alignment: .right),
        right: CanariHorizontalAlignmentSegmentedControl (size: .small) {
          expandableWidth ()
          $alignment #mSymbolPinSelectionController.nameHorizontalAlignment
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Number Alignment", bold: no, size: .small, alignment: .right),
        right: CanariHorizontalAlignmentSegmentedControl (size: .small) {
          expandableWidth () $alignment #mSymbolPinSelectionController.numberHorizontalAlignment
        }
      )
      add (single: hStack {
        Checkbox (title : "Pin is visible in schematics", size: .small) { $value #mSymbolPinSelectionController.pinNameIsDisplayedInSchematics}
        space
      })
    }
  }

//----------------------------------------------------------------------------------------------------------------------
//   Zoom and flip inspector
//----------------------------------------------------------------------------------------------------------------------

  stackView \GridZoomInspectorView vStack {
    StaticLabel (title: "(Stored in Document Preferences)", bold: no, size: .mini, alignment: .center)
    GridView2 {
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Style", bold: no, size: .small, alignment: .right),
        right: EnumPopUpButton (titles: enum GridStyle.popupTitles, size: .small) { $selectedIndex root.gridStyle}
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Display", bold: no, size: .small, alignment: .right),
        right:  TaggedPopUpButton (size: .small) {
          add (title: "1 Step", withTag: 1)
          add (title: "2 Steps", withTag: 2)
          add (title: "4 Steps", withTag: 4)
          add (title: "5 Steps", withTag: 5)
          add (title: "8 Steps", withTag: 8)
          add (title: "10 Steps", withTag: 10)
          $selectedTag root.gridDisplay
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Grid Step", bold: no, size: .small, alignment: .right),
        right: StaticLabel (title: "25 mils", bold: yes, size: .small, alignment: .left)
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Flip", bold: no, size: .small, alignment: .right),
        right: Checkbox (title: "Horizontal", size: .small) { $value root.horizontalFlip }
      )
      addFirstBaseLineAligned (
        left: FlexibleSpace,
        right: Checkbox (title: "Vertical", size: .small) { $value root.verticalFlip }
      )
      addFirstBaseLineAligned (
        left: StaticLabels (left: "Placard", right: "X", bold: no, size: .small),
        right: CanariUnitPopUpButton (size: .small) { $unit root.xPlacardUnit }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Y", bold: no, size: .small, alignment: .right),
        right: CanariUnitPopUpButton(size: .small) { $unit root.yPlacardUnit }
      )
    }
    space
  }

//----------------------------------------------------------------------------------------------------------------------
//   Display inspector
//----------------------------------------------------------------------------------------------------------------------

  stackView \DisplayInspectorView vStack {
    StaticLabel (title: "(Stored in Application Preferences)", bold: no, size: .mini, alignment: .center)
    GridView2 {
      addCenterYAligned (
        left: StaticLabel (title: "Symbol", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.symbolColor } space }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Background", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.symbolBackgroundColor } space }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Cross Grid", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.crossColorOfSymbolGrid } space }
      )
      addCenterYAligned (
        left: StaticLabel (title: "Line Grid", bold: no, size: .small, alignment: .center),
        right: hStack { ColorWell { set (toolTip: "Stored in Preferences") $color prefs.lineColorOfSymbolGrid } space }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Line Width", bold: no, size: .small, alignment: .center),
        right: TaggedPopUpButton (size: .small) {
          add (title: "0.5 Point", withTag: 5)
          add (title: "1.0 Point", withTag: 10)
          add (title: "1.5 Point", withTag: 15)
          add (title: "2.0 Points", withTag: 20)
          add (title: "2.5 Points", withTag: 25)
          $selectedTag prefs.symbolDrawingWidthMultipliedByTen
        }
      )
      addFirstBaseLineAligned (
        left: StaticLabel (title: "Pin Font", bold: no, size: .small, alignment: .center),
        right: FontButton (width: 125, size: .small) {$fontValue prefs.pinNameFont}
      )
    }
    space
  }

//----------------------------------------------------------------------------------------------------------------------
//   Issue inspector
//----------------------------------------------------------------------------------------------------------------------

  stackView \IssuesInspectorView vStack {
   hStack { space Label (bold: no, size: .small) { $title self.statusMessage } space }
   CanariIssueTableView (hasHideIssueButton: yes) [outlet mSymbolIssueTableView] { $issues self.symbolIssues }
  }

  linker issueTableViewToGraphicView (mSymbolIssueTableView, mSymbolGraphicView)

//----------------------------------------------------------------------------------------------------------------------
//   PAGE   INFOS
//----------------------------------------------------------------------------------------------------------------------

 stackView \InfosPage vStack set (leftMargin: .large) set (rightMargin: .large) set (bottomMargin: .large) set (topMargin: .regular) {
    hStack {
      Button (title: "Reset Version and Signature", size: .small) { $run resetVersionAction }
      space
    }
    hStack {
      vStack { StaticLabel (title: "Comments", bold: no, size: .regular, alignment: .center) space }
      TextView { $value root.comments }
    }
  }

  action resetVersionAction ;

}

//----------------------------------------------------------------------------*
